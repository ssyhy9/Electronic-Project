
Blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005874  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08005a04  08005a04  00015a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005aec  08005aec  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005aec  08005aec  00015aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005af4  08005af4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005af4  08005af4  00015af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005af8  08005af8  00015af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005afc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  20000070  08005b6c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000214  08005b6c  00020214  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000102b1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022f7  00000000  00000000  00030351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  00032648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca8  00000000  00000000  000333e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028e2f  00000000  00000000  00034090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001120e  00000000  00000000  0005cebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe286  00000000  00000000  0006e0cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016c353  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fe0  00000000  00000000  0016c3a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080059ec 	.word	0x080059ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080059ec 	.word	0x080059ec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08a      	sub	sp, #40	; 0x28
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800057a:	f107 031c 	add.w	r3, r7, #28
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]
 8000594:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000596:	4b2f      	ldr	r3, [pc, #188]	; (8000654 <MX_ADC1_Init+0xe0>)
 8000598:	4a2f      	ldr	r2, [pc, #188]	; (8000658 <MX_ADC1_Init+0xe4>)
 800059a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800059c:	4b2d      	ldr	r3, [pc, #180]	; (8000654 <MX_ADC1_Init+0xe0>)
 800059e:	2200      	movs	r2, #0
 80005a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005a2:	4b2c      	ldr	r3, [pc, #176]	; (8000654 <MX_ADC1_Init+0xe0>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005a8:	4b2a      	ldr	r3, [pc, #168]	; (8000654 <MX_ADC1_Init+0xe0>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005ae:	4b29      	ldr	r3, [pc, #164]	; (8000654 <MX_ADC1_Init+0xe0>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005b4:	4b27      	ldr	r3, [pc, #156]	; (8000654 <MX_ADC1_Init+0xe0>)
 80005b6:	2204      	movs	r2, #4
 80005b8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005ba:	4b26      	ldr	r3, [pc, #152]	; (8000654 <MX_ADC1_Init+0xe0>)
 80005bc:	2200      	movs	r2, #0
 80005be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005c0:	4b24      	ldr	r3, [pc, #144]	; (8000654 <MX_ADC1_Init+0xe0>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005c6:	4b23      	ldr	r3, [pc, #140]	; (8000654 <MX_ADC1_Init+0xe0>)
 80005c8:	2201      	movs	r2, #1
 80005ca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005cc:	4b21      	ldr	r3, [pc, #132]	; (8000654 <MX_ADC1_Init+0xe0>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005d4:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <MX_ADC1_Init+0xe0>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005da:	4b1e      	ldr	r3, [pc, #120]	; (8000654 <MX_ADC1_Init+0xe0>)
 80005dc:	2200      	movs	r2, #0
 80005de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005e0:	4b1c      	ldr	r3, [pc, #112]	; (8000654 <MX_ADC1_Init+0xe0>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005e8:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <MX_ADC1_Init+0xe0>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005ee:	4b19      	ldr	r3, [pc, #100]	; (8000654 <MX_ADC1_Init+0xe0>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005f6:	4817      	ldr	r0, [pc, #92]	; (8000654 <MX_ADC1_Init+0xe0>)
 80005f8:	f000 fe48 	bl	800128c <HAL_ADC_Init>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000602:	f000 f9ad 	bl	8000960 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000606:	2300      	movs	r3, #0
 8000608:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800060a:	f107 031c 	add.w	r3, r7, #28
 800060e:	4619      	mov	r1, r3
 8000610:	4810      	ldr	r0, [pc, #64]	; (8000654 <MX_ADC1_Init+0xe0>)
 8000612:	f001 fdd9 	bl	80021c8 <HAL_ADCEx_MultiModeConfigChannel>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800061c:	f000 f9a0 	bl	8000960 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000620:	4b0e      	ldr	r3, [pc, #56]	; (800065c <MX_ADC1_Init+0xe8>)
 8000622:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000624:	2306      	movs	r3, #6
 8000626:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000628:	2304      	movs	r3, #4
 800062a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800062c:	237f      	movs	r3, #127	; 0x7f
 800062e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000630:	2304      	movs	r3, #4
 8000632:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	4619      	mov	r1, r3
 800063c:	4805      	ldr	r0, [pc, #20]	; (8000654 <MX_ADC1_Init+0xe0>)
 800063e:	f001 f91b 	bl	8001878 <HAL_ADC_ConfigChannel>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000648:	f000 f98a 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800064c:	bf00      	nop
 800064e:	3728      	adds	r7, #40	; 0x28
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	2000008c 	.word	0x2000008c
 8000658:	50040000 	.word	0x50040000
 800065c:	32601000 	.word	0x32601000

08000660 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b0ac      	sub	sp, #176	; 0xb0
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000668:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	2288      	movs	r2, #136	; 0x88
 800067e:	2100      	movs	r1, #0
 8000680:	4618      	mov	r0, r3
 8000682:	f004 f9a7 	bl	80049d4 <memset>
  if(adcHandle->Instance==ADC1)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a27      	ldr	r2, [pc, #156]	; (8000728 <HAL_ADC_MspInit+0xc8>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d147      	bne.n	8000720 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000690:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000694:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000696:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800069a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800069e:	2302      	movs	r3, #2
 80006a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006a2:	2301      	movs	r3, #1
 80006a4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80006a6:	2308      	movs	r3, #8
 80006a8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80006aa:	2307      	movs	r3, #7
 80006ac:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006b2:	2302      	movs	r3, #2
 80006b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80006b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80006ba:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	4618      	mov	r0, r3
 80006c2:	f002 ff57 	bl	8003574 <HAL_RCCEx_PeriphCLKConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80006cc:	f000 f948 	bl	8000960 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80006d0:	4b16      	ldr	r3, [pc, #88]	; (800072c <HAL_ADC_MspInit+0xcc>)
 80006d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d4:	4a15      	ldr	r2, [pc, #84]	; (800072c <HAL_ADC_MspInit+0xcc>)
 80006d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006dc:	4b13      	ldr	r3, [pc, #76]	; (800072c <HAL_ADC_MspInit+0xcc>)
 80006de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006e4:	613b      	str	r3, [r7, #16]
 80006e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e8:	4b10      	ldr	r3, [pc, #64]	; (800072c <HAL_ADC_MspInit+0xcc>)
 80006ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ec:	4a0f      	ldr	r2, [pc, #60]	; (800072c <HAL_ADC_MspInit+0xcc>)
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f4:	4b0d      	ldr	r3, [pc, #52]	; (800072c <HAL_ADC_MspInit+0xcc>)
 80006f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f8:	f003 0301 	and.w	r3, r3, #1
 80006fc:	60fb      	str	r3, [r7, #12]
 80006fe:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000700:	2380      	movs	r3, #128	; 0x80
 8000702:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000706:	230b      	movs	r3, #11
 8000708:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000712:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000716:	4619      	mov	r1, r3
 8000718:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800071c:	f001 feea 	bl	80024f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000720:	bf00      	nop
 8000722:	37b0      	adds	r7, #176	; 0xb0
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	50040000 	.word	0x50040000
 800072c:	40021000 	.word	0x40021000

08000730 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08a      	sub	sp, #40	; 0x28
 8000734:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000746:	4b2b      	ldr	r3, [pc, #172]	; (80007f4 <MX_GPIO_Init+0xc4>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	4a2a      	ldr	r2, [pc, #168]	; (80007f4 <MX_GPIO_Init+0xc4>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000752:	4b28      	ldr	r3, [pc, #160]	; (80007f4 <MX_GPIO_Init+0xc4>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	f003 0304 	and.w	r3, r3, #4
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075e:	4b25      	ldr	r3, [pc, #148]	; (80007f4 <MX_GPIO_Init+0xc4>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	4a24      	ldr	r2, [pc, #144]	; (80007f4 <MX_GPIO_Init+0xc4>)
 8000764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000768:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076a:	4b22      	ldr	r3, [pc, #136]	; (80007f4 <MX_GPIO_Init+0xc4>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	4b1f      	ldr	r3, [pc, #124]	; (80007f4 <MX_GPIO_Init+0xc4>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	4a1e      	ldr	r2, [pc, #120]	; (80007f4 <MX_GPIO_Init+0xc4>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000782:	4b1c      	ldr	r3, [pc, #112]	; (80007f4 <MX_GPIO_Init+0xc4>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	4b19      	ldr	r3, [pc, #100]	; (80007f4 <MX_GPIO_Init+0xc4>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	4a18      	ldr	r2, [pc, #96]	; (80007f4 <MX_GPIO_Init+0xc4>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079a:	4b16      	ldr	r3, [pc, #88]	; (80007f4 <MX_GPIO_Init+0xc4>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2120      	movs	r1, #32
 80007aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ae:	f002 f84b 	bl	8002848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007b8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	4619      	mov	r1, r3
 80007c8:	480b      	ldr	r0, [pc, #44]	; (80007f8 <MX_GPIO_Init+0xc8>)
 80007ca:	f001 fe93 	bl	80024f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007ce:	2320      	movs	r3, #32
 80007d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	2300      	movs	r3, #0
 80007dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4619      	mov	r1, r3
 80007e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e8:	f001 fe84 	bl	80024f4 <HAL_GPIO_Init>

}
 80007ec:	bf00      	nop
 80007ee:	3728      	adds	r7, #40	; 0x28
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40021000 	.word	0x40021000
 80007f8:	48000800 	.word	0x48000800

080007fc <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000804:	1d39      	adds	r1, r7, #4
 8000806:	f04f 33ff 	mov.w	r3, #4294967295
 800080a:	2201      	movs	r2, #1
 800080c:	4803      	ldr	r0, [pc, #12]	; (800081c <__io_putchar+0x20>)
 800080e:	f003 fbbb 	bl	8003f88 <HAL_UART_Transmit>
  return ch;
 8000812:	687b      	ldr	r3, [r7, #4]
}
 8000814:	4618      	mov	r0, r3
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	200000f8 	.word	0x200000f8

08000820 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000826:	f000 fad1 	bl	8000dcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800082a:	f000 f829 	bl	8000880 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800082e:	f7ff ff7f 	bl	8000730 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000832:	f000 f9cf 	bl	8000bd4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000836:	f7ff fe9d 	bl	8000574 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800083a:	f000 f99b 	bl	8000b74 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint16_t cnt = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	80fb      	strh	r3, [r7, #6]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000842:	2120      	movs	r1, #32
 8000844:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000848:	f002 f816 	bl	8002878 <HAL_GPIO_TogglePin>
	  cnt ++;
 800084c:	88fb      	ldrh	r3, [r7, #6]
 800084e:	3301      	adds	r3, #1
 8000850:	80fb      	strh	r3, [r7, #6]
	  ADC_Value = dong_get_adc();
 8000852:	f000 f867 	bl	8000924 <dong_get_adc>
 8000856:	4603      	mov	r3, r0
 8000858:	461a      	mov	r2, r3
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <main+0x54>)
 800085c:	801a      	strh	r2, [r3, #0]
	  printf("%d", ADC_Value);
 800085e:	4b05      	ldr	r3, [pc, #20]	; (8000874 <main+0x54>)
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	4619      	mov	r1, r3
 8000864:	4804      	ldr	r0, [pc, #16]	; (8000878 <main+0x58>)
 8000866:	f004 f8bd 	bl	80049e4 <iprintf>
	  printf("!\r\n");
 800086a:	4804      	ldr	r0, [pc, #16]	; (800087c <main+0x5c>)
 800086c:	f004 f940 	bl	8004af0 <puts>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000870:	e7e7      	b.n	8000842 <main+0x22>
 8000872:	bf00      	nop
 8000874:	200000f0 	.word	0x200000f0
 8000878:	08005a04 	.word	0x08005a04
 800087c:	08005a08 	.word	0x08005a08

08000880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b096      	sub	sp, #88	; 0x58
 8000884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	2244      	movs	r2, #68	; 0x44
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f004 f8a0 	bl	80049d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000894:	463b      	mov	r3, r7
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008a6:	f002 f80f 	bl	80028c8 <HAL_PWREx_ControlVoltageScaling>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008b0:	f000 f856 	bl	8000960 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b4:	2302      	movs	r3, #2
 80008b6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008bc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008be:	2310      	movs	r3, #16
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c2:	2302      	movs	r3, #2
 80008c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008c6:	2302      	movs	r3, #2
 80008c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008ca:	2301      	movs	r3, #1
 80008cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80008ce:	230a      	movs	r3, #10
 80008d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008d2:	2307      	movs	r3, #7
 80008d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008d6:	2302      	movs	r3, #2
 80008d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008da:	2302      	movs	r3, #2
 80008dc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	4618      	mov	r0, r3
 80008e4:	f002 f846 	bl	8002974 <HAL_RCC_OscConfig>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80008ee:	f000 f837 	bl	8000960 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f2:	230f      	movs	r3, #15
 80008f4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f6:	2303      	movs	r3, #3
 80008f8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000906:	463b      	mov	r3, r7
 8000908:	2104      	movs	r1, #4
 800090a:	4618      	mov	r0, r3
 800090c:	f002 fc0e 	bl	800312c <HAL_RCC_ClockConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000916:	f000 f823 	bl	8000960 <Error_Handler>
  }
}
 800091a:	bf00      	nop
 800091c:	3758      	adds	r7, #88	; 0x58
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <dong_get_adc>:

/* USER CODE BEGIN 4 */
uint16_t dong_get_adc(){
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  HAL_ADC_Start(&hadc1);
 8000928:	480c      	ldr	r0, [pc, #48]	; (800095c <dong_get_adc+0x38>)
 800092a:	f000 fe05 	bl	8001538 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1,10);  //判断ADC是否转换成功
 800092e:	210a      	movs	r1, #10
 8000930:	480a      	ldr	r0, [pc, #40]	; (800095c <dong_get_adc+0x38>)
 8000932:	f000 febb 	bl	80016ac <HAL_ADC_PollForConversion>
  if(HAL_IS_BIT_SET(HAL_ADC_GetState(&hadc1),HAL_ADC_STATE_REG_EOC)){
 8000936:	4809      	ldr	r0, [pc, #36]	; (800095c <dong_get_adc+0x38>)
 8000938:	f001 fb8e 	bl	8002058 <HAL_ADC_GetState>
 800093c:	4603      	mov	r3, r0
 800093e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000942:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000946:	d105      	bne.n	8000954 <dong_get_adc+0x30>
       return HAL_ADC_GetValue(&hadc1);
 8000948:	4804      	ldr	r0, [pc, #16]	; (800095c <dong_get_adc+0x38>)
 800094a:	f000 ff87 	bl	800185c <HAL_ADC_GetValue>
 800094e:	4603      	mov	r3, r0
 8000950:	b29b      	uxth	r3, r3
 8000952:	e000      	b.n	8000956 <dong_get_adc+0x32>
    }
    return 0;
 8000954:	2300      	movs	r3, #0
}
 8000956:	4618      	mov	r0, r3
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	2000008c 	.word	0x2000008c

08000960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000964:	b672      	cpsid	i
}
 8000966:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000968:	e7fe      	b.n	8000968 <Error_Handler+0x8>
	...

0800096c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000972:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <HAL_MspInit+0x44>)
 8000974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000976:	4a0e      	ldr	r2, [pc, #56]	; (80009b0 <HAL_MspInit+0x44>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6613      	str	r3, [r2, #96]	; 0x60
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <HAL_MspInit+0x44>)
 8000980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <HAL_MspInit+0x44>)
 800098c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098e:	4a08      	ldr	r2, [pc, #32]	; (80009b0 <HAL_MspInit+0x44>)
 8000990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000994:	6593      	str	r3, [r2, #88]	; 0x58
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <HAL_MspInit+0x44>)
 8000998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800099a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	40021000 	.word	0x40021000

080009b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <NMI_Handler+0x4>

080009ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009be:	e7fe      	b.n	80009be <HardFault_Handler+0x4>

080009c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <MemManage_Handler+0x4>

080009c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ca:	e7fe      	b.n	80009ca <BusFault_Handler+0x4>

080009cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <UsageFault_Handler+0x4>

080009d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a00:	f000 fa40 	bl	8000e84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
 8000a18:	e00a      	b.n	8000a30 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a1a:	f3af 8000 	nop.w
 8000a1e:	4601      	mov	r1, r0
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	1c5a      	adds	r2, r3, #1
 8000a24:	60ba      	str	r2, [r7, #8]
 8000a26:	b2ca      	uxtb	r2, r1
 8000a28:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	617b      	str	r3, [r7, #20]
 8000a30:	697a      	ldr	r2, [r7, #20]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	dbf0      	blt.n	8000a1a <_read+0x12>
	}

return len;
 8000a38:	687b      	ldr	r3, [r7, #4]
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3718      	adds	r7, #24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b086      	sub	sp, #24
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	60f8      	str	r0, [r7, #12]
 8000a4a:	60b9      	str	r1, [r7, #8]
 8000a4c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
 8000a52:	e009      	b.n	8000a68 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	1c5a      	adds	r2, r3, #1
 8000a58:	60ba      	str	r2, [r7, #8]
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fecd 	bl	80007fc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	3301      	adds	r3, #1
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	697a      	ldr	r2, [r7, #20]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	dbf1      	blt.n	8000a54 <_write+0x12>
	}
	return len;
 8000a70:	687b      	ldr	r3, [r7, #4]
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3718      	adds	r7, #24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <_close>:

int _close(int file)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	b083      	sub	sp, #12
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
	return -1;
 8000a82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a92:	b480      	push	{r7}
 8000a94:	b083      	sub	sp, #12
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
 8000a9a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aa2:	605a      	str	r2, [r3, #4]
	return 0;
 8000aa4:	2300      	movs	r3, #0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <_isatty>:

int _isatty(int file)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	b083      	sub	sp, #12
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
	return 1;
 8000aba:	2301      	movs	r3, #1
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
	return 0;
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3714      	adds	r7, #20
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
	...

08000ae4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aec:	4a14      	ldr	r2, [pc, #80]	; (8000b40 <_sbrk+0x5c>)
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <_sbrk+0x60>)
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000af8:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <_sbrk+0x64>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d102      	bne.n	8000b06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <_sbrk+0x64>)
 8000b02:	4a12      	ldr	r2, [pc, #72]	; (8000b4c <_sbrk+0x68>)
 8000b04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b06:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <_sbrk+0x64>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d207      	bcs.n	8000b24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b14:	f003 ff34 	bl	8004980 <__errno>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b22:	e009      	b.n	8000b38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b24:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <_sbrk+0x64>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b2a:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <_sbrk+0x64>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4413      	add	r3, r2
 8000b32:	4a05      	ldr	r2, [pc, #20]	; (8000b48 <_sbrk+0x64>)
 8000b34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b36:	68fb      	ldr	r3, [r7, #12]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3718      	adds	r7, #24
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20018000 	.word	0x20018000
 8000b44:	00000400 	.word	0x00000400
 8000b48:	200000f4 	.word	0x200000f4
 8000b4c:	20000218 	.word	0x20000218

08000b50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <SystemInit+0x20>)
 8000b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b5a:	4a05      	ldr	r2, [pc, #20]	; (8000b70 <SystemInit+0x20>)
 8000b5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b78:	4b14      	ldr	r3, [pc, #80]	; (8000bcc <MX_USART1_UART_Init+0x58>)
 8000b7a:	4a15      	ldr	r2, [pc, #84]	; (8000bd0 <MX_USART1_UART_Init+0x5c>)
 8000b7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b7e:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <MX_USART1_UART_Init+0x58>)
 8000b80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b86:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <MX_USART1_UART_Init+0x58>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <MX_USART1_UART_Init+0x58>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <MX_USART1_UART_Init+0x58>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b98:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <MX_USART1_UART_Init+0x58>)
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <MX_USART1_UART_Init+0x58>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba4:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <MX_USART1_UART_Init+0x58>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000baa:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <MX_USART1_UART_Init+0x58>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <MX_USART1_UART_Init+0x58>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bb6:	4805      	ldr	r0, [pc, #20]	; (8000bcc <MX_USART1_UART_Init+0x58>)
 8000bb8:	f003 f998 	bl	8003eec <HAL_UART_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000bc2:	f7ff fecd 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	200000f8 	.word	0x200000f8
 8000bd0:	40013800 	.word	0x40013800

08000bd4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bd8:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <MX_USART2_UART_Init+0x58>)
 8000bda:	4a15      	ldr	r2, [pc, #84]	; (8000c30 <MX_USART2_UART_Init+0x5c>)
 8000bdc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bde:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <MX_USART2_UART_Init+0x58>)
 8000be0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000be4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000be6:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <MX_USART2_UART_Init+0x58>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bec:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <MX_USART2_UART_Init+0x58>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <MX_USART2_UART_Init+0x58>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <MX_USART2_UART_Init+0x58>)
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <MX_USART2_UART_Init+0x58>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c04:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <MX_USART2_UART_Init+0x58>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <MX_USART2_UART_Init+0x58>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <MX_USART2_UART_Init+0x58>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c16:	4805      	ldr	r0, [pc, #20]	; (8000c2c <MX_USART2_UART_Init+0x58>)
 8000c18:	f003 f968 	bl	8003eec <HAL_UART_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c22:	f7ff fe9d 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	2000017c 	.word	0x2000017c
 8000c30:	40004400 	.word	0x40004400

08000c34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b0ae      	sub	sp, #184	; 0xb8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c4c:	f107 031c 	add.w	r3, r7, #28
 8000c50:	2288      	movs	r2, #136	; 0x88
 8000c52:	2100      	movs	r1, #0
 8000c54:	4618      	mov	r0, r3
 8000c56:	f003 febd 	bl	80049d4 <memset>
  if(uartHandle->Instance==USART1)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a43      	ldr	r2, [pc, #268]	; (8000d6c <HAL_UART_MspInit+0x138>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d13d      	bne.n	8000ce0 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c64:	2301      	movs	r3, #1
 8000c66:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c6c:	f107 031c 	add.w	r3, r7, #28
 8000c70:	4618      	mov	r0, r3
 8000c72:	f002 fc7f 	bl	8003574 <HAL_RCCEx_PeriphCLKConfig>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c7c:	f7ff fe70 	bl	8000960 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c80:	4b3b      	ldr	r3, [pc, #236]	; (8000d70 <HAL_UART_MspInit+0x13c>)
 8000c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c84:	4a3a      	ldr	r2, [pc, #232]	; (8000d70 <HAL_UART_MspInit+0x13c>)
 8000c86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c8a:	6613      	str	r3, [r2, #96]	; 0x60
 8000c8c:	4b38      	ldr	r3, [pc, #224]	; (8000d70 <HAL_UART_MspInit+0x13c>)
 8000c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c94:	61bb      	str	r3, [r7, #24]
 8000c96:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c98:	4b35      	ldr	r3, [pc, #212]	; (8000d70 <HAL_UART_MspInit+0x13c>)
 8000c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9c:	4a34      	ldr	r2, [pc, #208]	; (8000d70 <HAL_UART_MspInit+0x13c>)
 8000c9e:	f043 0301 	orr.w	r3, r3, #1
 8000ca2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ca4:	4b32      	ldr	r3, [pc, #200]	; (8000d70 <HAL_UART_MspInit+0x13c>)
 8000ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca8:	f003 0301 	and.w	r3, r3, #1
 8000cac:	617b      	str	r3, [r7, #20]
 8000cae:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cb0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cca:	2307      	movs	r3, #7
 8000ccc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cda:	f001 fc0b 	bl	80024f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000cde:	e040      	b.n	8000d62 <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART2)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a23      	ldr	r2, [pc, #140]	; (8000d74 <HAL_UART_MspInit+0x140>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d13b      	bne.n	8000d62 <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cea:	2302      	movs	r3, #2
 8000cec:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cf2:	f107 031c 	add.w	r3, r7, #28
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f002 fc3c 	bl	8003574 <HAL_RCCEx_PeriphCLKConfig>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8000d02:	f7ff fe2d 	bl	8000960 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d06:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <HAL_UART_MspInit+0x13c>)
 8000d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0a:	4a19      	ldr	r2, [pc, #100]	; (8000d70 <HAL_UART_MspInit+0x13c>)
 8000d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d10:	6593      	str	r3, [r2, #88]	; 0x58
 8000d12:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <HAL_UART_MspInit+0x13c>)
 8000d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <HAL_UART_MspInit+0x13c>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d22:	4a13      	ldr	r2, [pc, #76]	; (8000d70 <HAL_UART_MspInit+0x13c>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <HAL_UART_MspInit+0x13c>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d36:	230c      	movs	r3, #12
 8000d38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d4e:	2307      	movs	r3, #7
 8000d50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d54:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d5e:	f001 fbc9 	bl	80024f4 <HAL_GPIO_Init>
}
 8000d62:	bf00      	nop
 8000d64:	37b8      	adds	r7, #184	; 0xb8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40013800 	.word	0x40013800
 8000d70:	40021000 	.word	0x40021000
 8000d74:	40004400 	.word	0x40004400

08000d78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000db0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d7c:	f7ff fee8 	bl	8000b50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d80:	480c      	ldr	r0, [pc, #48]	; (8000db4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d82:	490d      	ldr	r1, [pc, #52]	; (8000db8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d84:	4a0d      	ldr	r2, [pc, #52]	; (8000dbc <LoopForever+0xe>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d88:	e002      	b.n	8000d90 <LoopCopyDataInit>

08000d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8e:	3304      	adds	r3, #4

08000d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d94:	d3f9      	bcc.n	8000d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d96:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d98:	4c0a      	ldr	r4, [pc, #40]	; (8000dc4 <LoopForever+0x16>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d9c:	e001      	b.n	8000da2 <LoopFillZerobss>

08000d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da0:	3204      	adds	r2, #4

08000da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da4:	d3fb      	bcc.n	8000d9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000da6:	f003 fdf1 	bl	800498c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000daa:	f7ff fd39 	bl	8000820 <main>

08000dae <LoopForever>:

LoopForever:
    b LoopForever
 8000dae:	e7fe      	b.n	8000dae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000db0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000dbc:	08005afc 	.word	0x08005afc
  ldr r2, =_sbss
 8000dc0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000dc4:	20000214 	.word	0x20000214

08000dc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dc8:	e7fe      	b.n	8000dc8 <ADC1_2_IRQHandler>
	...

08000dcc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <HAL_Init+0x3c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a0b      	ldr	r2, [pc, #44]	; (8000e08 <HAL_Init+0x3c>)
 8000ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000de0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de2:	2003      	movs	r0, #3
 8000de4:	f001 fb52 	bl	800248c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000de8:	2000      	movs	r0, #0
 8000dea:	f000 f80f 	bl	8000e0c <HAL_InitTick>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d002      	beq.n	8000dfa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000df4:	2301      	movs	r3, #1
 8000df6:	71fb      	strb	r3, [r7, #7]
 8000df8:	e001      	b.n	8000dfe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dfa:	f7ff fdb7 	bl	800096c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40022000 	.word	0x40022000

08000e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e14:	2300      	movs	r3, #0
 8000e16:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e18:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <HAL_InitTick+0x6c>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d023      	beq.n	8000e68 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e20:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <HAL_InitTick+0x70>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <HAL_InitTick+0x6c>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e36:	4618      	mov	r0, r3
 8000e38:	f001 fb4f 	bl	80024da <HAL_SYSTICK_Config>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d10f      	bne.n	8000e62 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2b0f      	cmp	r3, #15
 8000e46:	d809      	bhi.n	8000e5c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	6879      	ldr	r1, [r7, #4]
 8000e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e50:	f001 fb27 	bl	80024a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e54:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <HAL_InitTick+0x74>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6013      	str	r3, [r2, #0]
 8000e5a:	e007      	b.n	8000e6c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	73fb      	strb	r3, [r7, #15]
 8000e60:	e004      	b.n	8000e6c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	73fb      	strb	r3, [r7, #15]
 8000e66:	e001      	b.n	8000e6c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	20000000 	.word	0x20000000
 8000e80:	20000004 	.word	0x20000004

08000e84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_IncTick+0x20>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <HAL_IncTick+0x24>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4413      	add	r3, r2
 8000e94:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <HAL_IncTick+0x24>)
 8000e96:	6013      	str	r3, [r2, #0]
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	20000008 	.word	0x20000008
 8000ea8:	20000200 	.word	0x20000200

08000eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <HAL_GetTick+0x14>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20000200 	.word	0x20000200

08000ec4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	431a      	orrs	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	609a      	str	r2, [r3, #8]
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000eea:	b480      	push	{r7}
 8000eec:	b083      	sub	sp, #12
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
 8000ef2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	431a      	orrs	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	609a      	str	r2, [r3, #8]
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b087      	sub	sp, #28
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
 8000f38:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	3360      	adds	r3, #96	; 0x60
 8000f3e:	461a      	mov	r2, r3
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4413      	add	r3, r2
 8000f46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <LL_ADC_SetOffset+0x44>)
 8000f4e:	4013      	ands	r3, r2
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000f56:	683a      	ldr	r2, [r7, #0]
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000f64:	bf00      	nop
 8000f66:	371c      	adds	r7, #28
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	03fff000 	.word	0x03fff000

08000f74 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3360      	adds	r3, #96	; 0x60
 8000f82:	461a      	mov	r2, r3
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	4413      	add	r3, r2
 8000f8a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3714      	adds	r7, #20
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b087      	sub	sp, #28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	3360      	adds	r3, #96	; 0x60
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	4413      	add	r3, r2
 8000fb8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	431a      	orrs	r2, r3
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000fca:	bf00      	nop
 8000fcc:	371c      	adds	r7, #28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	b083      	sub	sp, #12
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d101      	bne.n	8000fee <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000fea:	2301      	movs	r3, #1
 8000fec:	e000      	b.n	8000ff0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000fee:	2300      	movs	r3, #0
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b087      	sub	sp, #28
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	3330      	adds	r3, #48	; 0x30
 800100c:	461a      	mov	r2, r3
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	f003 030c 	and.w	r3, r3, #12
 8001018:	4413      	add	r3, r2
 800101a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	f003 031f 	and.w	r3, r3, #31
 8001026:	211f      	movs	r1, #31
 8001028:	fa01 f303 	lsl.w	r3, r1, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	401a      	ands	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	0e9b      	lsrs	r3, r3, #26
 8001034:	f003 011f 	and.w	r1, r3, #31
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	f003 031f 	and.w	r3, r3, #31
 800103e:	fa01 f303 	lsl.w	r3, r1, r3
 8001042:	431a      	orrs	r2, r3
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001048:	bf00      	nop
 800104a:	371c      	adds	r7, #28
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001054:	b480      	push	{r7}
 8001056:	b087      	sub	sp, #28
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	3314      	adds	r3, #20
 8001064:	461a      	mov	r2, r3
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	0e5b      	lsrs	r3, r3, #25
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	f003 0304 	and.w	r3, r3, #4
 8001070:	4413      	add	r3, r2
 8001072:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	0d1b      	lsrs	r3, r3, #20
 800107c:	f003 031f 	and.w	r3, r3, #31
 8001080:	2107      	movs	r1, #7
 8001082:	fa01 f303 	lsl.w	r3, r1, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	401a      	ands	r2, r3
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	0d1b      	lsrs	r3, r3, #20
 800108e:	f003 031f 	and.w	r3, r3, #31
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	fa01 f303 	lsl.w	r3, r1, r3
 8001098:	431a      	orrs	r2, r3
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800109e:	bf00      	nop
 80010a0:	371c      	adds	r7, #28
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
	...

080010ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010c4:	43db      	mvns	r3, r3
 80010c6:	401a      	ands	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f003 0318 	and.w	r3, r3, #24
 80010ce:	4908      	ldr	r1, [pc, #32]	; (80010f0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80010d0:	40d9      	lsrs	r1, r3
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	400b      	ands	r3, r1
 80010d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010da:	431a      	orrs	r2, r3
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80010e2:	bf00      	nop
 80010e4:	3714      	adds	r7, #20
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	0007ffff 	.word	0x0007ffff

080010f4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f003 031f 	and.w	r3, r3, #31
}
 8001104:	4618      	mov	r0, r3
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800113c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	6093      	str	r3, [r2, #8]
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001160:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001164:	d101      	bne.n	800116a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001166:	2301      	movs	r3, #1
 8001168:	e000      	b.n	800116c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800116a:	2300      	movs	r3, #0
}
 800116c:	4618      	mov	r0, r3
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001188:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800118c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80011b4:	d101      	bne.n	80011ba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80011b6:	2301      	movs	r3, #1
 80011b8:	e000      	b.n	80011bc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011dc:	f043 0201 	orr.w	r2, r3, #1
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	2b01      	cmp	r3, #1
 8001202:	d101      	bne.n	8001208 <LL_ADC_IsEnabled+0x18>
 8001204:	2301      	movs	r3, #1
 8001206:	e000      	b.n	800120a <LL_ADC_IsEnabled+0x1a>
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001216:	b480      	push	{r7}
 8001218:	b083      	sub	sp, #12
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001226:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800122a:	f043 0204 	orr.w	r2, r3, #4
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f003 0304 	and.w	r3, r3, #4
 800124e:	2b04      	cmp	r3, #4
 8001250:	d101      	bne.n	8001256 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001252:	2301      	movs	r3, #1
 8001254:	e000      	b.n	8001258 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f003 0308 	and.w	r3, r3, #8
 8001274:	2b08      	cmp	r3, #8
 8001276:	d101      	bne.n	800127c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001278:	2301      	movs	r3, #1
 800127a:	e000      	b.n	800127e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
	...

0800128c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800128c:	b590      	push	{r4, r7, lr}
 800128e:	b089      	sub	sp, #36	; 0x24
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001294:	2300      	movs	r3, #0
 8001296:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001298:	2300      	movs	r3, #0
 800129a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e136      	b.n	8001514 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d109      	bne.n	80012c8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff f9d3 	bl	8000660 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff3f 	bl	8001150 <LL_ADC_IsDeepPowerDownEnabled>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d004      	beq.n	80012e2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ff25 	bl	800112c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff ff5a 	bl	80011a0 <LL_ADC_IsInternalRegulatorEnabled>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d115      	bne.n	800131e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff ff3e 	bl	8001178 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80012fc:	4b87      	ldr	r3, [pc, #540]	; (800151c <HAL_ADC_Init+0x290>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	099b      	lsrs	r3, r3, #6
 8001302:	4a87      	ldr	r2, [pc, #540]	; (8001520 <HAL_ADC_Init+0x294>)
 8001304:	fba2 2303 	umull	r2, r3, r2, r3
 8001308:	099b      	lsrs	r3, r3, #6
 800130a:	3301      	adds	r3, #1
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001310:	e002      	b.n	8001318 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	3b01      	subs	r3, #1
 8001316:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1f9      	bne.n	8001312 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ff3c 	bl	80011a0 <LL_ADC_IsInternalRegulatorEnabled>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d10d      	bne.n	800134a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001332:	f043 0210 	orr.w	r2, r3, #16
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800133e:	f043 0201 	orr.w	r2, r3, #1
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff ff75 	bl	800123e <LL_ADC_REG_IsConversionOngoing>
 8001354:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800135a:	f003 0310 	and.w	r3, r3, #16
 800135e:	2b00      	cmp	r3, #0
 8001360:	f040 80cf 	bne.w	8001502 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	2b00      	cmp	r3, #0
 8001368:	f040 80cb 	bne.w	8001502 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001370:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001374:	f043 0202 	orr.w	r2, r3, #2
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff35 	bl	80011f0 <LL_ADC_IsEnabled>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d115      	bne.n	80013b8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800138c:	4865      	ldr	r0, [pc, #404]	; (8001524 <HAL_ADC_Init+0x298>)
 800138e:	f7ff ff2f 	bl	80011f0 <LL_ADC_IsEnabled>
 8001392:	4604      	mov	r4, r0
 8001394:	4864      	ldr	r0, [pc, #400]	; (8001528 <HAL_ADC_Init+0x29c>)
 8001396:	f7ff ff2b 	bl	80011f0 <LL_ADC_IsEnabled>
 800139a:	4603      	mov	r3, r0
 800139c:	431c      	orrs	r4, r3
 800139e:	4863      	ldr	r0, [pc, #396]	; (800152c <HAL_ADC_Init+0x2a0>)
 80013a0:	f7ff ff26 	bl	80011f0 <LL_ADC_IsEnabled>
 80013a4:	4603      	mov	r3, r0
 80013a6:	4323      	orrs	r3, r4
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d105      	bne.n	80013b8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	4619      	mov	r1, r3
 80013b2:	485f      	ldr	r0, [pc, #380]	; (8001530 <HAL_ADC_Init+0x2a4>)
 80013b4:	f7ff fd86 	bl	8000ec4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	7e5b      	ldrb	r3, [r3, #25]
 80013bc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013c2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80013c8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80013ce:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013d6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013d8:	4313      	orrs	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d106      	bne.n	80013f4 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ea:	3b01      	subs	r3, #1
 80013ec:	045b      	lsls	r3, r3, #17
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d009      	beq.n	8001410 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001400:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001408:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4313      	orrs	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	68da      	ldr	r2, [r3, #12]
 8001416:	4b47      	ldr	r3, [pc, #284]	; (8001534 <HAL_ADC_Init+0x2a8>)
 8001418:	4013      	ands	r3, r2
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	6812      	ldr	r2, [r2, #0]
 800141e:	69b9      	ldr	r1, [r7, #24]
 8001420:	430b      	orrs	r3, r1
 8001422:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ff08 	bl	800123e <LL_ADC_REG_IsConversionOngoing>
 800142e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff ff15 	bl	8001264 <LL_ADC_INJ_IsConversionOngoing>
 800143a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d13d      	bne.n	80014be <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d13a      	bne.n	80014be <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800144c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001454:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001464:	f023 0302 	bic.w	r3, r3, #2
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	6812      	ldr	r2, [r2, #0]
 800146c:	69b9      	ldr	r1, [r7, #24]
 800146e:	430b      	orrs	r3, r1
 8001470:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001478:	2b01      	cmp	r3, #1
 800147a:	d118      	bne.n	80014ae <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001486:	f023 0304 	bic.w	r3, r3, #4
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001492:	4311      	orrs	r1, r2
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001498:	4311      	orrs	r1, r2
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800149e:	430a      	orrs	r2, r1
 80014a0:	431a      	orrs	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f042 0201 	orr.w	r2, r2, #1
 80014aa:	611a      	str	r2, [r3, #16]
 80014ac:	e007      	b.n	80014be <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	691a      	ldr	r2, [r3, #16]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f022 0201 	bic.w	r2, r2, #1
 80014bc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d10c      	bne.n	80014e0 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014cc:	f023 010f 	bic.w	r1, r3, #15
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	69db      	ldr	r3, [r3, #28]
 80014d4:	1e5a      	subs	r2, r3, #1
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	430a      	orrs	r2, r1
 80014dc:	631a      	str	r2, [r3, #48]	; 0x30
 80014de:	e007      	b.n	80014f0 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f022 020f 	bic.w	r2, r2, #15
 80014ee:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014f4:	f023 0303 	bic.w	r3, r3, #3
 80014f8:	f043 0201 	orr.w	r2, r3, #1
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	655a      	str	r2, [r3, #84]	; 0x54
 8001500:	e007      	b.n	8001512 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001506:	f043 0210 	orr.w	r2, r3, #16
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001512:	7ffb      	ldrb	r3, [r7, #31]
}
 8001514:	4618      	mov	r0, r3
 8001516:	3724      	adds	r7, #36	; 0x24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd90      	pop	{r4, r7, pc}
 800151c:	20000000 	.word	0x20000000
 8001520:	053e2d63 	.word	0x053e2d63
 8001524:	50040000 	.word	0x50040000
 8001528:	50040100 	.word	0x50040100
 800152c:	50040200 	.word	0x50040200
 8001530:	50040300 	.word	0x50040300
 8001534:	fff0c007 	.word	0xfff0c007

08001538 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001540:	4857      	ldr	r0, [pc, #348]	; (80016a0 <HAL_ADC_Start+0x168>)
 8001542:	f7ff fdd7 	bl	80010f4 <LL_ADC_GetMultimode>
 8001546:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fe76 	bl	800123e <LL_ADC_REG_IsConversionOngoing>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	f040 809c 	bne.w	8001692 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001560:	2b01      	cmp	r3, #1
 8001562:	d101      	bne.n	8001568 <HAL_ADC_Start+0x30>
 8001564:	2302      	movs	r3, #2
 8001566:	e097      	b.n	8001698 <HAL_ADC_Start+0x160>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2201      	movs	r2, #1
 800156c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f000 fd7d 	bl	8002070 <ADC_Enable>
 8001576:	4603      	mov	r3, r0
 8001578:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800157a:	7dfb      	ldrb	r3, [r7, #23]
 800157c:	2b00      	cmp	r3, #0
 800157e:	f040 8083 	bne.w	8001688 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001586:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800158a:	f023 0301 	bic.w	r3, r3, #1
 800158e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a42      	ldr	r2, [pc, #264]	; (80016a4 <HAL_ADC_Start+0x16c>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d002      	beq.n	80015a6 <HAL_ADC_Start+0x6e>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	e000      	b.n	80015a8 <HAL_ADC_Start+0x70>
 80015a6:	4b40      	ldr	r3, [pc, #256]	; (80016a8 <HAL_ADC_Start+0x170>)
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	6812      	ldr	r2, [r2, #0]
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d002      	beq.n	80015b6 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d105      	bne.n	80015c2 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015ce:	d106      	bne.n	80015de <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d4:	f023 0206 	bic.w	r2, r3, #6
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	659a      	str	r2, [r3, #88]	; 0x58
 80015dc:	e002      	b.n	80015e4 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	221c      	movs	r2, #28
 80015ea:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a2a      	ldr	r2, [pc, #168]	; (80016a4 <HAL_ADC_Start+0x16c>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d002      	beq.n	8001604 <HAL_ADC_Start+0xcc>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	e000      	b.n	8001606 <HAL_ADC_Start+0xce>
 8001604:	4b28      	ldr	r3, [pc, #160]	; (80016a8 <HAL_ADC_Start+0x170>)
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	6812      	ldr	r2, [r2, #0]
 800160a:	4293      	cmp	r3, r2
 800160c:	d008      	beq.n	8001620 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d005      	beq.n	8001620 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	2b05      	cmp	r3, #5
 8001618:	d002      	beq.n	8001620 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	2b09      	cmp	r3, #9
 800161e:	d114      	bne.n	800164a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d007      	beq.n	800163e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001632:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001636:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff fde7 	bl	8001216 <LL_ADC_REG_StartConversion>
 8001648:	e025      	b.n	8001696 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800164e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a12      	ldr	r2, [pc, #72]	; (80016a4 <HAL_ADC_Start+0x16c>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d002      	beq.n	8001666 <HAL_ADC_Start+0x12e>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	e000      	b.n	8001668 <HAL_ADC_Start+0x130>
 8001666:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <HAL_ADC_Start+0x170>)
 8001668:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d00f      	beq.n	8001696 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800167a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800167e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	655a      	str	r2, [r3, #84]	; 0x54
 8001686:	e006      	b.n	8001696 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001690:	e001      	b.n	8001696 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001692:	2302      	movs	r3, #2
 8001694:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001696:	7dfb      	ldrb	r3, [r7, #23]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3718      	adds	r7, #24
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	50040300 	.word	0x50040300
 80016a4:	50040100 	.word	0x50040100
 80016a8:	50040000 	.word	0x50040000

080016ac <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016b6:	4866      	ldr	r0, [pc, #408]	; (8001850 <HAL_ADC_PollForConversion+0x1a4>)
 80016b8:	f7ff fd1c 	bl	80010f4 <LL_ADC_GetMultimode>
 80016bc:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	2b08      	cmp	r3, #8
 80016c4:	d102      	bne.n	80016cc <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80016c6:	2308      	movs	r3, #8
 80016c8:	61fb      	str	r3, [r7, #28]
 80016ca:	e02a      	b.n	8001722 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d005      	beq.n	80016de <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	2b05      	cmp	r3, #5
 80016d6:	d002      	beq.n	80016de <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	2b09      	cmp	r3, #9
 80016dc:	d111      	bne.n	8001702 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d007      	beq.n	80016fc <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016f0:	f043 0220 	orr.w	r2, r3, #32
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0a4      	b.n	8001846 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80016fc:	2304      	movs	r3, #4
 80016fe:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001700:	e00f      	b.n	8001722 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001702:	4853      	ldr	r0, [pc, #332]	; (8001850 <HAL_ADC_PollForConversion+0x1a4>)
 8001704:	f7ff fd04 	bl	8001110 <LL_ADC_GetMultiDMATransfer>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d007      	beq.n	800171e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001712:	f043 0220 	orr.w	r2, r3, #32
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e093      	b.n	8001846 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800171e:	2304      	movs	r3, #4
 8001720:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001722:	f7ff fbc3 	bl	8000eac <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001728:	e021      	b.n	800176e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001730:	d01d      	beq.n	800176e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001732:	f7ff fbbb 	bl	8000eac <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	429a      	cmp	r2, r3
 8001740:	d302      	bcc.n	8001748 <HAL_ADC_PollForConversion+0x9c>
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d112      	bne.n	800176e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	4013      	ands	r3, r2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d10b      	bne.n	800176e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800175a:	f043 0204 	orr.w	r2, r3, #4
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e06b      	b.n	8001846 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	4013      	ands	r3, r2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0d6      	beq.n	800172a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001780:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fc22 	bl	8000fd6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d01c      	beq.n	80017d2 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	7e5b      	ldrb	r3, [r3, #25]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d118      	bne.n	80017d2 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0308 	and.w	r3, r3, #8
 80017aa:	2b08      	cmp	r3, #8
 80017ac:	d111      	bne.n	80017d2 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d105      	bne.n	80017d2 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ca:	f043 0201 	orr.w	r2, r3, #1
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a1f      	ldr	r2, [pc, #124]	; (8001854 <HAL_ADC_PollForConversion+0x1a8>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d002      	beq.n	80017e2 <HAL_ADC_PollForConversion+0x136>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	e000      	b.n	80017e4 <HAL_ADC_PollForConversion+0x138>
 80017e2:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <HAL_ADC_PollForConversion+0x1ac>)
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	6812      	ldr	r2, [r2, #0]
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d008      	beq.n	80017fe <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d005      	beq.n	80017fe <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	2b05      	cmp	r3, #5
 80017f6:	d002      	beq.n	80017fe <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	2b09      	cmp	r3, #9
 80017fc:	d104      	bne.n	8001808 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	61bb      	str	r3, [r7, #24]
 8001806:	e00c      	b.n	8001822 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a11      	ldr	r2, [pc, #68]	; (8001854 <HAL_ADC_PollForConversion+0x1a8>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d002      	beq.n	8001818 <HAL_ADC_PollForConversion+0x16c>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	e000      	b.n	800181a <HAL_ADC_PollForConversion+0x16e>
 8001818:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <HAL_ADC_PollForConversion+0x1ac>)
 800181a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	2b08      	cmp	r3, #8
 8001826:	d104      	bne.n	8001832 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2208      	movs	r2, #8
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	e008      	b.n	8001844 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d103      	bne.n	8001844 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	220c      	movs	r2, #12
 8001842:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3720      	adds	r7, #32
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	50040300 	.word	0x50040300
 8001854:	50040100 	.word	0x50040100
 8001858:	50040000 	.word	0x50040000

0800185c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800186a:	4618      	mov	r0, r3
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
	...

08001878 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b0b6      	sub	sp, #216	; 0xd8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001882:	2300      	movs	r3, #0
 8001884:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001888:	2300      	movs	r3, #0
 800188a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001892:	2b01      	cmp	r3, #1
 8001894:	d101      	bne.n	800189a <HAL_ADC_ConfigChannel+0x22>
 8001896:	2302      	movs	r3, #2
 8001898:	e3c7      	b.n	800202a <HAL_ADC_ConfigChannel+0x7b2>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2201      	movs	r2, #1
 800189e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff fcc9 	bl	800123e <LL_ADC_REG_IsConversionOngoing>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f040 83a8 	bne.w	8002004 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	2b05      	cmp	r3, #5
 80018ba:	d824      	bhi.n	8001906 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	3b02      	subs	r3, #2
 80018c2:	2b03      	cmp	r3, #3
 80018c4:	d81b      	bhi.n	80018fe <HAL_ADC_ConfigChannel+0x86>
 80018c6:	a201      	add	r2, pc, #4	; (adr r2, 80018cc <HAL_ADC_ConfigChannel+0x54>)
 80018c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018cc:	080018dd 	.word	0x080018dd
 80018d0:	080018e5 	.word	0x080018e5
 80018d4:	080018ed 	.word	0x080018ed
 80018d8:	080018f5 	.word	0x080018f5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	220c      	movs	r2, #12
 80018e0:	605a      	str	r2, [r3, #4]
          break;
 80018e2:	e011      	b.n	8001908 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	2212      	movs	r2, #18
 80018e8:	605a      	str	r2, [r3, #4]
          break;
 80018ea:	e00d      	b.n	8001908 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	2218      	movs	r2, #24
 80018f0:	605a      	str	r2, [r3, #4]
          break;
 80018f2:	e009      	b.n	8001908 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018fa:	605a      	str	r2, [r3, #4]
          break;
 80018fc:	e004      	b.n	8001908 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	2206      	movs	r2, #6
 8001902:	605a      	str	r2, [r3, #4]
          break;
 8001904:	e000      	b.n	8001908 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001906:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6818      	ldr	r0, [r3, #0]
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	6859      	ldr	r1, [r3, #4]
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	461a      	mov	r2, r3
 8001916:	f7ff fb71 	bl	8000ffc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff fc8d 	bl	800123e <LL_ADC_REG_IsConversionOngoing>
 8001924:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fc99 	bl	8001264 <LL_ADC_INJ_IsConversionOngoing>
 8001932:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001936:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800193a:	2b00      	cmp	r3, #0
 800193c:	f040 81a6 	bne.w	8001c8c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001940:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001944:	2b00      	cmp	r3, #0
 8001946:	f040 81a1 	bne.w	8001c8c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6818      	ldr	r0, [r3, #0]
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	6819      	ldr	r1, [r3, #0]
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	461a      	mov	r2, r3
 8001958:	f7ff fb7c 	bl	8001054 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	695a      	ldr	r2, [r3, #20]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	08db      	lsrs	r3, r3, #3
 8001968:	f003 0303 	and.w	r3, r3, #3
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	2b04      	cmp	r3, #4
 800197c:	d00a      	beq.n	8001994 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6818      	ldr	r0, [r3, #0]
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	6919      	ldr	r1, [r3, #16]
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800198e:	f7ff facd 	bl	8000f2c <LL_ADC_SetOffset>
 8001992:	e17b      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2100      	movs	r1, #0
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff faea 	bl	8000f74 <LL_ADC_GetOffsetChannel>
 80019a0:	4603      	mov	r3, r0
 80019a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d10a      	bne.n	80019c0 <HAL_ADC_ConfigChannel+0x148>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2100      	movs	r1, #0
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff fadf 	bl	8000f74 <LL_ADC_GetOffsetChannel>
 80019b6:	4603      	mov	r3, r0
 80019b8:	0e9b      	lsrs	r3, r3, #26
 80019ba:	f003 021f 	and.w	r2, r3, #31
 80019be:	e01e      	b.n	80019fe <HAL_ADC_ConfigChannel+0x186>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2100      	movs	r1, #0
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff fad4 	bl	8000f74 <LL_ADC_GetOffsetChannel>
 80019cc:	4603      	mov	r3, r0
 80019ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80019d6:	fa93 f3a3 	rbit	r3, r3
 80019da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80019e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80019e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80019ee:	2320      	movs	r3, #32
 80019f0:	e004      	b.n	80019fc <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80019f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80019f6:	fab3 f383 	clz	r3, r3
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d105      	bne.n	8001a16 <HAL_ADC_ConfigChannel+0x19e>
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	0e9b      	lsrs	r3, r3, #26
 8001a10:	f003 031f 	and.w	r3, r3, #31
 8001a14:	e018      	b.n	8001a48 <HAL_ADC_ConfigChannel+0x1d0>
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a22:	fa93 f3a3 	rbit	r3, r3
 8001a26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001a2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001a32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001a3a:	2320      	movs	r3, #32
 8001a3c:	e004      	b.n	8001a48 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001a3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a42:	fab3 f383 	clz	r3, r3
 8001a46:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d106      	bne.n	8001a5a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2200      	movs	r2, #0
 8001a52:	2100      	movs	r1, #0
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff faa3 	bl	8000fa0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2101      	movs	r1, #1
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff fa87 	bl	8000f74 <LL_ADC_GetOffsetChannel>
 8001a66:	4603      	mov	r3, r0
 8001a68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d10a      	bne.n	8001a86 <HAL_ADC_ConfigChannel+0x20e>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2101      	movs	r1, #1
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fa7c 	bl	8000f74 <LL_ADC_GetOffsetChannel>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	0e9b      	lsrs	r3, r3, #26
 8001a80:	f003 021f 	and.w	r2, r3, #31
 8001a84:	e01e      	b.n	8001ac4 <HAL_ADC_ConfigChannel+0x24c>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff fa71 	bl	8000f74 <LL_ADC_GetOffsetChannel>
 8001a92:	4603      	mov	r3, r0
 8001a94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a9c:	fa93 f3a3 	rbit	r3, r3
 8001aa0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001aa4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001aa8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001aac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d101      	bne.n	8001ab8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001ab4:	2320      	movs	r3, #32
 8001ab6:	e004      	b.n	8001ac2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001ab8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001abc:	fab3 f383 	clz	r3, r3
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d105      	bne.n	8001adc <HAL_ADC_ConfigChannel+0x264>
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	0e9b      	lsrs	r3, r3, #26
 8001ad6:	f003 031f 	and.w	r3, r3, #31
 8001ada:	e018      	b.n	8001b0e <HAL_ADC_ConfigChannel+0x296>
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ae8:	fa93 f3a3 	rbit	r3, r3
 8001aec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001af0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001af4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001af8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d101      	bne.n	8001b04 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001b00:	2320      	movs	r3, #32
 8001b02:	e004      	b.n	8001b0e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001b04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b08:	fab3 f383 	clz	r3, r3
 8001b0c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d106      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2200      	movs	r2, #0
 8001b18:	2101      	movs	r1, #1
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff fa40 	bl	8000fa0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2102      	movs	r1, #2
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fa24 	bl	8000f74 <LL_ADC_GetOffsetChannel>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d10a      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x2d4>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2102      	movs	r1, #2
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff fa19 	bl	8000f74 <LL_ADC_GetOffsetChannel>
 8001b42:	4603      	mov	r3, r0
 8001b44:	0e9b      	lsrs	r3, r3, #26
 8001b46:	f003 021f 	and.w	r2, r3, #31
 8001b4a:	e01e      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x312>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2102      	movs	r1, #2
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff fa0e 	bl	8000f74 <LL_ADC_GetOffsetChannel>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b62:	fa93 f3a3 	rbit	r3, r3
 8001b66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001b6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001b72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001b7a:	2320      	movs	r3, #32
 8001b7c:	e004      	b.n	8001b88 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001b7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b82:	fab3 f383 	clz	r3, r3
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d105      	bne.n	8001ba2 <HAL_ADC_ConfigChannel+0x32a>
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	0e9b      	lsrs	r3, r3, #26
 8001b9c:	f003 031f 	and.w	r3, r3, #31
 8001ba0:	e016      	b.n	8001bd0 <HAL_ADC_ConfigChannel+0x358>
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001baa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001bae:	fa93 f3a3 	rbit	r3, r3
 8001bb2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001bb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001bb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001bba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001bc2:	2320      	movs	r3, #32
 8001bc4:	e004      	b.n	8001bd0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001bc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bca:	fab3 f383 	clz	r3, r3
 8001bce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d106      	bne.n	8001be2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	2102      	movs	r1, #2
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff f9df 	bl	8000fa0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2103      	movs	r1, #3
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff f9c3 	bl	8000f74 <LL_ADC_GetOffsetChannel>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d10a      	bne.n	8001c0e <HAL_ADC_ConfigChannel+0x396>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2103      	movs	r1, #3
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff f9b8 	bl	8000f74 <LL_ADC_GetOffsetChannel>
 8001c04:	4603      	mov	r3, r0
 8001c06:	0e9b      	lsrs	r3, r3, #26
 8001c08:	f003 021f 	and.w	r2, r3, #31
 8001c0c:	e017      	b.n	8001c3e <HAL_ADC_ConfigChannel+0x3c6>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2103      	movs	r1, #3
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff f9ad 	bl	8000f74 <LL_ADC_GetOffsetChannel>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c20:	fa93 f3a3 	rbit	r3, r3
 8001c24:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001c26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c28:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001c2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d101      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001c30:	2320      	movs	r3, #32
 8001c32:	e003      	b.n	8001c3c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001c34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c36:	fab3 f383 	clz	r3, r3
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d105      	bne.n	8001c56 <HAL_ADC_ConfigChannel+0x3de>
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	0e9b      	lsrs	r3, r3, #26
 8001c50:	f003 031f 	and.w	r3, r3, #31
 8001c54:	e011      	b.n	8001c7a <HAL_ADC_ConfigChannel+0x402>
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c5e:	fa93 f3a3 	rbit	r3, r3
 8001c62:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001c64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c66:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001c68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001c6e:	2320      	movs	r3, #32
 8001c70:	e003      	b.n	8001c7a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001c72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c74:	fab3 f383 	clz	r3, r3
 8001c78:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d106      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2200      	movs	r2, #0
 8001c84:	2103      	movs	r1, #3
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff f98a 	bl	8000fa0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff faad 	bl	80011f0 <LL_ADC_IsEnabled>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f040 813f 	bne.w	8001f1c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6818      	ldr	r0, [r3, #0]
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	6819      	ldr	r1, [r3, #0]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	461a      	mov	r2, r3
 8001cac:	f7ff f9fe 	bl	80010ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	4a8e      	ldr	r2, [pc, #568]	; (8001ef0 <HAL_ADC_ConfigChannel+0x678>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	f040 8130 	bne.w	8001f1c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d10b      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x46c>
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	0e9b      	lsrs	r3, r3, #26
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	f003 031f 	and.w	r3, r3, #31
 8001cd8:	2b09      	cmp	r3, #9
 8001cda:	bf94      	ite	ls
 8001cdc:	2301      	movls	r3, #1
 8001cde:	2300      	movhi	r3, #0
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	e019      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x4a0>
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cec:	fa93 f3a3 	rbit	r3, r3
 8001cf0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001cf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cf4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001cf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d101      	bne.n	8001d00 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001cfc:	2320      	movs	r3, #32
 8001cfe:	e003      	b.n	8001d08 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001d00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d02:	fab3 f383 	clz	r3, r3
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	3301      	adds	r3, #1
 8001d0a:	f003 031f 	and.w	r3, r3, #31
 8001d0e:	2b09      	cmp	r3, #9
 8001d10:	bf94      	ite	ls
 8001d12:	2301      	movls	r3, #1
 8001d14:	2300      	movhi	r3, #0
 8001d16:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d079      	beq.n	8001e10 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d107      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x4c0>
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	0e9b      	lsrs	r3, r3, #26
 8001d2e:	3301      	adds	r3, #1
 8001d30:	069b      	lsls	r3, r3, #26
 8001d32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d36:	e015      	b.n	8001d64 <HAL_ADC_ConfigChannel+0x4ec>
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d40:	fa93 f3a3 	rbit	r3, r3
 8001d44:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d48:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001d4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001d50:	2320      	movs	r3, #32
 8001d52:	e003      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001d54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d56:	fab3 f383 	clz	r3, r3
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	069b      	lsls	r3, r3, #26
 8001d60:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d109      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x50c>
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	0e9b      	lsrs	r3, r3, #26
 8001d76:	3301      	adds	r3, #1
 8001d78:	f003 031f 	and.w	r3, r3, #31
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d82:	e017      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x53c>
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d8c:	fa93 f3a3 	rbit	r3, r3
 8001d90:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001d92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d94:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001d96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001d9c:	2320      	movs	r3, #32
 8001d9e:	e003      	b.n	8001da8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001da0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001da2:	fab3 f383 	clz	r3, r3
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	3301      	adds	r3, #1
 8001daa:	f003 031f 	and.w	r3, r3, #31
 8001dae:	2101      	movs	r1, #1
 8001db0:	fa01 f303 	lsl.w	r3, r1, r3
 8001db4:	ea42 0103 	orr.w	r1, r2, r3
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d10a      	bne.n	8001dda <HAL_ADC_ConfigChannel+0x562>
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	0e9b      	lsrs	r3, r3, #26
 8001dca:	3301      	adds	r3, #1
 8001dcc:	f003 021f 	and.w	r2, r3, #31
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	4413      	add	r3, r2
 8001dd6:	051b      	lsls	r3, r3, #20
 8001dd8:	e018      	b.n	8001e0c <HAL_ADC_ConfigChannel+0x594>
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001de2:	fa93 f3a3 	rbit	r3, r3
 8001de6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001df2:	2320      	movs	r3, #32
 8001df4:	e003      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001df8:	fab3 f383 	clz	r3, r3
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	3301      	adds	r3, #1
 8001e00:	f003 021f 	and.w	r2, r3, #31
 8001e04:	4613      	mov	r3, r2
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	4413      	add	r3, r2
 8001e0a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e0c:	430b      	orrs	r3, r1
 8001e0e:	e080      	b.n	8001f12 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d107      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x5b4>
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	0e9b      	lsrs	r3, r3, #26
 8001e22:	3301      	adds	r3, #1
 8001e24:	069b      	lsls	r3, r3, #26
 8001e26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e2a:	e015      	b.n	8001e58 <HAL_ADC_ConfigChannel+0x5e0>
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e34:	fa93 f3a3 	rbit	r3, r3
 8001e38:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e3c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001e44:	2320      	movs	r3, #32
 8001e46:	e003      	b.n	8001e50 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e4a:	fab3 f383 	clz	r3, r3
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	3301      	adds	r3, #1
 8001e52:	069b      	lsls	r3, r3, #26
 8001e54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d109      	bne.n	8001e78 <HAL_ADC_ConfigChannel+0x600>
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	0e9b      	lsrs	r3, r3, #26
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	f003 031f 	and.w	r3, r3, #31
 8001e70:	2101      	movs	r1, #1
 8001e72:	fa01 f303 	lsl.w	r3, r1, r3
 8001e76:	e017      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0x630>
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7e:	6a3b      	ldr	r3, [r7, #32]
 8001e80:	fa93 f3a3 	rbit	r3, r3
 8001e84:	61fb      	str	r3, [r7, #28]
  return result;
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001e90:	2320      	movs	r3, #32
 8001e92:	e003      	b.n	8001e9c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e96:	fab3 f383 	clz	r3, r3
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	f003 031f 	and.w	r3, r3, #31
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea8:	ea42 0103 	orr.w	r1, r2, r3
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d10d      	bne.n	8001ed4 <HAL_ADC_ConfigChannel+0x65c>
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	0e9b      	lsrs	r3, r3, #26
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	f003 021f 	and.w	r2, r3, #31
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	4413      	add	r3, r2
 8001eca:	3b1e      	subs	r3, #30
 8001ecc:	051b      	lsls	r3, r3, #20
 8001ece:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ed2:	e01d      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x698>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	fa93 f3a3 	rbit	r3, r3
 8001ee0:	613b      	str	r3, [r7, #16]
  return result;
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d103      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001eec:	2320      	movs	r3, #32
 8001eee:	e005      	b.n	8001efc <HAL_ADC_ConfigChannel+0x684>
 8001ef0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	fab3 f383 	clz	r3, r3
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	3301      	adds	r3, #1
 8001efe:	f003 021f 	and.w	r2, r3, #31
 8001f02:	4613      	mov	r3, r2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	4413      	add	r3, r2
 8001f08:	3b1e      	subs	r3, #30
 8001f0a:	051b      	lsls	r3, r3, #20
 8001f0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f10:	430b      	orrs	r3, r1
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	6892      	ldr	r2, [r2, #8]
 8001f16:	4619      	mov	r1, r3
 8001f18:	f7ff f89c 	bl	8001054 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	4b44      	ldr	r3, [pc, #272]	; (8002034 <HAL_ADC_ConfigChannel+0x7bc>)
 8001f22:	4013      	ands	r3, r2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d07a      	beq.n	800201e <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f28:	4843      	ldr	r0, [pc, #268]	; (8002038 <HAL_ADC_ConfigChannel+0x7c0>)
 8001f2a:	f7fe fff1 	bl	8000f10 <LL_ADC_GetCommonPathInternalCh>
 8001f2e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a41      	ldr	r2, [pc, #260]	; (800203c <HAL_ADC_ConfigChannel+0x7c4>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d12c      	bne.n	8001f96 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d126      	bne.n	8001f96 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a3c      	ldr	r2, [pc, #240]	; (8002040 <HAL_ADC_ConfigChannel+0x7c8>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d004      	beq.n	8001f5c <HAL_ADC_ConfigChannel+0x6e4>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a3b      	ldr	r2, [pc, #236]	; (8002044 <HAL_ADC_ConfigChannel+0x7cc>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d15d      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f60:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f64:	4619      	mov	r1, r3
 8001f66:	4834      	ldr	r0, [pc, #208]	; (8002038 <HAL_ADC_ConfigChannel+0x7c0>)
 8001f68:	f7fe ffbf 	bl	8000eea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f6c:	4b36      	ldr	r3, [pc, #216]	; (8002048 <HAL_ADC_ConfigChannel+0x7d0>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	099b      	lsrs	r3, r3, #6
 8001f72:	4a36      	ldr	r2, [pc, #216]	; (800204c <HAL_ADC_ConfigChannel+0x7d4>)
 8001f74:	fba2 2303 	umull	r2, r3, r2, r3
 8001f78:	099b      	lsrs	r3, r3, #6
 8001f7a:	1c5a      	adds	r2, r3, #1
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	4413      	add	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f86:	e002      	b.n	8001f8e <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1f9      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f94:	e040      	b.n	8002018 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a2d      	ldr	r2, [pc, #180]	; (8002050 <HAL_ADC_ConfigChannel+0x7d8>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d118      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x75a>
 8001fa0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fa4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d112      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a23      	ldr	r2, [pc, #140]	; (8002040 <HAL_ADC_ConfigChannel+0x7c8>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d004      	beq.n	8001fc0 <HAL_ADC_ConfigChannel+0x748>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a22      	ldr	r2, [pc, #136]	; (8002044 <HAL_ADC_ConfigChannel+0x7cc>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d12d      	bne.n	800201c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fc8:	4619      	mov	r1, r3
 8001fca:	481b      	ldr	r0, [pc, #108]	; (8002038 <HAL_ADC_ConfigChannel+0x7c0>)
 8001fcc:	f7fe ff8d 	bl	8000eea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fd0:	e024      	b.n	800201c <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a1f      	ldr	r2, [pc, #124]	; (8002054 <HAL_ADC_ConfigChannel+0x7dc>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d120      	bne.n	800201e <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001fdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fe0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d11a      	bne.n	800201e <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a14      	ldr	r2, [pc, #80]	; (8002040 <HAL_ADC_ConfigChannel+0x7c8>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d115      	bne.n	800201e <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ff2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ff6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	480e      	ldr	r0, [pc, #56]	; (8002038 <HAL_ADC_ConfigChannel+0x7c0>)
 8001ffe:	f7fe ff74 	bl	8000eea <LL_ADC_SetCommonPathInternalCh>
 8002002:	e00c      	b.n	800201e <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002008:	f043 0220 	orr.w	r2, r3, #32
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002016:	e002      	b.n	800201e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002018:	bf00      	nop
 800201a:	e000      	b.n	800201e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800201c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002026:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800202a:	4618      	mov	r0, r3
 800202c:	37d8      	adds	r7, #216	; 0xd8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	80080000 	.word	0x80080000
 8002038:	50040300 	.word	0x50040300
 800203c:	c7520000 	.word	0xc7520000
 8002040:	50040000 	.word	0x50040000
 8002044:	50040200 	.word	0x50040200
 8002048:	20000000 	.word	0x20000000
 800204c:	053e2d63 	.word	0x053e2d63
 8002050:	cb840000 	.word	0xcb840000
 8002054:	80000001 	.word	0x80000001

08002058 <HAL_ADC_GetState>:
  *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
  * @param hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002064:	4618      	mov	r0, r3
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002078:	2300      	movs	r3, #0
 800207a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff f8b5 	bl	80011f0 <LL_ADC_IsEnabled>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d169      	bne.n	8002160 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	4b36      	ldr	r3, [pc, #216]	; (800216c <ADC_Enable+0xfc>)
 8002094:	4013      	ands	r3, r2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00d      	beq.n	80020b6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800209e:	f043 0210 	orr.w	r2, r3, #16
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020aa:	f043 0201 	orr.w	r2, r3, #1
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e055      	b.n	8002162 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff f884 	bl	80011c8 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80020c0:	482b      	ldr	r0, [pc, #172]	; (8002170 <ADC_Enable+0x100>)
 80020c2:	f7fe ff25 	bl	8000f10 <LL_ADC_GetCommonPathInternalCh>
 80020c6:	4603      	mov	r3, r0
 80020c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d013      	beq.n	80020f8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020d0:	4b28      	ldr	r3, [pc, #160]	; (8002174 <ADC_Enable+0x104>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	099b      	lsrs	r3, r3, #6
 80020d6:	4a28      	ldr	r2, [pc, #160]	; (8002178 <ADC_Enable+0x108>)
 80020d8:	fba2 2303 	umull	r2, r3, r2, r3
 80020dc:	099b      	lsrs	r3, r3, #6
 80020de:	1c5a      	adds	r2, r3, #1
 80020e0:	4613      	mov	r3, r2
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	4413      	add	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80020ea:	e002      	b.n	80020f2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1f9      	bne.n	80020ec <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80020f8:	f7fe fed8 	bl	8000eac <HAL_GetTick>
 80020fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020fe:	e028      	b.n	8002152 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff f873 	bl	80011f0 <LL_ADC_IsEnabled>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d104      	bne.n	800211a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff f857 	bl	80011c8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800211a:	f7fe fec7 	bl	8000eac <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d914      	bls.n	8002152 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b01      	cmp	r3, #1
 8002134:	d00d      	beq.n	8002152 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213a:	f043 0210 	orr.w	r2, r3, #16
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002146:	f043 0201 	orr.w	r2, r3, #1
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e007      	b.n	8002162 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	2b01      	cmp	r3, #1
 800215e:	d1cf      	bne.n	8002100 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	8000003f 	.word	0x8000003f
 8002170:	50040300 	.word	0x50040300
 8002174:	20000000 	.word	0x20000000
 8002178:	053e2d63 	.word	0x053e2d63

0800217c <LL_ADC_IsEnabled>:
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	2b01      	cmp	r3, #1
 800218e:	d101      	bne.n	8002194 <LL_ADC_IsEnabled+0x18>
 8002190:	2301      	movs	r3, #1
 8002192:	e000      	b.n	8002196 <LL_ADC_IsEnabled+0x1a>
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <LL_ADC_REG_IsConversionOngoing>:
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 0304 	and.w	r3, r3, #4
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	d101      	bne.n	80021ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80021c8:	b590      	push	{r4, r7, lr}
 80021ca:	b09f      	sub	sp, #124	; 0x7c
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021d2:	2300      	movs	r3, #0
 80021d4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d101      	bne.n	80021e6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80021e2:	2302      	movs	r3, #2
 80021e4:	e093      	b.n	800230e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80021ee:	2300      	movs	r3, #0
 80021f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80021f2:	2300      	movs	r3, #0
 80021f4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a47      	ldr	r2, [pc, #284]	; (8002318 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d102      	bne.n	8002206 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002200:	4b46      	ldr	r3, [pc, #280]	; (800231c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002202:	60bb      	str	r3, [r7, #8]
 8002204:	e001      	b.n	800220a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002206:	2300      	movs	r3, #0
 8002208:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d10b      	bne.n	8002228 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002214:	f043 0220 	orr.w	r2, r3, #32
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e072      	b.n	800230e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff ffb9 	bl	80021a2 <LL_ADC_REG_IsConversionOngoing>
 8002230:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff ffb3 	bl	80021a2 <LL_ADC_REG_IsConversionOngoing>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d154      	bne.n	80022ec <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002242:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002244:	2b00      	cmp	r3, #0
 8002246:	d151      	bne.n	80022ec <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002248:	4b35      	ldr	r3, [pc, #212]	; (8002320 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800224a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d02c      	beq.n	80022ae <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	6859      	ldr	r1, [r3, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002266:	035b      	lsls	r3, r3, #13
 8002268:	430b      	orrs	r3, r1
 800226a:	431a      	orrs	r2, r3
 800226c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800226e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002270:	4829      	ldr	r0, [pc, #164]	; (8002318 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002272:	f7ff ff83 	bl	800217c <LL_ADC_IsEnabled>
 8002276:	4604      	mov	r4, r0
 8002278:	4828      	ldr	r0, [pc, #160]	; (800231c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800227a:	f7ff ff7f 	bl	800217c <LL_ADC_IsEnabled>
 800227e:	4603      	mov	r3, r0
 8002280:	431c      	orrs	r4, r3
 8002282:	4828      	ldr	r0, [pc, #160]	; (8002324 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002284:	f7ff ff7a 	bl	800217c <LL_ADC_IsEnabled>
 8002288:	4603      	mov	r3, r0
 800228a:	4323      	orrs	r3, r4
 800228c:	2b00      	cmp	r3, #0
 800228e:	d137      	bne.n	8002300 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002290:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002298:	f023 030f 	bic.w	r3, r3, #15
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	6811      	ldr	r1, [r2, #0]
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	6892      	ldr	r2, [r2, #8]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	431a      	orrs	r2, r3
 80022a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022aa:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80022ac:	e028      	b.n	8002300 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80022ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022b8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022ba:	4817      	ldr	r0, [pc, #92]	; (8002318 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80022bc:	f7ff ff5e 	bl	800217c <LL_ADC_IsEnabled>
 80022c0:	4604      	mov	r4, r0
 80022c2:	4816      	ldr	r0, [pc, #88]	; (800231c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80022c4:	f7ff ff5a 	bl	800217c <LL_ADC_IsEnabled>
 80022c8:	4603      	mov	r3, r0
 80022ca:	431c      	orrs	r4, r3
 80022cc:	4815      	ldr	r0, [pc, #84]	; (8002324 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80022ce:	f7ff ff55 	bl	800217c <LL_ADC_IsEnabled>
 80022d2:	4603      	mov	r3, r0
 80022d4:	4323      	orrs	r3, r4
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d112      	bne.n	8002300 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80022da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80022e2:	f023 030f 	bic.w	r3, r3, #15
 80022e6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80022e8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80022ea:	e009      	b.n	8002300 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f0:	f043 0220 	orr.w	r2, r3, #32
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80022fe:	e000      	b.n	8002302 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002300:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800230a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800230e:	4618      	mov	r0, r3
 8002310:	377c      	adds	r7, #124	; 0x7c
 8002312:	46bd      	mov	sp, r7
 8002314:	bd90      	pop	{r4, r7, pc}
 8002316:	bf00      	nop
 8002318:	50040000 	.word	0x50040000
 800231c:	50040100 	.word	0x50040100
 8002320:	50040300 	.word	0x50040300
 8002324:	50040200 	.word	0x50040200

08002328 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002338:	4b0c      	ldr	r3, [pc, #48]	; (800236c <__NVIC_SetPriorityGrouping+0x44>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002344:	4013      	ands	r3, r2
 8002346:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002350:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002358:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800235a:	4a04      	ldr	r2, [pc, #16]	; (800236c <__NVIC_SetPriorityGrouping+0x44>)
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	60d3      	str	r3, [r2, #12]
}
 8002360:	bf00      	nop
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	e000ed00 	.word	0xe000ed00

08002370 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002374:	4b04      	ldr	r3, [pc, #16]	; (8002388 <__NVIC_GetPriorityGrouping+0x18>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	0a1b      	lsrs	r3, r3, #8
 800237a:	f003 0307 	and.w	r3, r3, #7
}
 800237e:	4618      	mov	r0, r3
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	e000ed00 	.word	0xe000ed00

0800238c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	6039      	str	r1, [r7, #0]
 8002396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239c:	2b00      	cmp	r3, #0
 800239e:	db0a      	blt.n	80023b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	490c      	ldr	r1, [pc, #48]	; (80023d8 <__NVIC_SetPriority+0x4c>)
 80023a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023aa:	0112      	lsls	r2, r2, #4
 80023ac:	b2d2      	uxtb	r2, r2
 80023ae:	440b      	add	r3, r1
 80023b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023b4:	e00a      	b.n	80023cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	4908      	ldr	r1, [pc, #32]	; (80023dc <__NVIC_SetPriority+0x50>)
 80023bc:	79fb      	ldrb	r3, [r7, #7]
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	3b04      	subs	r3, #4
 80023c4:	0112      	lsls	r2, r2, #4
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	440b      	add	r3, r1
 80023ca:	761a      	strb	r2, [r3, #24]
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	e000e100 	.word	0xe000e100
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b089      	sub	sp, #36	; 0x24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	f1c3 0307 	rsb	r3, r3, #7
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	bf28      	it	cs
 80023fe:	2304      	movcs	r3, #4
 8002400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	3304      	adds	r3, #4
 8002406:	2b06      	cmp	r3, #6
 8002408:	d902      	bls.n	8002410 <NVIC_EncodePriority+0x30>
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	3b03      	subs	r3, #3
 800240e:	e000      	b.n	8002412 <NVIC_EncodePriority+0x32>
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002414:	f04f 32ff 	mov.w	r2, #4294967295
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43da      	mvns	r2, r3
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	401a      	ands	r2, r3
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002428:	f04f 31ff 	mov.w	r1, #4294967295
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	fa01 f303 	lsl.w	r3, r1, r3
 8002432:	43d9      	mvns	r1, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002438:	4313      	orrs	r3, r2
         );
}
 800243a:	4618      	mov	r0, r3
 800243c:	3724      	adds	r7, #36	; 0x24
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
	...

08002448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3b01      	subs	r3, #1
 8002454:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002458:	d301      	bcc.n	800245e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800245a:	2301      	movs	r3, #1
 800245c:	e00f      	b.n	800247e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800245e:	4a0a      	ldr	r2, [pc, #40]	; (8002488 <SysTick_Config+0x40>)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3b01      	subs	r3, #1
 8002464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002466:	210f      	movs	r1, #15
 8002468:	f04f 30ff 	mov.w	r0, #4294967295
 800246c:	f7ff ff8e 	bl	800238c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002470:	4b05      	ldr	r3, [pc, #20]	; (8002488 <SysTick_Config+0x40>)
 8002472:	2200      	movs	r2, #0
 8002474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002476:	4b04      	ldr	r3, [pc, #16]	; (8002488 <SysTick_Config+0x40>)
 8002478:	2207      	movs	r2, #7
 800247a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	e000e010 	.word	0xe000e010

0800248c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f7ff ff47 	bl	8002328 <__NVIC_SetPriorityGrouping>
}
 800249a:	bf00      	nop
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b086      	sub	sp, #24
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	4603      	mov	r3, r0
 80024aa:	60b9      	str	r1, [r7, #8]
 80024ac:	607a      	str	r2, [r7, #4]
 80024ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024b4:	f7ff ff5c 	bl	8002370 <__NVIC_GetPriorityGrouping>
 80024b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	68b9      	ldr	r1, [r7, #8]
 80024be:	6978      	ldr	r0, [r7, #20]
 80024c0:	f7ff ff8e 	bl	80023e0 <NVIC_EncodePriority>
 80024c4:	4602      	mov	r2, r0
 80024c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ca:	4611      	mov	r1, r2
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff ff5d 	bl	800238c <__NVIC_SetPriority>
}
 80024d2:	bf00      	nop
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7ff ffb0 	bl	8002448 <SysTick_Config>
 80024e8:	4603      	mov	r3, r0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
	...

080024f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b087      	sub	sp, #28
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024fe:	2300      	movs	r3, #0
 8002500:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002502:	e17f      	b.n	8002804 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	2101      	movs	r1, #1
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	fa01 f303 	lsl.w	r3, r1, r3
 8002510:	4013      	ands	r3, r2
 8002512:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2b00      	cmp	r3, #0
 8002518:	f000 8171 	beq.w	80027fe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 0303 	and.w	r3, r3, #3
 8002524:	2b01      	cmp	r3, #1
 8002526:	d005      	beq.n	8002534 <HAL_GPIO_Init+0x40>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f003 0303 	and.w	r3, r3, #3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d130      	bne.n	8002596 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	2203      	movs	r2, #3
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	4013      	ands	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	68da      	ldr	r2, [r3, #12]
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	4313      	orrs	r3, r2
 800255c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800256a:	2201      	movs	r2, #1
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43db      	mvns	r3, r3
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	4013      	ands	r3, r2
 8002578:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	091b      	lsrs	r3, r3, #4
 8002580:	f003 0201 	and.w	r2, r3, #1
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	4313      	orrs	r3, r2
 800258e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	2b03      	cmp	r3, #3
 80025a0:	d118      	bne.n	80025d4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80025a8:	2201      	movs	r2, #1
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	43db      	mvns	r3, r3
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4013      	ands	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	08db      	lsrs	r3, r3, #3
 80025be:	f003 0201 	and.w	r2, r3, #1
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 0303 	and.w	r3, r3, #3
 80025dc:	2b03      	cmp	r3, #3
 80025de:	d017      	beq.n	8002610 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	2203      	movs	r2, #3
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43db      	mvns	r3, r3
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	4013      	ands	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	4313      	orrs	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 0303 	and.w	r3, r3, #3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d123      	bne.n	8002664 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	08da      	lsrs	r2, r3, #3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3208      	adds	r2, #8
 8002624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002628:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	220f      	movs	r2, #15
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	43db      	mvns	r3, r3
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	4013      	ands	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	691a      	ldr	r2, [r3, #16]
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	4313      	orrs	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	08da      	lsrs	r2, r3, #3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	3208      	adds	r2, #8
 800265e:	6939      	ldr	r1, [r7, #16]
 8002660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	2203      	movs	r2, #3
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	4013      	ands	r3, r2
 800267a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f003 0203 	and.w	r2, r3, #3
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	4313      	orrs	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 80ac 	beq.w	80027fe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026a6:	4b5f      	ldr	r3, [pc, #380]	; (8002824 <HAL_GPIO_Init+0x330>)
 80026a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026aa:	4a5e      	ldr	r2, [pc, #376]	; (8002824 <HAL_GPIO_Init+0x330>)
 80026ac:	f043 0301 	orr.w	r3, r3, #1
 80026b0:	6613      	str	r3, [r2, #96]	; 0x60
 80026b2:	4b5c      	ldr	r3, [pc, #368]	; (8002824 <HAL_GPIO_Init+0x330>)
 80026b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	60bb      	str	r3, [r7, #8]
 80026bc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026be:	4a5a      	ldr	r2, [pc, #360]	; (8002828 <HAL_GPIO_Init+0x334>)
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	089b      	lsrs	r3, r3, #2
 80026c4:	3302      	adds	r3, #2
 80026c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	220f      	movs	r2, #15
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	43db      	mvns	r3, r3
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	4013      	ands	r3, r2
 80026e0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80026e8:	d025      	beq.n	8002736 <HAL_GPIO_Init+0x242>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a4f      	ldr	r2, [pc, #316]	; (800282c <HAL_GPIO_Init+0x338>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d01f      	beq.n	8002732 <HAL_GPIO_Init+0x23e>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a4e      	ldr	r2, [pc, #312]	; (8002830 <HAL_GPIO_Init+0x33c>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d019      	beq.n	800272e <HAL_GPIO_Init+0x23a>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a4d      	ldr	r2, [pc, #308]	; (8002834 <HAL_GPIO_Init+0x340>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d013      	beq.n	800272a <HAL_GPIO_Init+0x236>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a4c      	ldr	r2, [pc, #304]	; (8002838 <HAL_GPIO_Init+0x344>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d00d      	beq.n	8002726 <HAL_GPIO_Init+0x232>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a4b      	ldr	r2, [pc, #300]	; (800283c <HAL_GPIO_Init+0x348>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d007      	beq.n	8002722 <HAL_GPIO_Init+0x22e>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a4a      	ldr	r2, [pc, #296]	; (8002840 <HAL_GPIO_Init+0x34c>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d101      	bne.n	800271e <HAL_GPIO_Init+0x22a>
 800271a:	2306      	movs	r3, #6
 800271c:	e00c      	b.n	8002738 <HAL_GPIO_Init+0x244>
 800271e:	2307      	movs	r3, #7
 8002720:	e00a      	b.n	8002738 <HAL_GPIO_Init+0x244>
 8002722:	2305      	movs	r3, #5
 8002724:	e008      	b.n	8002738 <HAL_GPIO_Init+0x244>
 8002726:	2304      	movs	r3, #4
 8002728:	e006      	b.n	8002738 <HAL_GPIO_Init+0x244>
 800272a:	2303      	movs	r3, #3
 800272c:	e004      	b.n	8002738 <HAL_GPIO_Init+0x244>
 800272e:	2302      	movs	r3, #2
 8002730:	e002      	b.n	8002738 <HAL_GPIO_Init+0x244>
 8002732:	2301      	movs	r3, #1
 8002734:	e000      	b.n	8002738 <HAL_GPIO_Init+0x244>
 8002736:	2300      	movs	r3, #0
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	f002 0203 	and.w	r2, r2, #3
 800273e:	0092      	lsls	r2, r2, #2
 8002740:	4093      	lsls	r3, r2
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	4313      	orrs	r3, r2
 8002746:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002748:	4937      	ldr	r1, [pc, #220]	; (8002828 <HAL_GPIO_Init+0x334>)
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	089b      	lsrs	r3, r3, #2
 800274e:	3302      	adds	r3, #2
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002756:	4b3b      	ldr	r3, [pc, #236]	; (8002844 <HAL_GPIO_Init+0x350>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	43db      	mvns	r3, r3
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	4013      	ands	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	4313      	orrs	r3, r2
 8002778:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800277a:	4a32      	ldr	r2, [pc, #200]	; (8002844 <HAL_GPIO_Init+0x350>)
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002780:	4b30      	ldr	r3, [pc, #192]	; (8002844 <HAL_GPIO_Init+0x350>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	43db      	mvns	r3, r3
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	4013      	ands	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d003      	beq.n	80027a4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027a4:	4a27      	ldr	r2, [pc, #156]	; (8002844 <HAL_GPIO_Init+0x350>)
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80027aa:	4b26      	ldr	r3, [pc, #152]	; (8002844 <HAL_GPIO_Init+0x350>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	43db      	mvns	r3, r3
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	4013      	ands	r3, r2
 80027b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027ce:	4a1d      	ldr	r2, [pc, #116]	; (8002844 <HAL_GPIO_Init+0x350>)
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80027d4:	4b1b      	ldr	r3, [pc, #108]	; (8002844 <HAL_GPIO_Init+0x350>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	43db      	mvns	r3, r3
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	4013      	ands	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80027f8:	4a12      	ldr	r2, [pc, #72]	; (8002844 <HAL_GPIO_Init+0x350>)
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	3301      	adds	r3, #1
 8002802:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	fa22 f303 	lsr.w	r3, r2, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	f47f ae78 	bne.w	8002504 <HAL_GPIO_Init+0x10>
  }
}
 8002814:	bf00      	nop
 8002816:	bf00      	nop
 8002818:	371c      	adds	r7, #28
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	40021000 	.word	0x40021000
 8002828:	40010000 	.word	0x40010000
 800282c:	48000400 	.word	0x48000400
 8002830:	48000800 	.word	0x48000800
 8002834:	48000c00 	.word	0x48000c00
 8002838:	48001000 	.word	0x48001000
 800283c:	48001400 	.word	0x48001400
 8002840:	48001800 	.word	0x48001800
 8002844:	40010400 	.word	0x40010400

08002848 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	460b      	mov	r3, r1
 8002852:	807b      	strh	r3, [r7, #2]
 8002854:	4613      	mov	r3, r2
 8002856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002858:	787b      	ldrb	r3, [r7, #1]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800285e:	887a      	ldrh	r2, [r7, #2]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002864:	e002      	b.n	800286c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002866:	887a      	ldrh	r2, [r7, #2]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	460b      	mov	r3, r1
 8002882:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800288a:	887a      	ldrh	r2, [r7, #2]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	4013      	ands	r3, r2
 8002890:	041a      	lsls	r2, r3, #16
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	43d9      	mvns	r1, r3
 8002896:	887b      	ldrh	r3, [r7, #2]
 8002898:	400b      	ands	r3, r1
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	619a      	str	r2, [r3, #24]
}
 80028a0:	bf00      	nop
 80028a2:	3714      	adds	r7, #20
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80028b0:	4b04      	ldr	r3, [pc, #16]	; (80028c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	40007000 	.word	0x40007000

080028c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028d6:	d130      	bne.n	800293a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80028d8:	4b23      	ldr	r3, [pc, #140]	; (8002968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028e4:	d038      	beq.n	8002958 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028e6:	4b20      	ldr	r3, [pc, #128]	; (8002968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028ee:	4a1e      	ldr	r2, [pc, #120]	; (8002968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80028f6:	4b1d      	ldr	r3, [pc, #116]	; (800296c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2232      	movs	r2, #50	; 0x32
 80028fc:	fb02 f303 	mul.w	r3, r2, r3
 8002900:	4a1b      	ldr	r2, [pc, #108]	; (8002970 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002902:	fba2 2303 	umull	r2, r3, r2, r3
 8002906:	0c9b      	lsrs	r3, r3, #18
 8002908:	3301      	adds	r3, #1
 800290a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800290c:	e002      	b.n	8002914 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	3b01      	subs	r3, #1
 8002912:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002914:	4b14      	ldr	r3, [pc, #80]	; (8002968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800291c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002920:	d102      	bne.n	8002928 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1f2      	bne.n	800290e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002928:	4b0f      	ldr	r3, [pc, #60]	; (8002968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002934:	d110      	bne.n	8002958 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e00f      	b.n	800295a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800293a:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002946:	d007      	beq.n	8002958 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002948:	4b07      	ldr	r3, [pc, #28]	; (8002968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002950:	4a05      	ldr	r2, [pc, #20]	; (8002968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002952:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002956:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	40007000 	.word	0x40007000
 800296c:	20000000 	.word	0x20000000
 8002970:	431bde83 	.word	0x431bde83

08002974 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b088      	sub	sp, #32
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e3ca      	b.n	800311c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002986:	4b97      	ldr	r3, [pc, #604]	; (8002be4 <HAL_RCC_OscConfig+0x270>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 030c 	and.w	r3, r3, #12
 800298e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002990:	4b94      	ldr	r3, [pc, #592]	; (8002be4 <HAL_RCC_OscConfig+0x270>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	f003 0303 	and.w	r3, r3, #3
 8002998:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0310 	and.w	r3, r3, #16
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f000 80e4 	beq.w	8002b70 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d007      	beq.n	80029be <HAL_RCC_OscConfig+0x4a>
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	2b0c      	cmp	r3, #12
 80029b2:	f040 808b 	bne.w	8002acc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	f040 8087 	bne.w	8002acc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029be:	4b89      	ldr	r3, [pc, #548]	; (8002be4 <HAL_RCC_OscConfig+0x270>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d005      	beq.n	80029d6 <HAL_RCC_OscConfig+0x62>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e3a2      	b.n	800311c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a1a      	ldr	r2, [r3, #32]
 80029da:	4b82      	ldr	r3, [pc, #520]	; (8002be4 <HAL_RCC_OscConfig+0x270>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d004      	beq.n	80029f0 <HAL_RCC_OscConfig+0x7c>
 80029e6:	4b7f      	ldr	r3, [pc, #508]	; (8002be4 <HAL_RCC_OscConfig+0x270>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029ee:	e005      	b.n	80029fc <HAL_RCC_OscConfig+0x88>
 80029f0:	4b7c      	ldr	r3, [pc, #496]	; (8002be4 <HAL_RCC_OscConfig+0x270>)
 80029f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029f6:	091b      	lsrs	r3, r3, #4
 80029f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d223      	bcs.n	8002a48 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f000 fd55 	bl	80034b4 <RCC_SetFlashLatencyFromMSIRange>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e383      	b.n	800311c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a14:	4b73      	ldr	r3, [pc, #460]	; (8002be4 <HAL_RCC_OscConfig+0x270>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a72      	ldr	r2, [pc, #456]	; (8002be4 <HAL_RCC_OscConfig+0x270>)
 8002a1a:	f043 0308 	orr.w	r3, r3, #8
 8002a1e:	6013      	str	r3, [r2, #0]
 8002a20:	4b70      	ldr	r3, [pc, #448]	; (8002be4 <HAL_RCC_OscConfig+0x270>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	496d      	ldr	r1, [pc, #436]	; (8002be4 <HAL_RCC_OscConfig+0x270>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a32:	4b6c      	ldr	r3, [pc, #432]	; (8002be4 <HAL_RCC_OscConfig+0x270>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	021b      	lsls	r3, r3, #8
 8002a40:	4968      	ldr	r1, [pc, #416]	; (8002be4 <HAL_RCC_OscConfig+0x270>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	604b      	str	r3, [r1, #4]
 8002a46:	e025      	b.n	8002a94 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a48:	4b66      	ldr	r3, [pc, #408]	; (8002be4 <HAL_RCC_OscConfig+0x270>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a65      	ldr	r2, [pc, #404]	; (8002be4 <HAL_RCC_OscConfig+0x270>)
 8002a4e:	f043 0308 	orr.w	r3, r3, #8
 8002a52:	6013      	str	r3, [r2, #0]
 8002a54:	4b63      	ldr	r3, [pc, #396]	; (8002be4 <HAL_RCC_OscConfig+0x270>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	4960      	ldr	r1, [pc, #384]	; (8002be4 <HAL_RCC_OscConfig+0x270>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a66:	4b5f      	ldr	r3, [pc, #380]	; (8002be4 <HAL_RCC_OscConfig+0x270>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	021b      	lsls	r3, r3, #8
 8002a74:	495b      	ldr	r1, [pc, #364]	; (8002be4 <HAL_RCC_OscConfig+0x270>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d109      	bne.n	8002a94 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f000 fd15 	bl	80034b4 <RCC_SetFlashLatencyFromMSIRange>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e343      	b.n	800311c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a94:	f000 fc4a 	bl	800332c <HAL_RCC_GetSysClockFreq>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	4b52      	ldr	r3, [pc, #328]	; (8002be4 <HAL_RCC_OscConfig+0x270>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	091b      	lsrs	r3, r3, #4
 8002aa0:	f003 030f 	and.w	r3, r3, #15
 8002aa4:	4950      	ldr	r1, [pc, #320]	; (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002aa6:	5ccb      	ldrb	r3, [r1, r3]
 8002aa8:	f003 031f 	and.w	r3, r3, #31
 8002aac:	fa22 f303 	lsr.w	r3, r2, r3
 8002ab0:	4a4e      	ldr	r2, [pc, #312]	; (8002bec <HAL_RCC_OscConfig+0x278>)
 8002ab2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ab4:	4b4e      	ldr	r3, [pc, #312]	; (8002bf0 <HAL_RCC_OscConfig+0x27c>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7fe f9a7 	bl	8000e0c <HAL_InitTick>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ac2:	7bfb      	ldrb	r3, [r7, #15]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d052      	beq.n	8002b6e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
 8002aca:	e327      	b.n	800311c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d032      	beq.n	8002b3a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ad4:	4b43      	ldr	r3, [pc, #268]	; (8002be4 <HAL_RCC_OscConfig+0x270>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a42      	ldr	r2, [pc, #264]	; (8002be4 <HAL_RCC_OscConfig+0x270>)
 8002ada:	f043 0301 	orr.w	r3, r3, #1
 8002ade:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ae0:	f7fe f9e4 	bl	8000eac <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ae8:	f7fe f9e0 	bl	8000eac <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e310      	b.n	800311c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002afa:	4b3a      	ldr	r3, [pc, #232]	; (8002be4 <HAL_RCC_OscConfig+0x270>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0f0      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b06:	4b37      	ldr	r3, [pc, #220]	; (8002be4 <HAL_RCC_OscConfig+0x270>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a36      	ldr	r2, [pc, #216]	; (8002be4 <HAL_RCC_OscConfig+0x270>)
 8002b0c:	f043 0308 	orr.w	r3, r3, #8
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	4b34      	ldr	r3, [pc, #208]	; (8002be4 <HAL_RCC_OscConfig+0x270>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	4931      	ldr	r1, [pc, #196]	; (8002be4 <HAL_RCC_OscConfig+0x270>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b24:	4b2f      	ldr	r3, [pc, #188]	; (8002be4 <HAL_RCC_OscConfig+0x270>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	69db      	ldr	r3, [r3, #28]
 8002b30:	021b      	lsls	r3, r3, #8
 8002b32:	492c      	ldr	r1, [pc, #176]	; (8002be4 <HAL_RCC_OscConfig+0x270>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	604b      	str	r3, [r1, #4]
 8002b38:	e01a      	b.n	8002b70 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b3a:	4b2a      	ldr	r3, [pc, #168]	; (8002be4 <HAL_RCC_OscConfig+0x270>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a29      	ldr	r2, [pc, #164]	; (8002be4 <HAL_RCC_OscConfig+0x270>)
 8002b40:	f023 0301 	bic.w	r3, r3, #1
 8002b44:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b46:	f7fe f9b1 	bl	8000eac <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b4c:	e008      	b.n	8002b60 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b4e:	f7fe f9ad 	bl	8000eac <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e2dd      	b.n	800311c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b60:	4b20      	ldr	r3, [pc, #128]	; (8002be4 <HAL_RCC_OscConfig+0x270>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1f0      	bne.n	8002b4e <HAL_RCC_OscConfig+0x1da>
 8002b6c:	e000      	b.n	8002b70 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b6e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d074      	beq.n	8002c66 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	2b08      	cmp	r3, #8
 8002b80:	d005      	beq.n	8002b8e <HAL_RCC_OscConfig+0x21a>
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	2b0c      	cmp	r3, #12
 8002b86:	d10e      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	2b03      	cmp	r3, #3
 8002b8c:	d10b      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b8e:	4b15      	ldr	r3, [pc, #84]	; (8002be4 <HAL_RCC_OscConfig+0x270>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d064      	beq.n	8002c64 <HAL_RCC_OscConfig+0x2f0>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d160      	bne.n	8002c64 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e2ba      	b.n	800311c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bae:	d106      	bne.n	8002bbe <HAL_RCC_OscConfig+0x24a>
 8002bb0:	4b0c      	ldr	r3, [pc, #48]	; (8002be4 <HAL_RCC_OscConfig+0x270>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a0b      	ldr	r2, [pc, #44]	; (8002be4 <HAL_RCC_OscConfig+0x270>)
 8002bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bba:	6013      	str	r3, [r2, #0]
 8002bbc:	e026      	b.n	8002c0c <HAL_RCC_OscConfig+0x298>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bc6:	d115      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x280>
 8002bc8:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <HAL_RCC_OscConfig+0x270>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a05      	ldr	r2, [pc, #20]	; (8002be4 <HAL_RCC_OscConfig+0x270>)
 8002bce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bd2:	6013      	str	r3, [r2, #0]
 8002bd4:	4b03      	ldr	r3, [pc, #12]	; (8002be4 <HAL_RCC_OscConfig+0x270>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a02      	ldr	r2, [pc, #8]	; (8002be4 <HAL_RCC_OscConfig+0x270>)
 8002bda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bde:	6013      	str	r3, [r2, #0]
 8002be0:	e014      	b.n	8002c0c <HAL_RCC_OscConfig+0x298>
 8002be2:	bf00      	nop
 8002be4:	40021000 	.word	0x40021000
 8002be8:	08005a0c 	.word	0x08005a0c
 8002bec:	20000000 	.word	0x20000000
 8002bf0:	20000004 	.word	0x20000004
 8002bf4:	4ba0      	ldr	r3, [pc, #640]	; (8002e78 <HAL_RCC_OscConfig+0x504>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a9f      	ldr	r2, [pc, #636]	; (8002e78 <HAL_RCC_OscConfig+0x504>)
 8002bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bfe:	6013      	str	r3, [r2, #0]
 8002c00:	4b9d      	ldr	r3, [pc, #628]	; (8002e78 <HAL_RCC_OscConfig+0x504>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a9c      	ldr	r2, [pc, #624]	; (8002e78 <HAL_RCC_OscConfig+0x504>)
 8002c06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d013      	beq.n	8002c3c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c14:	f7fe f94a 	bl	8000eac <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c1c:	f7fe f946 	bl	8000eac <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b64      	cmp	r3, #100	; 0x64
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e276      	b.n	800311c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c2e:	4b92      	ldr	r3, [pc, #584]	; (8002e78 <HAL_RCC_OscConfig+0x504>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0f0      	beq.n	8002c1c <HAL_RCC_OscConfig+0x2a8>
 8002c3a:	e014      	b.n	8002c66 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3c:	f7fe f936 	bl	8000eac <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c44:	f7fe f932 	bl	8000eac <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b64      	cmp	r3, #100	; 0x64
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e262      	b.n	800311c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c56:	4b88      	ldr	r3, [pc, #544]	; (8002e78 <HAL_RCC_OscConfig+0x504>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f0      	bne.n	8002c44 <HAL_RCC_OscConfig+0x2d0>
 8002c62:	e000      	b.n	8002c66 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d060      	beq.n	8002d34 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d005      	beq.n	8002c84 <HAL_RCC_OscConfig+0x310>
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	2b0c      	cmp	r3, #12
 8002c7c:	d119      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d116      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c84:	4b7c      	ldr	r3, [pc, #496]	; (8002e78 <HAL_RCC_OscConfig+0x504>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d005      	beq.n	8002c9c <HAL_RCC_OscConfig+0x328>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d101      	bne.n	8002c9c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e23f      	b.n	800311c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c9c:	4b76      	ldr	r3, [pc, #472]	; (8002e78 <HAL_RCC_OscConfig+0x504>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	061b      	lsls	r3, r3, #24
 8002caa:	4973      	ldr	r1, [pc, #460]	; (8002e78 <HAL_RCC_OscConfig+0x504>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cb0:	e040      	b.n	8002d34 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d023      	beq.n	8002d02 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cba:	4b6f      	ldr	r3, [pc, #444]	; (8002e78 <HAL_RCC_OscConfig+0x504>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a6e      	ldr	r2, [pc, #440]	; (8002e78 <HAL_RCC_OscConfig+0x504>)
 8002cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc6:	f7fe f8f1 	bl	8000eac <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ccc:	e008      	b.n	8002ce0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cce:	f7fe f8ed 	bl	8000eac <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e21d      	b.n	800311c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ce0:	4b65      	ldr	r3, [pc, #404]	; (8002e78 <HAL_RCC_OscConfig+0x504>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d0f0      	beq.n	8002cce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cec:	4b62      	ldr	r3, [pc, #392]	; (8002e78 <HAL_RCC_OscConfig+0x504>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	061b      	lsls	r3, r3, #24
 8002cfa:	495f      	ldr	r1, [pc, #380]	; (8002e78 <HAL_RCC_OscConfig+0x504>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	604b      	str	r3, [r1, #4]
 8002d00:	e018      	b.n	8002d34 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d02:	4b5d      	ldr	r3, [pc, #372]	; (8002e78 <HAL_RCC_OscConfig+0x504>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a5c      	ldr	r2, [pc, #368]	; (8002e78 <HAL_RCC_OscConfig+0x504>)
 8002d08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0e:	f7fe f8cd 	bl	8000eac <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d14:	e008      	b.n	8002d28 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d16:	f7fe f8c9 	bl	8000eac <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e1f9      	b.n	800311c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d28:	4b53      	ldr	r3, [pc, #332]	; (8002e78 <HAL_RCC_OscConfig+0x504>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1f0      	bne.n	8002d16 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0308 	and.w	r3, r3, #8
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d03c      	beq.n	8002dba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d01c      	beq.n	8002d82 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d48:	4b4b      	ldr	r3, [pc, #300]	; (8002e78 <HAL_RCC_OscConfig+0x504>)
 8002d4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d4e:	4a4a      	ldr	r2, [pc, #296]	; (8002e78 <HAL_RCC_OscConfig+0x504>)
 8002d50:	f043 0301 	orr.w	r3, r3, #1
 8002d54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d58:	f7fe f8a8 	bl	8000eac <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d60:	f7fe f8a4 	bl	8000eac <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e1d4      	b.n	800311c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d72:	4b41      	ldr	r3, [pc, #260]	; (8002e78 <HAL_RCC_OscConfig+0x504>)
 8002d74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0ef      	beq.n	8002d60 <HAL_RCC_OscConfig+0x3ec>
 8002d80:	e01b      	b.n	8002dba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d82:	4b3d      	ldr	r3, [pc, #244]	; (8002e78 <HAL_RCC_OscConfig+0x504>)
 8002d84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d88:	4a3b      	ldr	r2, [pc, #236]	; (8002e78 <HAL_RCC_OscConfig+0x504>)
 8002d8a:	f023 0301 	bic.w	r3, r3, #1
 8002d8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d92:	f7fe f88b 	bl	8000eac <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d98:	e008      	b.n	8002dac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d9a:	f7fe f887 	bl	8000eac <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e1b7      	b.n	800311c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dac:	4b32      	ldr	r3, [pc, #200]	; (8002e78 <HAL_RCC_OscConfig+0x504>)
 8002dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1ef      	bne.n	8002d9a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0304 	and.w	r3, r3, #4
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 80a6 	beq.w	8002f14 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002dcc:	4b2a      	ldr	r3, [pc, #168]	; (8002e78 <HAL_RCC_OscConfig+0x504>)
 8002dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10d      	bne.n	8002df4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dd8:	4b27      	ldr	r3, [pc, #156]	; (8002e78 <HAL_RCC_OscConfig+0x504>)
 8002dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ddc:	4a26      	ldr	r2, [pc, #152]	; (8002e78 <HAL_RCC_OscConfig+0x504>)
 8002dde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de2:	6593      	str	r3, [r2, #88]	; 0x58
 8002de4:	4b24      	ldr	r3, [pc, #144]	; (8002e78 <HAL_RCC_OscConfig+0x504>)
 8002de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dec:	60bb      	str	r3, [r7, #8]
 8002dee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002df0:	2301      	movs	r3, #1
 8002df2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002df4:	4b21      	ldr	r3, [pc, #132]	; (8002e7c <HAL_RCC_OscConfig+0x508>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d118      	bne.n	8002e32 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e00:	4b1e      	ldr	r3, [pc, #120]	; (8002e7c <HAL_RCC_OscConfig+0x508>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a1d      	ldr	r2, [pc, #116]	; (8002e7c <HAL_RCC_OscConfig+0x508>)
 8002e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e0c:	f7fe f84e 	bl	8000eac <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e14:	f7fe f84a 	bl	8000eac <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e17a      	b.n	800311c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e26:	4b15      	ldr	r3, [pc, #84]	; (8002e7c <HAL_RCC_OscConfig+0x508>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0f0      	beq.n	8002e14 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d108      	bne.n	8002e4c <HAL_RCC_OscConfig+0x4d8>
 8002e3a:	4b0f      	ldr	r3, [pc, #60]	; (8002e78 <HAL_RCC_OscConfig+0x504>)
 8002e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e40:	4a0d      	ldr	r2, [pc, #52]	; (8002e78 <HAL_RCC_OscConfig+0x504>)
 8002e42:	f043 0301 	orr.w	r3, r3, #1
 8002e46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e4a:	e029      	b.n	8002ea0 <HAL_RCC_OscConfig+0x52c>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	2b05      	cmp	r3, #5
 8002e52:	d115      	bne.n	8002e80 <HAL_RCC_OscConfig+0x50c>
 8002e54:	4b08      	ldr	r3, [pc, #32]	; (8002e78 <HAL_RCC_OscConfig+0x504>)
 8002e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e5a:	4a07      	ldr	r2, [pc, #28]	; (8002e78 <HAL_RCC_OscConfig+0x504>)
 8002e5c:	f043 0304 	orr.w	r3, r3, #4
 8002e60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e64:	4b04      	ldr	r3, [pc, #16]	; (8002e78 <HAL_RCC_OscConfig+0x504>)
 8002e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6a:	4a03      	ldr	r2, [pc, #12]	; (8002e78 <HAL_RCC_OscConfig+0x504>)
 8002e6c:	f043 0301 	orr.w	r3, r3, #1
 8002e70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e74:	e014      	b.n	8002ea0 <HAL_RCC_OscConfig+0x52c>
 8002e76:	bf00      	nop
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	40007000 	.word	0x40007000
 8002e80:	4b9c      	ldr	r3, [pc, #624]	; (80030f4 <HAL_RCC_OscConfig+0x780>)
 8002e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e86:	4a9b      	ldr	r2, [pc, #620]	; (80030f4 <HAL_RCC_OscConfig+0x780>)
 8002e88:	f023 0301 	bic.w	r3, r3, #1
 8002e8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e90:	4b98      	ldr	r3, [pc, #608]	; (80030f4 <HAL_RCC_OscConfig+0x780>)
 8002e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e96:	4a97      	ldr	r2, [pc, #604]	; (80030f4 <HAL_RCC_OscConfig+0x780>)
 8002e98:	f023 0304 	bic.w	r3, r3, #4
 8002e9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d016      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea8:	f7fe f800 	bl	8000eac <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eae:	e00a      	b.n	8002ec6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb0:	f7fd fffc 	bl	8000eac <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e12a      	b.n	800311c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ec6:	4b8b      	ldr	r3, [pc, #556]	; (80030f4 <HAL_RCC_OscConfig+0x780>)
 8002ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d0ed      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x53c>
 8002ed4:	e015      	b.n	8002f02 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed6:	f7fd ffe9 	bl	8000eac <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002edc:	e00a      	b.n	8002ef4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ede:	f7fd ffe5 	bl	8000eac <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e113      	b.n	800311c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ef4:	4b7f      	ldr	r3, [pc, #508]	; (80030f4 <HAL_RCC_OscConfig+0x780>)
 8002ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1ed      	bne.n	8002ede <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f02:	7ffb      	ldrb	r3, [r7, #31]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d105      	bne.n	8002f14 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f08:	4b7a      	ldr	r3, [pc, #488]	; (80030f4 <HAL_RCC_OscConfig+0x780>)
 8002f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f0c:	4a79      	ldr	r2, [pc, #484]	; (80030f4 <HAL_RCC_OscConfig+0x780>)
 8002f0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f12:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 80fe 	beq.w	800311a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	f040 80d0 	bne.w	80030c8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f28:	4b72      	ldr	r3, [pc, #456]	; (80030f4 <HAL_RCC_OscConfig+0x780>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	f003 0203 	and.w	r2, r3, #3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d130      	bne.n	8002f9e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f46:	3b01      	subs	r3, #1
 8002f48:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d127      	bne.n	8002f9e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f58:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d11f      	bne.n	8002f9e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f68:	2a07      	cmp	r2, #7
 8002f6a:	bf14      	ite	ne
 8002f6c:	2201      	movne	r2, #1
 8002f6e:	2200      	moveq	r2, #0
 8002f70:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d113      	bne.n	8002f9e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f80:	085b      	lsrs	r3, r3, #1
 8002f82:	3b01      	subs	r3, #1
 8002f84:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d109      	bne.n	8002f9e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f94:	085b      	lsrs	r3, r3, #1
 8002f96:	3b01      	subs	r3, #1
 8002f98:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d06e      	beq.n	800307c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	2b0c      	cmp	r3, #12
 8002fa2:	d069      	beq.n	8003078 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002fa4:	4b53      	ldr	r3, [pc, #332]	; (80030f4 <HAL_RCC_OscConfig+0x780>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d105      	bne.n	8002fbc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002fb0:	4b50      	ldr	r3, [pc, #320]	; (80030f4 <HAL_RCC_OscConfig+0x780>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e0ad      	b.n	800311c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002fc0:	4b4c      	ldr	r3, [pc, #304]	; (80030f4 <HAL_RCC_OscConfig+0x780>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a4b      	ldr	r2, [pc, #300]	; (80030f4 <HAL_RCC_OscConfig+0x780>)
 8002fc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fca:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fcc:	f7fd ff6e 	bl	8000eac <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd4:	f7fd ff6a 	bl	8000eac <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e09a      	b.n	800311c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fe6:	4b43      	ldr	r3, [pc, #268]	; (80030f4 <HAL_RCC_OscConfig+0x780>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1f0      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ff2:	4b40      	ldr	r3, [pc, #256]	; (80030f4 <HAL_RCC_OscConfig+0x780>)
 8002ff4:	68da      	ldr	r2, [r3, #12]
 8002ff6:	4b40      	ldr	r3, [pc, #256]	; (80030f8 <HAL_RCC_OscConfig+0x784>)
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003002:	3a01      	subs	r2, #1
 8003004:	0112      	lsls	r2, r2, #4
 8003006:	4311      	orrs	r1, r2
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800300c:	0212      	lsls	r2, r2, #8
 800300e:	4311      	orrs	r1, r2
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003014:	0852      	lsrs	r2, r2, #1
 8003016:	3a01      	subs	r2, #1
 8003018:	0552      	lsls	r2, r2, #21
 800301a:	4311      	orrs	r1, r2
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003020:	0852      	lsrs	r2, r2, #1
 8003022:	3a01      	subs	r2, #1
 8003024:	0652      	lsls	r2, r2, #25
 8003026:	4311      	orrs	r1, r2
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800302c:	0912      	lsrs	r2, r2, #4
 800302e:	0452      	lsls	r2, r2, #17
 8003030:	430a      	orrs	r2, r1
 8003032:	4930      	ldr	r1, [pc, #192]	; (80030f4 <HAL_RCC_OscConfig+0x780>)
 8003034:	4313      	orrs	r3, r2
 8003036:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003038:	4b2e      	ldr	r3, [pc, #184]	; (80030f4 <HAL_RCC_OscConfig+0x780>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a2d      	ldr	r2, [pc, #180]	; (80030f4 <HAL_RCC_OscConfig+0x780>)
 800303e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003042:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003044:	4b2b      	ldr	r3, [pc, #172]	; (80030f4 <HAL_RCC_OscConfig+0x780>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	4a2a      	ldr	r2, [pc, #168]	; (80030f4 <HAL_RCC_OscConfig+0x780>)
 800304a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800304e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003050:	f7fd ff2c 	bl	8000eac <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003058:	f7fd ff28 	bl	8000eac <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e058      	b.n	800311c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800306a:	4b22      	ldr	r3, [pc, #136]	; (80030f4 <HAL_RCC_OscConfig+0x780>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d0f0      	beq.n	8003058 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003076:	e050      	b.n	800311a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e04f      	b.n	800311c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800307c:	4b1d      	ldr	r3, [pc, #116]	; (80030f4 <HAL_RCC_OscConfig+0x780>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d148      	bne.n	800311a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003088:	4b1a      	ldr	r3, [pc, #104]	; (80030f4 <HAL_RCC_OscConfig+0x780>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a19      	ldr	r2, [pc, #100]	; (80030f4 <HAL_RCC_OscConfig+0x780>)
 800308e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003092:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003094:	4b17      	ldr	r3, [pc, #92]	; (80030f4 <HAL_RCC_OscConfig+0x780>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	4a16      	ldr	r2, [pc, #88]	; (80030f4 <HAL_RCC_OscConfig+0x780>)
 800309a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800309e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030a0:	f7fd ff04 	bl	8000eac <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a8:	f7fd ff00 	bl	8000eac <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e030      	b.n	800311c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ba:	4b0e      	ldr	r3, [pc, #56]	; (80030f4 <HAL_RCC_OscConfig+0x780>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0f0      	beq.n	80030a8 <HAL_RCC_OscConfig+0x734>
 80030c6:	e028      	b.n	800311a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	2b0c      	cmp	r3, #12
 80030cc:	d023      	beq.n	8003116 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ce:	4b09      	ldr	r3, [pc, #36]	; (80030f4 <HAL_RCC_OscConfig+0x780>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a08      	ldr	r2, [pc, #32]	; (80030f4 <HAL_RCC_OscConfig+0x780>)
 80030d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030da:	f7fd fee7 	bl	8000eac <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030e0:	e00c      	b.n	80030fc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e2:	f7fd fee3 	bl	8000eac <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d905      	bls.n	80030fc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e013      	b.n	800311c <HAL_RCC_OscConfig+0x7a8>
 80030f4:	40021000 	.word	0x40021000
 80030f8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030fc:	4b09      	ldr	r3, [pc, #36]	; (8003124 <HAL_RCC_OscConfig+0x7b0>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1ec      	bne.n	80030e2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003108:	4b06      	ldr	r3, [pc, #24]	; (8003124 <HAL_RCC_OscConfig+0x7b0>)
 800310a:	68da      	ldr	r2, [r3, #12]
 800310c:	4905      	ldr	r1, [pc, #20]	; (8003124 <HAL_RCC_OscConfig+0x7b0>)
 800310e:	4b06      	ldr	r3, [pc, #24]	; (8003128 <HAL_RCC_OscConfig+0x7b4>)
 8003110:	4013      	ands	r3, r2
 8003112:	60cb      	str	r3, [r1, #12]
 8003114:	e001      	b.n	800311a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e000      	b.n	800311c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3720      	adds	r7, #32
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40021000 	.word	0x40021000
 8003128:	feeefffc 	.word	0xfeeefffc

0800312c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e0e7      	b.n	8003310 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003140:	4b75      	ldr	r3, [pc, #468]	; (8003318 <HAL_RCC_ClockConfig+0x1ec>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0307 	and.w	r3, r3, #7
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d910      	bls.n	8003170 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800314e:	4b72      	ldr	r3, [pc, #456]	; (8003318 <HAL_RCC_ClockConfig+0x1ec>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f023 0207 	bic.w	r2, r3, #7
 8003156:	4970      	ldr	r1, [pc, #448]	; (8003318 <HAL_RCC_ClockConfig+0x1ec>)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	4313      	orrs	r3, r2
 800315c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800315e:	4b6e      	ldr	r3, [pc, #440]	; (8003318 <HAL_RCC_ClockConfig+0x1ec>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0307 	and.w	r3, r3, #7
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	429a      	cmp	r2, r3
 800316a:	d001      	beq.n	8003170 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e0cf      	b.n	8003310 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d010      	beq.n	800319e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	4b66      	ldr	r3, [pc, #408]	; (800331c <HAL_RCC_ClockConfig+0x1f0>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003188:	429a      	cmp	r2, r3
 800318a:	d908      	bls.n	800319e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800318c:	4b63      	ldr	r3, [pc, #396]	; (800331c <HAL_RCC_ClockConfig+0x1f0>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	4960      	ldr	r1, [pc, #384]	; (800331c <HAL_RCC_ClockConfig+0x1f0>)
 800319a:	4313      	orrs	r3, r2
 800319c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d04c      	beq.n	8003244 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2b03      	cmp	r3, #3
 80031b0:	d107      	bne.n	80031c2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031b2:	4b5a      	ldr	r3, [pc, #360]	; (800331c <HAL_RCC_ClockConfig+0x1f0>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d121      	bne.n	8003202 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e0a6      	b.n	8003310 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d107      	bne.n	80031da <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031ca:	4b54      	ldr	r3, [pc, #336]	; (800331c <HAL_RCC_ClockConfig+0x1f0>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d115      	bne.n	8003202 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e09a      	b.n	8003310 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d107      	bne.n	80031f2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031e2:	4b4e      	ldr	r3, [pc, #312]	; (800331c <HAL_RCC_ClockConfig+0x1f0>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d109      	bne.n	8003202 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e08e      	b.n	8003310 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031f2:	4b4a      	ldr	r3, [pc, #296]	; (800331c <HAL_RCC_ClockConfig+0x1f0>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e086      	b.n	8003310 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003202:	4b46      	ldr	r3, [pc, #280]	; (800331c <HAL_RCC_ClockConfig+0x1f0>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f023 0203 	bic.w	r2, r3, #3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	4943      	ldr	r1, [pc, #268]	; (800331c <HAL_RCC_ClockConfig+0x1f0>)
 8003210:	4313      	orrs	r3, r2
 8003212:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003214:	f7fd fe4a 	bl	8000eac <HAL_GetTick>
 8003218:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800321a:	e00a      	b.n	8003232 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800321c:	f7fd fe46 	bl	8000eac <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	f241 3288 	movw	r2, #5000	; 0x1388
 800322a:	4293      	cmp	r3, r2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e06e      	b.n	8003310 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003232:	4b3a      	ldr	r3, [pc, #232]	; (800331c <HAL_RCC_ClockConfig+0x1f0>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 020c 	and.w	r2, r3, #12
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	429a      	cmp	r2, r3
 8003242:	d1eb      	bne.n	800321c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d010      	beq.n	8003272 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	4b31      	ldr	r3, [pc, #196]	; (800331c <HAL_RCC_ClockConfig+0x1f0>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800325c:	429a      	cmp	r2, r3
 800325e:	d208      	bcs.n	8003272 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003260:	4b2e      	ldr	r3, [pc, #184]	; (800331c <HAL_RCC_ClockConfig+0x1f0>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	492b      	ldr	r1, [pc, #172]	; (800331c <HAL_RCC_ClockConfig+0x1f0>)
 800326e:	4313      	orrs	r3, r2
 8003270:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003272:	4b29      	ldr	r3, [pc, #164]	; (8003318 <HAL_RCC_ClockConfig+0x1ec>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0307 	and.w	r3, r3, #7
 800327a:	683a      	ldr	r2, [r7, #0]
 800327c:	429a      	cmp	r2, r3
 800327e:	d210      	bcs.n	80032a2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003280:	4b25      	ldr	r3, [pc, #148]	; (8003318 <HAL_RCC_ClockConfig+0x1ec>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f023 0207 	bic.w	r2, r3, #7
 8003288:	4923      	ldr	r1, [pc, #140]	; (8003318 <HAL_RCC_ClockConfig+0x1ec>)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	4313      	orrs	r3, r2
 800328e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003290:	4b21      	ldr	r3, [pc, #132]	; (8003318 <HAL_RCC_ClockConfig+0x1ec>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0307 	and.w	r3, r3, #7
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	429a      	cmp	r2, r3
 800329c:	d001      	beq.n	80032a2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e036      	b.n	8003310 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0304 	and.w	r3, r3, #4
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d008      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032ae:	4b1b      	ldr	r3, [pc, #108]	; (800331c <HAL_RCC_ClockConfig+0x1f0>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	4918      	ldr	r1, [pc, #96]	; (800331c <HAL_RCC_ClockConfig+0x1f0>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0308 	and.w	r3, r3, #8
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d009      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032cc:	4b13      	ldr	r3, [pc, #76]	; (800331c <HAL_RCC_ClockConfig+0x1f0>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	4910      	ldr	r1, [pc, #64]	; (800331c <HAL_RCC_ClockConfig+0x1f0>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032e0:	f000 f824 	bl	800332c <HAL_RCC_GetSysClockFreq>
 80032e4:	4602      	mov	r2, r0
 80032e6:	4b0d      	ldr	r3, [pc, #52]	; (800331c <HAL_RCC_ClockConfig+0x1f0>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	091b      	lsrs	r3, r3, #4
 80032ec:	f003 030f 	and.w	r3, r3, #15
 80032f0:	490b      	ldr	r1, [pc, #44]	; (8003320 <HAL_RCC_ClockConfig+0x1f4>)
 80032f2:	5ccb      	ldrb	r3, [r1, r3]
 80032f4:	f003 031f 	and.w	r3, r3, #31
 80032f8:	fa22 f303 	lsr.w	r3, r2, r3
 80032fc:	4a09      	ldr	r2, [pc, #36]	; (8003324 <HAL_RCC_ClockConfig+0x1f8>)
 80032fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003300:	4b09      	ldr	r3, [pc, #36]	; (8003328 <HAL_RCC_ClockConfig+0x1fc>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f7fd fd81 	bl	8000e0c <HAL_InitTick>
 800330a:	4603      	mov	r3, r0
 800330c:	72fb      	strb	r3, [r7, #11]

  return status;
 800330e:	7afb      	ldrb	r3, [r7, #11]
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40022000 	.word	0x40022000
 800331c:	40021000 	.word	0x40021000
 8003320:	08005a0c 	.word	0x08005a0c
 8003324:	20000000 	.word	0x20000000
 8003328:	20000004 	.word	0x20000004

0800332c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800332c:	b480      	push	{r7}
 800332e:	b089      	sub	sp, #36	; 0x24
 8003330:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003332:	2300      	movs	r3, #0
 8003334:	61fb      	str	r3, [r7, #28]
 8003336:	2300      	movs	r3, #0
 8003338:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800333a:	4b3e      	ldr	r3, [pc, #248]	; (8003434 <HAL_RCC_GetSysClockFreq+0x108>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 030c 	and.w	r3, r3, #12
 8003342:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003344:	4b3b      	ldr	r3, [pc, #236]	; (8003434 <HAL_RCC_GetSysClockFreq+0x108>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	f003 0303 	and.w	r3, r3, #3
 800334c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d005      	beq.n	8003360 <HAL_RCC_GetSysClockFreq+0x34>
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	2b0c      	cmp	r3, #12
 8003358:	d121      	bne.n	800339e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d11e      	bne.n	800339e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003360:	4b34      	ldr	r3, [pc, #208]	; (8003434 <HAL_RCC_GetSysClockFreq+0x108>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0308 	and.w	r3, r3, #8
 8003368:	2b00      	cmp	r3, #0
 800336a:	d107      	bne.n	800337c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800336c:	4b31      	ldr	r3, [pc, #196]	; (8003434 <HAL_RCC_GetSysClockFreq+0x108>)
 800336e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003372:	0a1b      	lsrs	r3, r3, #8
 8003374:	f003 030f 	and.w	r3, r3, #15
 8003378:	61fb      	str	r3, [r7, #28]
 800337a:	e005      	b.n	8003388 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800337c:	4b2d      	ldr	r3, [pc, #180]	; (8003434 <HAL_RCC_GetSysClockFreq+0x108>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	091b      	lsrs	r3, r3, #4
 8003382:	f003 030f 	and.w	r3, r3, #15
 8003386:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003388:	4a2b      	ldr	r2, [pc, #172]	; (8003438 <HAL_RCC_GetSysClockFreq+0x10c>)
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003390:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10d      	bne.n	80033b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800339c:	e00a      	b.n	80033b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	2b04      	cmp	r3, #4
 80033a2:	d102      	bne.n	80033aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033a4:	4b25      	ldr	r3, [pc, #148]	; (800343c <HAL_RCC_GetSysClockFreq+0x110>)
 80033a6:	61bb      	str	r3, [r7, #24]
 80033a8:	e004      	b.n	80033b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	d101      	bne.n	80033b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033b0:	4b23      	ldr	r3, [pc, #140]	; (8003440 <HAL_RCC_GetSysClockFreq+0x114>)
 80033b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	2b0c      	cmp	r3, #12
 80033b8:	d134      	bne.n	8003424 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033ba:	4b1e      	ldr	r3, [pc, #120]	; (8003434 <HAL_RCC_GetSysClockFreq+0x108>)
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	f003 0303 	and.w	r3, r3, #3
 80033c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d003      	beq.n	80033d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	2b03      	cmp	r3, #3
 80033ce:	d003      	beq.n	80033d8 <HAL_RCC_GetSysClockFreq+0xac>
 80033d0:	e005      	b.n	80033de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80033d2:	4b1a      	ldr	r3, [pc, #104]	; (800343c <HAL_RCC_GetSysClockFreq+0x110>)
 80033d4:	617b      	str	r3, [r7, #20]
      break;
 80033d6:	e005      	b.n	80033e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80033d8:	4b19      	ldr	r3, [pc, #100]	; (8003440 <HAL_RCC_GetSysClockFreq+0x114>)
 80033da:	617b      	str	r3, [r7, #20]
      break;
 80033dc:	e002      	b.n	80033e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	617b      	str	r3, [r7, #20]
      break;
 80033e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033e4:	4b13      	ldr	r3, [pc, #76]	; (8003434 <HAL_RCC_GetSysClockFreq+0x108>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	091b      	lsrs	r3, r3, #4
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	3301      	adds	r3, #1
 80033f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80033f2:	4b10      	ldr	r3, [pc, #64]	; (8003434 <HAL_RCC_GetSysClockFreq+0x108>)
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	0a1b      	lsrs	r3, r3, #8
 80033f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	fb03 f202 	mul.w	r2, r3, r2
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	fbb2 f3f3 	udiv	r3, r2, r3
 8003408:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800340a:	4b0a      	ldr	r3, [pc, #40]	; (8003434 <HAL_RCC_GetSysClockFreq+0x108>)
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	0e5b      	lsrs	r3, r3, #25
 8003410:	f003 0303 	and.w	r3, r3, #3
 8003414:	3301      	adds	r3, #1
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003422:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003424:	69bb      	ldr	r3, [r7, #24]
}
 8003426:	4618      	mov	r0, r3
 8003428:	3724      	adds	r7, #36	; 0x24
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	40021000 	.word	0x40021000
 8003438:	08005a24 	.word	0x08005a24
 800343c:	00f42400 	.word	0x00f42400
 8003440:	007a1200 	.word	0x007a1200

08003444 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003448:	4b03      	ldr	r3, [pc, #12]	; (8003458 <HAL_RCC_GetHCLKFreq+0x14>)
 800344a:	681b      	ldr	r3, [r3, #0]
}
 800344c:	4618      	mov	r0, r3
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	20000000 	.word	0x20000000

0800345c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003460:	f7ff fff0 	bl	8003444 <HAL_RCC_GetHCLKFreq>
 8003464:	4602      	mov	r2, r0
 8003466:	4b06      	ldr	r3, [pc, #24]	; (8003480 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	0a1b      	lsrs	r3, r3, #8
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	4904      	ldr	r1, [pc, #16]	; (8003484 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003472:	5ccb      	ldrb	r3, [r1, r3]
 8003474:	f003 031f 	and.w	r3, r3, #31
 8003478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800347c:	4618      	mov	r0, r3
 800347e:	bd80      	pop	{r7, pc}
 8003480:	40021000 	.word	0x40021000
 8003484:	08005a1c 	.word	0x08005a1c

08003488 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800348c:	f7ff ffda 	bl	8003444 <HAL_RCC_GetHCLKFreq>
 8003490:	4602      	mov	r2, r0
 8003492:	4b06      	ldr	r3, [pc, #24]	; (80034ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	0adb      	lsrs	r3, r3, #11
 8003498:	f003 0307 	and.w	r3, r3, #7
 800349c:	4904      	ldr	r1, [pc, #16]	; (80034b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800349e:	5ccb      	ldrb	r3, [r1, r3]
 80034a0:	f003 031f 	and.w	r3, r3, #31
 80034a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	40021000 	.word	0x40021000
 80034b0:	08005a1c 	.word	0x08005a1c

080034b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80034bc:	2300      	movs	r3, #0
 80034be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80034c0:	4b2a      	ldr	r3, [pc, #168]	; (800356c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80034cc:	f7ff f9ee 	bl	80028ac <HAL_PWREx_GetVoltageRange>
 80034d0:	6178      	str	r0, [r7, #20]
 80034d2:	e014      	b.n	80034fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80034d4:	4b25      	ldr	r3, [pc, #148]	; (800356c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d8:	4a24      	ldr	r2, [pc, #144]	; (800356c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034de:	6593      	str	r3, [r2, #88]	; 0x58
 80034e0:	4b22      	ldr	r3, [pc, #136]	; (800356c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80034ec:	f7ff f9de 	bl	80028ac <HAL_PWREx_GetVoltageRange>
 80034f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80034f2:	4b1e      	ldr	r3, [pc, #120]	; (800356c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f6:	4a1d      	ldr	r2, [pc, #116]	; (800356c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034fc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003504:	d10b      	bne.n	800351e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b80      	cmp	r3, #128	; 0x80
 800350a:	d919      	bls.n	8003540 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2ba0      	cmp	r3, #160	; 0xa0
 8003510:	d902      	bls.n	8003518 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003512:	2302      	movs	r3, #2
 8003514:	613b      	str	r3, [r7, #16]
 8003516:	e013      	b.n	8003540 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003518:	2301      	movs	r3, #1
 800351a:	613b      	str	r3, [r7, #16]
 800351c:	e010      	b.n	8003540 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b80      	cmp	r3, #128	; 0x80
 8003522:	d902      	bls.n	800352a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003524:	2303      	movs	r3, #3
 8003526:	613b      	str	r3, [r7, #16]
 8003528:	e00a      	b.n	8003540 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b80      	cmp	r3, #128	; 0x80
 800352e:	d102      	bne.n	8003536 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003530:	2302      	movs	r3, #2
 8003532:	613b      	str	r3, [r7, #16]
 8003534:	e004      	b.n	8003540 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2b70      	cmp	r3, #112	; 0x70
 800353a:	d101      	bne.n	8003540 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800353c:	2301      	movs	r3, #1
 800353e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003540:	4b0b      	ldr	r3, [pc, #44]	; (8003570 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f023 0207 	bic.w	r2, r3, #7
 8003548:	4909      	ldr	r1, [pc, #36]	; (8003570 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	4313      	orrs	r3, r2
 800354e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003550:	4b07      	ldr	r3, [pc, #28]	; (8003570 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0307 	and.w	r3, r3, #7
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	429a      	cmp	r2, r3
 800355c:	d001      	beq.n	8003562 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e000      	b.n	8003564 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3718      	adds	r7, #24
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40021000 	.word	0x40021000
 8003570:	40022000 	.word	0x40022000

08003574 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800357c:	2300      	movs	r3, #0
 800357e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003580:	2300      	movs	r3, #0
 8003582:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800358c:	2b00      	cmp	r3, #0
 800358e:	d041      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003594:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003598:	d02a      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800359a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800359e:	d824      	bhi.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035a4:	d008      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80035a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035aa:	d81e      	bhi.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00a      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80035b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035b4:	d010      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80035b6:	e018      	b.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035b8:	4b86      	ldr	r3, [pc, #536]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	4a85      	ldr	r2, [pc, #532]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035c4:	e015      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	3304      	adds	r3, #4
 80035ca:	2100      	movs	r1, #0
 80035cc:	4618      	mov	r0, r3
 80035ce:	f000 fabb 	bl	8003b48 <RCCEx_PLLSAI1_Config>
 80035d2:	4603      	mov	r3, r0
 80035d4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035d6:	e00c      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3320      	adds	r3, #32
 80035dc:	2100      	movs	r1, #0
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 fba6 	bl	8003d30 <RCCEx_PLLSAI2_Config>
 80035e4:	4603      	mov	r3, r0
 80035e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035e8:	e003      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	74fb      	strb	r3, [r7, #19]
      break;
 80035ee:	e000      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80035f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035f2:	7cfb      	ldrb	r3, [r7, #19]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10b      	bne.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035f8:	4b76      	ldr	r3, [pc, #472]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003606:	4973      	ldr	r1, [pc, #460]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003608:	4313      	orrs	r3, r2
 800360a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800360e:	e001      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003610:	7cfb      	ldrb	r3, [r7, #19]
 8003612:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d041      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003624:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003628:	d02a      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800362a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800362e:	d824      	bhi.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003630:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003634:	d008      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003636:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800363a:	d81e      	bhi.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00a      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003640:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003644:	d010      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003646:	e018      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003648:	4b62      	ldr	r3, [pc, #392]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	4a61      	ldr	r2, [pc, #388]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800364e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003652:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003654:	e015      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	3304      	adds	r3, #4
 800365a:	2100      	movs	r1, #0
 800365c:	4618      	mov	r0, r3
 800365e:	f000 fa73 	bl	8003b48 <RCCEx_PLLSAI1_Config>
 8003662:	4603      	mov	r3, r0
 8003664:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003666:	e00c      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3320      	adds	r3, #32
 800366c:	2100      	movs	r1, #0
 800366e:	4618      	mov	r0, r3
 8003670:	f000 fb5e 	bl	8003d30 <RCCEx_PLLSAI2_Config>
 8003674:	4603      	mov	r3, r0
 8003676:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003678:	e003      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	74fb      	strb	r3, [r7, #19]
      break;
 800367e:	e000      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003680:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003682:	7cfb      	ldrb	r3, [r7, #19]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10b      	bne.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003688:	4b52      	ldr	r3, [pc, #328]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800368a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800368e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003696:	494f      	ldr	r1, [pc, #316]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003698:	4313      	orrs	r3, r2
 800369a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800369e:	e001      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a0:	7cfb      	ldrb	r3, [r7, #19]
 80036a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 80a0 	beq.w	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036b2:	2300      	movs	r3, #0
 80036b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036b6:	4b47      	ldr	r3, [pc, #284]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80036c2:	2301      	movs	r3, #1
 80036c4:	e000      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80036c6:	2300      	movs	r3, #0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00d      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036cc:	4b41      	ldr	r3, [pc, #260]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d0:	4a40      	ldr	r2, [pc, #256]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036d6:	6593      	str	r3, [r2, #88]	; 0x58
 80036d8:	4b3e      	ldr	r3, [pc, #248]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e0:	60bb      	str	r3, [r7, #8]
 80036e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036e4:	2301      	movs	r3, #1
 80036e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036e8:	4b3b      	ldr	r3, [pc, #236]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a3a      	ldr	r2, [pc, #232]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036f4:	f7fd fbda 	bl	8000eac <HAL_GetTick>
 80036f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036fa:	e009      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036fc:	f7fd fbd6 	bl	8000eac <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d902      	bls.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	74fb      	strb	r3, [r7, #19]
        break;
 800370e:	e005      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003710:	4b31      	ldr	r3, [pc, #196]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0ef      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800371c:	7cfb      	ldrb	r3, [r7, #19]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d15c      	bne.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003722:	4b2c      	ldr	r3, [pc, #176]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003728:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800372c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d01f      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	429a      	cmp	r2, r3
 800373e:	d019      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003740:	4b24      	ldr	r3, [pc, #144]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800374a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800374c:	4b21      	ldr	r3, [pc, #132]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800374e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003752:	4a20      	ldr	r2, [pc, #128]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003758:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800375c:	4b1d      	ldr	r3, [pc, #116]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800375e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003762:	4a1c      	ldr	r2, [pc, #112]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003764:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003768:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800376c:	4a19      	ldr	r2, [pc, #100]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d016      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377e:	f7fd fb95 	bl	8000eac <HAL_GetTick>
 8003782:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003784:	e00b      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003786:	f7fd fb91 	bl	8000eac <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	f241 3288 	movw	r2, #5000	; 0x1388
 8003794:	4293      	cmp	r3, r2
 8003796:	d902      	bls.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	74fb      	strb	r3, [r7, #19]
            break;
 800379c:	e006      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800379e:	4b0d      	ldr	r3, [pc, #52]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0ec      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80037ac:	7cfb      	ldrb	r3, [r7, #19]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10c      	bne.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037b2:	4b08      	ldr	r3, [pc, #32]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037c2:	4904      	ldr	r1, [pc, #16]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80037ca:	e009      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037cc:	7cfb      	ldrb	r3, [r7, #19]
 80037ce:	74bb      	strb	r3, [r7, #18]
 80037d0:	e006      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80037d2:	bf00      	nop
 80037d4:	40021000 	.word	0x40021000
 80037d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037dc:	7cfb      	ldrb	r3, [r7, #19]
 80037de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037e0:	7c7b      	ldrb	r3, [r7, #17]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d105      	bne.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037e6:	4b9e      	ldr	r3, [pc, #632]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ea:	4a9d      	ldr	r2, [pc, #628]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00a      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037fe:	4b98      	ldr	r3, [pc, #608]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003804:	f023 0203 	bic.w	r2, r3, #3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380c:	4994      	ldr	r1, [pc, #592]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800380e:	4313      	orrs	r3, r2
 8003810:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00a      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003820:	4b8f      	ldr	r3, [pc, #572]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003826:	f023 020c 	bic.w	r2, r3, #12
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382e:	498c      	ldr	r1, [pc, #560]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003830:	4313      	orrs	r3, r2
 8003832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0304 	and.w	r3, r3, #4
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00a      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003842:	4b87      	ldr	r3, [pc, #540]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003848:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003850:	4983      	ldr	r1, [pc, #524]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003852:	4313      	orrs	r3, r2
 8003854:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0308 	and.w	r3, r3, #8
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00a      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003864:	4b7e      	ldr	r3, [pc, #504]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003872:	497b      	ldr	r1, [pc, #492]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003874:	4313      	orrs	r3, r2
 8003876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0310 	and.w	r3, r3, #16
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00a      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003886:	4b76      	ldr	r3, [pc, #472]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003894:	4972      	ldr	r1, [pc, #456]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003896:	4313      	orrs	r3, r2
 8003898:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0320 	and.w	r3, r3, #32
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00a      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038a8:	4b6d      	ldr	r3, [pc, #436]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038b6:	496a      	ldr	r1, [pc, #424]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00a      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038ca:	4b65      	ldr	r3, [pc, #404]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d8:	4961      	ldr	r1, [pc, #388]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00a      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038ec:	4b5c      	ldr	r3, [pc, #368]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038fa:	4959      	ldr	r1, [pc, #356]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00a      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800390e:	4b54      	ldr	r3, [pc, #336]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003914:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800391c:	4950      	ldr	r1, [pc, #320]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800391e:	4313      	orrs	r3, r2
 8003920:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00a      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003930:	4b4b      	ldr	r3, [pc, #300]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003936:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393e:	4948      	ldr	r1, [pc, #288]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003940:	4313      	orrs	r3, r2
 8003942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00a      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003952:	4b43      	ldr	r3, [pc, #268]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003958:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003960:	493f      	ldr	r1, [pc, #252]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003962:	4313      	orrs	r3, r2
 8003964:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d028      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003974:	4b3a      	ldr	r3, [pc, #232]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003982:	4937      	ldr	r1, [pc, #220]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003984:	4313      	orrs	r3, r2
 8003986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800398e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003992:	d106      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003994:	4b32      	ldr	r3, [pc, #200]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	4a31      	ldr	r2, [pc, #196]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800399a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800399e:	60d3      	str	r3, [r2, #12]
 80039a0:	e011      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039aa:	d10c      	bne.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3304      	adds	r3, #4
 80039b0:	2101      	movs	r1, #1
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 f8c8 	bl	8003b48 <RCCEx_PLLSAI1_Config>
 80039b8:	4603      	mov	r3, r0
 80039ba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80039bc:	7cfb      	ldrb	r3, [r7, #19]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80039c2:	7cfb      	ldrb	r3, [r7, #19]
 80039c4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d028      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80039d2:	4b23      	ldr	r3, [pc, #140]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e0:	491f      	ldr	r1, [pc, #124]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039f0:	d106      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039f2:	4b1b      	ldr	r3, [pc, #108]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	4a1a      	ldr	r2, [pc, #104]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039fc:	60d3      	str	r3, [r2, #12]
 80039fe:	e011      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a08:	d10c      	bne.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	2101      	movs	r1, #1
 8003a10:	4618      	mov	r0, r3
 8003a12:	f000 f899 	bl	8003b48 <RCCEx_PLLSAI1_Config>
 8003a16:	4603      	mov	r3, r0
 8003a18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a1a:	7cfb      	ldrb	r3, [r7, #19]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003a20:	7cfb      	ldrb	r3, [r7, #19]
 8003a22:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d02b      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a30:	4b0b      	ldr	r3, [pc, #44]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a3e:	4908      	ldr	r1, [pc, #32]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a4e:	d109      	bne.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a50:	4b03      	ldr	r3, [pc, #12]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	4a02      	ldr	r2, [pc, #8]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a5a:	60d3      	str	r3, [r2, #12]
 8003a5c:	e014      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003a5e:	bf00      	nop
 8003a60:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a6c:	d10c      	bne.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	3304      	adds	r3, #4
 8003a72:	2101      	movs	r1, #1
 8003a74:	4618      	mov	r0, r3
 8003a76:	f000 f867 	bl	8003b48 <RCCEx_PLLSAI1_Config>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a7e:	7cfb      	ldrb	r3, [r7, #19]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003a84:	7cfb      	ldrb	r3, [r7, #19]
 8003a86:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d02f      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a94:	4b2b      	ldr	r3, [pc, #172]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003aa2:	4928      	ldr	r1, [pc, #160]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003aae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ab2:	d10d      	bne.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	3304      	adds	r3, #4
 8003ab8:	2102      	movs	r1, #2
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 f844 	bl	8003b48 <RCCEx_PLLSAI1_Config>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ac4:	7cfb      	ldrb	r3, [r7, #19]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d014      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003aca:	7cfb      	ldrb	r3, [r7, #19]
 8003acc:	74bb      	strb	r3, [r7, #18]
 8003ace:	e011      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ad4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ad8:	d10c      	bne.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	3320      	adds	r3, #32
 8003ade:	2102      	movs	r1, #2
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f000 f925 	bl	8003d30 <RCCEx_PLLSAI2_Config>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003aea:	7cfb      	ldrb	r3, [r7, #19]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003af0:	7cfb      	ldrb	r3, [r7, #19]
 8003af2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00a      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b00:	4b10      	ldr	r3, [pc, #64]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b06:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b0e:	490d      	ldr	r1, [pc, #52]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00b      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b22:	4b08      	ldr	r3, [pc, #32]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b28:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b32:	4904      	ldr	r1, [pc, #16]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b3a:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3718      	adds	r7, #24
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40021000 	.word	0x40021000

08003b48 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b56:	4b75      	ldr	r3, [pc, #468]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	f003 0303 	and.w	r3, r3, #3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d018      	beq.n	8003b94 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b62:	4b72      	ldr	r3, [pc, #456]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	f003 0203 	and.w	r2, r3, #3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d10d      	bne.n	8003b8e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
       ||
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d009      	beq.n	8003b8e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003b7a:	4b6c      	ldr	r3, [pc, #432]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	091b      	lsrs	r3, r3, #4
 8003b80:	f003 0307 	and.w	r3, r3, #7
 8003b84:	1c5a      	adds	r2, r3, #1
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
       ||
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d047      	beq.n	8003c1e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	73fb      	strb	r3, [r7, #15]
 8003b92:	e044      	b.n	8003c1e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b03      	cmp	r3, #3
 8003b9a:	d018      	beq.n	8003bce <RCCEx_PLLSAI1_Config+0x86>
 8003b9c:	2b03      	cmp	r3, #3
 8003b9e:	d825      	bhi.n	8003bec <RCCEx_PLLSAI1_Config+0xa4>
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d002      	beq.n	8003baa <RCCEx_PLLSAI1_Config+0x62>
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d009      	beq.n	8003bbc <RCCEx_PLLSAI1_Config+0x74>
 8003ba8:	e020      	b.n	8003bec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003baa:	4b60      	ldr	r3, [pc, #384]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d11d      	bne.n	8003bf2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bba:	e01a      	b.n	8003bf2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003bbc:	4b5b      	ldr	r3, [pc, #364]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d116      	bne.n	8003bf6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bcc:	e013      	b.n	8003bf6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003bce:	4b57      	ldr	r3, [pc, #348]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10f      	bne.n	8003bfa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003bda:	4b54      	ldr	r3, [pc, #336]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d109      	bne.n	8003bfa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bea:	e006      	b.n	8003bfa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	73fb      	strb	r3, [r7, #15]
      break;
 8003bf0:	e004      	b.n	8003bfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bf2:	bf00      	nop
 8003bf4:	e002      	b.n	8003bfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bf6:	bf00      	nop
 8003bf8:	e000      	b.n	8003bfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bfa:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bfc:	7bfb      	ldrb	r3, [r7, #15]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10d      	bne.n	8003c1e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c02:	4b4a      	ldr	r3, [pc, #296]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6819      	ldr	r1, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	3b01      	subs	r3, #1
 8003c14:	011b      	lsls	r3, r3, #4
 8003c16:	430b      	orrs	r3, r1
 8003c18:	4944      	ldr	r1, [pc, #272]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c1e:	7bfb      	ldrb	r3, [r7, #15]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d17d      	bne.n	8003d20 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c24:	4b41      	ldr	r3, [pc, #260]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a40      	ldr	r2, [pc, #256]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c30:	f7fd f93c 	bl	8000eac <HAL_GetTick>
 8003c34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c36:	e009      	b.n	8003c4c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c38:	f7fd f938 	bl	8000eac <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d902      	bls.n	8003c4c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	73fb      	strb	r3, [r7, #15]
        break;
 8003c4a:	e005      	b.n	8003c58 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c4c:	4b37      	ldr	r3, [pc, #220]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1ef      	bne.n	8003c38 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c58:	7bfb      	ldrb	r3, [r7, #15]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d160      	bne.n	8003d20 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d111      	bne.n	8003c88 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c64:	4b31      	ldr	r3, [pc, #196]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003c6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	6892      	ldr	r2, [r2, #8]
 8003c74:	0211      	lsls	r1, r2, #8
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	68d2      	ldr	r2, [r2, #12]
 8003c7a:	0912      	lsrs	r2, r2, #4
 8003c7c:	0452      	lsls	r2, r2, #17
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	492a      	ldr	r1, [pc, #168]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	610b      	str	r3, [r1, #16]
 8003c86:	e027      	b.n	8003cd8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d112      	bne.n	8003cb4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c8e:	4b27      	ldr	r3, [pc, #156]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003c96:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	6892      	ldr	r2, [r2, #8]
 8003c9e:	0211      	lsls	r1, r2, #8
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	6912      	ldr	r2, [r2, #16]
 8003ca4:	0852      	lsrs	r2, r2, #1
 8003ca6:	3a01      	subs	r2, #1
 8003ca8:	0552      	lsls	r2, r2, #21
 8003caa:	430a      	orrs	r2, r1
 8003cac:	491f      	ldr	r1, [pc, #124]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	610b      	str	r3, [r1, #16]
 8003cb2:	e011      	b.n	8003cd8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cb4:	4b1d      	ldr	r3, [pc, #116]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003cbc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6892      	ldr	r2, [r2, #8]
 8003cc4:	0211      	lsls	r1, r2, #8
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	6952      	ldr	r2, [r2, #20]
 8003cca:	0852      	lsrs	r2, r2, #1
 8003ccc:	3a01      	subs	r2, #1
 8003cce:	0652      	lsls	r2, r2, #25
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	4916      	ldr	r1, [pc, #88]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003cd8:	4b14      	ldr	r3, [pc, #80]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a13      	ldr	r2, [pc, #76]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cde:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ce2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce4:	f7fd f8e2 	bl	8000eac <HAL_GetTick>
 8003ce8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cea:	e009      	b.n	8003d00 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cec:	f7fd f8de 	bl	8000eac <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d902      	bls.n	8003d00 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	73fb      	strb	r3, [r7, #15]
          break;
 8003cfe:	e005      	b.n	8003d0c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d00:	4b0a      	ldr	r3, [pc, #40]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d0ef      	beq.n	8003cec <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003d0c:	7bfb      	ldrb	r3, [r7, #15]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d106      	bne.n	8003d20 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d12:	4b06      	ldr	r3, [pc, #24]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d14:	691a      	ldr	r2, [r3, #16]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	4904      	ldr	r1, [pc, #16]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	40021000 	.word	0x40021000

08003d30 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d3e:	4b6a      	ldr	r3, [pc, #424]	; (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d018      	beq.n	8003d7c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003d4a:	4b67      	ldr	r3, [pc, #412]	; (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	f003 0203 	and.w	r2, r3, #3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d10d      	bne.n	8003d76 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
       ||
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d009      	beq.n	8003d76 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003d62:	4b61      	ldr	r3, [pc, #388]	; (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	091b      	lsrs	r3, r3, #4
 8003d68:	f003 0307 	and.w	r3, r3, #7
 8003d6c:	1c5a      	adds	r2, r3, #1
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
       ||
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d047      	beq.n	8003e06 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	73fb      	strb	r3, [r7, #15]
 8003d7a:	e044      	b.n	8003e06 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b03      	cmp	r3, #3
 8003d82:	d018      	beq.n	8003db6 <RCCEx_PLLSAI2_Config+0x86>
 8003d84:	2b03      	cmp	r3, #3
 8003d86:	d825      	bhi.n	8003dd4 <RCCEx_PLLSAI2_Config+0xa4>
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d002      	beq.n	8003d92 <RCCEx_PLLSAI2_Config+0x62>
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d009      	beq.n	8003da4 <RCCEx_PLLSAI2_Config+0x74>
 8003d90:	e020      	b.n	8003dd4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d92:	4b55      	ldr	r3, [pc, #340]	; (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d11d      	bne.n	8003dda <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003da2:	e01a      	b.n	8003dda <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003da4:	4b50      	ldr	r3, [pc, #320]	; (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d116      	bne.n	8003dde <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003db4:	e013      	b.n	8003dde <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003db6:	4b4c      	ldr	r3, [pc, #304]	; (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10f      	bne.n	8003de2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003dc2:	4b49      	ldr	r3, [pc, #292]	; (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d109      	bne.n	8003de2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003dd2:	e006      	b.n	8003de2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	73fb      	strb	r3, [r7, #15]
      break;
 8003dd8:	e004      	b.n	8003de4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003dda:	bf00      	nop
 8003ddc:	e002      	b.n	8003de4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003dde:	bf00      	nop
 8003de0:	e000      	b.n	8003de4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003de2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003de4:	7bfb      	ldrb	r3, [r7, #15]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10d      	bne.n	8003e06 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003dea:	4b3f      	ldr	r3, [pc, #252]	; (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6819      	ldr	r1, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	011b      	lsls	r3, r3, #4
 8003dfe:	430b      	orrs	r3, r1
 8003e00:	4939      	ldr	r1, [pc, #228]	; (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e06:	7bfb      	ldrb	r3, [r7, #15]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d167      	bne.n	8003edc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003e0c:	4b36      	ldr	r3, [pc, #216]	; (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a35      	ldr	r2, [pc, #212]	; (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e18:	f7fd f848 	bl	8000eac <HAL_GetTick>
 8003e1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e1e:	e009      	b.n	8003e34 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e20:	f7fd f844 	bl	8000eac <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d902      	bls.n	8003e34 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	73fb      	strb	r3, [r7, #15]
        break;
 8003e32:	e005      	b.n	8003e40 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e34:	4b2c      	ldr	r3, [pc, #176]	; (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1ef      	bne.n	8003e20 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e40:	7bfb      	ldrb	r3, [r7, #15]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d14a      	bne.n	8003edc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d111      	bne.n	8003e70 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e4c:	4b26      	ldr	r3, [pc, #152]	; (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003e54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	6892      	ldr	r2, [r2, #8]
 8003e5c:	0211      	lsls	r1, r2, #8
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	68d2      	ldr	r2, [r2, #12]
 8003e62:	0912      	lsrs	r2, r2, #4
 8003e64:	0452      	lsls	r2, r2, #17
 8003e66:	430a      	orrs	r2, r1
 8003e68:	491f      	ldr	r1, [pc, #124]	; (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	614b      	str	r3, [r1, #20]
 8003e6e:	e011      	b.n	8003e94 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e70:	4b1d      	ldr	r3, [pc, #116]	; (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e78:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	6892      	ldr	r2, [r2, #8]
 8003e80:	0211      	lsls	r1, r2, #8
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6912      	ldr	r2, [r2, #16]
 8003e86:	0852      	lsrs	r2, r2, #1
 8003e88:	3a01      	subs	r2, #1
 8003e8a:	0652      	lsls	r2, r2, #25
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	4916      	ldr	r1, [pc, #88]	; (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003e94:	4b14      	ldr	r3, [pc, #80]	; (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a13      	ldr	r2, [pc, #76]	; (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea0:	f7fd f804 	bl	8000eac <HAL_GetTick>
 8003ea4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ea6:	e009      	b.n	8003ebc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ea8:	f7fd f800 	bl	8000eac <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d902      	bls.n	8003ebc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	73fb      	strb	r3, [r7, #15]
          break;
 8003eba:	e005      	b.n	8003ec8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ebc:	4b0a      	ldr	r3, [pc, #40]	; (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d0ef      	beq.n	8003ea8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003ec8:	7bfb      	ldrb	r3, [r7, #15]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d106      	bne.n	8003edc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ece:	4b06      	ldr	r3, [pc, #24]	; (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ed0:	695a      	ldr	r2, [r3, #20]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	4904      	ldr	r1, [pc, #16]	; (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	40021000 	.word	0x40021000

08003eec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e040      	b.n	8003f80 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d106      	bne.n	8003f14 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7fc fe90 	bl	8000c34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2224      	movs	r2, #36	; 0x24
 8003f18:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 0201 	bic.w	r2, r2, #1
 8003f28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f8c0 	bl	80040b0 <UART_SetConfig>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d101      	bne.n	8003f3a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e022      	b.n	8003f80 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d002      	beq.n	8003f48 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 fb6c 	bl	8004620 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689a      	ldr	r2, [r3, #8]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f042 0201 	orr.w	r2, r2, #1
 8003f76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 fbf3 	bl	8004764 <UART_CheckIdleState>
 8003f7e:	4603      	mov	r3, r0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b08a      	sub	sp, #40	; 0x28
 8003f8c:	af02      	add	r7, sp, #8
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	603b      	str	r3, [r7, #0]
 8003f94:	4613      	mov	r3, r2
 8003f96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f9c:	2b20      	cmp	r3, #32
 8003f9e:	f040 8082 	bne.w	80040a6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d002      	beq.n	8003fae <HAL_UART_Transmit+0x26>
 8003fa8:	88fb      	ldrh	r3, [r7, #6]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e07a      	b.n	80040a8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d101      	bne.n	8003fc0 <HAL_UART_Transmit+0x38>
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	e073      	b.n	80040a8 <HAL_UART_Transmit+0x120>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2221      	movs	r2, #33	; 0x21
 8003fd4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fd6:	f7fc ff69 	bl	8000eac <HAL_GetTick>
 8003fda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	88fa      	ldrh	r2, [r7, #6]
 8003fe0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	88fa      	ldrh	r2, [r7, #6]
 8003fe8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ff4:	d108      	bne.n	8004008 <HAL_UART_Transmit+0x80>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d104      	bne.n	8004008 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003ffe:	2300      	movs	r3, #0
 8004000:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	61bb      	str	r3, [r7, #24]
 8004006:	e003      	b.n	8004010 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800400c:	2300      	movs	r3, #0
 800400e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004018:	e02d      	b.n	8004076 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	2200      	movs	r2, #0
 8004022:	2180      	movs	r1, #128	; 0x80
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f000 fbe6 	bl	80047f6 <UART_WaitOnFlagUntilTimeout>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e039      	b.n	80040a8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10b      	bne.n	8004052 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	881a      	ldrh	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004046:	b292      	uxth	r2, r2
 8004048:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	3302      	adds	r3, #2
 800404e:	61bb      	str	r3, [r7, #24]
 8004050:	e008      	b.n	8004064 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	781a      	ldrb	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	b292      	uxth	r2, r2
 800405c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	3301      	adds	r3, #1
 8004062:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800406a:	b29b      	uxth	r3, r3
 800406c:	3b01      	subs	r3, #1
 800406e:	b29a      	uxth	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800407c:	b29b      	uxth	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1cb      	bne.n	800401a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	9300      	str	r3, [sp, #0]
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	2200      	movs	r2, #0
 800408a:	2140      	movs	r1, #64	; 0x40
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f000 fbb2 	bl	80047f6 <UART_WaitOnFlagUntilTimeout>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d001      	beq.n	800409c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e005      	b.n	80040a8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2220      	movs	r2, #32
 80040a0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80040a2:	2300      	movs	r3, #0
 80040a4:	e000      	b.n	80040a8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80040a6:	2302      	movs	r3, #2
  }
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3720      	adds	r7, #32
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040b4:	b08a      	sub	sp, #40	; 0x28
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040ba:	2300      	movs	r3, #0
 80040bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	689a      	ldr	r2, [r3, #8]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	431a      	orrs	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	431a      	orrs	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	69db      	ldr	r3, [r3, #28]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	4ba4      	ldr	r3, [pc, #656]	; (8004370 <UART_SetConfig+0x2c0>)
 80040e0:	4013      	ands	r3, r2
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	6812      	ldr	r2, [r2, #0]
 80040e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040e8:	430b      	orrs	r3, r1
 80040ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	68da      	ldr	r2, [r3, #12]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	430a      	orrs	r2, r1
 8004100:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a99      	ldr	r2, [pc, #612]	; (8004374 <UART_SetConfig+0x2c4>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d004      	beq.n	800411c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004118:	4313      	orrs	r3, r2
 800411a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800412c:	430a      	orrs	r2, r1
 800412e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a90      	ldr	r2, [pc, #576]	; (8004378 <UART_SetConfig+0x2c8>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d126      	bne.n	8004188 <UART_SetConfig+0xd8>
 800413a:	4b90      	ldr	r3, [pc, #576]	; (800437c <UART_SetConfig+0x2cc>)
 800413c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004140:	f003 0303 	and.w	r3, r3, #3
 8004144:	2b03      	cmp	r3, #3
 8004146:	d81b      	bhi.n	8004180 <UART_SetConfig+0xd0>
 8004148:	a201      	add	r2, pc, #4	; (adr r2, 8004150 <UART_SetConfig+0xa0>)
 800414a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414e:	bf00      	nop
 8004150:	08004161 	.word	0x08004161
 8004154:	08004171 	.word	0x08004171
 8004158:	08004169 	.word	0x08004169
 800415c:	08004179 	.word	0x08004179
 8004160:	2301      	movs	r3, #1
 8004162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004166:	e116      	b.n	8004396 <UART_SetConfig+0x2e6>
 8004168:	2302      	movs	r3, #2
 800416a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800416e:	e112      	b.n	8004396 <UART_SetConfig+0x2e6>
 8004170:	2304      	movs	r3, #4
 8004172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004176:	e10e      	b.n	8004396 <UART_SetConfig+0x2e6>
 8004178:	2308      	movs	r3, #8
 800417a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800417e:	e10a      	b.n	8004396 <UART_SetConfig+0x2e6>
 8004180:	2310      	movs	r3, #16
 8004182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004186:	e106      	b.n	8004396 <UART_SetConfig+0x2e6>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a7c      	ldr	r2, [pc, #496]	; (8004380 <UART_SetConfig+0x2d0>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d138      	bne.n	8004204 <UART_SetConfig+0x154>
 8004192:	4b7a      	ldr	r3, [pc, #488]	; (800437c <UART_SetConfig+0x2cc>)
 8004194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004198:	f003 030c 	and.w	r3, r3, #12
 800419c:	2b0c      	cmp	r3, #12
 800419e:	d82d      	bhi.n	80041fc <UART_SetConfig+0x14c>
 80041a0:	a201      	add	r2, pc, #4	; (adr r2, 80041a8 <UART_SetConfig+0xf8>)
 80041a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a6:	bf00      	nop
 80041a8:	080041dd 	.word	0x080041dd
 80041ac:	080041fd 	.word	0x080041fd
 80041b0:	080041fd 	.word	0x080041fd
 80041b4:	080041fd 	.word	0x080041fd
 80041b8:	080041ed 	.word	0x080041ed
 80041bc:	080041fd 	.word	0x080041fd
 80041c0:	080041fd 	.word	0x080041fd
 80041c4:	080041fd 	.word	0x080041fd
 80041c8:	080041e5 	.word	0x080041e5
 80041cc:	080041fd 	.word	0x080041fd
 80041d0:	080041fd 	.word	0x080041fd
 80041d4:	080041fd 	.word	0x080041fd
 80041d8:	080041f5 	.word	0x080041f5
 80041dc:	2300      	movs	r3, #0
 80041de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041e2:	e0d8      	b.n	8004396 <UART_SetConfig+0x2e6>
 80041e4:	2302      	movs	r3, #2
 80041e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ea:	e0d4      	b.n	8004396 <UART_SetConfig+0x2e6>
 80041ec:	2304      	movs	r3, #4
 80041ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041f2:	e0d0      	b.n	8004396 <UART_SetConfig+0x2e6>
 80041f4:	2308      	movs	r3, #8
 80041f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041fa:	e0cc      	b.n	8004396 <UART_SetConfig+0x2e6>
 80041fc:	2310      	movs	r3, #16
 80041fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004202:	e0c8      	b.n	8004396 <UART_SetConfig+0x2e6>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a5e      	ldr	r2, [pc, #376]	; (8004384 <UART_SetConfig+0x2d4>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d125      	bne.n	800425a <UART_SetConfig+0x1aa>
 800420e:	4b5b      	ldr	r3, [pc, #364]	; (800437c <UART_SetConfig+0x2cc>)
 8004210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004214:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004218:	2b30      	cmp	r3, #48	; 0x30
 800421a:	d016      	beq.n	800424a <UART_SetConfig+0x19a>
 800421c:	2b30      	cmp	r3, #48	; 0x30
 800421e:	d818      	bhi.n	8004252 <UART_SetConfig+0x1a2>
 8004220:	2b20      	cmp	r3, #32
 8004222:	d00a      	beq.n	800423a <UART_SetConfig+0x18a>
 8004224:	2b20      	cmp	r3, #32
 8004226:	d814      	bhi.n	8004252 <UART_SetConfig+0x1a2>
 8004228:	2b00      	cmp	r3, #0
 800422a:	d002      	beq.n	8004232 <UART_SetConfig+0x182>
 800422c:	2b10      	cmp	r3, #16
 800422e:	d008      	beq.n	8004242 <UART_SetConfig+0x192>
 8004230:	e00f      	b.n	8004252 <UART_SetConfig+0x1a2>
 8004232:	2300      	movs	r3, #0
 8004234:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004238:	e0ad      	b.n	8004396 <UART_SetConfig+0x2e6>
 800423a:	2302      	movs	r3, #2
 800423c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004240:	e0a9      	b.n	8004396 <UART_SetConfig+0x2e6>
 8004242:	2304      	movs	r3, #4
 8004244:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004248:	e0a5      	b.n	8004396 <UART_SetConfig+0x2e6>
 800424a:	2308      	movs	r3, #8
 800424c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004250:	e0a1      	b.n	8004396 <UART_SetConfig+0x2e6>
 8004252:	2310      	movs	r3, #16
 8004254:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004258:	e09d      	b.n	8004396 <UART_SetConfig+0x2e6>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a4a      	ldr	r2, [pc, #296]	; (8004388 <UART_SetConfig+0x2d8>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d125      	bne.n	80042b0 <UART_SetConfig+0x200>
 8004264:	4b45      	ldr	r3, [pc, #276]	; (800437c <UART_SetConfig+0x2cc>)
 8004266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800426e:	2bc0      	cmp	r3, #192	; 0xc0
 8004270:	d016      	beq.n	80042a0 <UART_SetConfig+0x1f0>
 8004272:	2bc0      	cmp	r3, #192	; 0xc0
 8004274:	d818      	bhi.n	80042a8 <UART_SetConfig+0x1f8>
 8004276:	2b80      	cmp	r3, #128	; 0x80
 8004278:	d00a      	beq.n	8004290 <UART_SetConfig+0x1e0>
 800427a:	2b80      	cmp	r3, #128	; 0x80
 800427c:	d814      	bhi.n	80042a8 <UART_SetConfig+0x1f8>
 800427e:	2b00      	cmp	r3, #0
 8004280:	d002      	beq.n	8004288 <UART_SetConfig+0x1d8>
 8004282:	2b40      	cmp	r3, #64	; 0x40
 8004284:	d008      	beq.n	8004298 <UART_SetConfig+0x1e8>
 8004286:	e00f      	b.n	80042a8 <UART_SetConfig+0x1f8>
 8004288:	2300      	movs	r3, #0
 800428a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800428e:	e082      	b.n	8004396 <UART_SetConfig+0x2e6>
 8004290:	2302      	movs	r3, #2
 8004292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004296:	e07e      	b.n	8004396 <UART_SetConfig+0x2e6>
 8004298:	2304      	movs	r3, #4
 800429a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800429e:	e07a      	b.n	8004396 <UART_SetConfig+0x2e6>
 80042a0:	2308      	movs	r3, #8
 80042a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042a6:	e076      	b.n	8004396 <UART_SetConfig+0x2e6>
 80042a8:	2310      	movs	r3, #16
 80042aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ae:	e072      	b.n	8004396 <UART_SetConfig+0x2e6>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a35      	ldr	r2, [pc, #212]	; (800438c <UART_SetConfig+0x2dc>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d12a      	bne.n	8004310 <UART_SetConfig+0x260>
 80042ba:	4b30      	ldr	r3, [pc, #192]	; (800437c <UART_SetConfig+0x2cc>)
 80042bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042c8:	d01a      	beq.n	8004300 <UART_SetConfig+0x250>
 80042ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042ce:	d81b      	bhi.n	8004308 <UART_SetConfig+0x258>
 80042d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042d4:	d00c      	beq.n	80042f0 <UART_SetConfig+0x240>
 80042d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042da:	d815      	bhi.n	8004308 <UART_SetConfig+0x258>
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d003      	beq.n	80042e8 <UART_SetConfig+0x238>
 80042e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042e4:	d008      	beq.n	80042f8 <UART_SetConfig+0x248>
 80042e6:	e00f      	b.n	8004308 <UART_SetConfig+0x258>
 80042e8:	2300      	movs	r3, #0
 80042ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ee:	e052      	b.n	8004396 <UART_SetConfig+0x2e6>
 80042f0:	2302      	movs	r3, #2
 80042f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042f6:	e04e      	b.n	8004396 <UART_SetConfig+0x2e6>
 80042f8:	2304      	movs	r3, #4
 80042fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042fe:	e04a      	b.n	8004396 <UART_SetConfig+0x2e6>
 8004300:	2308      	movs	r3, #8
 8004302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004306:	e046      	b.n	8004396 <UART_SetConfig+0x2e6>
 8004308:	2310      	movs	r3, #16
 800430a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800430e:	e042      	b.n	8004396 <UART_SetConfig+0x2e6>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a17      	ldr	r2, [pc, #92]	; (8004374 <UART_SetConfig+0x2c4>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d13a      	bne.n	8004390 <UART_SetConfig+0x2e0>
 800431a:	4b18      	ldr	r3, [pc, #96]	; (800437c <UART_SetConfig+0x2cc>)
 800431c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004320:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004324:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004328:	d01a      	beq.n	8004360 <UART_SetConfig+0x2b0>
 800432a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800432e:	d81b      	bhi.n	8004368 <UART_SetConfig+0x2b8>
 8004330:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004334:	d00c      	beq.n	8004350 <UART_SetConfig+0x2a0>
 8004336:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800433a:	d815      	bhi.n	8004368 <UART_SetConfig+0x2b8>
 800433c:	2b00      	cmp	r3, #0
 800433e:	d003      	beq.n	8004348 <UART_SetConfig+0x298>
 8004340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004344:	d008      	beq.n	8004358 <UART_SetConfig+0x2a8>
 8004346:	e00f      	b.n	8004368 <UART_SetConfig+0x2b8>
 8004348:	2300      	movs	r3, #0
 800434a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800434e:	e022      	b.n	8004396 <UART_SetConfig+0x2e6>
 8004350:	2302      	movs	r3, #2
 8004352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004356:	e01e      	b.n	8004396 <UART_SetConfig+0x2e6>
 8004358:	2304      	movs	r3, #4
 800435a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800435e:	e01a      	b.n	8004396 <UART_SetConfig+0x2e6>
 8004360:	2308      	movs	r3, #8
 8004362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004366:	e016      	b.n	8004396 <UART_SetConfig+0x2e6>
 8004368:	2310      	movs	r3, #16
 800436a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800436e:	e012      	b.n	8004396 <UART_SetConfig+0x2e6>
 8004370:	efff69f3 	.word	0xefff69f3
 8004374:	40008000 	.word	0x40008000
 8004378:	40013800 	.word	0x40013800
 800437c:	40021000 	.word	0x40021000
 8004380:	40004400 	.word	0x40004400
 8004384:	40004800 	.word	0x40004800
 8004388:	40004c00 	.word	0x40004c00
 800438c:	40005000 	.word	0x40005000
 8004390:	2310      	movs	r3, #16
 8004392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a9f      	ldr	r2, [pc, #636]	; (8004618 <UART_SetConfig+0x568>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d17a      	bne.n	8004496 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	d824      	bhi.n	80043f2 <UART_SetConfig+0x342>
 80043a8:	a201      	add	r2, pc, #4	; (adr r2, 80043b0 <UART_SetConfig+0x300>)
 80043aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ae:	bf00      	nop
 80043b0:	080043d5 	.word	0x080043d5
 80043b4:	080043f3 	.word	0x080043f3
 80043b8:	080043dd 	.word	0x080043dd
 80043bc:	080043f3 	.word	0x080043f3
 80043c0:	080043e3 	.word	0x080043e3
 80043c4:	080043f3 	.word	0x080043f3
 80043c8:	080043f3 	.word	0x080043f3
 80043cc:	080043f3 	.word	0x080043f3
 80043d0:	080043eb 	.word	0x080043eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043d4:	f7ff f842 	bl	800345c <HAL_RCC_GetPCLK1Freq>
 80043d8:	61f8      	str	r0, [r7, #28]
        break;
 80043da:	e010      	b.n	80043fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043dc:	4b8f      	ldr	r3, [pc, #572]	; (800461c <UART_SetConfig+0x56c>)
 80043de:	61fb      	str	r3, [r7, #28]
        break;
 80043e0:	e00d      	b.n	80043fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043e2:	f7fe ffa3 	bl	800332c <HAL_RCC_GetSysClockFreq>
 80043e6:	61f8      	str	r0, [r7, #28]
        break;
 80043e8:	e009      	b.n	80043fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043ee:	61fb      	str	r3, [r7, #28]
        break;
 80043f0:	e005      	b.n	80043fe <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80043f2:	2300      	movs	r3, #0
 80043f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80043fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 80fb 	beq.w	80045fc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	4613      	mov	r3, r2
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	4413      	add	r3, r2
 8004410:	69fa      	ldr	r2, [r7, #28]
 8004412:	429a      	cmp	r2, r3
 8004414:	d305      	bcc.n	8004422 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800441c:	69fa      	ldr	r2, [r7, #28]
 800441e:	429a      	cmp	r2, r3
 8004420:	d903      	bls.n	800442a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004428:	e0e8      	b.n	80045fc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	2200      	movs	r2, #0
 800442e:	461c      	mov	r4, r3
 8004430:	4615      	mov	r5, r2
 8004432:	f04f 0200 	mov.w	r2, #0
 8004436:	f04f 0300 	mov.w	r3, #0
 800443a:	022b      	lsls	r3, r5, #8
 800443c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004440:	0222      	lsls	r2, r4, #8
 8004442:	68f9      	ldr	r1, [r7, #12]
 8004444:	6849      	ldr	r1, [r1, #4]
 8004446:	0849      	lsrs	r1, r1, #1
 8004448:	2000      	movs	r0, #0
 800444a:	4688      	mov	r8, r1
 800444c:	4681      	mov	r9, r0
 800444e:	eb12 0a08 	adds.w	sl, r2, r8
 8004452:	eb43 0b09 	adc.w	fp, r3, r9
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	603b      	str	r3, [r7, #0]
 800445e:	607a      	str	r2, [r7, #4]
 8004460:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004464:	4650      	mov	r0, sl
 8004466:	4659      	mov	r1, fp
 8004468:	f7fb ff02 	bl	8000270 <__aeabi_uldivmod>
 800446c:	4602      	mov	r2, r0
 800446e:	460b      	mov	r3, r1
 8004470:	4613      	mov	r3, r2
 8004472:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800447a:	d308      	bcc.n	800448e <UART_SetConfig+0x3de>
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004482:	d204      	bcs.n	800448e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	60da      	str	r2, [r3, #12]
 800448c:	e0b6      	b.n	80045fc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004494:	e0b2      	b.n	80045fc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	69db      	ldr	r3, [r3, #28]
 800449a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800449e:	d15e      	bne.n	800455e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80044a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044a4:	2b08      	cmp	r3, #8
 80044a6:	d828      	bhi.n	80044fa <UART_SetConfig+0x44a>
 80044a8:	a201      	add	r2, pc, #4	; (adr r2, 80044b0 <UART_SetConfig+0x400>)
 80044aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ae:	bf00      	nop
 80044b0:	080044d5 	.word	0x080044d5
 80044b4:	080044dd 	.word	0x080044dd
 80044b8:	080044e5 	.word	0x080044e5
 80044bc:	080044fb 	.word	0x080044fb
 80044c0:	080044eb 	.word	0x080044eb
 80044c4:	080044fb 	.word	0x080044fb
 80044c8:	080044fb 	.word	0x080044fb
 80044cc:	080044fb 	.word	0x080044fb
 80044d0:	080044f3 	.word	0x080044f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044d4:	f7fe ffc2 	bl	800345c <HAL_RCC_GetPCLK1Freq>
 80044d8:	61f8      	str	r0, [r7, #28]
        break;
 80044da:	e014      	b.n	8004506 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044dc:	f7fe ffd4 	bl	8003488 <HAL_RCC_GetPCLK2Freq>
 80044e0:	61f8      	str	r0, [r7, #28]
        break;
 80044e2:	e010      	b.n	8004506 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044e4:	4b4d      	ldr	r3, [pc, #308]	; (800461c <UART_SetConfig+0x56c>)
 80044e6:	61fb      	str	r3, [r7, #28]
        break;
 80044e8:	e00d      	b.n	8004506 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044ea:	f7fe ff1f 	bl	800332c <HAL_RCC_GetSysClockFreq>
 80044ee:	61f8      	str	r0, [r7, #28]
        break;
 80044f0:	e009      	b.n	8004506 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044f6:	61fb      	str	r3, [r7, #28]
        break;
 80044f8:	e005      	b.n	8004506 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80044fa:	2300      	movs	r3, #0
 80044fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004504:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d077      	beq.n	80045fc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	005a      	lsls	r2, r3, #1
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	085b      	lsrs	r3, r3, #1
 8004516:	441a      	add	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004520:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	2b0f      	cmp	r3, #15
 8004526:	d916      	bls.n	8004556 <UART_SetConfig+0x4a6>
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800452e:	d212      	bcs.n	8004556 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	b29b      	uxth	r3, r3
 8004534:	f023 030f 	bic.w	r3, r3, #15
 8004538:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	085b      	lsrs	r3, r3, #1
 800453e:	b29b      	uxth	r3, r3
 8004540:	f003 0307 	and.w	r3, r3, #7
 8004544:	b29a      	uxth	r2, r3
 8004546:	8afb      	ldrh	r3, [r7, #22]
 8004548:	4313      	orrs	r3, r2
 800454a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	8afa      	ldrh	r2, [r7, #22]
 8004552:	60da      	str	r2, [r3, #12]
 8004554:	e052      	b.n	80045fc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800455c:	e04e      	b.n	80045fc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800455e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004562:	2b08      	cmp	r3, #8
 8004564:	d827      	bhi.n	80045b6 <UART_SetConfig+0x506>
 8004566:	a201      	add	r2, pc, #4	; (adr r2, 800456c <UART_SetConfig+0x4bc>)
 8004568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456c:	08004591 	.word	0x08004591
 8004570:	08004599 	.word	0x08004599
 8004574:	080045a1 	.word	0x080045a1
 8004578:	080045b7 	.word	0x080045b7
 800457c:	080045a7 	.word	0x080045a7
 8004580:	080045b7 	.word	0x080045b7
 8004584:	080045b7 	.word	0x080045b7
 8004588:	080045b7 	.word	0x080045b7
 800458c:	080045af 	.word	0x080045af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004590:	f7fe ff64 	bl	800345c <HAL_RCC_GetPCLK1Freq>
 8004594:	61f8      	str	r0, [r7, #28]
        break;
 8004596:	e014      	b.n	80045c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004598:	f7fe ff76 	bl	8003488 <HAL_RCC_GetPCLK2Freq>
 800459c:	61f8      	str	r0, [r7, #28]
        break;
 800459e:	e010      	b.n	80045c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045a0:	4b1e      	ldr	r3, [pc, #120]	; (800461c <UART_SetConfig+0x56c>)
 80045a2:	61fb      	str	r3, [r7, #28]
        break;
 80045a4:	e00d      	b.n	80045c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045a6:	f7fe fec1 	bl	800332c <HAL_RCC_GetSysClockFreq>
 80045aa:	61f8      	str	r0, [r7, #28]
        break;
 80045ac:	e009      	b.n	80045c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045b2:	61fb      	str	r3, [r7, #28]
        break;
 80045b4:	e005      	b.n	80045c2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80045b6:	2300      	movs	r3, #0
 80045b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80045c0:	bf00      	nop
    }

    if (pclk != 0U)
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d019      	beq.n	80045fc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	085a      	lsrs	r2, r3, #1
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	441a      	add	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045da:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	2b0f      	cmp	r3, #15
 80045e0:	d909      	bls.n	80045f6 <UART_SetConfig+0x546>
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045e8:	d205      	bcs.n	80045f6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	60da      	str	r2, [r3, #12]
 80045f4:	e002      	b.n	80045fc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004608:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800460c:	4618      	mov	r0, r3
 800460e:	3728      	adds	r7, #40	; 0x28
 8004610:	46bd      	mov	sp, r7
 8004612:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004616:	bf00      	nop
 8004618:	40008000 	.word	0x40008000
 800461c:	00f42400 	.word	0x00f42400

08004620 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00a      	beq.n	800464a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	430a      	orrs	r2, r1
 8004648:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00a      	beq.n	800466c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	430a      	orrs	r2, r1
 800466a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004670:	f003 0304 	and.w	r3, r3, #4
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00a      	beq.n	800468e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	430a      	orrs	r2, r1
 800468c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00a      	beq.n	80046b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b4:	f003 0310 	and.w	r3, r3, #16
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00a      	beq.n	80046d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	430a      	orrs	r2, r1
 80046d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d6:	f003 0320 	and.w	r3, r3, #32
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00a      	beq.n	80046f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	430a      	orrs	r2, r1
 80046f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d01a      	beq.n	8004736 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800471e:	d10a      	bne.n	8004736 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	430a      	orrs	r2, r1
 8004734:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00a      	beq.n	8004758 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	430a      	orrs	r2, r1
 8004756:	605a      	str	r2, [r3, #4]
  }
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af02      	add	r7, sp, #8
 800476a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004774:	f7fc fb9a 	bl	8000eac <HAL_GetTick>
 8004778:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0308 	and.w	r3, r3, #8
 8004784:	2b08      	cmp	r3, #8
 8004786:	d10e      	bne.n	80047a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004788:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f82d 	bl	80047f6 <UART_WaitOnFlagUntilTimeout>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e023      	b.n	80047ee <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0304 	and.w	r3, r3, #4
 80047b0:	2b04      	cmp	r3, #4
 80047b2:	d10e      	bne.n	80047d2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f817 	bl	80047f6 <UART_WaitOnFlagUntilTimeout>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e00d      	b.n	80047ee <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2220      	movs	r2, #32
 80047d6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2220      	movs	r2, #32
 80047dc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b09c      	sub	sp, #112	; 0x70
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	60f8      	str	r0, [r7, #12]
 80047fe:	60b9      	str	r1, [r7, #8]
 8004800:	603b      	str	r3, [r7, #0]
 8004802:	4613      	mov	r3, r2
 8004804:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004806:	e0a5      	b.n	8004954 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004808:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800480a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480e:	f000 80a1 	beq.w	8004954 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004812:	f7fc fb4b 	bl	8000eac <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800481e:	429a      	cmp	r2, r3
 8004820:	d302      	bcc.n	8004828 <UART_WaitOnFlagUntilTimeout+0x32>
 8004822:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004824:	2b00      	cmp	r3, #0
 8004826:	d13e      	bne.n	80048a6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004830:	e853 3f00 	ldrex	r3, [r3]
 8004834:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004838:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800483c:	667b      	str	r3, [r7, #100]	; 0x64
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	461a      	mov	r2, r3
 8004844:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004846:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004848:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800484c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800484e:	e841 2300 	strex	r3, r2, [r1]
 8004852:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004854:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1e6      	bne.n	8004828 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	3308      	adds	r3, #8
 8004860:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004864:	e853 3f00 	ldrex	r3, [r3]
 8004868:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800486a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800486c:	f023 0301 	bic.w	r3, r3, #1
 8004870:	663b      	str	r3, [r7, #96]	; 0x60
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	3308      	adds	r3, #8
 8004878:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800487a:	64ba      	str	r2, [r7, #72]	; 0x48
 800487c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004880:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004882:	e841 2300 	strex	r3, r2, [r1]
 8004886:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1e5      	bne.n	800485a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2220      	movs	r2, #32
 8004892:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2220      	movs	r2, #32
 8004898:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e067      	b.n	8004976 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0304 	and.w	r3, r3, #4
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d04f      	beq.n	8004954 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048c2:	d147      	bne.n	8004954 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048cc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d6:	e853 3f00 	ldrex	r3, [r3]
 80048da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	461a      	mov	r2, r3
 80048ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048ec:	637b      	str	r3, [r7, #52]	; 0x34
 80048ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048f4:	e841 2300 	strex	r3, r2, [r1]
 80048f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1e6      	bne.n	80048ce <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	3308      	adds	r3, #8
 8004906:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	e853 3f00 	ldrex	r3, [r3]
 800490e:	613b      	str	r3, [r7, #16]
   return(result);
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	f023 0301 	bic.w	r3, r3, #1
 8004916:	66bb      	str	r3, [r7, #104]	; 0x68
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	3308      	adds	r3, #8
 800491e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004920:	623a      	str	r2, [r7, #32]
 8004922:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004924:	69f9      	ldr	r1, [r7, #28]
 8004926:	6a3a      	ldr	r2, [r7, #32]
 8004928:	e841 2300 	strex	r3, r2, [r1]
 800492c:	61bb      	str	r3, [r7, #24]
   return(result);
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1e5      	bne.n	8004900 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2220      	movs	r2, #32
 8004938:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2220      	movs	r2, #32
 800493e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2220      	movs	r2, #32
 8004944:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e010      	b.n	8004976 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	69da      	ldr	r2, [r3, #28]
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	4013      	ands	r3, r2
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	429a      	cmp	r2, r3
 8004962:	bf0c      	ite	eq
 8004964:	2301      	moveq	r3, #1
 8004966:	2300      	movne	r3, #0
 8004968:	b2db      	uxtb	r3, r3
 800496a:	461a      	mov	r2, r3
 800496c:	79fb      	ldrb	r3, [r7, #7]
 800496e:	429a      	cmp	r2, r3
 8004970:	f43f af4a 	beq.w	8004808 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3770      	adds	r7, #112	; 0x70
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
	...

08004980 <__errno>:
 8004980:	4b01      	ldr	r3, [pc, #4]	; (8004988 <__errno+0x8>)
 8004982:	6818      	ldr	r0, [r3, #0]
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	2000000c 	.word	0x2000000c

0800498c <__libc_init_array>:
 800498c:	b570      	push	{r4, r5, r6, lr}
 800498e:	4d0d      	ldr	r5, [pc, #52]	; (80049c4 <__libc_init_array+0x38>)
 8004990:	4c0d      	ldr	r4, [pc, #52]	; (80049c8 <__libc_init_array+0x3c>)
 8004992:	1b64      	subs	r4, r4, r5
 8004994:	10a4      	asrs	r4, r4, #2
 8004996:	2600      	movs	r6, #0
 8004998:	42a6      	cmp	r6, r4
 800499a:	d109      	bne.n	80049b0 <__libc_init_array+0x24>
 800499c:	4d0b      	ldr	r5, [pc, #44]	; (80049cc <__libc_init_array+0x40>)
 800499e:	4c0c      	ldr	r4, [pc, #48]	; (80049d0 <__libc_init_array+0x44>)
 80049a0:	f001 f824 	bl	80059ec <_init>
 80049a4:	1b64      	subs	r4, r4, r5
 80049a6:	10a4      	asrs	r4, r4, #2
 80049a8:	2600      	movs	r6, #0
 80049aa:	42a6      	cmp	r6, r4
 80049ac:	d105      	bne.n	80049ba <__libc_init_array+0x2e>
 80049ae:	bd70      	pop	{r4, r5, r6, pc}
 80049b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80049b4:	4798      	blx	r3
 80049b6:	3601      	adds	r6, #1
 80049b8:	e7ee      	b.n	8004998 <__libc_init_array+0xc>
 80049ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80049be:	4798      	blx	r3
 80049c0:	3601      	adds	r6, #1
 80049c2:	e7f2      	b.n	80049aa <__libc_init_array+0x1e>
 80049c4:	08005af4 	.word	0x08005af4
 80049c8:	08005af4 	.word	0x08005af4
 80049cc:	08005af4 	.word	0x08005af4
 80049d0:	08005af8 	.word	0x08005af8

080049d4 <memset>:
 80049d4:	4402      	add	r2, r0
 80049d6:	4603      	mov	r3, r0
 80049d8:	4293      	cmp	r3, r2
 80049da:	d100      	bne.n	80049de <memset+0xa>
 80049dc:	4770      	bx	lr
 80049de:	f803 1b01 	strb.w	r1, [r3], #1
 80049e2:	e7f9      	b.n	80049d8 <memset+0x4>

080049e4 <iprintf>:
 80049e4:	b40f      	push	{r0, r1, r2, r3}
 80049e6:	4b0a      	ldr	r3, [pc, #40]	; (8004a10 <iprintf+0x2c>)
 80049e8:	b513      	push	{r0, r1, r4, lr}
 80049ea:	681c      	ldr	r4, [r3, #0]
 80049ec:	b124      	cbz	r4, 80049f8 <iprintf+0x14>
 80049ee:	69a3      	ldr	r3, [r4, #24]
 80049f0:	b913      	cbnz	r3, 80049f8 <iprintf+0x14>
 80049f2:	4620      	mov	r0, r4
 80049f4:	f000 fa5e 	bl	8004eb4 <__sinit>
 80049f8:	ab05      	add	r3, sp, #20
 80049fa:	9a04      	ldr	r2, [sp, #16]
 80049fc:	68a1      	ldr	r1, [r4, #8]
 80049fe:	9301      	str	r3, [sp, #4]
 8004a00:	4620      	mov	r0, r4
 8004a02:	f000 fc67 	bl	80052d4 <_vfiprintf_r>
 8004a06:	b002      	add	sp, #8
 8004a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a0c:	b004      	add	sp, #16
 8004a0e:	4770      	bx	lr
 8004a10:	2000000c 	.word	0x2000000c

08004a14 <_puts_r>:
 8004a14:	b570      	push	{r4, r5, r6, lr}
 8004a16:	460e      	mov	r6, r1
 8004a18:	4605      	mov	r5, r0
 8004a1a:	b118      	cbz	r0, 8004a24 <_puts_r+0x10>
 8004a1c:	6983      	ldr	r3, [r0, #24]
 8004a1e:	b90b      	cbnz	r3, 8004a24 <_puts_r+0x10>
 8004a20:	f000 fa48 	bl	8004eb4 <__sinit>
 8004a24:	69ab      	ldr	r3, [r5, #24]
 8004a26:	68ac      	ldr	r4, [r5, #8]
 8004a28:	b913      	cbnz	r3, 8004a30 <_puts_r+0x1c>
 8004a2a:	4628      	mov	r0, r5
 8004a2c:	f000 fa42 	bl	8004eb4 <__sinit>
 8004a30:	4b2c      	ldr	r3, [pc, #176]	; (8004ae4 <_puts_r+0xd0>)
 8004a32:	429c      	cmp	r4, r3
 8004a34:	d120      	bne.n	8004a78 <_puts_r+0x64>
 8004a36:	686c      	ldr	r4, [r5, #4]
 8004a38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a3a:	07db      	lsls	r3, r3, #31
 8004a3c:	d405      	bmi.n	8004a4a <_puts_r+0x36>
 8004a3e:	89a3      	ldrh	r3, [r4, #12]
 8004a40:	0598      	lsls	r0, r3, #22
 8004a42:	d402      	bmi.n	8004a4a <_puts_r+0x36>
 8004a44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a46:	f000 fad3 	bl	8004ff0 <__retarget_lock_acquire_recursive>
 8004a4a:	89a3      	ldrh	r3, [r4, #12]
 8004a4c:	0719      	lsls	r1, r3, #28
 8004a4e:	d51d      	bpl.n	8004a8c <_puts_r+0x78>
 8004a50:	6923      	ldr	r3, [r4, #16]
 8004a52:	b1db      	cbz	r3, 8004a8c <_puts_r+0x78>
 8004a54:	3e01      	subs	r6, #1
 8004a56:	68a3      	ldr	r3, [r4, #8]
 8004a58:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	60a3      	str	r3, [r4, #8]
 8004a60:	bb39      	cbnz	r1, 8004ab2 <_puts_r+0x9e>
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	da38      	bge.n	8004ad8 <_puts_r+0xc4>
 8004a66:	4622      	mov	r2, r4
 8004a68:	210a      	movs	r1, #10
 8004a6a:	4628      	mov	r0, r5
 8004a6c:	f000 f848 	bl	8004b00 <__swbuf_r>
 8004a70:	3001      	adds	r0, #1
 8004a72:	d011      	beq.n	8004a98 <_puts_r+0x84>
 8004a74:	250a      	movs	r5, #10
 8004a76:	e011      	b.n	8004a9c <_puts_r+0x88>
 8004a78:	4b1b      	ldr	r3, [pc, #108]	; (8004ae8 <_puts_r+0xd4>)
 8004a7a:	429c      	cmp	r4, r3
 8004a7c:	d101      	bne.n	8004a82 <_puts_r+0x6e>
 8004a7e:	68ac      	ldr	r4, [r5, #8]
 8004a80:	e7da      	b.n	8004a38 <_puts_r+0x24>
 8004a82:	4b1a      	ldr	r3, [pc, #104]	; (8004aec <_puts_r+0xd8>)
 8004a84:	429c      	cmp	r4, r3
 8004a86:	bf08      	it	eq
 8004a88:	68ec      	ldreq	r4, [r5, #12]
 8004a8a:	e7d5      	b.n	8004a38 <_puts_r+0x24>
 8004a8c:	4621      	mov	r1, r4
 8004a8e:	4628      	mov	r0, r5
 8004a90:	f000 f888 	bl	8004ba4 <__swsetup_r>
 8004a94:	2800      	cmp	r0, #0
 8004a96:	d0dd      	beq.n	8004a54 <_puts_r+0x40>
 8004a98:	f04f 35ff 	mov.w	r5, #4294967295
 8004a9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a9e:	07da      	lsls	r2, r3, #31
 8004aa0:	d405      	bmi.n	8004aae <_puts_r+0x9a>
 8004aa2:	89a3      	ldrh	r3, [r4, #12]
 8004aa4:	059b      	lsls	r3, r3, #22
 8004aa6:	d402      	bmi.n	8004aae <_puts_r+0x9a>
 8004aa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004aaa:	f000 faa2 	bl	8004ff2 <__retarget_lock_release_recursive>
 8004aae:	4628      	mov	r0, r5
 8004ab0:	bd70      	pop	{r4, r5, r6, pc}
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	da04      	bge.n	8004ac0 <_puts_r+0xac>
 8004ab6:	69a2      	ldr	r2, [r4, #24]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	dc06      	bgt.n	8004aca <_puts_r+0xb6>
 8004abc:	290a      	cmp	r1, #10
 8004abe:	d004      	beq.n	8004aca <_puts_r+0xb6>
 8004ac0:	6823      	ldr	r3, [r4, #0]
 8004ac2:	1c5a      	adds	r2, r3, #1
 8004ac4:	6022      	str	r2, [r4, #0]
 8004ac6:	7019      	strb	r1, [r3, #0]
 8004ac8:	e7c5      	b.n	8004a56 <_puts_r+0x42>
 8004aca:	4622      	mov	r2, r4
 8004acc:	4628      	mov	r0, r5
 8004ace:	f000 f817 	bl	8004b00 <__swbuf_r>
 8004ad2:	3001      	adds	r0, #1
 8004ad4:	d1bf      	bne.n	8004a56 <_puts_r+0x42>
 8004ad6:	e7df      	b.n	8004a98 <_puts_r+0x84>
 8004ad8:	6823      	ldr	r3, [r4, #0]
 8004ada:	250a      	movs	r5, #10
 8004adc:	1c5a      	adds	r2, r3, #1
 8004ade:	6022      	str	r2, [r4, #0]
 8004ae0:	701d      	strb	r5, [r3, #0]
 8004ae2:	e7db      	b.n	8004a9c <_puts_r+0x88>
 8004ae4:	08005a78 	.word	0x08005a78
 8004ae8:	08005a98 	.word	0x08005a98
 8004aec:	08005a58 	.word	0x08005a58

08004af0 <puts>:
 8004af0:	4b02      	ldr	r3, [pc, #8]	; (8004afc <puts+0xc>)
 8004af2:	4601      	mov	r1, r0
 8004af4:	6818      	ldr	r0, [r3, #0]
 8004af6:	f7ff bf8d 	b.w	8004a14 <_puts_r>
 8004afa:	bf00      	nop
 8004afc:	2000000c 	.word	0x2000000c

08004b00 <__swbuf_r>:
 8004b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b02:	460e      	mov	r6, r1
 8004b04:	4614      	mov	r4, r2
 8004b06:	4605      	mov	r5, r0
 8004b08:	b118      	cbz	r0, 8004b12 <__swbuf_r+0x12>
 8004b0a:	6983      	ldr	r3, [r0, #24]
 8004b0c:	b90b      	cbnz	r3, 8004b12 <__swbuf_r+0x12>
 8004b0e:	f000 f9d1 	bl	8004eb4 <__sinit>
 8004b12:	4b21      	ldr	r3, [pc, #132]	; (8004b98 <__swbuf_r+0x98>)
 8004b14:	429c      	cmp	r4, r3
 8004b16:	d12b      	bne.n	8004b70 <__swbuf_r+0x70>
 8004b18:	686c      	ldr	r4, [r5, #4]
 8004b1a:	69a3      	ldr	r3, [r4, #24]
 8004b1c:	60a3      	str	r3, [r4, #8]
 8004b1e:	89a3      	ldrh	r3, [r4, #12]
 8004b20:	071a      	lsls	r2, r3, #28
 8004b22:	d52f      	bpl.n	8004b84 <__swbuf_r+0x84>
 8004b24:	6923      	ldr	r3, [r4, #16]
 8004b26:	b36b      	cbz	r3, 8004b84 <__swbuf_r+0x84>
 8004b28:	6923      	ldr	r3, [r4, #16]
 8004b2a:	6820      	ldr	r0, [r4, #0]
 8004b2c:	1ac0      	subs	r0, r0, r3
 8004b2e:	6963      	ldr	r3, [r4, #20]
 8004b30:	b2f6      	uxtb	r6, r6
 8004b32:	4283      	cmp	r3, r0
 8004b34:	4637      	mov	r7, r6
 8004b36:	dc04      	bgt.n	8004b42 <__swbuf_r+0x42>
 8004b38:	4621      	mov	r1, r4
 8004b3a:	4628      	mov	r0, r5
 8004b3c:	f000 f926 	bl	8004d8c <_fflush_r>
 8004b40:	bb30      	cbnz	r0, 8004b90 <__swbuf_r+0x90>
 8004b42:	68a3      	ldr	r3, [r4, #8]
 8004b44:	3b01      	subs	r3, #1
 8004b46:	60a3      	str	r3, [r4, #8]
 8004b48:	6823      	ldr	r3, [r4, #0]
 8004b4a:	1c5a      	adds	r2, r3, #1
 8004b4c:	6022      	str	r2, [r4, #0]
 8004b4e:	701e      	strb	r6, [r3, #0]
 8004b50:	6963      	ldr	r3, [r4, #20]
 8004b52:	3001      	adds	r0, #1
 8004b54:	4283      	cmp	r3, r0
 8004b56:	d004      	beq.n	8004b62 <__swbuf_r+0x62>
 8004b58:	89a3      	ldrh	r3, [r4, #12]
 8004b5a:	07db      	lsls	r3, r3, #31
 8004b5c:	d506      	bpl.n	8004b6c <__swbuf_r+0x6c>
 8004b5e:	2e0a      	cmp	r6, #10
 8004b60:	d104      	bne.n	8004b6c <__swbuf_r+0x6c>
 8004b62:	4621      	mov	r1, r4
 8004b64:	4628      	mov	r0, r5
 8004b66:	f000 f911 	bl	8004d8c <_fflush_r>
 8004b6a:	b988      	cbnz	r0, 8004b90 <__swbuf_r+0x90>
 8004b6c:	4638      	mov	r0, r7
 8004b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b70:	4b0a      	ldr	r3, [pc, #40]	; (8004b9c <__swbuf_r+0x9c>)
 8004b72:	429c      	cmp	r4, r3
 8004b74:	d101      	bne.n	8004b7a <__swbuf_r+0x7a>
 8004b76:	68ac      	ldr	r4, [r5, #8]
 8004b78:	e7cf      	b.n	8004b1a <__swbuf_r+0x1a>
 8004b7a:	4b09      	ldr	r3, [pc, #36]	; (8004ba0 <__swbuf_r+0xa0>)
 8004b7c:	429c      	cmp	r4, r3
 8004b7e:	bf08      	it	eq
 8004b80:	68ec      	ldreq	r4, [r5, #12]
 8004b82:	e7ca      	b.n	8004b1a <__swbuf_r+0x1a>
 8004b84:	4621      	mov	r1, r4
 8004b86:	4628      	mov	r0, r5
 8004b88:	f000 f80c 	bl	8004ba4 <__swsetup_r>
 8004b8c:	2800      	cmp	r0, #0
 8004b8e:	d0cb      	beq.n	8004b28 <__swbuf_r+0x28>
 8004b90:	f04f 37ff 	mov.w	r7, #4294967295
 8004b94:	e7ea      	b.n	8004b6c <__swbuf_r+0x6c>
 8004b96:	bf00      	nop
 8004b98:	08005a78 	.word	0x08005a78
 8004b9c:	08005a98 	.word	0x08005a98
 8004ba0:	08005a58 	.word	0x08005a58

08004ba4 <__swsetup_r>:
 8004ba4:	4b32      	ldr	r3, [pc, #200]	; (8004c70 <__swsetup_r+0xcc>)
 8004ba6:	b570      	push	{r4, r5, r6, lr}
 8004ba8:	681d      	ldr	r5, [r3, #0]
 8004baa:	4606      	mov	r6, r0
 8004bac:	460c      	mov	r4, r1
 8004bae:	b125      	cbz	r5, 8004bba <__swsetup_r+0x16>
 8004bb0:	69ab      	ldr	r3, [r5, #24]
 8004bb2:	b913      	cbnz	r3, 8004bba <__swsetup_r+0x16>
 8004bb4:	4628      	mov	r0, r5
 8004bb6:	f000 f97d 	bl	8004eb4 <__sinit>
 8004bba:	4b2e      	ldr	r3, [pc, #184]	; (8004c74 <__swsetup_r+0xd0>)
 8004bbc:	429c      	cmp	r4, r3
 8004bbe:	d10f      	bne.n	8004be0 <__swsetup_r+0x3c>
 8004bc0:	686c      	ldr	r4, [r5, #4]
 8004bc2:	89a3      	ldrh	r3, [r4, #12]
 8004bc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004bc8:	0719      	lsls	r1, r3, #28
 8004bca:	d42c      	bmi.n	8004c26 <__swsetup_r+0x82>
 8004bcc:	06dd      	lsls	r5, r3, #27
 8004bce:	d411      	bmi.n	8004bf4 <__swsetup_r+0x50>
 8004bd0:	2309      	movs	r3, #9
 8004bd2:	6033      	str	r3, [r6, #0]
 8004bd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004bd8:	81a3      	strh	r3, [r4, #12]
 8004bda:	f04f 30ff 	mov.w	r0, #4294967295
 8004bde:	e03e      	b.n	8004c5e <__swsetup_r+0xba>
 8004be0:	4b25      	ldr	r3, [pc, #148]	; (8004c78 <__swsetup_r+0xd4>)
 8004be2:	429c      	cmp	r4, r3
 8004be4:	d101      	bne.n	8004bea <__swsetup_r+0x46>
 8004be6:	68ac      	ldr	r4, [r5, #8]
 8004be8:	e7eb      	b.n	8004bc2 <__swsetup_r+0x1e>
 8004bea:	4b24      	ldr	r3, [pc, #144]	; (8004c7c <__swsetup_r+0xd8>)
 8004bec:	429c      	cmp	r4, r3
 8004bee:	bf08      	it	eq
 8004bf0:	68ec      	ldreq	r4, [r5, #12]
 8004bf2:	e7e6      	b.n	8004bc2 <__swsetup_r+0x1e>
 8004bf4:	0758      	lsls	r0, r3, #29
 8004bf6:	d512      	bpl.n	8004c1e <__swsetup_r+0x7a>
 8004bf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004bfa:	b141      	cbz	r1, 8004c0e <__swsetup_r+0x6a>
 8004bfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c00:	4299      	cmp	r1, r3
 8004c02:	d002      	beq.n	8004c0a <__swsetup_r+0x66>
 8004c04:	4630      	mov	r0, r6
 8004c06:	f000 fa5b 	bl	80050c0 <_free_r>
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	6363      	str	r3, [r4, #52]	; 0x34
 8004c0e:	89a3      	ldrh	r3, [r4, #12]
 8004c10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004c14:	81a3      	strh	r3, [r4, #12]
 8004c16:	2300      	movs	r3, #0
 8004c18:	6063      	str	r3, [r4, #4]
 8004c1a:	6923      	ldr	r3, [r4, #16]
 8004c1c:	6023      	str	r3, [r4, #0]
 8004c1e:	89a3      	ldrh	r3, [r4, #12]
 8004c20:	f043 0308 	orr.w	r3, r3, #8
 8004c24:	81a3      	strh	r3, [r4, #12]
 8004c26:	6923      	ldr	r3, [r4, #16]
 8004c28:	b94b      	cbnz	r3, 8004c3e <__swsetup_r+0x9a>
 8004c2a:	89a3      	ldrh	r3, [r4, #12]
 8004c2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c34:	d003      	beq.n	8004c3e <__swsetup_r+0x9a>
 8004c36:	4621      	mov	r1, r4
 8004c38:	4630      	mov	r0, r6
 8004c3a:	f000 fa01 	bl	8005040 <__smakebuf_r>
 8004c3e:	89a0      	ldrh	r0, [r4, #12]
 8004c40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c44:	f010 0301 	ands.w	r3, r0, #1
 8004c48:	d00a      	beq.n	8004c60 <__swsetup_r+0xbc>
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	60a3      	str	r3, [r4, #8]
 8004c4e:	6963      	ldr	r3, [r4, #20]
 8004c50:	425b      	negs	r3, r3
 8004c52:	61a3      	str	r3, [r4, #24]
 8004c54:	6923      	ldr	r3, [r4, #16]
 8004c56:	b943      	cbnz	r3, 8004c6a <__swsetup_r+0xc6>
 8004c58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004c5c:	d1ba      	bne.n	8004bd4 <__swsetup_r+0x30>
 8004c5e:	bd70      	pop	{r4, r5, r6, pc}
 8004c60:	0781      	lsls	r1, r0, #30
 8004c62:	bf58      	it	pl
 8004c64:	6963      	ldrpl	r3, [r4, #20]
 8004c66:	60a3      	str	r3, [r4, #8]
 8004c68:	e7f4      	b.n	8004c54 <__swsetup_r+0xb0>
 8004c6a:	2000      	movs	r0, #0
 8004c6c:	e7f7      	b.n	8004c5e <__swsetup_r+0xba>
 8004c6e:	bf00      	nop
 8004c70:	2000000c 	.word	0x2000000c
 8004c74:	08005a78 	.word	0x08005a78
 8004c78:	08005a98 	.word	0x08005a98
 8004c7c:	08005a58 	.word	0x08005a58

08004c80 <__sflush_r>:
 8004c80:	898a      	ldrh	r2, [r1, #12]
 8004c82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c86:	4605      	mov	r5, r0
 8004c88:	0710      	lsls	r0, r2, #28
 8004c8a:	460c      	mov	r4, r1
 8004c8c:	d458      	bmi.n	8004d40 <__sflush_r+0xc0>
 8004c8e:	684b      	ldr	r3, [r1, #4]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	dc05      	bgt.n	8004ca0 <__sflush_r+0x20>
 8004c94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	dc02      	bgt.n	8004ca0 <__sflush_r+0x20>
 8004c9a:	2000      	movs	r0, #0
 8004c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ca0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ca2:	2e00      	cmp	r6, #0
 8004ca4:	d0f9      	beq.n	8004c9a <__sflush_r+0x1a>
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004cac:	682f      	ldr	r7, [r5, #0]
 8004cae:	602b      	str	r3, [r5, #0]
 8004cb0:	d032      	beq.n	8004d18 <__sflush_r+0x98>
 8004cb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004cb4:	89a3      	ldrh	r3, [r4, #12]
 8004cb6:	075a      	lsls	r2, r3, #29
 8004cb8:	d505      	bpl.n	8004cc6 <__sflush_r+0x46>
 8004cba:	6863      	ldr	r3, [r4, #4]
 8004cbc:	1ac0      	subs	r0, r0, r3
 8004cbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004cc0:	b10b      	cbz	r3, 8004cc6 <__sflush_r+0x46>
 8004cc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004cc4:	1ac0      	subs	r0, r0, r3
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	4602      	mov	r2, r0
 8004cca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ccc:	6a21      	ldr	r1, [r4, #32]
 8004cce:	4628      	mov	r0, r5
 8004cd0:	47b0      	blx	r6
 8004cd2:	1c43      	adds	r3, r0, #1
 8004cd4:	89a3      	ldrh	r3, [r4, #12]
 8004cd6:	d106      	bne.n	8004ce6 <__sflush_r+0x66>
 8004cd8:	6829      	ldr	r1, [r5, #0]
 8004cda:	291d      	cmp	r1, #29
 8004cdc:	d82c      	bhi.n	8004d38 <__sflush_r+0xb8>
 8004cde:	4a2a      	ldr	r2, [pc, #168]	; (8004d88 <__sflush_r+0x108>)
 8004ce0:	40ca      	lsrs	r2, r1
 8004ce2:	07d6      	lsls	r6, r2, #31
 8004ce4:	d528      	bpl.n	8004d38 <__sflush_r+0xb8>
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	6062      	str	r2, [r4, #4]
 8004cea:	04d9      	lsls	r1, r3, #19
 8004cec:	6922      	ldr	r2, [r4, #16]
 8004cee:	6022      	str	r2, [r4, #0]
 8004cf0:	d504      	bpl.n	8004cfc <__sflush_r+0x7c>
 8004cf2:	1c42      	adds	r2, r0, #1
 8004cf4:	d101      	bne.n	8004cfa <__sflush_r+0x7a>
 8004cf6:	682b      	ldr	r3, [r5, #0]
 8004cf8:	b903      	cbnz	r3, 8004cfc <__sflush_r+0x7c>
 8004cfa:	6560      	str	r0, [r4, #84]	; 0x54
 8004cfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cfe:	602f      	str	r7, [r5, #0]
 8004d00:	2900      	cmp	r1, #0
 8004d02:	d0ca      	beq.n	8004c9a <__sflush_r+0x1a>
 8004d04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d08:	4299      	cmp	r1, r3
 8004d0a:	d002      	beq.n	8004d12 <__sflush_r+0x92>
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	f000 f9d7 	bl	80050c0 <_free_r>
 8004d12:	2000      	movs	r0, #0
 8004d14:	6360      	str	r0, [r4, #52]	; 0x34
 8004d16:	e7c1      	b.n	8004c9c <__sflush_r+0x1c>
 8004d18:	6a21      	ldr	r1, [r4, #32]
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	4628      	mov	r0, r5
 8004d1e:	47b0      	blx	r6
 8004d20:	1c41      	adds	r1, r0, #1
 8004d22:	d1c7      	bne.n	8004cb4 <__sflush_r+0x34>
 8004d24:	682b      	ldr	r3, [r5, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0c4      	beq.n	8004cb4 <__sflush_r+0x34>
 8004d2a:	2b1d      	cmp	r3, #29
 8004d2c:	d001      	beq.n	8004d32 <__sflush_r+0xb2>
 8004d2e:	2b16      	cmp	r3, #22
 8004d30:	d101      	bne.n	8004d36 <__sflush_r+0xb6>
 8004d32:	602f      	str	r7, [r5, #0]
 8004d34:	e7b1      	b.n	8004c9a <__sflush_r+0x1a>
 8004d36:	89a3      	ldrh	r3, [r4, #12]
 8004d38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d3c:	81a3      	strh	r3, [r4, #12]
 8004d3e:	e7ad      	b.n	8004c9c <__sflush_r+0x1c>
 8004d40:	690f      	ldr	r7, [r1, #16]
 8004d42:	2f00      	cmp	r7, #0
 8004d44:	d0a9      	beq.n	8004c9a <__sflush_r+0x1a>
 8004d46:	0793      	lsls	r3, r2, #30
 8004d48:	680e      	ldr	r6, [r1, #0]
 8004d4a:	bf08      	it	eq
 8004d4c:	694b      	ldreq	r3, [r1, #20]
 8004d4e:	600f      	str	r7, [r1, #0]
 8004d50:	bf18      	it	ne
 8004d52:	2300      	movne	r3, #0
 8004d54:	eba6 0807 	sub.w	r8, r6, r7
 8004d58:	608b      	str	r3, [r1, #8]
 8004d5a:	f1b8 0f00 	cmp.w	r8, #0
 8004d5e:	dd9c      	ble.n	8004c9a <__sflush_r+0x1a>
 8004d60:	6a21      	ldr	r1, [r4, #32]
 8004d62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004d64:	4643      	mov	r3, r8
 8004d66:	463a      	mov	r2, r7
 8004d68:	4628      	mov	r0, r5
 8004d6a:	47b0      	blx	r6
 8004d6c:	2800      	cmp	r0, #0
 8004d6e:	dc06      	bgt.n	8004d7e <__sflush_r+0xfe>
 8004d70:	89a3      	ldrh	r3, [r4, #12]
 8004d72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d76:	81a3      	strh	r3, [r4, #12]
 8004d78:	f04f 30ff 	mov.w	r0, #4294967295
 8004d7c:	e78e      	b.n	8004c9c <__sflush_r+0x1c>
 8004d7e:	4407      	add	r7, r0
 8004d80:	eba8 0800 	sub.w	r8, r8, r0
 8004d84:	e7e9      	b.n	8004d5a <__sflush_r+0xda>
 8004d86:	bf00      	nop
 8004d88:	20400001 	.word	0x20400001

08004d8c <_fflush_r>:
 8004d8c:	b538      	push	{r3, r4, r5, lr}
 8004d8e:	690b      	ldr	r3, [r1, #16]
 8004d90:	4605      	mov	r5, r0
 8004d92:	460c      	mov	r4, r1
 8004d94:	b913      	cbnz	r3, 8004d9c <_fflush_r+0x10>
 8004d96:	2500      	movs	r5, #0
 8004d98:	4628      	mov	r0, r5
 8004d9a:	bd38      	pop	{r3, r4, r5, pc}
 8004d9c:	b118      	cbz	r0, 8004da6 <_fflush_r+0x1a>
 8004d9e:	6983      	ldr	r3, [r0, #24]
 8004da0:	b90b      	cbnz	r3, 8004da6 <_fflush_r+0x1a>
 8004da2:	f000 f887 	bl	8004eb4 <__sinit>
 8004da6:	4b14      	ldr	r3, [pc, #80]	; (8004df8 <_fflush_r+0x6c>)
 8004da8:	429c      	cmp	r4, r3
 8004daa:	d11b      	bne.n	8004de4 <_fflush_r+0x58>
 8004dac:	686c      	ldr	r4, [r5, #4]
 8004dae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d0ef      	beq.n	8004d96 <_fflush_r+0xa>
 8004db6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004db8:	07d0      	lsls	r0, r2, #31
 8004dba:	d404      	bmi.n	8004dc6 <_fflush_r+0x3a>
 8004dbc:	0599      	lsls	r1, r3, #22
 8004dbe:	d402      	bmi.n	8004dc6 <_fflush_r+0x3a>
 8004dc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004dc2:	f000 f915 	bl	8004ff0 <__retarget_lock_acquire_recursive>
 8004dc6:	4628      	mov	r0, r5
 8004dc8:	4621      	mov	r1, r4
 8004dca:	f7ff ff59 	bl	8004c80 <__sflush_r>
 8004dce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004dd0:	07da      	lsls	r2, r3, #31
 8004dd2:	4605      	mov	r5, r0
 8004dd4:	d4e0      	bmi.n	8004d98 <_fflush_r+0xc>
 8004dd6:	89a3      	ldrh	r3, [r4, #12]
 8004dd8:	059b      	lsls	r3, r3, #22
 8004dda:	d4dd      	bmi.n	8004d98 <_fflush_r+0xc>
 8004ddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004dde:	f000 f908 	bl	8004ff2 <__retarget_lock_release_recursive>
 8004de2:	e7d9      	b.n	8004d98 <_fflush_r+0xc>
 8004de4:	4b05      	ldr	r3, [pc, #20]	; (8004dfc <_fflush_r+0x70>)
 8004de6:	429c      	cmp	r4, r3
 8004de8:	d101      	bne.n	8004dee <_fflush_r+0x62>
 8004dea:	68ac      	ldr	r4, [r5, #8]
 8004dec:	e7df      	b.n	8004dae <_fflush_r+0x22>
 8004dee:	4b04      	ldr	r3, [pc, #16]	; (8004e00 <_fflush_r+0x74>)
 8004df0:	429c      	cmp	r4, r3
 8004df2:	bf08      	it	eq
 8004df4:	68ec      	ldreq	r4, [r5, #12]
 8004df6:	e7da      	b.n	8004dae <_fflush_r+0x22>
 8004df8:	08005a78 	.word	0x08005a78
 8004dfc:	08005a98 	.word	0x08005a98
 8004e00:	08005a58 	.word	0x08005a58

08004e04 <std>:
 8004e04:	2300      	movs	r3, #0
 8004e06:	b510      	push	{r4, lr}
 8004e08:	4604      	mov	r4, r0
 8004e0a:	e9c0 3300 	strd	r3, r3, [r0]
 8004e0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e12:	6083      	str	r3, [r0, #8]
 8004e14:	8181      	strh	r1, [r0, #12]
 8004e16:	6643      	str	r3, [r0, #100]	; 0x64
 8004e18:	81c2      	strh	r2, [r0, #14]
 8004e1a:	6183      	str	r3, [r0, #24]
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	2208      	movs	r2, #8
 8004e20:	305c      	adds	r0, #92	; 0x5c
 8004e22:	f7ff fdd7 	bl	80049d4 <memset>
 8004e26:	4b05      	ldr	r3, [pc, #20]	; (8004e3c <std+0x38>)
 8004e28:	6263      	str	r3, [r4, #36]	; 0x24
 8004e2a:	4b05      	ldr	r3, [pc, #20]	; (8004e40 <std+0x3c>)
 8004e2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e2e:	4b05      	ldr	r3, [pc, #20]	; (8004e44 <std+0x40>)
 8004e30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e32:	4b05      	ldr	r3, [pc, #20]	; (8004e48 <std+0x44>)
 8004e34:	6224      	str	r4, [r4, #32]
 8004e36:	6323      	str	r3, [r4, #48]	; 0x30
 8004e38:	bd10      	pop	{r4, pc}
 8004e3a:	bf00      	nop
 8004e3c:	0800587d 	.word	0x0800587d
 8004e40:	0800589f 	.word	0x0800589f
 8004e44:	080058d7 	.word	0x080058d7
 8004e48:	080058fb 	.word	0x080058fb

08004e4c <_cleanup_r>:
 8004e4c:	4901      	ldr	r1, [pc, #4]	; (8004e54 <_cleanup_r+0x8>)
 8004e4e:	f000 b8af 	b.w	8004fb0 <_fwalk_reent>
 8004e52:	bf00      	nop
 8004e54:	08004d8d 	.word	0x08004d8d

08004e58 <__sfmoreglue>:
 8004e58:	b570      	push	{r4, r5, r6, lr}
 8004e5a:	2268      	movs	r2, #104	; 0x68
 8004e5c:	1e4d      	subs	r5, r1, #1
 8004e5e:	4355      	muls	r5, r2
 8004e60:	460e      	mov	r6, r1
 8004e62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004e66:	f000 f997 	bl	8005198 <_malloc_r>
 8004e6a:	4604      	mov	r4, r0
 8004e6c:	b140      	cbz	r0, 8004e80 <__sfmoreglue+0x28>
 8004e6e:	2100      	movs	r1, #0
 8004e70:	e9c0 1600 	strd	r1, r6, [r0]
 8004e74:	300c      	adds	r0, #12
 8004e76:	60a0      	str	r0, [r4, #8]
 8004e78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004e7c:	f7ff fdaa 	bl	80049d4 <memset>
 8004e80:	4620      	mov	r0, r4
 8004e82:	bd70      	pop	{r4, r5, r6, pc}

08004e84 <__sfp_lock_acquire>:
 8004e84:	4801      	ldr	r0, [pc, #4]	; (8004e8c <__sfp_lock_acquire+0x8>)
 8004e86:	f000 b8b3 	b.w	8004ff0 <__retarget_lock_acquire_recursive>
 8004e8a:	bf00      	nop
 8004e8c:	20000205 	.word	0x20000205

08004e90 <__sfp_lock_release>:
 8004e90:	4801      	ldr	r0, [pc, #4]	; (8004e98 <__sfp_lock_release+0x8>)
 8004e92:	f000 b8ae 	b.w	8004ff2 <__retarget_lock_release_recursive>
 8004e96:	bf00      	nop
 8004e98:	20000205 	.word	0x20000205

08004e9c <__sinit_lock_acquire>:
 8004e9c:	4801      	ldr	r0, [pc, #4]	; (8004ea4 <__sinit_lock_acquire+0x8>)
 8004e9e:	f000 b8a7 	b.w	8004ff0 <__retarget_lock_acquire_recursive>
 8004ea2:	bf00      	nop
 8004ea4:	20000206 	.word	0x20000206

08004ea8 <__sinit_lock_release>:
 8004ea8:	4801      	ldr	r0, [pc, #4]	; (8004eb0 <__sinit_lock_release+0x8>)
 8004eaa:	f000 b8a2 	b.w	8004ff2 <__retarget_lock_release_recursive>
 8004eae:	bf00      	nop
 8004eb0:	20000206 	.word	0x20000206

08004eb4 <__sinit>:
 8004eb4:	b510      	push	{r4, lr}
 8004eb6:	4604      	mov	r4, r0
 8004eb8:	f7ff fff0 	bl	8004e9c <__sinit_lock_acquire>
 8004ebc:	69a3      	ldr	r3, [r4, #24]
 8004ebe:	b11b      	cbz	r3, 8004ec8 <__sinit+0x14>
 8004ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ec4:	f7ff bff0 	b.w	8004ea8 <__sinit_lock_release>
 8004ec8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004ecc:	6523      	str	r3, [r4, #80]	; 0x50
 8004ece:	4b13      	ldr	r3, [pc, #76]	; (8004f1c <__sinit+0x68>)
 8004ed0:	4a13      	ldr	r2, [pc, #76]	; (8004f20 <__sinit+0x6c>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	62a2      	str	r2, [r4, #40]	; 0x28
 8004ed6:	42a3      	cmp	r3, r4
 8004ed8:	bf04      	itt	eq
 8004eda:	2301      	moveq	r3, #1
 8004edc:	61a3      	streq	r3, [r4, #24]
 8004ede:	4620      	mov	r0, r4
 8004ee0:	f000 f820 	bl	8004f24 <__sfp>
 8004ee4:	6060      	str	r0, [r4, #4]
 8004ee6:	4620      	mov	r0, r4
 8004ee8:	f000 f81c 	bl	8004f24 <__sfp>
 8004eec:	60a0      	str	r0, [r4, #8]
 8004eee:	4620      	mov	r0, r4
 8004ef0:	f000 f818 	bl	8004f24 <__sfp>
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	60e0      	str	r0, [r4, #12]
 8004ef8:	2104      	movs	r1, #4
 8004efa:	6860      	ldr	r0, [r4, #4]
 8004efc:	f7ff ff82 	bl	8004e04 <std>
 8004f00:	68a0      	ldr	r0, [r4, #8]
 8004f02:	2201      	movs	r2, #1
 8004f04:	2109      	movs	r1, #9
 8004f06:	f7ff ff7d 	bl	8004e04 <std>
 8004f0a:	68e0      	ldr	r0, [r4, #12]
 8004f0c:	2202      	movs	r2, #2
 8004f0e:	2112      	movs	r1, #18
 8004f10:	f7ff ff78 	bl	8004e04 <std>
 8004f14:	2301      	movs	r3, #1
 8004f16:	61a3      	str	r3, [r4, #24]
 8004f18:	e7d2      	b.n	8004ec0 <__sinit+0xc>
 8004f1a:	bf00      	nop
 8004f1c:	08005a54 	.word	0x08005a54
 8004f20:	08004e4d 	.word	0x08004e4d

08004f24 <__sfp>:
 8004f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f26:	4607      	mov	r7, r0
 8004f28:	f7ff ffac 	bl	8004e84 <__sfp_lock_acquire>
 8004f2c:	4b1e      	ldr	r3, [pc, #120]	; (8004fa8 <__sfp+0x84>)
 8004f2e:	681e      	ldr	r6, [r3, #0]
 8004f30:	69b3      	ldr	r3, [r6, #24]
 8004f32:	b913      	cbnz	r3, 8004f3a <__sfp+0x16>
 8004f34:	4630      	mov	r0, r6
 8004f36:	f7ff ffbd 	bl	8004eb4 <__sinit>
 8004f3a:	3648      	adds	r6, #72	; 0x48
 8004f3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004f40:	3b01      	subs	r3, #1
 8004f42:	d503      	bpl.n	8004f4c <__sfp+0x28>
 8004f44:	6833      	ldr	r3, [r6, #0]
 8004f46:	b30b      	cbz	r3, 8004f8c <__sfp+0x68>
 8004f48:	6836      	ldr	r6, [r6, #0]
 8004f4a:	e7f7      	b.n	8004f3c <__sfp+0x18>
 8004f4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004f50:	b9d5      	cbnz	r5, 8004f88 <__sfp+0x64>
 8004f52:	4b16      	ldr	r3, [pc, #88]	; (8004fac <__sfp+0x88>)
 8004f54:	60e3      	str	r3, [r4, #12]
 8004f56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004f5a:	6665      	str	r5, [r4, #100]	; 0x64
 8004f5c:	f000 f847 	bl	8004fee <__retarget_lock_init_recursive>
 8004f60:	f7ff ff96 	bl	8004e90 <__sfp_lock_release>
 8004f64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004f68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004f6c:	6025      	str	r5, [r4, #0]
 8004f6e:	61a5      	str	r5, [r4, #24]
 8004f70:	2208      	movs	r2, #8
 8004f72:	4629      	mov	r1, r5
 8004f74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004f78:	f7ff fd2c 	bl	80049d4 <memset>
 8004f7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004f80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004f84:	4620      	mov	r0, r4
 8004f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f88:	3468      	adds	r4, #104	; 0x68
 8004f8a:	e7d9      	b.n	8004f40 <__sfp+0x1c>
 8004f8c:	2104      	movs	r1, #4
 8004f8e:	4638      	mov	r0, r7
 8004f90:	f7ff ff62 	bl	8004e58 <__sfmoreglue>
 8004f94:	4604      	mov	r4, r0
 8004f96:	6030      	str	r0, [r6, #0]
 8004f98:	2800      	cmp	r0, #0
 8004f9a:	d1d5      	bne.n	8004f48 <__sfp+0x24>
 8004f9c:	f7ff ff78 	bl	8004e90 <__sfp_lock_release>
 8004fa0:	230c      	movs	r3, #12
 8004fa2:	603b      	str	r3, [r7, #0]
 8004fa4:	e7ee      	b.n	8004f84 <__sfp+0x60>
 8004fa6:	bf00      	nop
 8004fa8:	08005a54 	.word	0x08005a54
 8004fac:	ffff0001 	.word	0xffff0001

08004fb0 <_fwalk_reent>:
 8004fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fb4:	4606      	mov	r6, r0
 8004fb6:	4688      	mov	r8, r1
 8004fb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004fbc:	2700      	movs	r7, #0
 8004fbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004fc2:	f1b9 0901 	subs.w	r9, r9, #1
 8004fc6:	d505      	bpl.n	8004fd4 <_fwalk_reent+0x24>
 8004fc8:	6824      	ldr	r4, [r4, #0]
 8004fca:	2c00      	cmp	r4, #0
 8004fcc:	d1f7      	bne.n	8004fbe <_fwalk_reent+0xe>
 8004fce:	4638      	mov	r0, r7
 8004fd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fd4:	89ab      	ldrh	r3, [r5, #12]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d907      	bls.n	8004fea <_fwalk_reent+0x3a>
 8004fda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	d003      	beq.n	8004fea <_fwalk_reent+0x3a>
 8004fe2:	4629      	mov	r1, r5
 8004fe4:	4630      	mov	r0, r6
 8004fe6:	47c0      	blx	r8
 8004fe8:	4307      	orrs	r7, r0
 8004fea:	3568      	adds	r5, #104	; 0x68
 8004fec:	e7e9      	b.n	8004fc2 <_fwalk_reent+0x12>

08004fee <__retarget_lock_init_recursive>:
 8004fee:	4770      	bx	lr

08004ff0 <__retarget_lock_acquire_recursive>:
 8004ff0:	4770      	bx	lr

08004ff2 <__retarget_lock_release_recursive>:
 8004ff2:	4770      	bx	lr

08004ff4 <__swhatbuf_r>:
 8004ff4:	b570      	push	{r4, r5, r6, lr}
 8004ff6:	460e      	mov	r6, r1
 8004ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ffc:	2900      	cmp	r1, #0
 8004ffe:	b096      	sub	sp, #88	; 0x58
 8005000:	4614      	mov	r4, r2
 8005002:	461d      	mov	r5, r3
 8005004:	da08      	bge.n	8005018 <__swhatbuf_r+0x24>
 8005006:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	602a      	str	r2, [r5, #0]
 800500e:	061a      	lsls	r2, r3, #24
 8005010:	d410      	bmi.n	8005034 <__swhatbuf_r+0x40>
 8005012:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005016:	e00e      	b.n	8005036 <__swhatbuf_r+0x42>
 8005018:	466a      	mov	r2, sp
 800501a:	f000 fc95 	bl	8005948 <_fstat_r>
 800501e:	2800      	cmp	r0, #0
 8005020:	dbf1      	blt.n	8005006 <__swhatbuf_r+0x12>
 8005022:	9a01      	ldr	r2, [sp, #4]
 8005024:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005028:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800502c:	425a      	negs	r2, r3
 800502e:	415a      	adcs	r2, r3
 8005030:	602a      	str	r2, [r5, #0]
 8005032:	e7ee      	b.n	8005012 <__swhatbuf_r+0x1e>
 8005034:	2340      	movs	r3, #64	; 0x40
 8005036:	2000      	movs	r0, #0
 8005038:	6023      	str	r3, [r4, #0]
 800503a:	b016      	add	sp, #88	; 0x58
 800503c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005040 <__smakebuf_r>:
 8005040:	898b      	ldrh	r3, [r1, #12]
 8005042:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005044:	079d      	lsls	r5, r3, #30
 8005046:	4606      	mov	r6, r0
 8005048:	460c      	mov	r4, r1
 800504a:	d507      	bpl.n	800505c <__smakebuf_r+0x1c>
 800504c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005050:	6023      	str	r3, [r4, #0]
 8005052:	6123      	str	r3, [r4, #16]
 8005054:	2301      	movs	r3, #1
 8005056:	6163      	str	r3, [r4, #20]
 8005058:	b002      	add	sp, #8
 800505a:	bd70      	pop	{r4, r5, r6, pc}
 800505c:	ab01      	add	r3, sp, #4
 800505e:	466a      	mov	r2, sp
 8005060:	f7ff ffc8 	bl	8004ff4 <__swhatbuf_r>
 8005064:	9900      	ldr	r1, [sp, #0]
 8005066:	4605      	mov	r5, r0
 8005068:	4630      	mov	r0, r6
 800506a:	f000 f895 	bl	8005198 <_malloc_r>
 800506e:	b948      	cbnz	r0, 8005084 <__smakebuf_r+0x44>
 8005070:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005074:	059a      	lsls	r2, r3, #22
 8005076:	d4ef      	bmi.n	8005058 <__smakebuf_r+0x18>
 8005078:	f023 0303 	bic.w	r3, r3, #3
 800507c:	f043 0302 	orr.w	r3, r3, #2
 8005080:	81a3      	strh	r3, [r4, #12]
 8005082:	e7e3      	b.n	800504c <__smakebuf_r+0xc>
 8005084:	4b0d      	ldr	r3, [pc, #52]	; (80050bc <__smakebuf_r+0x7c>)
 8005086:	62b3      	str	r3, [r6, #40]	; 0x28
 8005088:	89a3      	ldrh	r3, [r4, #12]
 800508a:	6020      	str	r0, [r4, #0]
 800508c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005090:	81a3      	strh	r3, [r4, #12]
 8005092:	9b00      	ldr	r3, [sp, #0]
 8005094:	6163      	str	r3, [r4, #20]
 8005096:	9b01      	ldr	r3, [sp, #4]
 8005098:	6120      	str	r0, [r4, #16]
 800509a:	b15b      	cbz	r3, 80050b4 <__smakebuf_r+0x74>
 800509c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050a0:	4630      	mov	r0, r6
 80050a2:	f000 fc63 	bl	800596c <_isatty_r>
 80050a6:	b128      	cbz	r0, 80050b4 <__smakebuf_r+0x74>
 80050a8:	89a3      	ldrh	r3, [r4, #12]
 80050aa:	f023 0303 	bic.w	r3, r3, #3
 80050ae:	f043 0301 	orr.w	r3, r3, #1
 80050b2:	81a3      	strh	r3, [r4, #12]
 80050b4:	89a0      	ldrh	r0, [r4, #12]
 80050b6:	4305      	orrs	r5, r0
 80050b8:	81a5      	strh	r5, [r4, #12]
 80050ba:	e7cd      	b.n	8005058 <__smakebuf_r+0x18>
 80050bc:	08004e4d 	.word	0x08004e4d

080050c0 <_free_r>:
 80050c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050c2:	2900      	cmp	r1, #0
 80050c4:	d044      	beq.n	8005150 <_free_r+0x90>
 80050c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050ca:	9001      	str	r0, [sp, #4]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	f1a1 0404 	sub.w	r4, r1, #4
 80050d2:	bfb8      	it	lt
 80050d4:	18e4      	addlt	r4, r4, r3
 80050d6:	f000 fc6b 	bl	80059b0 <__malloc_lock>
 80050da:	4a1e      	ldr	r2, [pc, #120]	; (8005154 <_free_r+0x94>)
 80050dc:	9801      	ldr	r0, [sp, #4]
 80050de:	6813      	ldr	r3, [r2, #0]
 80050e0:	b933      	cbnz	r3, 80050f0 <_free_r+0x30>
 80050e2:	6063      	str	r3, [r4, #4]
 80050e4:	6014      	str	r4, [r2, #0]
 80050e6:	b003      	add	sp, #12
 80050e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050ec:	f000 bc66 	b.w	80059bc <__malloc_unlock>
 80050f0:	42a3      	cmp	r3, r4
 80050f2:	d908      	bls.n	8005106 <_free_r+0x46>
 80050f4:	6825      	ldr	r5, [r4, #0]
 80050f6:	1961      	adds	r1, r4, r5
 80050f8:	428b      	cmp	r3, r1
 80050fa:	bf01      	itttt	eq
 80050fc:	6819      	ldreq	r1, [r3, #0]
 80050fe:	685b      	ldreq	r3, [r3, #4]
 8005100:	1949      	addeq	r1, r1, r5
 8005102:	6021      	streq	r1, [r4, #0]
 8005104:	e7ed      	b.n	80050e2 <_free_r+0x22>
 8005106:	461a      	mov	r2, r3
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	b10b      	cbz	r3, 8005110 <_free_r+0x50>
 800510c:	42a3      	cmp	r3, r4
 800510e:	d9fa      	bls.n	8005106 <_free_r+0x46>
 8005110:	6811      	ldr	r1, [r2, #0]
 8005112:	1855      	adds	r5, r2, r1
 8005114:	42a5      	cmp	r5, r4
 8005116:	d10b      	bne.n	8005130 <_free_r+0x70>
 8005118:	6824      	ldr	r4, [r4, #0]
 800511a:	4421      	add	r1, r4
 800511c:	1854      	adds	r4, r2, r1
 800511e:	42a3      	cmp	r3, r4
 8005120:	6011      	str	r1, [r2, #0]
 8005122:	d1e0      	bne.n	80050e6 <_free_r+0x26>
 8005124:	681c      	ldr	r4, [r3, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	6053      	str	r3, [r2, #4]
 800512a:	4421      	add	r1, r4
 800512c:	6011      	str	r1, [r2, #0]
 800512e:	e7da      	b.n	80050e6 <_free_r+0x26>
 8005130:	d902      	bls.n	8005138 <_free_r+0x78>
 8005132:	230c      	movs	r3, #12
 8005134:	6003      	str	r3, [r0, #0]
 8005136:	e7d6      	b.n	80050e6 <_free_r+0x26>
 8005138:	6825      	ldr	r5, [r4, #0]
 800513a:	1961      	adds	r1, r4, r5
 800513c:	428b      	cmp	r3, r1
 800513e:	bf04      	itt	eq
 8005140:	6819      	ldreq	r1, [r3, #0]
 8005142:	685b      	ldreq	r3, [r3, #4]
 8005144:	6063      	str	r3, [r4, #4]
 8005146:	bf04      	itt	eq
 8005148:	1949      	addeq	r1, r1, r5
 800514a:	6021      	streq	r1, [r4, #0]
 800514c:	6054      	str	r4, [r2, #4]
 800514e:	e7ca      	b.n	80050e6 <_free_r+0x26>
 8005150:	b003      	add	sp, #12
 8005152:	bd30      	pop	{r4, r5, pc}
 8005154:	20000208 	.word	0x20000208

08005158 <sbrk_aligned>:
 8005158:	b570      	push	{r4, r5, r6, lr}
 800515a:	4e0e      	ldr	r6, [pc, #56]	; (8005194 <sbrk_aligned+0x3c>)
 800515c:	460c      	mov	r4, r1
 800515e:	6831      	ldr	r1, [r6, #0]
 8005160:	4605      	mov	r5, r0
 8005162:	b911      	cbnz	r1, 800516a <sbrk_aligned+0x12>
 8005164:	f000 fb7a 	bl	800585c <_sbrk_r>
 8005168:	6030      	str	r0, [r6, #0]
 800516a:	4621      	mov	r1, r4
 800516c:	4628      	mov	r0, r5
 800516e:	f000 fb75 	bl	800585c <_sbrk_r>
 8005172:	1c43      	adds	r3, r0, #1
 8005174:	d00a      	beq.n	800518c <sbrk_aligned+0x34>
 8005176:	1cc4      	adds	r4, r0, #3
 8005178:	f024 0403 	bic.w	r4, r4, #3
 800517c:	42a0      	cmp	r0, r4
 800517e:	d007      	beq.n	8005190 <sbrk_aligned+0x38>
 8005180:	1a21      	subs	r1, r4, r0
 8005182:	4628      	mov	r0, r5
 8005184:	f000 fb6a 	bl	800585c <_sbrk_r>
 8005188:	3001      	adds	r0, #1
 800518a:	d101      	bne.n	8005190 <sbrk_aligned+0x38>
 800518c:	f04f 34ff 	mov.w	r4, #4294967295
 8005190:	4620      	mov	r0, r4
 8005192:	bd70      	pop	{r4, r5, r6, pc}
 8005194:	2000020c 	.word	0x2000020c

08005198 <_malloc_r>:
 8005198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800519c:	1ccd      	adds	r5, r1, #3
 800519e:	f025 0503 	bic.w	r5, r5, #3
 80051a2:	3508      	adds	r5, #8
 80051a4:	2d0c      	cmp	r5, #12
 80051a6:	bf38      	it	cc
 80051a8:	250c      	movcc	r5, #12
 80051aa:	2d00      	cmp	r5, #0
 80051ac:	4607      	mov	r7, r0
 80051ae:	db01      	blt.n	80051b4 <_malloc_r+0x1c>
 80051b0:	42a9      	cmp	r1, r5
 80051b2:	d905      	bls.n	80051c0 <_malloc_r+0x28>
 80051b4:	230c      	movs	r3, #12
 80051b6:	603b      	str	r3, [r7, #0]
 80051b8:	2600      	movs	r6, #0
 80051ba:	4630      	mov	r0, r6
 80051bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051c0:	4e2e      	ldr	r6, [pc, #184]	; (800527c <_malloc_r+0xe4>)
 80051c2:	f000 fbf5 	bl	80059b0 <__malloc_lock>
 80051c6:	6833      	ldr	r3, [r6, #0]
 80051c8:	461c      	mov	r4, r3
 80051ca:	bb34      	cbnz	r4, 800521a <_malloc_r+0x82>
 80051cc:	4629      	mov	r1, r5
 80051ce:	4638      	mov	r0, r7
 80051d0:	f7ff ffc2 	bl	8005158 <sbrk_aligned>
 80051d4:	1c43      	adds	r3, r0, #1
 80051d6:	4604      	mov	r4, r0
 80051d8:	d14d      	bne.n	8005276 <_malloc_r+0xde>
 80051da:	6834      	ldr	r4, [r6, #0]
 80051dc:	4626      	mov	r6, r4
 80051de:	2e00      	cmp	r6, #0
 80051e0:	d140      	bne.n	8005264 <_malloc_r+0xcc>
 80051e2:	6823      	ldr	r3, [r4, #0]
 80051e4:	4631      	mov	r1, r6
 80051e6:	4638      	mov	r0, r7
 80051e8:	eb04 0803 	add.w	r8, r4, r3
 80051ec:	f000 fb36 	bl	800585c <_sbrk_r>
 80051f0:	4580      	cmp	r8, r0
 80051f2:	d13a      	bne.n	800526a <_malloc_r+0xd2>
 80051f4:	6821      	ldr	r1, [r4, #0]
 80051f6:	3503      	adds	r5, #3
 80051f8:	1a6d      	subs	r5, r5, r1
 80051fa:	f025 0503 	bic.w	r5, r5, #3
 80051fe:	3508      	adds	r5, #8
 8005200:	2d0c      	cmp	r5, #12
 8005202:	bf38      	it	cc
 8005204:	250c      	movcc	r5, #12
 8005206:	4629      	mov	r1, r5
 8005208:	4638      	mov	r0, r7
 800520a:	f7ff ffa5 	bl	8005158 <sbrk_aligned>
 800520e:	3001      	adds	r0, #1
 8005210:	d02b      	beq.n	800526a <_malloc_r+0xd2>
 8005212:	6823      	ldr	r3, [r4, #0]
 8005214:	442b      	add	r3, r5
 8005216:	6023      	str	r3, [r4, #0]
 8005218:	e00e      	b.n	8005238 <_malloc_r+0xa0>
 800521a:	6822      	ldr	r2, [r4, #0]
 800521c:	1b52      	subs	r2, r2, r5
 800521e:	d41e      	bmi.n	800525e <_malloc_r+0xc6>
 8005220:	2a0b      	cmp	r2, #11
 8005222:	d916      	bls.n	8005252 <_malloc_r+0xba>
 8005224:	1961      	adds	r1, r4, r5
 8005226:	42a3      	cmp	r3, r4
 8005228:	6025      	str	r5, [r4, #0]
 800522a:	bf18      	it	ne
 800522c:	6059      	strne	r1, [r3, #4]
 800522e:	6863      	ldr	r3, [r4, #4]
 8005230:	bf08      	it	eq
 8005232:	6031      	streq	r1, [r6, #0]
 8005234:	5162      	str	r2, [r4, r5]
 8005236:	604b      	str	r3, [r1, #4]
 8005238:	4638      	mov	r0, r7
 800523a:	f104 060b 	add.w	r6, r4, #11
 800523e:	f000 fbbd 	bl	80059bc <__malloc_unlock>
 8005242:	f026 0607 	bic.w	r6, r6, #7
 8005246:	1d23      	adds	r3, r4, #4
 8005248:	1af2      	subs	r2, r6, r3
 800524a:	d0b6      	beq.n	80051ba <_malloc_r+0x22>
 800524c:	1b9b      	subs	r3, r3, r6
 800524e:	50a3      	str	r3, [r4, r2]
 8005250:	e7b3      	b.n	80051ba <_malloc_r+0x22>
 8005252:	6862      	ldr	r2, [r4, #4]
 8005254:	42a3      	cmp	r3, r4
 8005256:	bf0c      	ite	eq
 8005258:	6032      	streq	r2, [r6, #0]
 800525a:	605a      	strne	r2, [r3, #4]
 800525c:	e7ec      	b.n	8005238 <_malloc_r+0xa0>
 800525e:	4623      	mov	r3, r4
 8005260:	6864      	ldr	r4, [r4, #4]
 8005262:	e7b2      	b.n	80051ca <_malloc_r+0x32>
 8005264:	4634      	mov	r4, r6
 8005266:	6876      	ldr	r6, [r6, #4]
 8005268:	e7b9      	b.n	80051de <_malloc_r+0x46>
 800526a:	230c      	movs	r3, #12
 800526c:	603b      	str	r3, [r7, #0]
 800526e:	4638      	mov	r0, r7
 8005270:	f000 fba4 	bl	80059bc <__malloc_unlock>
 8005274:	e7a1      	b.n	80051ba <_malloc_r+0x22>
 8005276:	6025      	str	r5, [r4, #0]
 8005278:	e7de      	b.n	8005238 <_malloc_r+0xa0>
 800527a:	bf00      	nop
 800527c:	20000208 	.word	0x20000208

08005280 <__sfputc_r>:
 8005280:	6893      	ldr	r3, [r2, #8]
 8005282:	3b01      	subs	r3, #1
 8005284:	2b00      	cmp	r3, #0
 8005286:	b410      	push	{r4}
 8005288:	6093      	str	r3, [r2, #8]
 800528a:	da08      	bge.n	800529e <__sfputc_r+0x1e>
 800528c:	6994      	ldr	r4, [r2, #24]
 800528e:	42a3      	cmp	r3, r4
 8005290:	db01      	blt.n	8005296 <__sfputc_r+0x16>
 8005292:	290a      	cmp	r1, #10
 8005294:	d103      	bne.n	800529e <__sfputc_r+0x1e>
 8005296:	f85d 4b04 	ldr.w	r4, [sp], #4
 800529a:	f7ff bc31 	b.w	8004b00 <__swbuf_r>
 800529e:	6813      	ldr	r3, [r2, #0]
 80052a0:	1c58      	adds	r0, r3, #1
 80052a2:	6010      	str	r0, [r2, #0]
 80052a4:	7019      	strb	r1, [r3, #0]
 80052a6:	4608      	mov	r0, r1
 80052a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <__sfputs_r>:
 80052ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052b0:	4606      	mov	r6, r0
 80052b2:	460f      	mov	r7, r1
 80052b4:	4614      	mov	r4, r2
 80052b6:	18d5      	adds	r5, r2, r3
 80052b8:	42ac      	cmp	r4, r5
 80052ba:	d101      	bne.n	80052c0 <__sfputs_r+0x12>
 80052bc:	2000      	movs	r0, #0
 80052be:	e007      	b.n	80052d0 <__sfputs_r+0x22>
 80052c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052c4:	463a      	mov	r2, r7
 80052c6:	4630      	mov	r0, r6
 80052c8:	f7ff ffda 	bl	8005280 <__sfputc_r>
 80052cc:	1c43      	adds	r3, r0, #1
 80052ce:	d1f3      	bne.n	80052b8 <__sfputs_r+0xa>
 80052d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080052d4 <_vfiprintf_r>:
 80052d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052d8:	460d      	mov	r5, r1
 80052da:	b09d      	sub	sp, #116	; 0x74
 80052dc:	4614      	mov	r4, r2
 80052de:	4698      	mov	r8, r3
 80052e0:	4606      	mov	r6, r0
 80052e2:	b118      	cbz	r0, 80052ec <_vfiprintf_r+0x18>
 80052e4:	6983      	ldr	r3, [r0, #24]
 80052e6:	b90b      	cbnz	r3, 80052ec <_vfiprintf_r+0x18>
 80052e8:	f7ff fde4 	bl	8004eb4 <__sinit>
 80052ec:	4b89      	ldr	r3, [pc, #548]	; (8005514 <_vfiprintf_r+0x240>)
 80052ee:	429d      	cmp	r5, r3
 80052f0:	d11b      	bne.n	800532a <_vfiprintf_r+0x56>
 80052f2:	6875      	ldr	r5, [r6, #4]
 80052f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80052f6:	07d9      	lsls	r1, r3, #31
 80052f8:	d405      	bmi.n	8005306 <_vfiprintf_r+0x32>
 80052fa:	89ab      	ldrh	r3, [r5, #12]
 80052fc:	059a      	lsls	r2, r3, #22
 80052fe:	d402      	bmi.n	8005306 <_vfiprintf_r+0x32>
 8005300:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005302:	f7ff fe75 	bl	8004ff0 <__retarget_lock_acquire_recursive>
 8005306:	89ab      	ldrh	r3, [r5, #12]
 8005308:	071b      	lsls	r3, r3, #28
 800530a:	d501      	bpl.n	8005310 <_vfiprintf_r+0x3c>
 800530c:	692b      	ldr	r3, [r5, #16]
 800530e:	b9eb      	cbnz	r3, 800534c <_vfiprintf_r+0x78>
 8005310:	4629      	mov	r1, r5
 8005312:	4630      	mov	r0, r6
 8005314:	f7ff fc46 	bl	8004ba4 <__swsetup_r>
 8005318:	b1c0      	cbz	r0, 800534c <_vfiprintf_r+0x78>
 800531a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800531c:	07dc      	lsls	r4, r3, #31
 800531e:	d50e      	bpl.n	800533e <_vfiprintf_r+0x6a>
 8005320:	f04f 30ff 	mov.w	r0, #4294967295
 8005324:	b01d      	add	sp, #116	; 0x74
 8005326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800532a:	4b7b      	ldr	r3, [pc, #492]	; (8005518 <_vfiprintf_r+0x244>)
 800532c:	429d      	cmp	r5, r3
 800532e:	d101      	bne.n	8005334 <_vfiprintf_r+0x60>
 8005330:	68b5      	ldr	r5, [r6, #8]
 8005332:	e7df      	b.n	80052f4 <_vfiprintf_r+0x20>
 8005334:	4b79      	ldr	r3, [pc, #484]	; (800551c <_vfiprintf_r+0x248>)
 8005336:	429d      	cmp	r5, r3
 8005338:	bf08      	it	eq
 800533a:	68f5      	ldreq	r5, [r6, #12]
 800533c:	e7da      	b.n	80052f4 <_vfiprintf_r+0x20>
 800533e:	89ab      	ldrh	r3, [r5, #12]
 8005340:	0598      	lsls	r0, r3, #22
 8005342:	d4ed      	bmi.n	8005320 <_vfiprintf_r+0x4c>
 8005344:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005346:	f7ff fe54 	bl	8004ff2 <__retarget_lock_release_recursive>
 800534a:	e7e9      	b.n	8005320 <_vfiprintf_r+0x4c>
 800534c:	2300      	movs	r3, #0
 800534e:	9309      	str	r3, [sp, #36]	; 0x24
 8005350:	2320      	movs	r3, #32
 8005352:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005356:	f8cd 800c 	str.w	r8, [sp, #12]
 800535a:	2330      	movs	r3, #48	; 0x30
 800535c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005520 <_vfiprintf_r+0x24c>
 8005360:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005364:	f04f 0901 	mov.w	r9, #1
 8005368:	4623      	mov	r3, r4
 800536a:	469a      	mov	sl, r3
 800536c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005370:	b10a      	cbz	r2, 8005376 <_vfiprintf_r+0xa2>
 8005372:	2a25      	cmp	r2, #37	; 0x25
 8005374:	d1f9      	bne.n	800536a <_vfiprintf_r+0x96>
 8005376:	ebba 0b04 	subs.w	fp, sl, r4
 800537a:	d00b      	beq.n	8005394 <_vfiprintf_r+0xc0>
 800537c:	465b      	mov	r3, fp
 800537e:	4622      	mov	r2, r4
 8005380:	4629      	mov	r1, r5
 8005382:	4630      	mov	r0, r6
 8005384:	f7ff ff93 	bl	80052ae <__sfputs_r>
 8005388:	3001      	adds	r0, #1
 800538a:	f000 80aa 	beq.w	80054e2 <_vfiprintf_r+0x20e>
 800538e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005390:	445a      	add	r2, fp
 8005392:	9209      	str	r2, [sp, #36]	; 0x24
 8005394:	f89a 3000 	ldrb.w	r3, [sl]
 8005398:	2b00      	cmp	r3, #0
 800539a:	f000 80a2 	beq.w	80054e2 <_vfiprintf_r+0x20e>
 800539e:	2300      	movs	r3, #0
 80053a0:	f04f 32ff 	mov.w	r2, #4294967295
 80053a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053a8:	f10a 0a01 	add.w	sl, sl, #1
 80053ac:	9304      	str	r3, [sp, #16]
 80053ae:	9307      	str	r3, [sp, #28]
 80053b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053b4:	931a      	str	r3, [sp, #104]	; 0x68
 80053b6:	4654      	mov	r4, sl
 80053b8:	2205      	movs	r2, #5
 80053ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053be:	4858      	ldr	r0, [pc, #352]	; (8005520 <_vfiprintf_r+0x24c>)
 80053c0:	f7fa ff06 	bl	80001d0 <memchr>
 80053c4:	9a04      	ldr	r2, [sp, #16]
 80053c6:	b9d8      	cbnz	r0, 8005400 <_vfiprintf_r+0x12c>
 80053c8:	06d1      	lsls	r1, r2, #27
 80053ca:	bf44      	itt	mi
 80053cc:	2320      	movmi	r3, #32
 80053ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053d2:	0713      	lsls	r3, r2, #28
 80053d4:	bf44      	itt	mi
 80053d6:	232b      	movmi	r3, #43	; 0x2b
 80053d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053dc:	f89a 3000 	ldrb.w	r3, [sl]
 80053e0:	2b2a      	cmp	r3, #42	; 0x2a
 80053e2:	d015      	beq.n	8005410 <_vfiprintf_r+0x13c>
 80053e4:	9a07      	ldr	r2, [sp, #28]
 80053e6:	4654      	mov	r4, sl
 80053e8:	2000      	movs	r0, #0
 80053ea:	f04f 0c0a 	mov.w	ip, #10
 80053ee:	4621      	mov	r1, r4
 80053f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053f4:	3b30      	subs	r3, #48	; 0x30
 80053f6:	2b09      	cmp	r3, #9
 80053f8:	d94e      	bls.n	8005498 <_vfiprintf_r+0x1c4>
 80053fa:	b1b0      	cbz	r0, 800542a <_vfiprintf_r+0x156>
 80053fc:	9207      	str	r2, [sp, #28]
 80053fe:	e014      	b.n	800542a <_vfiprintf_r+0x156>
 8005400:	eba0 0308 	sub.w	r3, r0, r8
 8005404:	fa09 f303 	lsl.w	r3, r9, r3
 8005408:	4313      	orrs	r3, r2
 800540a:	9304      	str	r3, [sp, #16]
 800540c:	46a2      	mov	sl, r4
 800540e:	e7d2      	b.n	80053b6 <_vfiprintf_r+0xe2>
 8005410:	9b03      	ldr	r3, [sp, #12]
 8005412:	1d19      	adds	r1, r3, #4
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	9103      	str	r1, [sp, #12]
 8005418:	2b00      	cmp	r3, #0
 800541a:	bfbb      	ittet	lt
 800541c:	425b      	neglt	r3, r3
 800541e:	f042 0202 	orrlt.w	r2, r2, #2
 8005422:	9307      	strge	r3, [sp, #28]
 8005424:	9307      	strlt	r3, [sp, #28]
 8005426:	bfb8      	it	lt
 8005428:	9204      	strlt	r2, [sp, #16]
 800542a:	7823      	ldrb	r3, [r4, #0]
 800542c:	2b2e      	cmp	r3, #46	; 0x2e
 800542e:	d10c      	bne.n	800544a <_vfiprintf_r+0x176>
 8005430:	7863      	ldrb	r3, [r4, #1]
 8005432:	2b2a      	cmp	r3, #42	; 0x2a
 8005434:	d135      	bne.n	80054a2 <_vfiprintf_r+0x1ce>
 8005436:	9b03      	ldr	r3, [sp, #12]
 8005438:	1d1a      	adds	r2, r3, #4
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	9203      	str	r2, [sp, #12]
 800543e:	2b00      	cmp	r3, #0
 8005440:	bfb8      	it	lt
 8005442:	f04f 33ff 	movlt.w	r3, #4294967295
 8005446:	3402      	adds	r4, #2
 8005448:	9305      	str	r3, [sp, #20]
 800544a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005530 <_vfiprintf_r+0x25c>
 800544e:	7821      	ldrb	r1, [r4, #0]
 8005450:	2203      	movs	r2, #3
 8005452:	4650      	mov	r0, sl
 8005454:	f7fa febc 	bl	80001d0 <memchr>
 8005458:	b140      	cbz	r0, 800546c <_vfiprintf_r+0x198>
 800545a:	2340      	movs	r3, #64	; 0x40
 800545c:	eba0 000a 	sub.w	r0, r0, sl
 8005460:	fa03 f000 	lsl.w	r0, r3, r0
 8005464:	9b04      	ldr	r3, [sp, #16]
 8005466:	4303      	orrs	r3, r0
 8005468:	3401      	adds	r4, #1
 800546a:	9304      	str	r3, [sp, #16]
 800546c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005470:	482c      	ldr	r0, [pc, #176]	; (8005524 <_vfiprintf_r+0x250>)
 8005472:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005476:	2206      	movs	r2, #6
 8005478:	f7fa feaa 	bl	80001d0 <memchr>
 800547c:	2800      	cmp	r0, #0
 800547e:	d03f      	beq.n	8005500 <_vfiprintf_r+0x22c>
 8005480:	4b29      	ldr	r3, [pc, #164]	; (8005528 <_vfiprintf_r+0x254>)
 8005482:	bb1b      	cbnz	r3, 80054cc <_vfiprintf_r+0x1f8>
 8005484:	9b03      	ldr	r3, [sp, #12]
 8005486:	3307      	adds	r3, #7
 8005488:	f023 0307 	bic.w	r3, r3, #7
 800548c:	3308      	adds	r3, #8
 800548e:	9303      	str	r3, [sp, #12]
 8005490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005492:	443b      	add	r3, r7
 8005494:	9309      	str	r3, [sp, #36]	; 0x24
 8005496:	e767      	b.n	8005368 <_vfiprintf_r+0x94>
 8005498:	fb0c 3202 	mla	r2, ip, r2, r3
 800549c:	460c      	mov	r4, r1
 800549e:	2001      	movs	r0, #1
 80054a0:	e7a5      	b.n	80053ee <_vfiprintf_r+0x11a>
 80054a2:	2300      	movs	r3, #0
 80054a4:	3401      	adds	r4, #1
 80054a6:	9305      	str	r3, [sp, #20]
 80054a8:	4619      	mov	r1, r3
 80054aa:	f04f 0c0a 	mov.w	ip, #10
 80054ae:	4620      	mov	r0, r4
 80054b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054b4:	3a30      	subs	r2, #48	; 0x30
 80054b6:	2a09      	cmp	r2, #9
 80054b8:	d903      	bls.n	80054c2 <_vfiprintf_r+0x1ee>
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d0c5      	beq.n	800544a <_vfiprintf_r+0x176>
 80054be:	9105      	str	r1, [sp, #20]
 80054c0:	e7c3      	b.n	800544a <_vfiprintf_r+0x176>
 80054c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80054c6:	4604      	mov	r4, r0
 80054c8:	2301      	movs	r3, #1
 80054ca:	e7f0      	b.n	80054ae <_vfiprintf_r+0x1da>
 80054cc:	ab03      	add	r3, sp, #12
 80054ce:	9300      	str	r3, [sp, #0]
 80054d0:	462a      	mov	r2, r5
 80054d2:	4b16      	ldr	r3, [pc, #88]	; (800552c <_vfiprintf_r+0x258>)
 80054d4:	a904      	add	r1, sp, #16
 80054d6:	4630      	mov	r0, r6
 80054d8:	f3af 8000 	nop.w
 80054dc:	4607      	mov	r7, r0
 80054de:	1c78      	adds	r0, r7, #1
 80054e0:	d1d6      	bne.n	8005490 <_vfiprintf_r+0x1bc>
 80054e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054e4:	07d9      	lsls	r1, r3, #31
 80054e6:	d405      	bmi.n	80054f4 <_vfiprintf_r+0x220>
 80054e8:	89ab      	ldrh	r3, [r5, #12]
 80054ea:	059a      	lsls	r2, r3, #22
 80054ec:	d402      	bmi.n	80054f4 <_vfiprintf_r+0x220>
 80054ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054f0:	f7ff fd7f 	bl	8004ff2 <__retarget_lock_release_recursive>
 80054f4:	89ab      	ldrh	r3, [r5, #12]
 80054f6:	065b      	lsls	r3, r3, #25
 80054f8:	f53f af12 	bmi.w	8005320 <_vfiprintf_r+0x4c>
 80054fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054fe:	e711      	b.n	8005324 <_vfiprintf_r+0x50>
 8005500:	ab03      	add	r3, sp, #12
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	462a      	mov	r2, r5
 8005506:	4b09      	ldr	r3, [pc, #36]	; (800552c <_vfiprintf_r+0x258>)
 8005508:	a904      	add	r1, sp, #16
 800550a:	4630      	mov	r0, r6
 800550c:	f000 f880 	bl	8005610 <_printf_i>
 8005510:	e7e4      	b.n	80054dc <_vfiprintf_r+0x208>
 8005512:	bf00      	nop
 8005514:	08005a78 	.word	0x08005a78
 8005518:	08005a98 	.word	0x08005a98
 800551c:	08005a58 	.word	0x08005a58
 8005520:	08005ab8 	.word	0x08005ab8
 8005524:	08005ac2 	.word	0x08005ac2
 8005528:	00000000 	.word	0x00000000
 800552c:	080052af 	.word	0x080052af
 8005530:	08005abe 	.word	0x08005abe

08005534 <_printf_common>:
 8005534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005538:	4616      	mov	r6, r2
 800553a:	4699      	mov	r9, r3
 800553c:	688a      	ldr	r2, [r1, #8]
 800553e:	690b      	ldr	r3, [r1, #16]
 8005540:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005544:	4293      	cmp	r3, r2
 8005546:	bfb8      	it	lt
 8005548:	4613      	movlt	r3, r2
 800554a:	6033      	str	r3, [r6, #0]
 800554c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005550:	4607      	mov	r7, r0
 8005552:	460c      	mov	r4, r1
 8005554:	b10a      	cbz	r2, 800555a <_printf_common+0x26>
 8005556:	3301      	adds	r3, #1
 8005558:	6033      	str	r3, [r6, #0]
 800555a:	6823      	ldr	r3, [r4, #0]
 800555c:	0699      	lsls	r1, r3, #26
 800555e:	bf42      	ittt	mi
 8005560:	6833      	ldrmi	r3, [r6, #0]
 8005562:	3302      	addmi	r3, #2
 8005564:	6033      	strmi	r3, [r6, #0]
 8005566:	6825      	ldr	r5, [r4, #0]
 8005568:	f015 0506 	ands.w	r5, r5, #6
 800556c:	d106      	bne.n	800557c <_printf_common+0x48>
 800556e:	f104 0a19 	add.w	sl, r4, #25
 8005572:	68e3      	ldr	r3, [r4, #12]
 8005574:	6832      	ldr	r2, [r6, #0]
 8005576:	1a9b      	subs	r3, r3, r2
 8005578:	42ab      	cmp	r3, r5
 800557a:	dc26      	bgt.n	80055ca <_printf_common+0x96>
 800557c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005580:	1e13      	subs	r3, r2, #0
 8005582:	6822      	ldr	r2, [r4, #0]
 8005584:	bf18      	it	ne
 8005586:	2301      	movne	r3, #1
 8005588:	0692      	lsls	r2, r2, #26
 800558a:	d42b      	bmi.n	80055e4 <_printf_common+0xb0>
 800558c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005590:	4649      	mov	r1, r9
 8005592:	4638      	mov	r0, r7
 8005594:	47c0      	blx	r8
 8005596:	3001      	adds	r0, #1
 8005598:	d01e      	beq.n	80055d8 <_printf_common+0xa4>
 800559a:	6823      	ldr	r3, [r4, #0]
 800559c:	68e5      	ldr	r5, [r4, #12]
 800559e:	6832      	ldr	r2, [r6, #0]
 80055a0:	f003 0306 	and.w	r3, r3, #6
 80055a4:	2b04      	cmp	r3, #4
 80055a6:	bf08      	it	eq
 80055a8:	1aad      	subeq	r5, r5, r2
 80055aa:	68a3      	ldr	r3, [r4, #8]
 80055ac:	6922      	ldr	r2, [r4, #16]
 80055ae:	bf0c      	ite	eq
 80055b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055b4:	2500      	movne	r5, #0
 80055b6:	4293      	cmp	r3, r2
 80055b8:	bfc4      	itt	gt
 80055ba:	1a9b      	subgt	r3, r3, r2
 80055bc:	18ed      	addgt	r5, r5, r3
 80055be:	2600      	movs	r6, #0
 80055c0:	341a      	adds	r4, #26
 80055c2:	42b5      	cmp	r5, r6
 80055c4:	d11a      	bne.n	80055fc <_printf_common+0xc8>
 80055c6:	2000      	movs	r0, #0
 80055c8:	e008      	b.n	80055dc <_printf_common+0xa8>
 80055ca:	2301      	movs	r3, #1
 80055cc:	4652      	mov	r2, sl
 80055ce:	4649      	mov	r1, r9
 80055d0:	4638      	mov	r0, r7
 80055d2:	47c0      	blx	r8
 80055d4:	3001      	adds	r0, #1
 80055d6:	d103      	bne.n	80055e0 <_printf_common+0xac>
 80055d8:	f04f 30ff 	mov.w	r0, #4294967295
 80055dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055e0:	3501      	adds	r5, #1
 80055e2:	e7c6      	b.n	8005572 <_printf_common+0x3e>
 80055e4:	18e1      	adds	r1, r4, r3
 80055e6:	1c5a      	adds	r2, r3, #1
 80055e8:	2030      	movs	r0, #48	; 0x30
 80055ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055ee:	4422      	add	r2, r4
 80055f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80055f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80055f8:	3302      	adds	r3, #2
 80055fa:	e7c7      	b.n	800558c <_printf_common+0x58>
 80055fc:	2301      	movs	r3, #1
 80055fe:	4622      	mov	r2, r4
 8005600:	4649      	mov	r1, r9
 8005602:	4638      	mov	r0, r7
 8005604:	47c0      	blx	r8
 8005606:	3001      	adds	r0, #1
 8005608:	d0e6      	beq.n	80055d8 <_printf_common+0xa4>
 800560a:	3601      	adds	r6, #1
 800560c:	e7d9      	b.n	80055c2 <_printf_common+0x8e>
	...

08005610 <_printf_i>:
 8005610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005614:	7e0f      	ldrb	r7, [r1, #24]
 8005616:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005618:	2f78      	cmp	r7, #120	; 0x78
 800561a:	4691      	mov	r9, r2
 800561c:	4680      	mov	r8, r0
 800561e:	460c      	mov	r4, r1
 8005620:	469a      	mov	sl, r3
 8005622:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005626:	d807      	bhi.n	8005638 <_printf_i+0x28>
 8005628:	2f62      	cmp	r7, #98	; 0x62
 800562a:	d80a      	bhi.n	8005642 <_printf_i+0x32>
 800562c:	2f00      	cmp	r7, #0
 800562e:	f000 80d8 	beq.w	80057e2 <_printf_i+0x1d2>
 8005632:	2f58      	cmp	r7, #88	; 0x58
 8005634:	f000 80a3 	beq.w	800577e <_printf_i+0x16e>
 8005638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800563c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005640:	e03a      	b.n	80056b8 <_printf_i+0xa8>
 8005642:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005646:	2b15      	cmp	r3, #21
 8005648:	d8f6      	bhi.n	8005638 <_printf_i+0x28>
 800564a:	a101      	add	r1, pc, #4	; (adr r1, 8005650 <_printf_i+0x40>)
 800564c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005650:	080056a9 	.word	0x080056a9
 8005654:	080056bd 	.word	0x080056bd
 8005658:	08005639 	.word	0x08005639
 800565c:	08005639 	.word	0x08005639
 8005660:	08005639 	.word	0x08005639
 8005664:	08005639 	.word	0x08005639
 8005668:	080056bd 	.word	0x080056bd
 800566c:	08005639 	.word	0x08005639
 8005670:	08005639 	.word	0x08005639
 8005674:	08005639 	.word	0x08005639
 8005678:	08005639 	.word	0x08005639
 800567c:	080057c9 	.word	0x080057c9
 8005680:	080056ed 	.word	0x080056ed
 8005684:	080057ab 	.word	0x080057ab
 8005688:	08005639 	.word	0x08005639
 800568c:	08005639 	.word	0x08005639
 8005690:	080057eb 	.word	0x080057eb
 8005694:	08005639 	.word	0x08005639
 8005698:	080056ed 	.word	0x080056ed
 800569c:	08005639 	.word	0x08005639
 80056a0:	08005639 	.word	0x08005639
 80056a4:	080057b3 	.word	0x080057b3
 80056a8:	682b      	ldr	r3, [r5, #0]
 80056aa:	1d1a      	adds	r2, r3, #4
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	602a      	str	r2, [r5, #0]
 80056b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056b8:	2301      	movs	r3, #1
 80056ba:	e0a3      	b.n	8005804 <_printf_i+0x1f4>
 80056bc:	6820      	ldr	r0, [r4, #0]
 80056be:	6829      	ldr	r1, [r5, #0]
 80056c0:	0606      	lsls	r6, r0, #24
 80056c2:	f101 0304 	add.w	r3, r1, #4
 80056c6:	d50a      	bpl.n	80056de <_printf_i+0xce>
 80056c8:	680e      	ldr	r6, [r1, #0]
 80056ca:	602b      	str	r3, [r5, #0]
 80056cc:	2e00      	cmp	r6, #0
 80056ce:	da03      	bge.n	80056d8 <_printf_i+0xc8>
 80056d0:	232d      	movs	r3, #45	; 0x2d
 80056d2:	4276      	negs	r6, r6
 80056d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056d8:	485e      	ldr	r0, [pc, #376]	; (8005854 <_printf_i+0x244>)
 80056da:	230a      	movs	r3, #10
 80056dc:	e019      	b.n	8005712 <_printf_i+0x102>
 80056de:	680e      	ldr	r6, [r1, #0]
 80056e0:	602b      	str	r3, [r5, #0]
 80056e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80056e6:	bf18      	it	ne
 80056e8:	b236      	sxthne	r6, r6
 80056ea:	e7ef      	b.n	80056cc <_printf_i+0xbc>
 80056ec:	682b      	ldr	r3, [r5, #0]
 80056ee:	6820      	ldr	r0, [r4, #0]
 80056f0:	1d19      	adds	r1, r3, #4
 80056f2:	6029      	str	r1, [r5, #0]
 80056f4:	0601      	lsls	r1, r0, #24
 80056f6:	d501      	bpl.n	80056fc <_printf_i+0xec>
 80056f8:	681e      	ldr	r6, [r3, #0]
 80056fa:	e002      	b.n	8005702 <_printf_i+0xf2>
 80056fc:	0646      	lsls	r6, r0, #25
 80056fe:	d5fb      	bpl.n	80056f8 <_printf_i+0xe8>
 8005700:	881e      	ldrh	r6, [r3, #0]
 8005702:	4854      	ldr	r0, [pc, #336]	; (8005854 <_printf_i+0x244>)
 8005704:	2f6f      	cmp	r7, #111	; 0x6f
 8005706:	bf0c      	ite	eq
 8005708:	2308      	moveq	r3, #8
 800570a:	230a      	movne	r3, #10
 800570c:	2100      	movs	r1, #0
 800570e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005712:	6865      	ldr	r5, [r4, #4]
 8005714:	60a5      	str	r5, [r4, #8]
 8005716:	2d00      	cmp	r5, #0
 8005718:	bfa2      	ittt	ge
 800571a:	6821      	ldrge	r1, [r4, #0]
 800571c:	f021 0104 	bicge.w	r1, r1, #4
 8005720:	6021      	strge	r1, [r4, #0]
 8005722:	b90e      	cbnz	r6, 8005728 <_printf_i+0x118>
 8005724:	2d00      	cmp	r5, #0
 8005726:	d04d      	beq.n	80057c4 <_printf_i+0x1b4>
 8005728:	4615      	mov	r5, r2
 800572a:	fbb6 f1f3 	udiv	r1, r6, r3
 800572e:	fb03 6711 	mls	r7, r3, r1, r6
 8005732:	5dc7      	ldrb	r7, [r0, r7]
 8005734:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005738:	4637      	mov	r7, r6
 800573a:	42bb      	cmp	r3, r7
 800573c:	460e      	mov	r6, r1
 800573e:	d9f4      	bls.n	800572a <_printf_i+0x11a>
 8005740:	2b08      	cmp	r3, #8
 8005742:	d10b      	bne.n	800575c <_printf_i+0x14c>
 8005744:	6823      	ldr	r3, [r4, #0]
 8005746:	07de      	lsls	r6, r3, #31
 8005748:	d508      	bpl.n	800575c <_printf_i+0x14c>
 800574a:	6923      	ldr	r3, [r4, #16]
 800574c:	6861      	ldr	r1, [r4, #4]
 800574e:	4299      	cmp	r1, r3
 8005750:	bfde      	ittt	le
 8005752:	2330      	movle	r3, #48	; 0x30
 8005754:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005758:	f105 35ff 	addle.w	r5, r5, #4294967295
 800575c:	1b52      	subs	r2, r2, r5
 800575e:	6122      	str	r2, [r4, #16]
 8005760:	f8cd a000 	str.w	sl, [sp]
 8005764:	464b      	mov	r3, r9
 8005766:	aa03      	add	r2, sp, #12
 8005768:	4621      	mov	r1, r4
 800576a:	4640      	mov	r0, r8
 800576c:	f7ff fee2 	bl	8005534 <_printf_common>
 8005770:	3001      	adds	r0, #1
 8005772:	d14c      	bne.n	800580e <_printf_i+0x1fe>
 8005774:	f04f 30ff 	mov.w	r0, #4294967295
 8005778:	b004      	add	sp, #16
 800577a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800577e:	4835      	ldr	r0, [pc, #212]	; (8005854 <_printf_i+0x244>)
 8005780:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005784:	6829      	ldr	r1, [r5, #0]
 8005786:	6823      	ldr	r3, [r4, #0]
 8005788:	f851 6b04 	ldr.w	r6, [r1], #4
 800578c:	6029      	str	r1, [r5, #0]
 800578e:	061d      	lsls	r5, r3, #24
 8005790:	d514      	bpl.n	80057bc <_printf_i+0x1ac>
 8005792:	07df      	lsls	r7, r3, #31
 8005794:	bf44      	itt	mi
 8005796:	f043 0320 	orrmi.w	r3, r3, #32
 800579a:	6023      	strmi	r3, [r4, #0]
 800579c:	b91e      	cbnz	r6, 80057a6 <_printf_i+0x196>
 800579e:	6823      	ldr	r3, [r4, #0]
 80057a0:	f023 0320 	bic.w	r3, r3, #32
 80057a4:	6023      	str	r3, [r4, #0]
 80057a6:	2310      	movs	r3, #16
 80057a8:	e7b0      	b.n	800570c <_printf_i+0xfc>
 80057aa:	6823      	ldr	r3, [r4, #0]
 80057ac:	f043 0320 	orr.w	r3, r3, #32
 80057b0:	6023      	str	r3, [r4, #0]
 80057b2:	2378      	movs	r3, #120	; 0x78
 80057b4:	4828      	ldr	r0, [pc, #160]	; (8005858 <_printf_i+0x248>)
 80057b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80057ba:	e7e3      	b.n	8005784 <_printf_i+0x174>
 80057bc:	0659      	lsls	r1, r3, #25
 80057be:	bf48      	it	mi
 80057c0:	b2b6      	uxthmi	r6, r6
 80057c2:	e7e6      	b.n	8005792 <_printf_i+0x182>
 80057c4:	4615      	mov	r5, r2
 80057c6:	e7bb      	b.n	8005740 <_printf_i+0x130>
 80057c8:	682b      	ldr	r3, [r5, #0]
 80057ca:	6826      	ldr	r6, [r4, #0]
 80057cc:	6961      	ldr	r1, [r4, #20]
 80057ce:	1d18      	adds	r0, r3, #4
 80057d0:	6028      	str	r0, [r5, #0]
 80057d2:	0635      	lsls	r5, r6, #24
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	d501      	bpl.n	80057dc <_printf_i+0x1cc>
 80057d8:	6019      	str	r1, [r3, #0]
 80057da:	e002      	b.n	80057e2 <_printf_i+0x1d2>
 80057dc:	0670      	lsls	r0, r6, #25
 80057de:	d5fb      	bpl.n	80057d8 <_printf_i+0x1c8>
 80057e0:	8019      	strh	r1, [r3, #0]
 80057e2:	2300      	movs	r3, #0
 80057e4:	6123      	str	r3, [r4, #16]
 80057e6:	4615      	mov	r5, r2
 80057e8:	e7ba      	b.n	8005760 <_printf_i+0x150>
 80057ea:	682b      	ldr	r3, [r5, #0]
 80057ec:	1d1a      	adds	r2, r3, #4
 80057ee:	602a      	str	r2, [r5, #0]
 80057f0:	681d      	ldr	r5, [r3, #0]
 80057f2:	6862      	ldr	r2, [r4, #4]
 80057f4:	2100      	movs	r1, #0
 80057f6:	4628      	mov	r0, r5
 80057f8:	f7fa fcea 	bl	80001d0 <memchr>
 80057fc:	b108      	cbz	r0, 8005802 <_printf_i+0x1f2>
 80057fe:	1b40      	subs	r0, r0, r5
 8005800:	6060      	str	r0, [r4, #4]
 8005802:	6863      	ldr	r3, [r4, #4]
 8005804:	6123      	str	r3, [r4, #16]
 8005806:	2300      	movs	r3, #0
 8005808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800580c:	e7a8      	b.n	8005760 <_printf_i+0x150>
 800580e:	6923      	ldr	r3, [r4, #16]
 8005810:	462a      	mov	r2, r5
 8005812:	4649      	mov	r1, r9
 8005814:	4640      	mov	r0, r8
 8005816:	47d0      	blx	sl
 8005818:	3001      	adds	r0, #1
 800581a:	d0ab      	beq.n	8005774 <_printf_i+0x164>
 800581c:	6823      	ldr	r3, [r4, #0]
 800581e:	079b      	lsls	r3, r3, #30
 8005820:	d413      	bmi.n	800584a <_printf_i+0x23a>
 8005822:	68e0      	ldr	r0, [r4, #12]
 8005824:	9b03      	ldr	r3, [sp, #12]
 8005826:	4298      	cmp	r0, r3
 8005828:	bfb8      	it	lt
 800582a:	4618      	movlt	r0, r3
 800582c:	e7a4      	b.n	8005778 <_printf_i+0x168>
 800582e:	2301      	movs	r3, #1
 8005830:	4632      	mov	r2, r6
 8005832:	4649      	mov	r1, r9
 8005834:	4640      	mov	r0, r8
 8005836:	47d0      	blx	sl
 8005838:	3001      	adds	r0, #1
 800583a:	d09b      	beq.n	8005774 <_printf_i+0x164>
 800583c:	3501      	adds	r5, #1
 800583e:	68e3      	ldr	r3, [r4, #12]
 8005840:	9903      	ldr	r1, [sp, #12]
 8005842:	1a5b      	subs	r3, r3, r1
 8005844:	42ab      	cmp	r3, r5
 8005846:	dcf2      	bgt.n	800582e <_printf_i+0x21e>
 8005848:	e7eb      	b.n	8005822 <_printf_i+0x212>
 800584a:	2500      	movs	r5, #0
 800584c:	f104 0619 	add.w	r6, r4, #25
 8005850:	e7f5      	b.n	800583e <_printf_i+0x22e>
 8005852:	bf00      	nop
 8005854:	08005ac9 	.word	0x08005ac9
 8005858:	08005ada 	.word	0x08005ada

0800585c <_sbrk_r>:
 800585c:	b538      	push	{r3, r4, r5, lr}
 800585e:	4d06      	ldr	r5, [pc, #24]	; (8005878 <_sbrk_r+0x1c>)
 8005860:	2300      	movs	r3, #0
 8005862:	4604      	mov	r4, r0
 8005864:	4608      	mov	r0, r1
 8005866:	602b      	str	r3, [r5, #0]
 8005868:	f7fb f93c 	bl	8000ae4 <_sbrk>
 800586c:	1c43      	adds	r3, r0, #1
 800586e:	d102      	bne.n	8005876 <_sbrk_r+0x1a>
 8005870:	682b      	ldr	r3, [r5, #0]
 8005872:	b103      	cbz	r3, 8005876 <_sbrk_r+0x1a>
 8005874:	6023      	str	r3, [r4, #0]
 8005876:	bd38      	pop	{r3, r4, r5, pc}
 8005878:	20000210 	.word	0x20000210

0800587c <__sread>:
 800587c:	b510      	push	{r4, lr}
 800587e:	460c      	mov	r4, r1
 8005880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005884:	f000 f8a0 	bl	80059c8 <_read_r>
 8005888:	2800      	cmp	r0, #0
 800588a:	bfab      	itete	ge
 800588c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800588e:	89a3      	ldrhlt	r3, [r4, #12]
 8005890:	181b      	addge	r3, r3, r0
 8005892:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005896:	bfac      	ite	ge
 8005898:	6563      	strge	r3, [r4, #84]	; 0x54
 800589a:	81a3      	strhlt	r3, [r4, #12]
 800589c:	bd10      	pop	{r4, pc}

0800589e <__swrite>:
 800589e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058a2:	461f      	mov	r7, r3
 80058a4:	898b      	ldrh	r3, [r1, #12]
 80058a6:	05db      	lsls	r3, r3, #23
 80058a8:	4605      	mov	r5, r0
 80058aa:	460c      	mov	r4, r1
 80058ac:	4616      	mov	r6, r2
 80058ae:	d505      	bpl.n	80058bc <__swrite+0x1e>
 80058b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058b4:	2302      	movs	r3, #2
 80058b6:	2200      	movs	r2, #0
 80058b8:	f000 f868 	bl	800598c <_lseek_r>
 80058bc:	89a3      	ldrh	r3, [r4, #12]
 80058be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058c6:	81a3      	strh	r3, [r4, #12]
 80058c8:	4632      	mov	r2, r6
 80058ca:	463b      	mov	r3, r7
 80058cc:	4628      	mov	r0, r5
 80058ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058d2:	f000 b817 	b.w	8005904 <_write_r>

080058d6 <__sseek>:
 80058d6:	b510      	push	{r4, lr}
 80058d8:	460c      	mov	r4, r1
 80058da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058de:	f000 f855 	bl	800598c <_lseek_r>
 80058e2:	1c43      	adds	r3, r0, #1
 80058e4:	89a3      	ldrh	r3, [r4, #12]
 80058e6:	bf15      	itete	ne
 80058e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80058ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80058ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80058f2:	81a3      	strheq	r3, [r4, #12]
 80058f4:	bf18      	it	ne
 80058f6:	81a3      	strhne	r3, [r4, #12]
 80058f8:	bd10      	pop	{r4, pc}

080058fa <__sclose>:
 80058fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058fe:	f000 b813 	b.w	8005928 <_close_r>
	...

08005904 <_write_r>:
 8005904:	b538      	push	{r3, r4, r5, lr}
 8005906:	4d07      	ldr	r5, [pc, #28]	; (8005924 <_write_r+0x20>)
 8005908:	4604      	mov	r4, r0
 800590a:	4608      	mov	r0, r1
 800590c:	4611      	mov	r1, r2
 800590e:	2200      	movs	r2, #0
 8005910:	602a      	str	r2, [r5, #0]
 8005912:	461a      	mov	r2, r3
 8005914:	f7fb f895 	bl	8000a42 <_write>
 8005918:	1c43      	adds	r3, r0, #1
 800591a:	d102      	bne.n	8005922 <_write_r+0x1e>
 800591c:	682b      	ldr	r3, [r5, #0]
 800591e:	b103      	cbz	r3, 8005922 <_write_r+0x1e>
 8005920:	6023      	str	r3, [r4, #0]
 8005922:	bd38      	pop	{r3, r4, r5, pc}
 8005924:	20000210 	.word	0x20000210

08005928 <_close_r>:
 8005928:	b538      	push	{r3, r4, r5, lr}
 800592a:	4d06      	ldr	r5, [pc, #24]	; (8005944 <_close_r+0x1c>)
 800592c:	2300      	movs	r3, #0
 800592e:	4604      	mov	r4, r0
 8005930:	4608      	mov	r0, r1
 8005932:	602b      	str	r3, [r5, #0]
 8005934:	f7fb f8a1 	bl	8000a7a <_close>
 8005938:	1c43      	adds	r3, r0, #1
 800593a:	d102      	bne.n	8005942 <_close_r+0x1a>
 800593c:	682b      	ldr	r3, [r5, #0]
 800593e:	b103      	cbz	r3, 8005942 <_close_r+0x1a>
 8005940:	6023      	str	r3, [r4, #0]
 8005942:	bd38      	pop	{r3, r4, r5, pc}
 8005944:	20000210 	.word	0x20000210

08005948 <_fstat_r>:
 8005948:	b538      	push	{r3, r4, r5, lr}
 800594a:	4d07      	ldr	r5, [pc, #28]	; (8005968 <_fstat_r+0x20>)
 800594c:	2300      	movs	r3, #0
 800594e:	4604      	mov	r4, r0
 8005950:	4608      	mov	r0, r1
 8005952:	4611      	mov	r1, r2
 8005954:	602b      	str	r3, [r5, #0]
 8005956:	f7fb f89c 	bl	8000a92 <_fstat>
 800595a:	1c43      	adds	r3, r0, #1
 800595c:	d102      	bne.n	8005964 <_fstat_r+0x1c>
 800595e:	682b      	ldr	r3, [r5, #0]
 8005960:	b103      	cbz	r3, 8005964 <_fstat_r+0x1c>
 8005962:	6023      	str	r3, [r4, #0]
 8005964:	bd38      	pop	{r3, r4, r5, pc}
 8005966:	bf00      	nop
 8005968:	20000210 	.word	0x20000210

0800596c <_isatty_r>:
 800596c:	b538      	push	{r3, r4, r5, lr}
 800596e:	4d06      	ldr	r5, [pc, #24]	; (8005988 <_isatty_r+0x1c>)
 8005970:	2300      	movs	r3, #0
 8005972:	4604      	mov	r4, r0
 8005974:	4608      	mov	r0, r1
 8005976:	602b      	str	r3, [r5, #0]
 8005978:	f7fb f89b 	bl	8000ab2 <_isatty>
 800597c:	1c43      	adds	r3, r0, #1
 800597e:	d102      	bne.n	8005986 <_isatty_r+0x1a>
 8005980:	682b      	ldr	r3, [r5, #0]
 8005982:	b103      	cbz	r3, 8005986 <_isatty_r+0x1a>
 8005984:	6023      	str	r3, [r4, #0]
 8005986:	bd38      	pop	{r3, r4, r5, pc}
 8005988:	20000210 	.word	0x20000210

0800598c <_lseek_r>:
 800598c:	b538      	push	{r3, r4, r5, lr}
 800598e:	4d07      	ldr	r5, [pc, #28]	; (80059ac <_lseek_r+0x20>)
 8005990:	4604      	mov	r4, r0
 8005992:	4608      	mov	r0, r1
 8005994:	4611      	mov	r1, r2
 8005996:	2200      	movs	r2, #0
 8005998:	602a      	str	r2, [r5, #0]
 800599a:	461a      	mov	r2, r3
 800599c:	f7fb f894 	bl	8000ac8 <_lseek>
 80059a0:	1c43      	adds	r3, r0, #1
 80059a2:	d102      	bne.n	80059aa <_lseek_r+0x1e>
 80059a4:	682b      	ldr	r3, [r5, #0]
 80059a6:	b103      	cbz	r3, 80059aa <_lseek_r+0x1e>
 80059a8:	6023      	str	r3, [r4, #0]
 80059aa:	bd38      	pop	{r3, r4, r5, pc}
 80059ac:	20000210 	.word	0x20000210

080059b0 <__malloc_lock>:
 80059b0:	4801      	ldr	r0, [pc, #4]	; (80059b8 <__malloc_lock+0x8>)
 80059b2:	f7ff bb1d 	b.w	8004ff0 <__retarget_lock_acquire_recursive>
 80059b6:	bf00      	nop
 80059b8:	20000204 	.word	0x20000204

080059bc <__malloc_unlock>:
 80059bc:	4801      	ldr	r0, [pc, #4]	; (80059c4 <__malloc_unlock+0x8>)
 80059be:	f7ff bb18 	b.w	8004ff2 <__retarget_lock_release_recursive>
 80059c2:	bf00      	nop
 80059c4:	20000204 	.word	0x20000204

080059c8 <_read_r>:
 80059c8:	b538      	push	{r3, r4, r5, lr}
 80059ca:	4d07      	ldr	r5, [pc, #28]	; (80059e8 <_read_r+0x20>)
 80059cc:	4604      	mov	r4, r0
 80059ce:	4608      	mov	r0, r1
 80059d0:	4611      	mov	r1, r2
 80059d2:	2200      	movs	r2, #0
 80059d4:	602a      	str	r2, [r5, #0]
 80059d6:	461a      	mov	r2, r3
 80059d8:	f7fb f816 	bl	8000a08 <_read>
 80059dc:	1c43      	adds	r3, r0, #1
 80059de:	d102      	bne.n	80059e6 <_read_r+0x1e>
 80059e0:	682b      	ldr	r3, [r5, #0]
 80059e2:	b103      	cbz	r3, 80059e6 <_read_r+0x1e>
 80059e4:	6023      	str	r3, [r4, #0]
 80059e6:	bd38      	pop	{r3, r4, r5, pc}
 80059e8:	20000210 	.word	0x20000210

080059ec <_init>:
 80059ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ee:	bf00      	nop
 80059f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059f2:	bc08      	pop	{r3}
 80059f4:	469e      	mov	lr, r3
 80059f6:	4770      	bx	lr

080059f8 <_fini>:
 80059f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059fa:	bf00      	nop
 80059fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059fe:	bc08      	pop	{r3}
 8005a00:	469e      	mov	lr, r3
 8005a02:	4770      	bx	lr
