
Project_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b90  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013094  08005d20  08005d20  00015d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018db4  08018db4  00030070  2**0
                  CONTENTS
  4 .ARM          00000008  08018db4  08018db4  00028db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018dbc  08018dbc  00030070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018dbc  08018dbc  00028dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018dc0  08018dc0  00028dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08018dc4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000070  08018e34  00030070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08018e34  00030264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000160c2  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f3a  00000000  00000000  00046162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  000490a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e30  00000000  00000000  0004a030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a10b  00000000  00000000  0004ae60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015360  00000000  00000000  00074f6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010587a  00000000  00000000  0008a2cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  0018fb45  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004260  00000000  00000000  0018fc0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000067f  00000000  00000000  00193e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005d08 	.word	0x08005d08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005d08 	.word	0x08005d08

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08a      	sub	sp, #40	; 0x28
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800058a:	f107 031c 	add.w	r3, r7, #28
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]
 80005a4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005a6:	4b2f      	ldr	r3, [pc, #188]	; (8000664 <MX_ADC1_Init+0xe0>)
 80005a8:	4a2f      	ldr	r2, [pc, #188]	; (8000668 <MX_ADC1_Init+0xe4>)
 80005aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005ac:	4b2d      	ldr	r3, [pc, #180]	; (8000664 <MX_ADC1_Init+0xe0>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005b2:	4b2c      	ldr	r3, [pc, #176]	; (8000664 <MX_ADC1_Init+0xe0>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005b8:	4b2a      	ldr	r3, [pc, #168]	; (8000664 <MX_ADC1_Init+0xe0>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005be:	4b29      	ldr	r3, [pc, #164]	; (8000664 <MX_ADC1_Init+0xe0>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005c4:	4b27      	ldr	r3, [pc, #156]	; (8000664 <MX_ADC1_Init+0xe0>)
 80005c6:	2204      	movs	r2, #4
 80005c8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005ca:	4b26      	ldr	r3, [pc, #152]	; (8000664 <MX_ADC1_Init+0xe0>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005d0:	4b24      	ldr	r3, [pc, #144]	; (8000664 <MX_ADC1_Init+0xe0>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005d6:	4b23      	ldr	r3, [pc, #140]	; (8000664 <MX_ADC1_Init+0xe0>)
 80005d8:	2201      	movs	r2, #1
 80005da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005dc:	4b21      	ldr	r3, [pc, #132]	; (8000664 <MX_ADC1_Init+0xe0>)
 80005de:	2200      	movs	r2, #0
 80005e0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005e4:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <MX_ADC1_Init+0xe0>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ea:	4b1e      	ldr	r3, [pc, #120]	; (8000664 <MX_ADC1_Init+0xe0>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005f0:	4b1c      	ldr	r3, [pc, #112]	; (8000664 <MX_ADC1_Init+0xe0>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005f8:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <MX_ADC1_Init+0xe0>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005fe:	4b19      	ldr	r3, [pc, #100]	; (8000664 <MX_ADC1_Init+0xe0>)
 8000600:	2200      	movs	r2, #0
 8000602:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000606:	4817      	ldr	r0, [pc, #92]	; (8000664 <MX_ADC1_Init+0xe0>)
 8000608:	f000 feb8 	bl	800137c <HAL_ADC_Init>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000612:	f000 fa88 	bl	8000b26 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000616:	2300      	movs	r3, #0
 8000618:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800061a:	f107 031c 	add.w	r3, r7, #28
 800061e:	4619      	mov	r1, r3
 8000620:	4810      	ldr	r0, [pc, #64]	; (8000664 <MX_ADC1_Init+0xe0>)
 8000622:	f001 fe0b 	bl	800223c <HAL_ADCEx_MultiModeConfigChannel>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800062c:	f000 fa7b 	bl	8000b26 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000630:	4b0e      	ldr	r3, [pc, #56]	; (800066c <MX_ADC1_Init+0xe8>)
 8000632:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000634:	2306      	movs	r3, #6
 8000636:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000638:	2300      	movs	r3, #0
 800063a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800063c:	237f      	movs	r3, #127	; 0x7f
 800063e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000640:	2304      	movs	r3, #4
 8000642:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	4619      	mov	r1, r3
 800064c:	4805      	ldr	r0, [pc, #20]	; (8000664 <MX_ADC1_Init+0xe0>)
 800064e:	f001 f8c5 	bl	80017dc <HAL_ADC_ConfigChannel>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000658:	f000 fa65 	bl	8000b26 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	3728      	adds	r7, #40	; 0x28
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	2000008c 	.word	0x2000008c
 8000668:	50040000 	.word	0x50040000
 800066c:	32601000 	.word	0x32601000

08000670 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b0ac      	sub	sp, #176	; 0xb0
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000678:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	2288      	movs	r2, #136	; 0x88
 800068e:	2100      	movs	r1, #0
 8000690:	4618      	mov	r0, r3
 8000692:	f004 fec3 	bl	800541c <memset>
  if(adcHandle->Instance==ADC1)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a3d      	ldr	r2, [pc, #244]	; (8000790 <HAL_ADC_MspInit+0x120>)
 800069c:	4293      	cmp	r3, r2
 800069e:	d172      	bne.n	8000786 <HAL_ADC_MspInit+0x116>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006a4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80006a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80006aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80006ae:	2302      	movs	r3, #2
 80006b0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006b2:	2301      	movs	r3, #1
 80006b4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80006b6:	2308      	movs	r3, #8
 80006b8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80006ba:	2307      	movs	r3, #7
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006be:	2302      	movs	r3, #2
 80006c0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80006c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80006ca:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	4618      	mov	r0, r3
 80006d2:	f003 f9ab 	bl	8003a2c <HAL_RCCEx_PeriphCLKConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80006dc:	f000 fa23 	bl	8000b26 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80006e0:	4b2c      	ldr	r3, [pc, #176]	; (8000794 <HAL_ADC_MspInit+0x124>)
 80006e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e4:	4a2b      	ldr	r2, [pc, #172]	; (8000794 <HAL_ADC_MspInit+0x124>)
 80006e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ec:	4b29      	ldr	r3, [pc, #164]	; (8000794 <HAL_ADC_MspInit+0x124>)
 80006ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006f4:	613b      	str	r3, [r7, #16]
 80006f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f8:	4b26      	ldr	r3, [pc, #152]	; (8000794 <HAL_ADC_MspInit+0x124>)
 80006fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fc:	4a25      	ldr	r2, [pc, #148]	; (8000794 <HAL_ADC_MspInit+0x124>)
 80006fe:	f043 0301 	orr.w	r3, r3, #1
 8000702:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000704:	4b23      	ldr	r3, [pc, #140]	; (8000794 <HAL_ADC_MspInit+0x124>)
 8000706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000708:	f003 0301 	and.w	r3, r3, #1
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000710:	2380      	movs	r3, #128	; 0x80
 8000712:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000716:	230b      	movs	r3, #11
 8000718:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000722:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000726:	4619      	mov	r1, r3
 8000728:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072c:	f002 f940 	bl	80029b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000730:	4b19      	ldr	r3, [pc, #100]	; (8000798 <HAL_ADC_MspInit+0x128>)
 8000732:	4a1a      	ldr	r2, [pc, #104]	; (800079c <HAL_ADC_MspInit+0x12c>)
 8000734:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000736:	4b18      	ldr	r3, [pc, #96]	; (8000798 <HAL_ADC_MspInit+0x128>)
 8000738:	2200      	movs	r2, #0
 800073a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800073c:	4b16      	ldr	r3, [pc, #88]	; (8000798 <HAL_ADC_MspInit+0x128>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <HAL_ADC_MspInit+0x128>)
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000748:	4b13      	ldr	r3, [pc, #76]	; (8000798 <HAL_ADC_MspInit+0x128>)
 800074a:	2280      	movs	r2, #128	; 0x80
 800074c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <HAL_ADC_MspInit+0x128>)
 8000750:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000754:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000756:	4b10      	ldr	r3, [pc, #64]	; (8000798 <HAL_ADC_MspInit+0x128>)
 8000758:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800075c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <HAL_ADC_MspInit+0x128>)
 8000760:	2220      	movs	r2, #32
 8000762:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <HAL_ADC_MspInit+0x128>)
 8000766:	2200      	movs	r2, #0
 8000768:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800076a:	480b      	ldr	r0, [pc, #44]	; (8000798 <HAL_ADC_MspInit+0x128>)
 800076c:	f001 ff28 	bl	80025c0 <HAL_DMA_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 8000776:	f000 f9d6 	bl	8000b26 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4a06      	ldr	r2, [pc, #24]	; (8000798 <HAL_ADC_MspInit+0x128>)
 800077e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000780:	4a05      	ldr	r2, [pc, #20]	; (8000798 <HAL_ADC_MspInit+0x128>)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000786:	bf00      	nop
 8000788:	37b0      	adds	r7, #176	; 0xb0
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	50040000 	.word	0x50040000
 8000794:	40021000 	.word	0x40021000
 8000798:	200000f0 	.word	0x200000f0
 800079c:	40020008 	.word	0x40020008

080007a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007a6:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <MX_DMA_Init+0x38>)
 80007a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007aa:	4a0b      	ldr	r2, [pc, #44]	; (80007d8 <MX_DMA_Init+0x38>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6493      	str	r3, [r2, #72]	; 0x48
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_DMA_Init+0x38>)
 80007b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007be:	2200      	movs	r2, #0
 80007c0:	2100      	movs	r1, #0
 80007c2:	200b      	movs	r0, #11
 80007c4:	f001 fec5 	bl	8002552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007c8:	200b      	movs	r0, #11
 80007ca:	f001 fede 	bl	800258a <HAL_NVIC_EnableIRQ>

}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40021000 	.word	0x40021000

080007dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	; 0x28
 80007e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f2:	4b3f      	ldr	r3, [pc, #252]	; (80008f0 <MX_GPIO_Init+0x114>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	4a3e      	ldr	r2, [pc, #248]	; (80008f0 <MX_GPIO_Init+0x114>)
 80007f8:	f043 0304 	orr.w	r3, r3, #4
 80007fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fe:	4b3c      	ldr	r3, [pc, #240]	; (80008f0 <MX_GPIO_Init+0x114>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	f003 0304 	and.w	r3, r3, #4
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080a:	4b39      	ldr	r3, [pc, #228]	; (80008f0 <MX_GPIO_Init+0x114>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	4a38      	ldr	r2, [pc, #224]	; (80008f0 <MX_GPIO_Init+0x114>)
 8000810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000816:	4b36      	ldr	r3, [pc, #216]	; (80008f0 <MX_GPIO_Init+0x114>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	4b33      	ldr	r3, [pc, #204]	; (80008f0 <MX_GPIO_Init+0x114>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	4a32      	ldr	r2, [pc, #200]	; (80008f0 <MX_GPIO_Init+0x114>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082e:	4b30      	ldr	r3, [pc, #192]	; (80008f0 <MX_GPIO_Init+0x114>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	4b2d      	ldr	r3, [pc, #180]	; (80008f0 <MX_GPIO_Init+0x114>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	4a2c      	ldr	r2, [pc, #176]	; (80008f0 <MX_GPIO_Init+0x114>)
 8000840:	f043 0302 	orr.w	r3, r3, #2
 8000844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000846:	4b2a      	ldr	r3, [pc, #168]	; (80008f0 <MX_GPIO_Init+0x114>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	f003 0302 	and.w	r3, r3, #2
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_9, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	f44f 7118 	mov.w	r1, #608	; 0x260
 8000858:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800085c:	f002 fa6a 	bl	8002d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000860:	2200      	movs	r2, #0
 8000862:	2180      	movs	r1, #128	; 0x80
 8000864:	4823      	ldr	r0, [pc, #140]	; (80008f4 <MX_GPIO_Init+0x118>)
 8000866:	f002 fa65 	bl	8002d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2170      	movs	r1, #112	; 0x70
 800086e:	4822      	ldr	r0, [pc, #136]	; (80008f8 <MX_GPIO_Init+0x11c>)
 8000870:	f002 fa60 	bl	8002d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000874:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087a:	2300      	movs	r3, #0
 800087c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	4619      	mov	r1, r3
 8000888:	481a      	ldr	r0, [pc, #104]	; (80008f4 <MX_GPIO_Init+0x118>)
 800088a:	f002 f891 	bl	80029b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA6 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_9;
 800088e:	f44f 7318 	mov.w	r3, #608	; 0x260
 8000892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000894:	2301      	movs	r3, #1
 8000896:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	2300      	movs	r3, #0
 800089e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	4619      	mov	r1, r3
 80008a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008aa:	f002 f881 	bl	80029b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80008ae:	2380      	movs	r3, #128	; 0x80
 80008b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b2:	2301      	movs	r3, #1
 80008b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	4619      	mov	r1, r3
 80008c4:	480b      	ldr	r0, [pc, #44]	; (80008f4 <MX_GPIO_Init+0x118>)
 80008c6:	f002 f873 	bl	80029b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80008ca:	2370      	movs	r3, #112	; 0x70
 80008cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	4619      	mov	r1, r3
 80008e0:	4805      	ldr	r0, [pc, #20]	; (80008f8 <MX_GPIO_Init+0x11c>)
 80008e2:	f002 f865 	bl	80029b0 <HAL_GPIO_Init>

}
 80008e6:	bf00      	nop
 80008e8:	3728      	adds	r7, #40	; 0x28
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40021000 	.word	0x40021000
 80008f4:	48000800 	.word	0x48000800
 80008f8:	48000400 	.word	0x48000400

080008fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008fc:	b5b0      	push	{r4, r5, r7, lr}
 80008fe:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000902:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000904:	f000 fac4 	bl	8000e90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000908:	f000 f8ba 	bl	8000a80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800090c:	f7ff ff66 	bl	80007dc <MX_GPIO_Init>
  MX_DMA_Init();
 8000910:	f7ff ff46 	bl	80007a0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000914:	f000 fa06 	bl	8000d24 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000918:	f7ff fe34 	bl	8000584 <MX_ADC1_Init>
  MX_RTC_Init();
 800091c:	f000 f908 	bl	8000b30 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  uint32_t Buff_In[50];
  float Buff_Out[50];

  //HAL_ADCEx_Calibration_Start(&hdac1);
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC_Value, 50);
 8000920:	2232      	movs	r2, #50	; 0x32
 8000922:	494e      	ldr	r1, [pc, #312]	; (8000a5c <main+0x160>)
 8000924:	484e      	ldr	r0, [pc, #312]	; (8000a60 <main+0x164>)
 8000926:	f000 fe7f 	bl	8001628 <HAL_ADC_Start_DMA>

  arm_rfft_fast_instance_f32 fft_handler;
  arm_rfft_fast_init_f32(&fft_handler, 512);
 800092a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800092e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000932:	4618      	mov	r0, r3
 8000934:	f004 fd14 	bl	8005360 <arm_rfft_fast_init_f32>

  // Lcd_PortType ports[] = { D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port };
    Lcd_PortType ports[] = { GPIOC, GPIOB, GPIOA, GPIOA };
 8000938:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800093c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8000940:	4a48      	ldr	r2, [pc, #288]	; (8000a64 <main+0x168>)
 8000942:	461c      	mov	r4, r3
 8000944:	4613      	mov	r3, r2
 8000946:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000948:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
    Lcd_PinType pins[] = {GPIO_PIN_7, GPIO_PIN_6, GPIO_PIN_9, GPIO_PIN_6};
 800094c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8000950:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8000954:	4a44      	ldr	r2, [pc, #272]	; (8000a68 <main+0x16c>)
 8000956:	e892 0003 	ldmia.w	r2, {r0, r1}
 800095a:	e883 0003 	stmia.w	r3, {r0, r1}
    Lcd_HandleTypeDef lcd;

    // Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
    lcd = Lcd_create(ports, pins, GPIOB, GPIO_PIN_5, GPIOB, GPIO_PIN_4, LCD_4_BIT_MODE);
 800095e:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8000962:	f5a3 74f0 	sub.w	r4, r3, #480	; 0x1e0
 8000966:	4638      	mov	r0, r7
 8000968:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800096c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000970:	2300      	movs	r3, #0
 8000972:	9303      	str	r3, [sp, #12]
 8000974:	2310      	movs	r3, #16
 8000976:	9302      	str	r3, [sp, #8]
 8000978:	4b3c      	ldr	r3, [pc, #240]	; (8000a6c <main+0x170>)
 800097a:	9301      	str	r3, [sp, #4]
 800097c:	2320      	movs	r3, #32
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	4b3a      	ldr	r3, [pc, #232]	; (8000a6c <main+0x170>)
 8000982:	f004 fad6 	bl	8004f32 <Lcd_create>
 8000986:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800098a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800098e:	461d      	mov	r5, r3
 8000990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000994:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000998:	e884 0003 	stmia.w	r4, {r0, r1}

    store = &lcd;
 800099c:	4a34      	ldr	r2, [pc, #208]	; (8000a70 <main+0x174>)
 800099e:	f107 0318 	add.w	r3, r7, #24
 80009a2:	6013      	str	r3, [r2, #0]

    Lcd_cursor(&lcd, 0,1);
 80009a4:	f107 0318 	add.w	r3, r7, #24
 80009a8:	2201      	movs	r2, #1
 80009aa:	2100      	movs	r1, #0
 80009ac:	4618      	mov	r0, r3
 80009ae:	f004 fb4d 	bl	800504c <Lcd_cursor>
    Lcd_string(&lcd, "$$$$$$$$$$$$$$");
 80009b2:	f107 0318 	add.w	r3, r7, #24
 80009b6:	492f      	ldr	r1, [pc, #188]	; (8000a74 <main+0x178>)
 80009b8:	4618      	mov	r0, r3
 80009ba:	f004 fb27 	bl	800500c <Lcd_string>
      for ( int x = 1; x <= 100 ; x++ )
 80009be:	2301      	movs	r3, #1
 80009c0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 80009c4:	e015      	b.n	80009f2 <main+0xf6>
      {
        Lcd_cursor(&lcd, 1,7);
 80009c6:	f107 0318 	add.w	r3, r7, #24
 80009ca:	2207      	movs	r2, #7
 80009cc:	2101      	movs	r1, #1
 80009ce:	4618      	mov	r0, r3
 80009d0:	f004 fb3c 	bl	800504c <Lcd_cursor>
        Lcd_int(&lcd, x);
 80009d4:	f107 0318 	add.w	r3, r7, #24
 80009d8:	f8d7 11f4 	ldr.w	r1, [r7, #500]	; 0x1f4
 80009dc:	4618      	mov	r0, r3
 80009de:	f004 fafd 	bl	8004fdc <Lcd_int>
        HAL_Delay (100);
 80009e2:	2064      	movs	r0, #100	; 0x64
 80009e4:	f000 fad0 	bl	8000f88 <HAL_Delay>
      for ( int x = 1; x <= 100 ; x++ )
 80009e8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80009ec:	3301      	adds	r3, #1
 80009ee:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 80009f2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80009f6:	2b64      	cmp	r3, #100	; 0x64
 80009f8:	dde5      	ble.n	80009c6 <main+0xca>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0){
 80009fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009fe:	481e      	ldr	r0, [pc, #120]	; (8000a78 <main+0x17c>)
 8000a00:	f002 f980 	bl	8002d04 <HAL_GPIO_ReadPin>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d104      	bne.n	8000a14 <main+0x118>
		  Lcd_clear(store);
 8000a0a:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <main+0x174>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f004 fb36 	bl	8005080 <Lcd_clear>
	  }

	  for(int n = 0; n < 50; n++){
 8000a14:	2300      	movs	r3, #0
 8000a16:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8000a1a:	e014      	b.n	8000a46 <main+0x14a>
		  Buff_In[n] = ADC_Value[n] - 2048;
 8000a1c:	4a0f      	ldr	r2, [pc, #60]	; (8000a5c <main+0x160>)
 8000a1e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000a22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a26:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000a36:	443b      	add	r3, r7
 8000a38:	f843 2cd0 	str.w	r2, [r3, #-208]
	  for(int n = 0; n < 50; n++){
 8000a3c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000a40:	3301      	adds	r3, #1
 8000a42:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8000a46:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000a4a:	2b31      	cmp	r3, #49	; 0x31
 8000a4c:	dde6      	ble.n	8000a1c <main+0x120>

    /* USER CODE BEGIN 3 */


//	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	  cnt ++;
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <main+0x180>)
 8000a50:	881b      	ldrh	r3, [r3, #0]
 8000a52:	3301      	adds	r3, #1
 8000a54:	b29a      	uxth	r2, r3
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <main+0x180>)
 8000a58:	801a      	strh	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0){
 8000a5a:	e7ce      	b.n	80009fa <main+0xfe>
 8000a5c:	2000013c 	.word	0x2000013c
 8000a60:	2000008c 	.word	0x2000008c
 8000a64:	08005d30 	.word	0x08005d30
 8000a68:	08005d40 	.word	0x08005d40
 8000a6c:	48000400 	.word	0x48000400
 8000a70:	200001a0 	.word	0x200001a0
 8000a74:	08005d20 	.word	0x08005d20
 8000a78:	48000800 	.word	0x48000800
 8000a7c:	20000138 	.word	0x20000138

08000a80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b096      	sub	sp, #88	; 0x58
 8000a84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	2244      	movs	r2, #68	; 0x44
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f004 fcc4 	bl	800541c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a94:	463b      	mov	r3, r7
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
 8000aa0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000aa2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000aa6:	f002 f96b 	bl	8002d80 <HAL_PWREx_ControlVoltageScaling>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ab0:	f000 f839 	bl	8000b26 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000ab4:	230a      	movs	r3, #10
 8000ab6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ab8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000abc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000abe:	2310      	movs	r3, #16
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aca:	2302      	movs	r3, #2
 8000acc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000ad2:	230a      	movs	r3, #10
 8000ad4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ad6:	2307      	movs	r3, #7
 8000ad8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ada:	2302      	movs	r3, #2
 8000adc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f002 f9a0 	bl	8002e2c <HAL_RCC_OscConfig>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000af2:	f000 f818 	bl	8000b26 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af6:	230f      	movs	r3, #15
 8000af8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000afa:	2303      	movs	r3, #3
 8000afc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000afe:	2300      	movs	r3, #0
 8000b00:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	2104      	movs	r1, #4
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f002 fd68 	bl	80035e4 <HAL_RCC_ClockConfig>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b1a:	f000 f804 	bl	8000b26 <Error_Handler>
  }
}
 8000b1e:	bf00      	nop
 8000b20:	3758      	adds	r7, #88	; 0x58
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2a:	b672      	cpsid	i
}
 8000b2c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <Error_Handler+0x8>

08000b30 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b34:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <MX_RTC_Init+0x48>)
 8000b36:	4a11      	ldr	r2, [pc, #68]	; (8000b7c <MX_RTC_Init+0x4c>)
 8000b38:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b3a:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <MX_RTC_Init+0x48>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b40:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <MX_RTC_Init+0x48>)
 8000b42:	227f      	movs	r2, #127	; 0x7f
 8000b44:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b46:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <MX_RTC_Init+0x48>)
 8000b48:	22ff      	movs	r2, #255	; 0xff
 8000b4a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <MX_RTC_Init+0x48>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <MX_RTC_Init+0x48>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b58:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <MX_RTC_Init+0x48>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <MX_RTC_Init+0x48>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b64:	4804      	ldr	r0, [pc, #16]	; (8000b78 <MX_RTC_Init+0x48>)
 8000b66:	f003 fc1d 	bl	80043a4 <HAL_RTC_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000b70:	f7ff ffd9 	bl	8000b26 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	200001a4 	.word	0x200001a4
 8000b7c:	40002800 	.word	0x40002800

08000b80 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b0a4      	sub	sp, #144	; 0x90
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b88:	f107 0308 	add.w	r3, r7, #8
 8000b8c:	2288      	movs	r2, #136	; 0x88
 8000b8e:	2100      	movs	r1, #0
 8000b90:	4618      	mov	r0, r3
 8000b92:	f004 fc43 	bl	800541c <memset>
  if(rtcHandle->Instance==RTC)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a10      	ldr	r2, [pc, #64]	; (8000bdc <HAL_RTC_MspInit+0x5c>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d118      	bne.n	8000bd2 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ba0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ba4:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000ba6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000baa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bae:	f107 0308 	add.w	r3, r7, #8
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f002 ff3a 	bl	8003a2c <HAL_RCCEx_PeriphCLKConfig>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000bbe:	f7ff ffb2 	bl	8000b26 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000bc2:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <HAL_RTC_MspInit+0x60>)
 8000bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000bc8:	4a05      	ldr	r2, [pc, #20]	; (8000be0 <HAL_RTC_MspInit+0x60>)
 8000bca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000bd2:	bf00      	nop
 8000bd4:	3790      	adds	r7, #144	; 0x90
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40002800 	.word	0x40002800
 8000be0:	40021000 	.word	0x40021000

08000be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bea:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <HAL_MspInit+0x44>)
 8000bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bee:	4a0e      	ldr	r2, [pc, #56]	; (8000c28 <HAL_MspInit+0x44>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6613      	str	r3, [r2, #96]	; 0x60
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <HAL_MspInit+0x44>)
 8000bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <HAL_MspInit+0x44>)
 8000c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c06:	4a08      	ldr	r2, [pc, #32]	; (8000c28 <HAL_MspInit+0x44>)
 8000c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c0c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_MspInit+0x44>)
 8000c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	40021000 	.word	0x40021000

08000c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <NMI_Handler+0x4>

08000c32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <HardFault_Handler+0x4>

08000c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <MemManage_Handler+0x4>

08000c3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <BusFault_Handler+0x4>

08000c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <UsageFault_Handler+0x4>

08000c4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c78:	f000 f966 	bl	8000f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c84:	4802      	ldr	r0, [pc, #8]	; (8000c90 <DMA1_Channel1_IRQHandler+0x10>)
 8000c86:	f001 fdb3 	bl	80027f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	200000f0 	.word	0x200000f0

08000c94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c9c:	4a14      	ldr	r2, [pc, #80]	; (8000cf0 <_sbrk+0x5c>)
 8000c9e:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <_sbrk+0x60>)
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ca8:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <_sbrk+0x64>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d102      	bne.n	8000cb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cb0:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <_sbrk+0x64>)
 8000cb2:	4a12      	ldr	r2, [pc, #72]	; (8000cfc <_sbrk+0x68>)
 8000cb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cb6:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <_sbrk+0x64>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d207      	bcs.n	8000cd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cc4:	f004 fb80 	bl	80053c8 <__errno>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	220c      	movs	r2, #12
 8000ccc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cce:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd2:	e009      	b.n	8000ce8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <_sbrk+0x64>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cda:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <_sbrk+0x64>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	4a05      	ldr	r2, [pc, #20]	; (8000cf8 <_sbrk+0x64>)
 8000ce4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ce6:	68fb      	ldr	r3, [r7, #12]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3718      	adds	r7, #24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20018000 	.word	0x20018000
 8000cf4:	00000400 	.word	0x00000400
 8000cf8:	200001c8 	.word	0x200001c8
 8000cfc:	20000268 	.word	0x20000268

08000d00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <SystemInit+0x20>)
 8000d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d0a:	4a05      	ldr	r2, [pc, #20]	; (8000d20 <SystemInit+0x20>)
 8000d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d28:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <MX_USART2_UART_Init+0x58>)
 8000d2a:	4a15      	ldr	r2, [pc, #84]	; (8000d80 <MX_USART2_UART_Init+0x5c>)
 8000d2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d2e:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <MX_USART2_UART_Init+0x58>)
 8000d30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d36:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <MX_USART2_UART_Init+0x58>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <MX_USART2_UART_Init+0x58>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <MX_USART2_UART_Init+0x58>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <MX_USART2_UART_Init+0x58>)
 8000d4a:	220c      	movs	r2, #12
 8000d4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <MX_USART2_UART_Init+0x58>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d54:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <MX_USART2_UART_Init+0x58>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d5a:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <MX_USART2_UART_Init+0x58>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <MX_USART2_UART_Init+0x58>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d66:	4805      	ldr	r0, [pc, #20]	; (8000d7c <MX_USART2_UART_Init+0x58>)
 8000d68:	f003 fc2e 	bl	80045c8 <HAL_UART_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d72:	f7ff fed8 	bl	8000b26 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200001cc 	.word	0x200001cc
 8000d80:	40004400 	.word	0x40004400

08000d84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b0ac      	sub	sp, #176	; 0xb0
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	2288      	movs	r2, #136	; 0x88
 8000da2:	2100      	movs	r1, #0
 8000da4:	4618      	mov	r0, r3
 8000da6:	f004 fb39 	bl	800541c <memset>
  if(uartHandle->Instance==USART2)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a21      	ldr	r2, [pc, #132]	; (8000e34 <HAL_UART_MspInit+0xb0>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d13b      	bne.n	8000e2c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000db4:	2302      	movs	r3, #2
 8000db6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000db8:	2300      	movs	r3, #0
 8000dba:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f002 fe33 	bl	8003a2c <HAL_RCCEx_PeriphCLKConfig>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000dcc:	f7ff feab 	bl	8000b26 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dd0:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <HAL_UART_MspInit+0xb4>)
 8000dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd4:	4a18      	ldr	r2, [pc, #96]	; (8000e38 <HAL_UART_MspInit+0xb4>)
 8000dd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dda:	6593      	str	r3, [r2, #88]	; 0x58
 8000ddc:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <HAL_UART_MspInit+0xb4>)
 8000dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de8:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <HAL_UART_MspInit+0xb4>)
 8000dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dec:	4a12      	ldr	r2, [pc, #72]	; (8000e38 <HAL_UART_MspInit+0xb4>)
 8000dee:	f043 0301 	orr.w	r3, r3, #1
 8000df2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df4:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <HAL_UART_MspInit+0xb4>)
 8000df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df8:	f003 0301 	and.w	r3, r3, #1
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e00:	230c      	movs	r3, #12
 8000e02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e12:	2303      	movs	r3, #3
 8000e14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e18:	2307      	movs	r3, #7
 8000e1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e22:	4619      	mov	r1, r3
 8000e24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e28:	f001 fdc2 	bl	80029b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e2c:	bf00      	nop
 8000e2e:	37b0      	adds	r7, #176	; 0xb0
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40004400 	.word	0x40004400
 8000e38:	40021000 	.word	0x40021000

08000e3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e74 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e40:	f7ff ff5e 	bl	8000d00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e44:	480c      	ldr	r0, [pc, #48]	; (8000e78 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e46:	490d      	ldr	r1, [pc, #52]	; (8000e7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e48:	4a0d      	ldr	r2, [pc, #52]	; (8000e80 <LoopForever+0xe>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e4c:	e002      	b.n	8000e54 <LoopCopyDataInit>

08000e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e52:	3304      	adds	r3, #4

08000e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e58:	d3f9      	bcc.n	8000e4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5a:	4a0a      	ldr	r2, [pc, #40]	; (8000e84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e5c:	4c0a      	ldr	r4, [pc, #40]	; (8000e88 <LoopForever+0x16>)
  movs r3, #0
 8000e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e60:	e001      	b.n	8000e66 <LoopFillZerobss>

08000e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e64:	3204      	adds	r2, #4

08000e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e68:	d3fb      	bcc.n	8000e62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e6a:	f004 fab3 	bl	80053d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e6e:	f7ff fd45 	bl	80008fc <main>

08000e72 <LoopForever>:

LoopForever:
    b LoopForever
 8000e72:	e7fe      	b.n	8000e72 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e74:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e7c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e80:	08018dc4 	.word	0x08018dc4
  ldr r2, =_sbss
 8000e84:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e88:	20000264 	.word	0x20000264

08000e8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e8c:	e7fe      	b.n	8000e8c <ADC1_2_IRQHandler>
	...

08000e90 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e96:	2300      	movs	r3, #0
 8000e98:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <HAL_Init+0x3c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a0b      	ldr	r2, [pc, #44]	; (8000ecc <HAL_Init+0x3c>)
 8000ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ea4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea6:	2003      	movs	r0, #3
 8000ea8:	f001 fb48 	bl	800253c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eac:	2000      	movs	r0, #0
 8000eae:	f000 f80f 	bl	8000ed0 <HAL_InitTick>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d002      	beq.n	8000ebe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	71fb      	strb	r3, [r7, #7]
 8000ebc:	e001      	b.n	8000ec2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ebe:	f7ff fe91 	bl	8000be4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40022000 	.word	0x40022000

08000ed0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000edc:	4b17      	ldr	r3, [pc, #92]	; (8000f3c <HAL_InitTick+0x6c>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d023      	beq.n	8000f2c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ee4:	4b16      	ldr	r3, [pc, #88]	; (8000f40 <HAL_InitTick+0x70>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <HAL_InitTick+0x6c>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	4619      	mov	r1, r3
 8000eee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efa:	4618      	mov	r0, r3
 8000efc:	f001 fb53 	bl	80025a6 <HAL_SYSTICK_Config>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d10f      	bne.n	8000f26 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2b0f      	cmp	r3, #15
 8000f0a:	d809      	bhi.n	8000f20 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	6879      	ldr	r1, [r7, #4]
 8000f10:	f04f 30ff 	mov.w	r0, #4294967295
 8000f14:	f001 fb1d 	bl	8002552 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f18:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <HAL_InitTick+0x74>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6013      	str	r3, [r2, #0]
 8000f1e:	e007      	b.n	8000f30 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	73fb      	strb	r3, [r7, #15]
 8000f24:	e004      	b.n	8000f30 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	73fb      	strb	r3, [r7, #15]
 8000f2a:	e001      	b.n	8000f30 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000008 	.word	0x20000008
 8000f40:	20000000 	.word	0x20000000
 8000f44:	20000004 	.word	0x20000004

08000f48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_IncTick+0x20>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_IncTick+0x24>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4413      	add	r3, r2
 8000f58:	4a04      	ldr	r2, [pc, #16]	; (8000f6c <HAL_IncTick+0x24>)
 8000f5a:	6013      	str	r3, [r2, #0]
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	20000008 	.word	0x20000008
 8000f6c:	20000250 	.word	0x20000250

08000f70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return uwTick;
 8000f74:	4b03      	ldr	r3, [pc, #12]	; (8000f84 <HAL_GetTick+0x14>)
 8000f76:	681b      	ldr	r3, [r3, #0]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20000250 	.word	0x20000250

08000f88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f90:	f7ff ffee 	bl	8000f70 <HAL_GetTick>
 8000f94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa0:	d005      	beq.n	8000fae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <HAL_Delay+0x44>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4413      	add	r3, r2
 8000fac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fae:	bf00      	nop
 8000fb0:	f7ff ffde 	bl	8000f70 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d8f7      	bhi.n	8000fb0 <HAL_Delay+0x28>
  {

  }
}
 8000fc0:	bf00      	nop
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000008 	.word	0x20000008

08000fd0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	431a      	orrs	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr

08000ff6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	b083      	sub	sp, #12
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
 8000ffe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	431a      	orrs	r2, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	609a      	str	r2, [r3, #8]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800102c:	4618      	mov	r0, r3
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001038:	b480      	push	{r7}
 800103a:	b087      	sub	sp, #28
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
 8001044:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	3360      	adds	r3, #96	; 0x60
 800104a:	461a      	mov	r2, r3
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	4413      	add	r3, r2
 8001052:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b08      	ldr	r3, [pc, #32]	; (800107c <LL_ADC_SetOffset+0x44>)
 800105a:	4013      	ands	r3, r2
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001062:	683a      	ldr	r2, [r7, #0]
 8001064:	430a      	orrs	r2, r1
 8001066:	4313      	orrs	r3, r2
 8001068:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001070:	bf00      	nop
 8001072:	371c      	adds	r7, #28
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	03fff000 	.word	0x03fff000

08001080 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3360      	adds	r3, #96	; 0x60
 800108e:	461a      	mov	r2, r3
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	4413      	add	r3, r2
 8001096:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3714      	adds	r7, #20
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b087      	sub	sp, #28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	3360      	adds	r3, #96	; 0x60
 80010bc:	461a      	mov	r2, r3
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4413      	add	r3, r2
 80010c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	431a      	orrs	r2, r3
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80010d6:	bf00      	nop
 80010d8:	371c      	adds	r7, #28
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d101      	bne.n	80010fa <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80010f6:	2301      	movs	r3, #1
 80010f8:	e000      	b.n	80010fc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80010fa:	2300      	movs	r3, #0
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001108:	b480      	push	{r7}
 800110a:	b087      	sub	sp, #28
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	3330      	adds	r3, #48	; 0x30
 8001118:	461a      	mov	r2, r3
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	0a1b      	lsrs	r3, r3, #8
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	f003 030c 	and.w	r3, r3, #12
 8001124:	4413      	add	r3, r2
 8001126:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	f003 031f 	and.w	r3, r3, #31
 8001132:	211f      	movs	r1, #31
 8001134:	fa01 f303 	lsl.w	r3, r1, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	401a      	ands	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	0e9b      	lsrs	r3, r3, #26
 8001140:	f003 011f 	and.w	r1, r3, #31
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	f003 031f 	and.w	r3, r3, #31
 800114a:	fa01 f303 	lsl.w	r3, r1, r3
 800114e:	431a      	orrs	r2, r3
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001154:	bf00      	nop
 8001156:	371c      	adds	r7, #28
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001160:	b480      	push	{r7}
 8001162:	b087      	sub	sp, #28
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	3314      	adds	r3, #20
 8001170:	461a      	mov	r2, r3
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	0e5b      	lsrs	r3, r3, #25
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	f003 0304 	and.w	r3, r3, #4
 800117c:	4413      	add	r3, r2
 800117e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	0d1b      	lsrs	r3, r3, #20
 8001188:	f003 031f 	and.w	r3, r3, #31
 800118c:	2107      	movs	r1, #7
 800118e:	fa01 f303 	lsl.w	r3, r1, r3
 8001192:	43db      	mvns	r3, r3
 8001194:	401a      	ands	r2, r3
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	0d1b      	lsrs	r3, r3, #20
 800119a:	f003 031f 	and.w	r3, r3, #31
 800119e:	6879      	ldr	r1, [r7, #4]
 80011a0:	fa01 f303 	lsl.w	r3, r1, r3
 80011a4:	431a      	orrs	r2, r3
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80011aa:	bf00      	nop
 80011ac:	371c      	adds	r7, #28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
	...

080011b8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011d0:	43db      	mvns	r3, r3
 80011d2:	401a      	ands	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f003 0318 	and.w	r3, r3, #24
 80011da:	4908      	ldr	r1, [pc, #32]	; (80011fc <LL_ADC_SetChannelSingleDiff+0x44>)
 80011dc:	40d9      	lsrs	r1, r3
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	400b      	ands	r3, r1
 80011e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011e6:	431a      	orrs	r2, r3
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80011ee:	bf00      	nop
 80011f0:	3714      	adds	r7, #20
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	0007ffff 	.word	0x0007ffff

08001200 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f003 031f 	and.w	r3, r3, #31
}
 8001210:	4618      	mov	r0, r3
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800122c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	6093      	str	r3, [r2, #8]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001250:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001254:	d101      	bne.n	800125a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001256:	2301      	movs	r3, #1
 8001258:	e000      	b.n	800125c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800125a:	2300      	movs	r3, #0
}
 800125c:	4618      	mov	r0, r3
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001278:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800127c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80012a4:	d101      	bne.n	80012aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80012a6:	2301      	movs	r3, #1
 80012a8:	e000      	b.n	80012ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012cc:	f043 0201 	orr.w	r2, r3, #1
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d101      	bne.n	80012f8 <LL_ADC_IsEnabled+0x18>
 80012f4:	2301      	movs	r3, #1
 80012f6:	e000      	b.n	80012fa <LL_ADC_IsEnabled+0x1a>
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001306:	b480      	push	{r7}
 8001308:	b083      	sub	sp, #12
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001316:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800131a:	f043 0204 	orr.w	r2, r3, #4
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800132e:	b480      	push	{r7}
 8001330:	b083      	sub	sp, #12
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f003 0304 	and.w	r3, r3, #4
 800133e:	2b04      	cmp	r3, #4
 8001340:	d101      	bne.n	8001346 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001342:	2301      	movs	r3, #1
 8001344:	e000      	b.n	8001348 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001346:	2300      	movs	r3, #0
}
 8001348:	4618      	mov	r0, r3
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f003 0308 	and.w	r3, r3, #8
 8001364:	2b08      	cmp	r3, #8
 8001366:	d101      	bne.n	800136c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001368:	2301      	movs	r3, #1
 800136a:	e000      	b.n	800136e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
	...

0800137c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800137c:	b590      	push	{r4, r7, lr}
 800137e:	b089      	sub	sp, #36	; 0x24
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001384:	2300      	movs	r3, #0
 8001386:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001388:	2300      	movs	r3, #0
 800138a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d101      	bne.n	8001396 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e136      	b.n	8001604 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d109      	bne.n	80013b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff f963 	bl	8000670 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff ff3f 	bl	8001240 <LL_ADC_IsDeepPowerDownEnabled>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d004      	beq.n	80013d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ff25 	bl	800121c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff ff5a 	bl	8001290 <LL_ADC_IsInternalRegulatorEnabled>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d115      	bne.n	800140e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff ff3e 	bl	8001268 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80013ec:	4b87      	ldr	r3, [pc, #540]	; (800160c <HAL_ADC_Init+0x290>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	099b      	lsrs	r3, r3, #6
 80013f2:	4a87      	ldr	r2, [pc, #540]	; (8001610 <HAL_ADC_Init+0x294>)
 80013f4:	fba2 2303 	umull	r2, r3, r2, r3
 80013f8:	099b      	lsrs	r3, r3, #6
 80013fa:	3301      	adds	r3, #1
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001400:	e002      	b.n	8001408 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	3b01      	subs	r3, #1
 8001406:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f9      	bne.n	8001402 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff ff3c 	bl	8001290 <LL_ADC_IsInternalRegulatorEnabled>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d10d      	bne.n	800143a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001422:	f043 0210 	orr.w	r2, r3, #16
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142e:	f043 0201 	orr.w	r2, r3, #1
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff ff75 	bl	800132e <LL_ADC_REG_IsConversionOngoing>
 8001444:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800144a:	f003 0310 	and.w	r3, r3, #16
 800144e:	2b00      	cmp	r3, #0
 8001450:	f040 80cf 	bne.w	80015f2 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f040 80cb 	bne.w	80015f2 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001460:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001464:	f043 0202 	orr.w	r2, r3, #2
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff35 	bl	80012e0 <LL_ADC_IsEnabled>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d115      	bne.n	80014a8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800147c:	4865      	ldr	r0, [pc, #404]	; (8001614 <HAL_ADC_Init+0x298>)
 800147e:	f7ff ff2f 	bl	80012e0 <LL_ADC_IsEnabled>
 8001482:	4604      	mov	r4, r0
 8001484:	4864      	ldr	r0, [pc, #400]	; (8001618 <HAL_ADC_Init+0x29c>)
 8001486:	f7ff ff2b 	bl	80012e0 <LL_ADC_IsEnabled>
 800148a:	4603      	mov	r3, r0
 800148c:	431c      	orrs	r4, r3
 800148e:	4863      	ldr	r0, [pc, #396]	; (800161c <HAL_ADC_Init+0x2a0>)
 8001490:	f7ff ff26 	bl	80012e0 <LL_ADC_IsEnabled>
 8001494:	4603      	mov	r3, r0
 8001496:	4323      	orrs	r3, r4
 8001498:	2b00      	cmp	r3, #0
 800149a:	d105      	bne.n	80014a8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	4619      	mov	r1, r3
 80014a2:	485f      	ldr	r0, [pc, #380]	; (8001620 <HAL_ADC_Init+0x2a4>)
 80014a4:	f7ff fd94 	bl	8000fd0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	7e5b      	ldrb	r3, [r3, #25]
 80014ac:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014b2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80014b8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80014be:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014c6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014c8:	4313      	orrs	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d106      	bne.n	80014e4 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014da:	3b01      	subs	r3, #1
 80014dc:	045b      	lsls	r3, r3, #17
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d009      	beq.n	8001500 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	68da      	ldr	r2, [r3, #12]
 8001506:	4b47      	ldr	r3, [pc, #284]	; (8001624 <HAL_ADC_Init+0x2a8>)
 8001508:	4013      	ands	r3, r2
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	6812      	ldr	r2, [r2, #0]
 800150e:	69b9      	ldr	r1, [r7, #24]
 8001510:	430b      	orrs	r3, r1
 8001512:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ff08 	bl	800132e <LL_ADC_REG_IsConversionOngoing>
 800151e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff15 	bl	8001354 <LL_ADC_INJ_IsConversionOngoing>
 800152a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d13d      	bne.n	80015ae <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d13a      	bne.n	80015ae <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800153c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001544:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001546:	4313      	orrs	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001554:	f023 0302 	bic.w	r3, r3, #2
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	6812      	ldr	r2, [r2, #0]
 800155c:	69b9      	ldr	r1, [r7, #24]
 800155e:	430b      	orrs	r3, r1
 8001560:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001568:	2b01      	cmp	r3, #1
 800156a:	d118      	bne.n	800159e <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001576:	f023 0304 	bic.w	r3, r3, #4
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001582:	4311      	orrs	r1, r2
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001588:	4311      	orrs	r1, r2
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800158e:	430a      	orrs	r2, r1
 8001590:	431a      	orrs	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f042 0201 	orr.w	r2, r2, #1
 800159a:	611a      	str	r2, [r3, #16]
 800159c:	e007      	b.n	80015ae <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	691a      	ldr	r2, [r3, #16]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f022 0201 	bic.w	r2, r2, #1
 80015ac:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d10c      	bne.n	80015d0 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015bc:	f023 010f 	bic.w	r1, r3, #15
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	69db      	ldr	r3, [r3, #28]
 80015c4:	1e5a      	subs	r2, r3, #1
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	430a      	orrs	r2, r1
 80015cc:	631a      	str	r2, [r3, #48]	; 0x30
 80015ce:	e007      	b.n	80015e0 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 020f 	bic.w	r2, r2, #15
 80015de:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015e4:	f023 0303 	bic.w	r3, r3, #3
 80015e8:	f043 0201 	orr.w	r2, r3, #1
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	655a      	str	r2, [r3, #84]	; 0x54
 80015f0:	e007      	b.n	8001602 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015f6:	f043 0210 	orr.w	r2, r3, #16
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001602:	7ffb      	ldrb	r3, [r7, #31]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3724      	adds	r7, #36	; 0x24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd90      	pop	{r4, r7, pc}
 800160c:	20000000 	.word	0x20000000
 8001610:	053e2d63 	.word	0x053e2d63
 8001614:	50040000 	.word	0x50040000
 8001618:	50040100 	.word	0x50040100
 800161c:	50040200 	.word	0x50040200
 8001620:	50040300 	.word	0x50040300
 8001624:	fff0c007 	.word	0xfff0c007

08001628 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001634:	4853      	ldr	r0, [pc, #332]	; (8001784 <HAL_ADC_Start_DMA+0x15c>)
 8001636:	f7ff fde3 	bl	8001200 <LL_ADC_GetMultimode>
 800163a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fe74 	bl	800132e <LL_ADC_REG_IsConversionOngoing>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	f040 8093 	bne.w	8001774 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001654:	2b01      	cmp	r3, #1
 8001656:	d101      	bne.n	800165c <HAL_ADC_Start_DMA+0x34>
 8001658:	2302      	movs	r3, #2
 800165a:	e08e      	b.n	800177a <HAL_ADC_Start_DMA+0x152>
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2201      	movs	r2, #1
 8001660:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a47      	ldr	r2, [pc, #284]	; (8001788 <HAL_ADC_Start_DMA+0x160>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d008      	beq.n	8001680 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d005      	beq.n	8001680 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	2b05      	cmp	r3, #5
 8001678:	d002      	beq.n	8001680 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	2b09      	cmp	r3, #9
 800167e:	d172      	bne.n	8001766 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001680:	68f8      	ldr	r0, [r7, #12]
 8001682:	f000 fc9b 	bl	8001fbc <ADC_Enable>
 8001686:	4603      	mov	r3, r0
 8001688:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800168a:	7dfb      	ldrb	r3, [r7, #23]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d165      	bne.n	800175c <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001694:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001698:	f023 0301 	bic.w	r3, r3, #1
 800169c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a38      	ldr	r2, [pc, #224]	; (800178c <HAL_ADC_Start_DMA+0x164>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d002      	beq.n	80016b4 <HAL_ADC_Start_DMA+0x8c>
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	e000      	b.n	80016b6 <HAL_ADC_Start_DMA+0x8e>
 80016b4:	4b36      	ldr	r3, [pc, #216]	; (8001790 <HAL_ADC_Start_DMA+0x168>)
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	6812      	ldr	r2, [r2, #0]
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d002      	beq.n	80016c4 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d105      	bne.n	80016d0 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d006      	beq.n	80016ea <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e0:	f023 0206 	bic.w	r2, r3, #6
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	659a      	str	r2, [r3, #88]	; 0x58
 80016e8:	e002      	b.n	80016f0 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2200      	movs	r2, #0
 80016ee:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f4:	4a27      	ldr	r2, [pc, #156]	; (8001794 <HAL_ADC_Start_DMA+0x16c>)
 80016f6:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fc:	4a26      	ldr	r2, [pc, #152]	; (8001798 <HAL_ADC_Start_DMA+0x170>)
 80016fe:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001704:	4a25      	ldr	r2, [pc, #148]	; (800179c <HAL_ADC_Start_DMA+0x174>)
 8001706:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	221c      	movs	r2, #28
 800170e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2200      	movs	r2, #0
 8001714:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f042 0210 	orr.w	r2, r2, #16
 8001726:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	68da      	ldr	r2, [r3, #12]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f042 0201 	orr.w	r2, r2, #1
 8001736:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	3340      	adds	r3, #64	; 0x40
 8001742:	4619      	mov	r1, r3
 8001744:	68ba      	ldr	r2, [r7, #8]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f000 fff2 	bl	8002730 <HAL_DMA_Start_IT>
 800174c:	4603      	mov	r3, r0
 800174e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff fdd6 	bl	8001306 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800175a:	e00d      	b.n	8001778 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2200      	movs	r2, #0
 8001760:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001764:	e008      	b.n	8001778 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001772:	e001      	b.n	8001778 <HAL_ADC_Start_DMA+0x150>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001774:	2302      	movs	r3, #2
 8001776:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001778:	7dfb      	ldrb	r3, [r7, #23]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	50040300 	.word	0x50040300
 8001788:	50040200 	.word	0x50040200
 800178c:	50040100 	.word	0x50040100
 8001790:	50040000 	.word	0x50040000
 8001794:	080020c9 	.word	0x080020c9
 8001798:	080021a1 	.word	0x080021a1
 800179c:	080021bd 	.word	0x080021bd

080017a0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b0b6      	sub	sp, #216	; 0xd8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017e6:	2300      	movs	r3, #0
 80017e8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d101      	bne.n	80017fe <HAL_ADC_ConfigChannel+0x22>
 80017fa:	2302      	movs	r3, #2
 80017fc:	e3c7      	b.n	8001f8e <HAL_ADC_ConfigChannel+0x7b2>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff fd8f 	bl	800132e <LL_ADC_REG_IsConversionOngoing>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	f040 83a8 	bne.w	8001f68 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b05      	cmp	r3, #5
 800181e:	d824      	bhi.n	800186a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	3b02      	subs	r3, #2
 8001826:	2b03      	cmp	r3, #3
 8001828:	d81b      	bhi.n	8001862 <HAL_ADC_ConfigChannel+0x86>
 800182a:	a201      	add	r2, pc, #4	; (adr r2, 8001830 <HAL_ADC_ConfigChannel+0x54>)
 800182c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001830:	08001841 	.word	0x08001841
 8001834:	08001849 	.word	0x08001849
 8001838:	08001851 	.word	0x08001851
 800183c:	08001859 	.word	0x08001859
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	220c      	movs	r2, #12
 8001844:	605a      	str	r2, [r3, #4]
          break;
 8001846:	e011      	b.n	800186c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	2212      	movs	r2, #18
 800184c:	605a      	str	r2, [r3, #4]
          break;
 800184e:	e00d      	b.n	800186c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	2218      	movs	r2, #24
 8001854:	605a      	str	r2, [r3, #4]
          break;
 8001856:	e009      	b.n	800186c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800185e:	605a      	str	r2, [r3, #4]
          break;
 8001860:	e004      	b.n	800186c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	2206      	movs	r2, #6
 8001866:	605a      	str	r2, [r3, #4]
          break;
 8001868:	e000      	b.n	800186c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800186a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6818      	ldr	r0, [r3, #0]
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	6859      	ldr	r1, [r3, #4]
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	461a      	mov	r2, r3
 800187a:	f7ff fc45 	bl	8001108 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fd53 	bl	800132e <LL_ADC_REG_IsConversionOngoing>
 8001888:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff fd5f 	bl	8001354 <LL_ADC_INJ_IsConversionOngoing>
 8001896:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800189a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f040 81a6 	bne.w	8001bf0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f040 81a1 	bne.w	8001bf0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6818      	ldr	r0, [r3, #0]
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	6819      	ldr	r1, [r3, #0]
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	461a      	mov	r2, r3
 80018bc:	f7ff fc50 	bl	8001160 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	695a      	ldr	r2, [r3, #20]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	08db      	lsrs	r3, r3, #3
 80018cc:	f003 0303 	and.w	r3, r3, #3
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	2b04      	cmp	r3, #4
 80018e0:	d00a      	beq.n	80018f8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6818      	ldr	r0, [r3, #0]
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	6919      	ldr	r1, [r3, #16]
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80018f2:	f7ff fba1 	bl	8001038 <LL_ADC_SetOffset>
 80018f6:	e17b      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2100      	movs	r1, #0
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff fbbe 	bl	8001080 <LL_ADC_GetOffsetChannel>
 8001904:	4603      	mov	r3, r0
 8001906:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800190a:	2b00      	cmp	r3, #0
 800190c:	d10a      	bne.n	8001924 <HAL_ADC_ConfigChannel+0x148>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2100      	movs	r1, #0
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff fbb3 	bl	8001080 <LL_ADC_GetOffsetChannel>
 800191a:	4603      	mov	r3, r0
 800191c:	0e9b      	lsrs	r3, r3, #26
 800191e:	f003 021f 	and.w	r2, r3, #31
 8001922:	e01e      	b.n	8001962 <HAL_ADC_ConfigChannel+0x186>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2100      	movs	r1, #0
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff fba8 	bl	8001080 <LL_ADC_GetOffsetChannel>
 8001930:	4603      	mov	r3, r0
 8001932:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001936:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800193a:	fa93 f3a3 	rbit	r3, r3
 800193e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001942:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001946:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800194a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001952:	2320      	movs	r3, #32
 8001954:	e004      	b.n	8001960 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001956:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800195a:	fab3 f383 	clz	r3, r3
 800195e:	b2db      	uxtb	r3, r3
 8001960:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800196a:	2b00      	cmp	r3, #0
 800196c:	d105      	bne.n	800197a <HAL_ADC_ConfigChannel+0x19e>
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	0e9b      	lsrs	r3, r3, #26
 8001974:	f003 031f 	and.w	r3, r3, #31
 8001978:	e018      	b.n	80019ac <HAL_ADC_ConfigChannel+0x1d0>
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001982:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001986:	fa93 f3a3 	rbit	r3, r3
 800198a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800198e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001992:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001996:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800199e:	2320      	movs	r3, #32
 80019a0:	e004      	b.n	80019ac <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80019a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80019a6:	fab3 f383 	clz	r3, r3
 80019aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d106      	bne.n	80019be <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2200      	movs	r2, #0
 80019b6:	2100      	movs	r1, #0
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff fb77 	bl	80010ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2101      	movs	r1, #1
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fb5b 	bl	8001080 <LL_ADC_GetOffsetChannel>
 80019ca:	4603      	mov	r3, r0
 80019cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d10a      	bne.n	80019ea <HAL_ADC_ConfigChannel+0x20e>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2101      	movs	r1, #1
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fb50 	bl	8001080 <LL_ADC_GetOffsetChannel>
 80019e0:	4603      	mov	r3, r0
 80019e2:	0e9b      	lsrs	r3, r3, #26
 80019e4:	f003 021f 	and.w	r2, r3, #31
 80019e8:	e01e      	b.n	8001a28 <HAL_ADC_ConfigChannel+0x24c>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2101      	movs	r1, #1
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff fb45 	bl	8001080 <LL_ADC_GetOffsetChannel>
 80019f6:	4603      	mov	r3, r0
 80019f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a00:	fa93 f3a3 	rbit	r3, r3
 8001a04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001a08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001a0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001a10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001a18:	2320      	movs	r3, #32
 8001a1a:	e004      	b.n	8001a26 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001a1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a20:	fab3 f383 	clz	r3, r3
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d105      	bne.n	8001a40 <HAL_ADC_ConfigChannel+0x264>
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	0e9b      	lsrs	r3, r3, #26
 8001a3a:	f003 031f 	and.w	r3, r3, #31
 8001a3e:	e018      	b.n	8001a72 <HAL_ADC_ConfigChannel+0x296>
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a4c:	fa93 f3a3 	rbit	r3, r3
 8001a50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001a54:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001a5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d101      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001a64:	2320      	movs	r3, #32
 8001a66:	e004      	b.n	8001a72 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001a68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a6c:	fab3 f383 	clz	r3, r3
 8001a70:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d106      	bne.n	8001a84 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff fb14 	bl	80010ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2102      	movs	r1, #2
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff faf8 	bl	8001080 <LL_ADC_GetOffsetChannel>
 8001a90:	4603      	mov	r3, r0
 8001a92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10a      	bne.n	8001ab0 <HAL_ADC_ConfigChannel+0x2d4>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2102      	movs	r1, #2
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff faed 	bl	8001080 <LL_ADC_GetOffsetChannel>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	0e9b      	lsrs	r3, r3, #26
 8001aaa:	f003 021f 	and.w	r2, r3, #31
 8001aae:	e01e      	b.n	8001aee <HAL_ADC_ConfigChannel+0x312>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2102      	movs	r1, #2
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff fae2 	bl	8001080 <LL_ADC_GetOffsetChannel>
 8001abc:	4603      	mov	r3, r0
 8001abe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ac6:	fa93 f3a3 	rbit	r3, r3
 8001aca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001ace:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ad2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001ad6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001ade:	2320      	movs	r3, #32
 8001ae0:	e004      	b.n	8001aec <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001ae2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ae6:	fab3 f383 	clz	r3, r3
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d105      	bne.n	8001b06 <HAL_ADC_ConfigChannel+0x32a>
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	0e9b      	lsrs	r3, r3, #26
 8001b00:	f003 031f 	and.w	r3, r3, #31
 8001b04:	e016      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x358>
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b12:	fa93 f3a3 	rbit	r3, r3
 8001b16:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001b18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001b1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001b26:	2320      	movs	r3, #32
 8001b28:	e004      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001b2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b2e:	fab3 f383 	clz	r3, r3
 8001b32:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d106      	bne.n	8001b46 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	2102      	movs	r1, #2
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff fab3 	bl	80010ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2103      	movs	r1, #3
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff fa97 	bl	8001080 <LL_ADC_GetOffsetChannel>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d10a      	bne.n	8001b72 <HAL_ADC_ConfigChannel+0x396>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2103      	movs	r1, #3
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fa8c 	bl	8001080 <LL_ADC_GetOffsetChannel>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	0e9b      	lsrs	r3, r3, #26
 8001b6c:	f003 021f 	and.w	r2, r3, #31
 8001b70:	e017      	b.n	8001ba2 <HAL_ADC_ConfigChannel+0x3c6>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2103      	movs	r1, #3
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fa81 	bl	8001080 <LL_ADC_GetOffsetChannel>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b84:	fa93 f3a3 	rbit	r3, r3
 8001b88:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001b8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b8c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001b8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d101      	bne.n	8001b98 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001b94:	2320      	movs	r3, #32
 8001b96:	e003      	b.n	8001ba0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001b98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b9a:	fab3 f383 	clz	r3, r3
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d105      	bne.n	8001bba <HAL_ADC_ConfigChannel+0x3de>
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	0e9b      	lsrs	r3, r3, #26
 8001bb4:	f003 031f 	and.w	r3, r3, #31
 8001bb8:	e011      	b.n	8001bde <HAL_ADC_ConfigChannel+0x402>
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bc2:	fa93 f3a3 	rbit	r3, r3
 8001bc6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001bc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001bca:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001bd2:	2320      	movs	r3, #32
 8001bd4:	e003      	b.n	8001bde <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bd8:	fab3 f383 	clz	r3, r3
 8001bdc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d106      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2200      	movs	r2, #0
 8001be8:	2103      	movs	r1, #3
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff fa5e 	bl	80010ac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff fb73 	bl	80012e0 <LL_ADC_IsEnabled>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f040 813f 	bne.w	8001e80 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6818      	ldr	r0, [r3, #0]
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	6819      	ldr	r1, [r3, #0]
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	f7ff fad2 	bl	80011b8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	4a8e      	ldr	r2, [pc, #568]	; (8001e54 <HAL_ADC_ConfigChannel+0x678>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	f040 8130 	bne.w	8001e80 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d10b      	bne.n	8001c48 <HAL_ADC_ConfigChannel+0x46c>
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	0e9b      	lsrs	r3, r3, #26
 8001c36:	3301      	adds	r3, #1
 8001c38:	f003 031f 	and.w	r3, r3, #31
 8001c3c:	2b09      	cmp	r3, #9
 8001c3e:	bf94      	ite	ls
 8001c40:	2301      	movls	r3, #1
 8001c42:	2300      	movhi	r3, #0
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	e019      	b.n	8001c7c <HAL_ADC_ConfigChannel+0x4a0>
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c50:	fa93 f3a3 	rbit	r3, r3
 8001c54:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001c56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c58:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001c5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d101      	bne.n	8001c64 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001c60:	2320      	movs	r3, #32
 8001c62:	e003      	b.n	8001c6c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001c64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c66:	fab3 f383 	clz	r3, r3
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	f003 031f 	and.w	r3, r3, #31
 8001c72:	2b09      	cmp	r3, #9
 8001c74:	bf94      	ite	ls
 8001c76:	2301      	movls	r3, #1
 8001c78:	2300      	movhi	r3, #0
 8001c7a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d079      	beq.n	8001d74 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d107      	bne.n	8001c9c <HAL_ADC_ConfigChannel+0x4c0>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	0e9b      	lsrs	r3, r3, #26
 8001c92:	3301      	adds	r3, #1
 8001c94:	069b      	lsls	r3, r3, #26
 8001c96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c9a:	e015      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0x4ec>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ca4:	fa93 f3a3 	rbit	r3, r3
 8001ca8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cac:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001cae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d101      	bne.n	8001cb8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001cb4:	2320      	movs	r3, #32
 8001cb6:	e003      	b.n	8001cc0 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001cb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cba:	fab3 f383 	clz	r3, r3
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	069b      	lsls	r3, r3, #26
 8001cc4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d109      	bne.n	8001ce8 <HAL_ADC_ConfigChannel+0x50c>
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	0e9b      	lsrs	r3, r3, #26
 8001cda:	3301      	adds	r3, #1
 8001cdc:	f003 031f 	and.w	r3, r3, #31
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce6:	e017      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x53c>
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cf0:	fa93 f3a3 	rbit	r3, r3
 8001cf4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001cf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cf8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001cfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001d00:	2320      	movs	r3, #32
 8001d02:	e003      	b.n	8001d0c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001d04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d06:	fab3 f383 	clz	r3, r3
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	f003 031f 	and.w	r3, r3, #31
 8001d12:	2101      	movs	r1, #1
 8001d14:	fa01 f303 	lsl.w	r3, r1, r3
 8001d18:	ea42 0103 	orr.w	r1, r2, r3
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d10a      	bne.n	8001d3e <HAL_ADC_ConfigChannel+0x562>
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	0e9b      	lsrs	r3, r3, #26
 8001d2e:	3301      	adds	r3, #1
 8001d30:	f003 021f 	and.w	r2, r3, #31
 8001d34:	4613      	mov	r3, r2
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	4413      	add	r3, r2
 8001d3a:	051b      	lsls	r3, r3, #20
 8001d3c:	e018      	b.n	8001d70 <HAL_ADC_ConfigChannel+0x594>
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d46:	fa93 f3a3 	rbit	r3, r3
 8001d4a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001d56:	2320      	movs	r3, #32
 8001d58:	e003      	b.n	8001d62 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d5c:	fab3 f383 	clz	r3, r3
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	3301      	adds	r3, #1
 8001d64:	f003 021f 	and.w	r2, r3, #31
 8001d68:	4613      	mov	r3, r2
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	4413      	add	r3, r2
 8001d6e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d70:	430b      	orrs	r3, r1
 8001d72:	e080      	b.n	8001e76 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d107      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x5b4>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	0e9b      	lsrs	r3, r3, #26
 8001d86:	3301      	adds	r3, #1
 8001d88:	069b      	lsls	r3, r3, #26
 8001d8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d8e:	e015      	b.n	8001dbc <HAL_ADC_ConfigChannel+0x5e0>
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d98:	fa93 f3a3 	rbit	r3, r3
 8001d9c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d101      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001da8:	2320      	movs	r3, #32
 8001daa:	e003      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dae:	fab3 f383 	clz	r3, r3
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	3301      	adds	r3, #1
 8001db6:	069b      	lsls	r3, r3, #26
 8001db8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d109      	bne.n	8001ddc <HAL_ADC_ConfigChannel+0x600>
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	0e9b      	lsrs	r3, r3, #26
 8001dce:	3301      	adds	r3, #1
 8001dd0:	f003 031f 	and.w	r3, r3, #31
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dda:	e017      	b.n	8001e0c <HAL_ADC_ConfigChannel+0x630>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de2:	6a3b      	ldr	r3, [r7, #32]
 8001de4:	fa93 f3a3 	rbit	r3, r3
 8001de8:	61fb      	str	r3, [r7, #28]
  return result;
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001df4:	2320      	movs	r3, #32
 8001df6:	e003      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfa:	fab3 f383 	clz	r3, r3
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	3301      	adds	r3, #1
 8001e02:	f003 031f 	and.w	r3, r3, #31
 8001e06:	2101      	movs	r1, #1
 8001e08:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0c:	ea42 0103 	orr.w	r1, r2, r3
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d10d      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x65c>
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	0e9b      	lsrs	r3, r3, #26
 8001e22:	3301      	adds	r3, #1
 8001e24:	f003 021f 	and.w	r2, r3, #31
 8001e28:	4613      	mov	r3, r2
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	4413      	add	r3, r2
 8001e2e:	3b1e      	subs	r3, #30
 8001e30:	051b      	lsls	r3, r3, #20
 8001e32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e36:	e01d      	b.n	8001e74 <HAL_ADC_ConfigChannel+0x698>
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	fa93 f3a3 	rbit	r3, r3
 8001e44:	613b      	str	r3, [r7, #16]
  return result;
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d103      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001e50:	2320      	movs	r3, #32
 8001e52:	e005      	b.n	8001e60 <HAL_ADC_ConfigChannel+0x684>
 8001e54:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	fab3 f383 	clz	r3, r3
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	3301      	adds	r3, #1
 8001e62:	f003 021f 	and.w	r2, r3, #31
 8001e66:	4613      	mov	r3, r2
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	4413      	add	r3, r2
 8001e6c:	3b1e      	subs	r3, #30
 8001e6e:	051b      	lsls	r3, r3, #20
 8001e70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e74:	430b      	orrs	r3, r1
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	6892      	ldr	r2, [r2, #8]
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	f7ff f970 	bl	8001160 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4b44      	ldr	r3, [pc, #272]	; (8001f98 <HAL_ADC_ConfigChannel+0x7bc>)
 8001e86:	4013      	ands	r3, r2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d07a      	beq.n	8001f82 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e8c:	4843      	ldr	r0, [pc, #268]	; (8001f9c <HAL_ADC_ConfigChannel+0x7c0>)
 8001e8e:	f7ff f8c5 	bl	800101c <LL_ADC_GetCommonPathInternalCh>
 8001e92:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a41      	ldr	r2, [pc, #260]	; (8001fa0 <HAL_ADC_ConfigChannel+0x7c4>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d12c      	bne.n	8001efa <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ea0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ea4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d126      	bne.n	8001efa <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a3c      	ldr	r2, [pc, #240]	; (8001fa4 <HAL_ADC_ConfigChannel+0x7c8>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d004      	beq.n	8001ec0 <HAL_ADC_ConfigChannel+0x6e4>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a3b      	ldr	r2, [pc, #236]	; (8001fa8 <HAL_ADC_ConfigChannel+0x7cc>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d15d      	bne.n	8001f7c <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ec0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ec4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4834      	ldr	r0, [pc, #208]	; (8001f9c <HAL_ADC_ConfigChannel+0x7c0>)
 8001ecc:	f7ff f893 	bl	8000ff6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ed0:	4b36      	ldr	r3, [pc, #216]	; (8001fac <HAL_ADC_ConfigChannel+0x7d0>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	099b      	lsrs	r3, r3, #6
 8001ed6:	4a36      	ldr	r2, [pc, #216]	; (8001fb0 <HAL_ADC_ConfigChannel+0x7d4>)
 8001ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8001edc:	099b      	lsrs	r3, r3, #6
 8001ede:	1c5a      	adds	r2, r3, #1
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4413      	add	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001eea:	e002      	b.n	8001ef2 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1f9      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ef8:	e040      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a2d      	ldr	r2, [pc, #180]	; (8001fb4 <HAL_ADC_ConfigChannel+0x7d8>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d118      	bne.n	8001f36 <HAL_ADC_ConfigChannel+0x75a>
 8001f04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d112      	bne.n	8001f36 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a23      	ldr	r2, [pc, #140]	; (8001fa4 <HAL_ADC_ConfigChannel+0x7c8>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d004      	beq.n	8001f24 <HAL_ADC_ConfigChannel+0x748>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a22      	ldr	r2, [pc, #136]	; (8001fa8 <HAL_ADC_ConfigChannel+0x7cc>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d12d      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	481b      	ldr	r0, [pc, #108]	; (8001f9c <HAL_ADC_ConfigChannel+0x7c0>)
 8001f30:	f7ff f861 	bl	8000ff6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f34:	e024      	b.n	8001f80 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a1f      	ldr	r2, [pc, #124]	; (8001fb8 <HAL_ADC_ConfigChannel+0x7dc>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d120      	bne.n	8001f82 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d11a      	bne.n	8001f82 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a14      	ldr	r2, [pc, #80]	; (8001fa4 <HAL_ADC_ConfigChannel+0x7c8>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d115      	bne.n	8001f82 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f5a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f5e:	4619      	mov	r1, r3
 8001f60:	480e      	ldr	r0, [pc, #56]	; (8001f9c <HAL_ADC_ConfigChannel+0x7c0>)
 8001f62:	f7ff f848 	bl	8000ff6 <LL_ADC_SetCommonPathInternalCh>
 8001f66:	e00c      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6c:	f043 0220 	orr.w	r2, r3, #32
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001f7a:	e002      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f7c:	bf00      	nop
 8001f7e:	e000      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f80:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001f8a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	37d8      	adds	r7, #216	; 0xd8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	80080000 	.word	0x80080000
 8001f9c:	50040300 	.word	0x50040300
 8001fa0:	c7520000 	.word	0xc7520000
 8001fa4:	50040000 	.word	0x50040000
 8001fa8:	50040200 	.word	0x50040200
 8001fac:	20000000 	.word	0x20000000
 8001fb0:	053e2d63 	.word	0x053e2d63
 8001fb4:	cb840000 	.word	0xcb840000
 8001fb8:	80000001 	.word	0x80000001

08001fbc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff f987 	bl	80012e0 <LL_ADC_IsEnabled>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d169      	bne.n	80020ac <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689a      	ldr	r2, [r3, #8]
 8001fde:	4b36      	ldr	r3, [pc, #216]	; (80020b8 <ADC_Enable+0xfc>)
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00d      	beq.n	8002002 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fea:	f043 0210 	orr.w	r2, r3, #16
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff6:	f043 0201 	orr.w	r2, r3, #1
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e055      	b.n	80020ae <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff f956 	bl	80012b8 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800200c:	482b      	ldr	r0, [pc, #172]	; (80020bc <ADC_Enable+0x100>)
 800200e:	f7ff f805 	bl	800101c <LL_ADC_GetCommonPathInternalCh>
 8002012:	4603      	mov	r3, r0
 8002014:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d013      	beq.n	8002044 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800201c:	4b28      	ldr	r3, [pc, #160]	; (80020c0 <ADC_Enable+0x104>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	099b      	lsrs	r3, r3, #6
 8002022:	4a28      	ldr	r2, [pc, #160]	; (80020c4 <ADC_Enable+0x108>)
 8002024:	fba2 2303 	umull	r2, r3, r2, r3
 8002028:	099b      	lsrs	r3, r3, #6
 800202a:	1c5a      	adds	r2, r3, #1
 800202c:	4613      	mov	r3, r2
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	4413      	add	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002036:	e002      	b.n	800203e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	3b01      	subs	r3, #1
 800203c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1f9      	bne.n	8002038 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002044:	f7fe ff94 	bl	8000f70 <HAL_GetTick>
 8002048:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800204a:	e028      	b.n	800209e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff f945 	bl	80012e0 <LL_ADC_IsEnabled>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d104      	bne.n	8002066 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff f929 	bl	80012b8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002066:	f7fe ff83 	bl	8000f70 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d914      	bls.n	800209e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b01      	cmp	r3, #1
 8002080:	d00d      	beq.n	800209e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002086:	f043 0210 	orr.w	r2, r3, #16
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002092:	f043 0201 	orr.w	r2, r3, #1
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e007      	b.n	80020ae <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d1cf      	bne.n	800204c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	8000003f 	.word	0x8000003f
 80020bc:	50040300 	.word	0x50040300
 80020c0:	20000000 	.word	0x20000000
 80020c4:	053e2d63 	.word	0x053e2d63

080020c8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020da:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d14b      	bne.n	800217a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0308 	and.w	r3, r3, #8
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d021      	beq.n	8002140 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f7fe ffee 	bl	80010e2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d032      	beq.n	8002172 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d12b      	bne.n	8002172 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800211e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800212a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d11f      	bne.n	8002172 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002136:	f043 0201 	orr.w	r2, r3, #1
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	655a      	str	r2, [r3, #84]	; 0x54
 800213e:	e018      	b.n	8002172 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d111      	bne.n	8002172 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002152:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800215e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d105      	bne.n	8002172 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216a:	f043 0201 	orr.w	r2, r3, #1
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	f7ff fb14 	bl	80017a0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002178:	e00e      	b.n	8002198 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800217e:	f003 0310 	and.w	r3, r3, #16
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f7ff fb1e 	bl	80017c8 <HAL_ADC_ErrorCallback>
}
 800218c:	e004      	b.n	8002198 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	4798      	blx	r3
}
 8002198:	bf00      	nop
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ac:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f7ff fb00 	bl	80017b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021b4:	bf00      	nop
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021da:	f043 0204 	orr.w	r2, r3, #4
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f7ff faf0 	bl	80017c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021e8:	bf00      	nop
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <LL_ADC_IsEnabled>:
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	2b01      	cmp	r3, #1
 8002202:	d101      	bne.n	8002208 <LL_ADC_IsEnabled+0x18>
 8002204:	2301      	movs	r3, #1
 8002206:	e000      	b.n	800220a <LL_ADC_IsEnabled+0x1a>
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <LL_ADC_REG_IsConversionOngoing>:
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 0304 	and.w	r3, r3, #4
 8002226:	2b04      	cmp	r3, #4
 8002228:	d101      	bne.n	800222e <LL_ADC_REG_IsConversionOngoing+0x18>
 800222a:	2301      	movs	r3, #1
 800222c:	e000      	b.n	8002230 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800223c:	b590      	push	{r4, r7, lr}
 800223e:	b09f      	sub	sp, #124	; 0x7c
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002246:	2300      	movs	r3, #0
 8002248:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002252:	2b01      	cmp	r3, #1
 8002254:	d101      	bne.n	800225a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002256:	2302      	movs	r3, #2
 8002258:	e093      	b.n	8002382 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002262:	2300      	movs	r3, #0
 8002264:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002266:	2300      	movs	r3, #0
 8002268:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a47      	ldr	r2, [pc, #284]	; (800238c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d102      	bne.n	800227a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002274:	4b46      	ldr	r3, [pc, #280]	; (8002390 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002276:	60bb      	str	r3, [r7, #8]
 8002278:	e001      	b.n	800227e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800227a:	2300      	movs	r3, #0
 800227c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d10b      	bne.n	800229c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002288:	f043 0220 	orr.w	r2, r3, #32
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e072      	b.n	8002382 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff ffb9 	bl	8002216 <LL_ADC_REG_IsConversionOngoing>
 80022a4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff ffb3 	bl	8002216 <LL_ADC_REG_IsConversionOngoing>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d154      	bne.n	8002360 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80022b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d151      	bne.n	8002360 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80022bc:	4b35      	ldr	r3, [pc, #212]	; (8002394 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80022be:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d02c      	beq.n	8002322 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80022c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	6859      	ldr	r1, [r3, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022da:	035b      	lsls	r3, r3, #13
 80022dc:	430b      	orrs	r3, r1
 80022de:	431a      	orrs	r2, r3
 80022e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022e2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022e4:	4829      	ldr	r0, [pc, #164]	; (800238c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80022e6:	f7ff ff83 	bl	80021f0 <LL_ADC_IsEnabled>
 80022ea:	4604      	mov	r4, r0
 80022ec:	4828      	ldr	r0, [pc, #160]	; (8002390 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80022ee:	f7ff ff7f 	bl	80021f0 <LL_ADC_IsEnabled>
 80022f2:	4603      	mov	r3, r0
 80022f4:	431c      	orrs	r4, r3
 80022f6:	4828      	ldr	r0, [pc, #160]	; (8002398 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80022f8:	f7ff ff7a 	bl	80021f0 <LL_ADC_IsEnabled>
 80022fc:	4603      	mov	r3, r0
 80022fe:	4323      	orrs	r3, r4
 8002300:	2b00      	cmp	r3, #0
 8002302:	d137      	bne.n	8002374 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800230c:	f023 030f 	bic.w	r3, r3, #15
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	6811      	ldr	r1, [r2, #0]
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	6892      	ldr	r2, [r2, #8]
 8002318:	430a      	orrs	r2, r1
 800231a:	431a      	orrs	r2, r3
 800231c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800231e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002320:	e028      	b.n	8002374 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800232a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800232c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800232e:	4817      	ldr	r0, [pc, #92]	; (800238c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002330:	f7ff ff5e 	bl	80021f0 <LL_ADC_IsEnabled>
 8002334:	4604      	mov	r4, r0
 8002336:	4816      	ldr	r0, [pc, #88]	; (8002390 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002338:	f7ff ff5a 	bl	80021f0 <LL_ADC_IsEnabled>
 800233c:	4603      	mov	r3, r0
 800233e:	431c      	orrs	r4, r3
 8002340:	4815      	ldr	r0, [pc, #84]	; (8002398 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002342:	f7ff ff55 	bl	80021f0 <LL_ADC_IsEnabled>
 8002346:	4603      	mov	r3, r0
 8002348:	4323      	orrs	r3, r4
 800234a:	2b00      	cmp	r3, #0
 800234c:	d112      	bne.n	8002374 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800234e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002356:	f023 030f 	bic.w	r3, r3, #15
 800235a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800235c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800235e:	e009      	b.n	8002374 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002364:	f043 0220 	orr.w	r2, r3, #32
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002372:	e000      	b.n	8002376 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002374:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800237e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002382:	4618      	mov	r0, r3
 8002384:	377c      	adds	r7, #124	; 0x7c
 8002386:	46bd      	mov	sp, r7
 8002388:	bd90      	pop	{r4, r7, pc}
 800238a:	bf00      	nop
 800238c:	50040000 	.word	0x50040000
 8002390:	50040100 	.word	0x50040100
 8002394:	50040300 	.word	0x50040300
 8002398:	50040200 	.word	0x50040200

0800239c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023ac:	4b0c      	ldr	r3, [pc, #48]	; (80023e0 <__NVIC_SetPriorityGrouping+0x44>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023b8:	4013      	ands	r3, r2
 80023ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ce:	4a04      	ldr	r2, [pc, #16]	; (80023e0 <__NVIC_SetPriorityGrouping+0x44>)
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	60d3      	str	r3, [r2, #12]
}
 80023d4:	bf00      	nop
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	e000ed00 	.word	0xe000ed00

080023e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023e8:	4b04      	ldr	r3, [pc, #16]	; (80023fc <__NVIC_GetPriorityGrouping+0x18>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	0a1b      	lsrs	r3, r3, #8
 80023ee:	f003 0307 	and.w	r3, r3, #7
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	e000ed00 	.word	0xe000ed00

08002400 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800240a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240e:	2b00      	cmp	r3, #0
 8002410:	db0b      	blt.n	800242a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002412:	79fb      	ldrb	r3, [r7, #7]
 8002414:	f003 021f 	and.w	r2, r3, #31
 8002418:	4907      	ldr	r1, [pc, #28]	; (8002438 <__NVIC_EnableIRQ+0x38>)
 800241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241e:	095b      	lsrs	r3, r3, #5
 8002420:	2001      	movs	r0, #1
 8002422:	fa00 f202 	lsl.w	r2, r0, r2
 8002426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	e000e100 	.word	0xe000e100

0800243c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	6039      	str	r1, [r7, #0]
 8002446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244c:	2b00      	cmp	r3, #0
 800244e:	db0a      	blt.n	8002466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	b2da      	uxtb	r2, r3
 8002454:	490c      	ldr	r1, [pc, #48]	; (8002488 <__NVIC_SetPriority+0x4c>)
 8002456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245a:	0112      	lsls	r2, r2, #4
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	440b      	add	r3, r1
 8002460:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002464:	e00a      	b.n	800247c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	b2da      	uxtb	r2, r3
 800246a:	4908      	ldr	r1, [pc, #32]	; (800248c <__NVIC_SetPriority+0x50>)
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	3b04      	subs	r3, #4
 8002474:	0112      	lsls	r2, r2, #4
 8002476:	b2d2      	uxtb	r2, r2
 8002478:	440b      	add	r3, r1
 800247a:	761a      	strb	r2, [r3, #24]
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	e000e100 	.word	0xe000e100
 800248c:	e000ed00 	.word	0xe000ed00

08002490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002490:	b480      	push	{r7}
 8002492:	b089      	sub	sp, #36	; 0x24
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	f1c3 0307 	rsb	r3, r3, #7
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	bf28      	it	cs
 80024ae:	2304      	movcs	r3, #4
 80024b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	3304      	adds	r3, #4
 80024b6:	2b06      	cmp	r3, #6
 80024b8:	d902      	bls.n	80024c0 <NVIC_EncodePriority+0x30>
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	3b03      	subs	r3, #3
 80024be:	e000      	b.n	80024c2 <NVIC_EncodePriority+0x32>
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c4:	f04f 32ff 	mov.w	r2, #4294967295
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	43da      	mvns	r2, r3
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	401a      	ands	r2, r3
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024d8:	f04f 31ff 	mov.w	r1, #4294967295
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	fa01 f303 	lsl.w	r3, r1, r3
 80024e2:	43d9      	mvns	r1, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e8:	4313      	orrs	r3, r2
         );
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3724      	adds	r7, #36	; 0x24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
	...

080024f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3b01      	subs	r3, #1
 8002504:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002508:	d301      	bcc.n	800250e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800250a:	2301      	movs	r3, #1
 800250c:	e00f      	b.n	800252e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800250e:	4a0a      	ldr	r2, [pc, #40]	; (8002538 <SysTick_Config+0x40>)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3b01      	subs	r3, #1
 8002514:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002516:	210f      	movs	r1, #15
 8002518:	f04f 30ff 	mov.w	r0, #4294967295
 800251c:	f7ff ff8e 	bl	800243c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002520:	4b05      	ldr	r3, [pc, #20]	; (8002538 <SysTick_Config+0x40>)
 8002522:	2200      	movs	r2, #0
 8002524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002526:	4b04      	ldr	r3, [pc, #16]	; (8002538 <SysTick_Config+0x40>)
 8002528:	2207      	movs	r2, #7
 800252a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	e000e010 	.word	0xe000e010

0800253c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff ff29 	bl	800239c <__NVIC_SetPriorityGrouping>
}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b086      	sub	sp, #24
 8002556:	af00      	add	r7, sp, #0
 8002558:	4603      	mov	r3, r0
 800255a:	60b9      	str	r1, [r7, #8]
 800255c:	607a      	str	r2, [r7, #4]
 800255e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002560:	2300      	movs	r3, #0
 8002562:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002564:	f7ff ff3e 	bl	80023e4 <__NVIC_GetPriorityGrouping>
 8002568:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	68b9      	ldr	r1, [r7, #8]
 800256e:	6978      	ldr	r0, [r7, #20]
 8002570:	f7ff ff8e 	bl	8002490 <NVIC_EncodePriority>
 8002574:	4602      	mov	r2, r0
 8002576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800257a:	4611      	mov	r1, r2
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff ff5d 	bl	800243c <__NVIC_SetPriority>
}
 8002582:	bf00      	nop
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b082      	sub	sp, #8
 800258e:	af00      	add	r7, sp, #0
 8002590:	4603      	mov	r3, r0
 8002592:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff ff31 	bl	8002400 <__NVIC_EnableIRQ>
}
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b082      	sub	sp, #8
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7ff ffa2 	bl	80024f8 <SysTick_Config>
 80025b4:	4603      	mov	r3, r0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e098      	b.n	8002704 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	4b4d      	ldr	r3, [pc, #308]	; (8002710 <HAL_DMA_Init+0x150>)
 80025da:	429a      	cmp	r2, r3
 80025dc:	d80f      	bhi.n	80025fe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	461a      	mov	r2, r3
 80025e4:	4b4b      	ldr	r3, [pc, #300]	; (8002714 <HAL_DMA_Init+0x154>)
 80025e6:	4413      	add	r3, r2
 80025e8:	4a4b      	ldr	r2, [pc, #300]	; (8002718 <HAL_DMA_Init+0x158>)
 80025ea:	fba2 2303 	umull	r2, r3, r2, r3
 80025ee:	091b      	lsrs	r3, r3, #4
 80025f0:	009a      	lsls	r2, r3, #2
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a48      	ldr	r2, [pc, #288]	; (800271c <HAL_DMA_Init+0x15c>)
 80025fa:	641a      	str	r2, [r3, #64]	; 0x40
 80025fc:	e00e      	b.n	800261c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	461a      	mov	r2, r3
 8002604:	4b46      	ldr	r3, [pc, #280]	; (8002720 <HAL_DMA_Init+0x160>)
 8002606:	4413      	add	r3, r2
 8002608:	4a43      	ldr	r2, [pc, #268]	; (8002718 <HAL_DMA_Init+0x158>)
 800260a:	fba2 2303 	umull	r2, r3, r2, r3
 800260e:	091b      	lsrs	r3, r3, #4
 8002610:	009a      	lsls	r2, r3, #2
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a42      	ldr	r2, [pc, #264]	; (8002724 <HAL_DMA_Init+0x164>)
 800261a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2202      	movs	r2, #2
 8002620:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002636:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002640:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800264c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002658:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	4313      	orrs	r3, r2
 8002664:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002676:	d039      	beq.n	80026ec <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267c:	4a27      	ldr	r2, [pc, #156]	; (800271c <HAL_DMA_Init+0x15c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d11a      	bne.n	80026b8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002682:	4b29      	ldr	r3, [pc, #164]	; (8002728 <HAL_DMA_Init+0x168>)
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268a:	f003 031c 	and.w	r3, r3, #28
 800268e:	210f      	movs	r1, #15
 8002690:	fa01 f303 	lsl.w	r3, r1, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	4924      	ldr	r1, [pc, #144]	; (8002728 <HAL_DMA_Init+0x168>)
 8002698:	4013      	ands	r3, r2
 800269a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800269c:	4b22      	ldr	r3, [pc, #136]	; (8002728 <HAL_DMA_Init+0x168>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6859      	ldr	r1, [r3, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a8:	f003 031c 	and.w	r3, r3, #28
 80026ac:	fa01 f303 	lsl.w	r3, r1, r3
 80026b0:	491d      	ldr	r1, [pc, #116]	; (8002728 <HAL_DMA_Init+0x168>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	600b      	str	r3, [r1, #0]
 80026b6:	e019      	b.n	80026ec <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80026b8:	4b1c      	ldr	r3, [pc, #112]	; (800272c <HAL_DMA_Init+0x16c>)
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c0:	f003 031c 	and.w	r3, r3, #28
 80026c4:	210f      	movs	r1, #15
 80026c6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ca:	43db      	mvns	r3, r3
 80026cc:	4917      	ldr	r1, [pc, #92]	; (800272c <HAL_DMA_Init+0x16c>)
 80026ce:	4013      	ands	r3, r2
 80026d0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80026d2:	4b16      	ldr	r3, [pc, #88]	; (800272c <HAL_DMA_Init+0x16c>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6859      	ldr	r1, [r3, #4]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026de:	f003 031c 	and.w	r3, r3, #28
 80026e2:	fa01 f303 	lsl.w	r3, r1, r3
 80026e6:	4911      	ldr	r1, [pc, #68]	; (800272c <HAL_DMA_Init+0x16c>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	40020407 	.word	0x40020407
 8002714:	bffdfff8 	.word	0xbffdfff8
 8002718:	cccccccd 	.word	0xcccccccd
 800271c:	40020000 	.word	0x40020000
 8002720:	bffdfbf8 	.word	0xbffdfbf8
 8002724:	40020400 	.word	0x40020400
 8002728:	400200a8 	.word	0x400200a8
 800272c:	400204a8 	.word	0x400204a8

08002730 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
 800273c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800273e:	2300      	movs	r3, #0
 8002740:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002748:	2b01      	cmp	r3, #1
 800274a:	d101      	bne.n	8002750 <HAL_DMA_Start_IT+0x20>
 800274c:	2302      	movs	r3, #2
 800274e:	e04b      	b.n	80027e8 <HAL_DMA_Start_IT+0xb8>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b01      	cmp	r3, #1
 8002762:	d13a      	bne.n	80027da <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2202      	movs	r2, #2
 8002768:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0201 	bic.w	r2, r2, #1
 8002780:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	68b9      	ldr	r1, [r7, #8]
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 f8e0 	bl	800294e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	2b00      	cmp	r3, #0
 8002794:	d008      	beq.n	80027a8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f042 020e 	orr.w	r2, r2, #14
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	e00f      	b.n	80027c8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 0204 	bic.w	r2, r2, #4
 80027b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 020a 	orr.w	r2, r2, #10
 80027c6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f042 0201 	orr.w	r2, r2, #1
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	e005      	b.n	80027e6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80027e2:	2302      	movs	r3, #2
 80027e4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80027e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3718      	adds	r7, #24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280c:	f003 031c 	and.w	r3, r3, #28
 8002810:	2204      	movs	r2, #4
 8002812:	409a      	lsls	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4013      	ands	r3, r2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d026      	beq.n	800286a <HAL_DMA_IRQHandler+0x7a>
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	f003 0304 	and.w	r3, r3, #4
 8002822:	2b00      	cmp	r3, #0
 8002824:	d021      	beq.n	800286a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0320 	and.w	r3, r3, #32
 8002830:	2b00      	cmp	r3, #0
 8002832:	d107      	bne.n	8002844 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 0204 	bic.w	r2, r2, #4
 8002842:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002848:	f003 021c 	and.w	r2, r3, #28
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002850:	2104      	movs	r1, #4
 8002852:	fa01 f202 	lsl.w	r2, r1, r2
 8002856:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285c:	2b00      	cmp	r3, #0
 800285e:	d071      	beq.n	8002944 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002868:	e06c      	b.n	8002944 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286e:	f003 031c 	and.w	r3, r3, #28
 8002872:	2202      	movs	r2, #2
 8002874:	409a      	lsls	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	4013      	ands	r3, r2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d02e      	beq.n	80028dc <HAL_DMA_IRQHandler+0xec>
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d029      	beq.n	80028dc <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0320 	and.w	r3, r3, #32
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10b      	bne.n	80028ae <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 020a 	bic.w	r2, r2, #10
 80028a4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b2:	f003 021c 	and.w	r2, r3, #28
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	2102      	movs	r1, #2
 80028bc:	fa01 f202 	lsl.w	r2, r1, r2
 80028c0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d038      	beq.n	8002944 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80028da:	e033      	b.n	8002944 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e0:	f003 031c 	and.w	r3, r3, #28
 80028e4:	2208      	movs	r2, #8
 80028e6:	409a      	lsls	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	4013      	ands	r3, r2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d02a      	beq.n	8002946 <HAL_DMA_IRQHandler+0x156>
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	f003 0308 	and.w	r3, r3, #8
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d025      	beq.n	8002946 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 020e 	bic.w	r2, r2, #14
 8002908:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290e:	f003 021c 	and.w	r2, r3, #28
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	2101      	movs	r1, #1
 8002918:	fa01 f202 	lsl.w	r2, r1, r2
 800291c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002938:	2b00      	cmp	r3, #0
 800293a:	d004      	beq.n	8002946 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002944:	bf00      	nop
 8002946:	bf00      	nop
}
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800294e:	b480      	push	{r7}
 8002950:	b085      	sub	sp, #20
 8002952:	af00      	add	r7, sp, #0
 8002954:	60f8      	str	r0, [r7, #12]
 8002956:	60b9      	str	r1, [r7, #8]
 8002958:	607a      	str	r2, [r7, #4]
 800295a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002960:	f003 021c 	and.w	r2, r3, #28
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	2101      	movs	r1, #1
 800296a:	fa01 f202 	lsl.w	r2, r1, r2
 800296e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	2b10      	cmp	r3, #16
 800297e:	d108      	bne.n	8002992 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002990:	e007      	b.n	80029a2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	60da      	str	r2, [r3, #12]
}
 80029a2:	bf00      	nop
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
	...

080029b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b087      	sub	sp, #28
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029ba:	2300      	movs	r3, #0
 80029bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029be:	e17f      	b.n	8002cc0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	2101      	movs	r1, #1
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	fa01 f303 	lsl.w	r3, r1, r3
 80029cc:	4013      	ands	r3, r2
 80029ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f000 8171 	beq.w	8002cba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f003 0303 	and.w	r3, r3, #3
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d005      	beq.n	80029f0 <HAL_GPIO_Init+0x40>
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f003 0303 	and.w	r3, r3, #3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d130      	bne.n	8002a52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	2203      	movs	r2, #3
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	43db      	mvns	r3, r3
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	4013      	ands	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a26:	2201      	movs	r2, #1
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	4013      	ands	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	091b      	lsrs	r3, r3, #4
 8002a3c:	f003 0201 	and.w	r2, r3, #1
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f003 0303 	and.w	r3, r3, #3
 8002a5a:	2b03      	cmp	r3, #3
 8002a5c:	d118      	bne.n	8002a90 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002a64:	2201      	movs	r2, #1
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	4013      	ands	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	08db      	lsrs	r3, r3, #3
 8002a7a:	f003 0201 	and.w	r2, r3, #1
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f003 0303 	and.w	r3, r3, #3
 8002a98:	2b03      	cmp	r3, #3
 8002a9a:	d017      	beq.n	8002acc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	2203      	movs	r2, #3
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	43db      	mvns	r3, r3
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f003 0303 	and.w	r3, r3, #3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d123      	bne.n	8002b20 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	08da      	lsrs	r2, r3, #3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3208      	adds	r2, #8
 8002ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	220f      	movs	r2, #15
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	43db      	mvns	r3, r3
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	4013      	ands	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	691a      	ldr	r2, [r3, #16]
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	08da      	lsrs	r2, r3, #3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	3208      	adds	r2, #8
 8002b1a:	6939      	ldr	r1, [r7, #16]
 8002b1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	2203      	movs	r2, #3
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	43db      	mvns	r3, r3
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	4013      	ands	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f003 0203 	and.w	r2, r3, #3
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f000 80ac 	beq.w	8002cba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b62:	4b5f      	ldr	r3, [pc, #380]	; (8002ce0 <HAL_GPIO_Init+0x330>)
 8002b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b66:	4a5e      	ldr	r2, [pc, #376]	; (8002ce0 <HAL_GPIO_Init+0x330>)
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	6613      	str	r3, [r2, #96]	; 0x60
 8002b6e:	4b5c      	ldr	r3, [pc, #368]	; (8002ce0 <HAL_GPIO_Init+0x330>)
 8002b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	60bb      	str	r3, [r7, #8]
 8002b78:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b7a:	4a5a      	ldr	r2, [pc, #360]	; (8002ce4 <HAL_GPIO_Init+0x334>)
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	089b      	lsrs	r3, r3, #2
 8002b80:	3302      	adds	r3, #2
 8002b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b86:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	220f      	movs	r2, #15
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	43db      	mvns	r3, r3
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ba4:	d025      	beq.n	8002bf2 <HAL_GPIO_Init+0x242>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a4f      	ldr	r2, [pc, #316]	; (8002ce8 <HAL_GPIO_Init+0x338>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d01f      	beq.n	8002bee <HAL_GPIO_Init+0x23e>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a4e      	ldr	r2, [pc, #312]	; (8002cec <HAL_GPIO_Init+0x33c>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d019      	beq.n	8002bea <HAL_GPIO_Init+0x23a>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a4d      	ldr	r2, [pc, #308]	; (8002cf0 <HAL_GPIO_Init+0x340>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d013      	beq.n	8002be6 <HAL_GPIO_Init+0x236>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a4c      	ldr	r2, [pc, #304]	; (8002cf4 <HAL_GPIO_Init+0x344>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d00d      	beq.n	8002be2 <HAL_GPIO_Init+0x232>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a4b      	ldr	r2, [pc, #300]	; (8002cf8 <HAL_GPIO_Init+0x348>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d007      	beq.n	8002bde <HAL_GPIO_Init+0x22e>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a4a      	ldr	r2, [pc, #296]	; (8002cfc <HAL_GPIO_Init+0x34c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d101      	bne.n	8002bda <HAL_GPIO_Init+0x22a>
 8002bd6:	2306      	movs	r3, #6
 8002bd8:	e00c      	b.n	8002bf4 <HAL_GPIO_Init+0x244>
 8002bda:	2307      	movs	r3, #7
 8002bdc:	e00a      	b.n	8002bf4 <HAL_GPIO_Init+0x244>
 8002bde:	2305      	movs	r3, #5
 8002be0:	e008      	b.n	8002bf4 <HAL_GPIO_Init+0x244>
 8002be2:	2304      	movs	r3, #4
 8002be4:	e006      	b.n	8002bf4 <HAL_GPIO_Init+0x244>
 8002be6:	2303      	movs	r3, #3
 8002be8:	e004      	b.n	8002bf4 <HAL_GPIO_Init+0x244>
 8002bea:	2302      	movs	r3, #2
 8002bec:	e002      	b.n	8002bf4 <HAL_GPIO_Init+0x244>
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e000      	b.n	8002bf4 <HAL_GPIO_Init+0x244>
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	f002 0203 	and.w	r2, r2, #3
 8002bfa:	0092      	lsls	r2, r2, #2
 8002bfc:	4093      	lsls	r3, r2
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c04:	4937      	ldr	r1, [pc, #220]	; (8002ce4 <HAL_GPIO_Init+0x334>)
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	089b      	lsrs	r3, r3, #2
 8002c0a:	3302      	adds	r3, #2
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c12:	4b3b      	ldr	r3, [pc, #236]	; (8002d00 <HAL_GPIO_Init+0x350>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c36:	4a32      	ldr	r2, [pc, #200]	; (8002d00 <HAL_GPIO_Init+0x350>)
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c3c:	4b30      	ldr	r3, [pc, #192]	; (8002d00 <HAL_GPIO_Init+0x350>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	43db      	mvns	r3, r3
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d003      	beq.n	8002c60 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c60:	4a27      	ldr	r2, [pc, #156]	; (8002d00 <HAL_GPIO_Init+0x350>)
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c66:	4b26      	ldr	r3, [pc, #152]	; (8002d00 <HAL_GPIO_Init+0x350>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	4013      	ands	r3, r2
 8002c74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c8a:	4a1d      	ldr	r2, [pc, #116]	; (8002d00 <HAL_GPIO_Init+0x350>)
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002c90:	4b1b      	ldr	r3, [pc, #108]	; (8002d00 <HAL_GPIO_Init+0x350>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002cb4:	4a12      	ldr	r2, [pc, #72]	; (8002d00 <HAL_GPIO_Init+0x350>)
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f47f ae78 	bne.w	80029c0 <HAL_GPIO_Init+0x10>
  }
}
 8002cd0:	bf00      	nop
 8002cd2:	bf00      	nop
 8002cd4:	371c      	adds	r7, #28
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	40010000 	.word	0x40010000
 8002ce8:	48000400 	.word	0x48000400
 8002cec:	48000800 	.word	0x48000800
 8002cf0:	48000c00 	.word	0x48000c00
 8002cf4:	48001000 	.word	0x48001000
 8002cf8:	48001400 	.word	0x48001400
 8002cfc:	48001800 	.word	0x48001800
 8002d00:	40010400 	.word	0x40010400

08002d04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691a      	ldr	r2, [r3, #16]
 8002d14:	887b      	ldrh	r3, [r7, #2]
 8002d16:	4013      	ands	r3, r2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d002      	beq.n	8002d22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	73fb      	strb	r3, [r7, #15]
 8002d20:	e001      	b.n	8002d26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d22:	2300      	movs	r3, #0
 8002d24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3714      	adds	r7, #20
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	807b      	strh	r3, [r7, #2]
 8002d40:	4613      	mov	r3, r2
 8002d42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d44:	787b      	ldrb	r3, [r7, #1]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d4a:	887a      	ldrh	r2, [r7, #2]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d50:	e002      	b.n	8002d58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d52:	887a      	ldrh	r2, [r7, #2]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002d68:	4b04      	ldr	r3, [pc, #16]	; (8002d7c <HAL_PWREx_GetVoltageRange+0x18>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	40007000 	.word	0x40007000

08002d80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d8e:	d130      	bne.n	8002df2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d90:	4b23      	ldr	r3, [pc, #140]	; (8002e20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d9c:	d038      	beq.n	8002e10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d9e:	4b20      	ldr	r3, [pc, #128]	; (8002e20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002da6:	4a1e      	ldr	r2, [pc, #120]	; (8002e20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002da8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002dae:	4b1d      	ldr	r3, [pc, #116]	; (8002e24 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2232      	movs	r2, #50	; 0x32
 8002db4:	fb02 f303 	mul.w	r3, r2, r3
 8002db8:	4a1b      	ldr	r2, [pc, #108]	; (8002e28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002dba:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbe:	0c9b      	lsrs	r3, r3, #18
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dc4:	e002      	b.n	8002dcc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dcc:	4b14      	ldr	r3, [pc, #80]	; (8002e20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dd8:	d102      	bne.n	8002de0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1f2      	bne.n	8002dc6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002de0:	4b0f      	ldr	r3, [pc, #60]	; (8002e20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dec:	d110      	bne.n	8002e10 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e00f      	b.n	8002e12 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002df2:	4b0b      	ldr	r3, [pc, #44]	; (8002e20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002dfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dfe:	d007      	beq.n	8002e10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e00:	4b07      	ldr	r3, [pc, #28]	; (8002e20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e08:	4a05      	ldr	r2, [pc, #20]	; (8002e20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e0e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3714      	adds	r7, #20
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	40007000 	.word	0x40007000
 8002e24:	20000000 	.word	0x20000000
 8002e28:	431bde83 	.word	0x431bde83

08002e2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b088      	sub	sp, #32
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e3ca      	b.n	80035d4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e3e:	4b97      	ldr	r3, [pc, #604]	; (800309c <HAL_RCC_OscConfig+0x270>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 030c 	and.w	r3, r3, #12
 8002e46:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e48:	4b94      	ldr	r3, [pc, #592]	; (800309c <HAL_RCC_OscConfig+0x270>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	f003 0303 	and.w	r3, r3, #3
 8002e50:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0310 	and.w	r3, r3, #16
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f000 80e4 	beq.w	8003028 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d007      	beq.n	8002e76 <HAL_RCC_OscConfig+0x4a>
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	2b0c      	cmp	r3, #12
 8002e6a:	f040 808b 	bne.w	8002f84 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	f040 8087 	bne.w	8002f84 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e76:	4b89      	ldr	r3, [pc, #548]	; (800309c <HAL_RCC_OscConfig+0x270>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d005      	beq.n	8002e8e <HAL_RCC_OscConfig+0x62>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e3a2      	b.n	80035d4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a1a      	ldr	r2, [r3, #32]
 8002e92:	4b82      	ldr	r3, [pc, #520]	; (800309c <HAL_RCC_OscConfig+0x270>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d004      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x7c>
 8002e9e:	4b7f      	ldr	r3, [pc, #508]	; (800309c <HAL_RCC_OscConfig+0x270>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ea6:	e005      	b.n	8002eb4 <HAL_RCC_OscConfig+0x88>
 8002ea8:	4b7c      	ldr	r3, [pc, #496]	; (800309c <HAL_RCC_OscConfig+0x270>)
 8002eaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eae:	091b      	lsrs	r3, r3, #4
 8002eb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d223      	bcs.n	8002f00 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f000 fd55 	bl	800396c <RCC_SetFlashLatencyFromMSIRange>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e383      	b.n	80035d4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ecc:	4b73      	ldr	r3, [pc, #460]	; (800309c <HAL_RCC_OscConfig+0x270>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a72      	ldr	r2, [pc, #456]	; (800309c <HAL_RCC_OscConfig+0x270>)
 8002ed2:	f043 0308 	orr.w	r3, r3, #8
 8002ed6:	6013      	str	r3, [r2, #0]
 8002ed8:	4b70      	ldr	r3, [pc, #448]	; (800309c <HAL_RCC_OscConfig+0x270>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	496d      	ldr	r1, [pc, #436]	; (800309c <HAL_RCC_OscConfig+0x270>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002eea:	4b6c      	ldr	r3, [pc, #432]	; (800309c <HAL_RCC_OscConfig+0x270>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	021b      	lsls	r3, r3, #8
 8002ef8:	4968      	ldr	r1, [pc, #416]	; (800309c <HAL_RCC_OscConfig+0x270>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	604b      	str	r3, [r1, #4]
 8002efe:	e025      	b.n	8002f4c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f00:	4b66      	ldr	r3, [pc, #408]	; (800309c <HAL_RCC_OscConfig+0x270>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a65      	ldr	r2, [pc, #404]	; (800309c <HAL_RCC_OscConfig+0x270>)
 8002f06:	f043 0308 	orr.w	r3, r3, #8
 8002f0a:	6013      	str	r3, [r2, #0]
 8002f0c:	4b63      	ldr	r3, [pc, #396]	; (800309c <HAL_RCC_OscConfig+0x270>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	4960      	ldr	r1, [pc, #384]	; (800309c <HAL_RCC_OscConfig+0x270>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f1e:	4b5f      	ldr	r3, [pc, #380]	; (800309c <HAL_RCC_OscConfig+0x270>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	021b      	lsls	r3, r3, #8
 8002f2c:	495b      	ldr	r1, [pc, #364]	; (800309c <HAL_RCC_OscConfig+0x270>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d109      	bne.n	8002f4c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 fd15 	bl	800396c <RCC_SetFlashLatencyFromMSIRange>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e343      	b.n	80035d4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f4c:	f000 fc4a 	bl	80037e4 <HAL_RCC_GetSysClockFreq>
 8002f50:	4602      	mov	r2, r0
 8002f52:	4b52      	ldr	r3, [pc, #328]	; (800309c <HAL_RCC_OscConfig+0x270>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	091b      	lsrs	r3, r3, #4
 8002f58:	f003 030f 	and.w	r3, r3, #15
 8002f5c:	4950      	ldr	r1, [pc, #320]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002f5e:	5ccb      	ldrb	r3, [r1, r3]
 8002f60:	f003 031f 	and.w	r3, r3, #31
 8002f64:	fa22 f303 	lsr.w	r3, r2, r3
 8002f68:	4a4e      	ldr	r2, [pc, #312]	; (80030a4 <HAL_RCC_OscConfig+0x278>)
 8002f6a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f6c:	4b4e      	ldr	r3, [pc, #312]	; (80030a8 <HAL_RCC_OscConfig+0x27c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7fd ffad 	bl	8000ed0 <HAL_InitTick>
 8002f76:	4603      	mov	r3, r0
 8002f78:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f7a:	7bfb      	ldrb	r3, [r7, #15]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d052      	beq.n	8003026 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002f80:	7bfb      	ldrb	r3, [r7, #15]
 8002f82:	e327      	b.n	80035d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d032      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f8c:	4b43      	ldr	r3, [pc, #268]	; (800309c <HAL_RCC_OscConfig+0x270>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a42      	ldr	r2, [pc, #264]	; (800309c <HAL_RCC_OscConfig+0x270>)
 8002f92:	f043 0301 	orr.w	r3, r3, #1
 8002f96:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f98:	f7fd ffea 	bl	8000f70 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fa0:	f7fd ffe6 	bl	8000f70 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e310      	b.n	80035d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fb2:	4b3a      	ldr	r3, [pc, #232]	; (800309c <HAL_RCC_OscConfig+0x270>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0f0      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fbe:	4b37      	ldr	r3, [pc, #220]	; (800309c <HAL_RCC_OscConfig+0x270>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a36      	ldr	r2, [pc, #216]	; (800309c <HAL_RCC_OscConfig+0x270>)
 8002fc4:	f043 0308 	orr.w	r3, r3, #8
 8002fc8:	6013      	str	r3, [r2, #0]
 8002fca:	4b34      	ldr	r3, [pc, #208]	; (800309c <HAL_RCC_OscConfig+0x270>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	4931      	ldr	r1, [pc, #196]	; (800309c <HAL_RCC_OscConfig+0x270>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fdc:	4b2f      	ldr	r3, [pc, #188]	; (800309c <HAL_RCC_OscConfig+0x270>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	69db      	ldr	r3, [r3, #28]
 8002fe8:	021b      	lsls	r3, r3, #8
 8002fea:	492c      	ldr	r1, [pc, #176]	; (800309c <HAL_RCC_OscConfig+0x270>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	604b      	str	r3, [r1, #4]
 8002ff0:	e01a      	b.n	8003028 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ff2:	4b2a      	ldr	r3, [pc, #168]	; (800309c <HAL_RCC_OscConfig+0x270>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a29      	ldr	r2, [pc, #164]	; (800309c <HAL_RCC_OscConfig+0x270>)
 8002ff8:	f023 0301 	bic.w	r3, r3, #1
 8002ffc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ffe:	f7fd ffb7 	bl	8000f70 <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003004:	e008      	b.n	8003018 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003006:	f7fd ffb3 	bl	8000f70 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e2dd      	b.n	80035d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003018:	4b20      	ldr	r3, [pc, #128]	; (800309c <HAL_RCC_OscConfig+0x270>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1f0      	bne.n	8003006 <HAL_RCC_OscConfig+0x1da>
 8003024:	e000      	b.n	8003028 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003026:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	2b00      	cmp	r3, #0
 8003032:	d074      	beq.n	800311e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	2b08      	cmp	r3, #8
 8003038:	d005      	beq.n	8003046 <HAL_RCC_OscConfig+0x21a>
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	2b0c      	cmp	r3, #12
 800303e:	d10e      	bne.n	800305e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	2b03      	cmp	r3, #3
 8003044:	d10b      	bne.n	800305e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003046:	4b15      	ldr	r3, [pc, #84]	; (800309c <HAL_RCC_OscConfig+0x270>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d064      	beq.n	800311c <HAL_RCC_OscConfig+0x2f0>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d160      	bne.n	800311c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e2ba      	b.n	80035d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003066:	d106      	bne.n	8003076 <HAL_RCC_OscConfig+0x24a>
 8003068:	4b0c      	ldr	r3, [pc, #48]	; (800309c <HAL_RCC_OscConfig+0x270>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a0b      	ldr	r2, [pc, #44]	; (800309c <HAL_RCC_OscConfig+0x270>)
 800306e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003072:	6013      	str	r3, [r2, #0]
 8003074:	e026      	b.n	80030c4 <HAL_RCC_OscConfig+0x298>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800307e:	d115      	bne.n	80030ac <HAL_RCC_OscConfig+0x280>
 8003080:	4b06      	ldr	r3, [pc, #24]	; (800309c <HAL_RCC_OscConfig+0x270>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a05      	ldr	r2, [pc, #20]	; (800309c <HAL_RCC_OscConfig+0x270>)
 8003086:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800308a:	6013      	str	r3, [r2, #0]
 800308c:	4b03      	ldr	r3, [pc, #12]	; (800309c <HAL_RCC_OscConfig+0x270>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a02      	ldr	r2, [pc, #8]	; (800309c <HAL_RCC_OscConfig+0x270>)
 8003092:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003096:	6013      	str	r3, [r2, #0]
 8003098:	e014      	b.n	80030c4 <HAL_RCC_OscConfig+0x298>
 800309a:	bf00      	nop
 800309c:	40021000 	.word	0x40021000
 80030a0:	08005d4c 	.word	0x08005d4c
 80030a4:	20000000 	.word	0x20000000
 80030a8:	20000004 	.word	0x20000004
 80030ac:	4ba0      	ldr	r3, [pc, #640]	; (8003330 <HAL_RCC_OscConfig+0x504>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a9f      	ldr	r2, [pc, #636]	; (8003330 <HAL_RCC_OscConfig+0x504>)
 80030b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030b6:	6013      	str	r3, [r2, #0]
 80030b8:	4b9d      	ldr	r3, [pc, #628]	; (8003330 <HAL_RCC_OscConfig+0x504>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a9c      	ldr	r2, [pc, #624]	; (8003330 <HAL_RCC_OscConfig+0x504>)
 80030be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d013      	beq.n	80030f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030cc:	f7fd ff50 	bl	8000f70 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030d4:	f7fd ff4c 	bl	8000f70 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b64      	cmp	r3, #100	; 0x64
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e276      	b.n	80035d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030e6:	4b92      	ldr	r3, [pc, #584]	; (8003330 <HAL_RCC_OscConfig+0x504>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d0f0      	beq.n	80030d4 <HAL_RCC_OscConfig+0x2a8>
 80030f2:	e014      	b.n	800311e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f4:	f7fd ff3c 	bl	8000f70 <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030fc:	f7fd ff38 	bl	8000f70 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b64      	cmp	r3, #100	; 0x64
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e262      	b.n	80035d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800310e:	4b88      	ldr	r3, [pc, #544]	; (8003330 <HAL_RCC_OscConfig+0x504>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1f0      	bne.n	80030fc <HAL_RCC_OscConfig+0x2d0>
 800311a:	e000      	b.n	800311e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800311c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d060      	beq.n	80031ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	2b04      	cmp	r3, #4
 800312e:	d005      	beq.n	800313c <HAL_RCC_OscConfig+0x310>
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	2b0c      	cmp	r3, #12
 8003134:	d119      	bne.n	800316a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	2b02      	cmp	r3, #2
 800313a:	d116      	bne.n	800316a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800313c:	4b7c      	ldr	r3, [pc, #496]	; (8003330 <HAL_RCC_OscConfig+0x504>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003144:	2b00      	cmp	r3, #0
 8003146:	d005      	beq.n	8003154 <HAL_RCC_OscConfig+0x328>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e23f      	b.n	80035d4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003154:	4b76      	ldr	r3, [pc, #472]	; (8003330 <HAL_RCC_OscConfig+0x504>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	061b      	lsls	r3, r3, #24
 8003162:	4973      	ldr	r1, [pc, #460]	; (8003330 <HAL_RCC_OscConfig+0x504>)
 8003164:	4313      	orrs	r3, r2
 8003166:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003168:	e040      	b.n	80031ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d023      	beq.n	80031ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003172:	4b6f      	ldr	r3, [pc, #444]	; (8003330 <HAL_RCC_OscConfig+0x504>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a6e      	ldr	r2, [pc, #440]	; (8003330 <HAL_RCC_OscConfig+0x504>)
 8003178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800317c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317e:	f7fd fef7 	bl	8000f70 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003186:	f7fd fef3 	bl	8000f70 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e21d      	b.n	80035d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003198:	4b65      	ldr	r3, [pc, #404]	; (8003330 <HAL_RCC_OscConfig+0x504>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0f0      	beq.n	8003186 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a4:	4b62      	ldr	r3, [pc, #392]	; (8003330 <HAL_RCC_OscConfig+0x504>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	061b      	lsls	r3, r3, #24
 80031b2:	495f      	ldr	r1, [pc, #380]	; (8003330 <HAL_RCC_OscConfig+0x504>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	604b      	str	r3, [r1, #4]
 80031b8:	e018      	b.n	80031ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ba:	4b5d      	ldr	r3, [pc, #372]	; (8003330 <HAL_RCC_OscConfig+0x504>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a5c      	ldr	r2, [pc, #368]	; (8003330 <HAL_RCC_OscConfig+0x504>)
 80031c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c6:	f7fd fed3 	bl	8000f70 <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ce:	f7fd fecf 	bl	8000f70 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e1f9      	b.n	80035d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031e0:	4b53      	ldr	r3, [pc, #332]	; (8003330 <HAL_RCC_OscConfig+0x504>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1f0      	bne.n	80031ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0308 	and.w	r3, r3, #8
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d03c      	beq.n	8003272 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d01c      	beq.n	800323a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003200:	4b4b      	ldr	r3, [pc, #300]	; (8003330 <HAL_RCC_OscConfig+0x504>)
 8003202:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003206:	4a4a      	ldr	r2, [pc, #296]	; (8003330 <HAL_RCC_OscConfig+0x504>)
 8003208:	f043 0301 	orr.w	r3, r3, #1
 800320c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003210:	f7fd feae 	bl	8000f70 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003218:	f7fd feaa 	bl	8000f70 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e1d4      	b.n	80035d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800322a:	4b41      	ldr	r3, [pc, #260]	; (8003330 <HAL_RCC_OscConfig+0x504>)
 800322c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d0ef      	beq.n	8003218 <HAL_RCC_OscConfig+0x3ec>
 8003238:	e01b      	b.n	8003272 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800323a:	4b3d      	ldr	r3, [pc, #244]	; (8003330 <HAL_RCC_OscConfig+0x504>)
 800323c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003240:	4a3b      	ldr	r2, [pc, #236]	; (8003330 <HAL_RCC_OscConfig+0x504>)
 8003242:	f023 0301 	bic.w	r3, r3, #1
 8003246:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800324a:	f7fd fe91 	bl	8000f70 <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003250:	e008      	b.n	8003264 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003252:	f7fd fe8d 	bl	8000f70 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e1b7      	b.n	80035d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003264:	4b32      	ldr	r3, [pc, #200]	; (8003330 <HAL_RCC_OscConfig+0x504>)
 8003266:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1ef      	bne.n	8003252 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0304 	and.w	r3, r3, #4
 800327a:	2b00      	cmp	r3, #0
 800327c:	f000 80a6 	beq.w	80033cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003280:	2300      	movs	r3, #0
 8003282:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003284:	4b2a      	ldr	r3, [pc, #168]	; (8003330 <HAL_RCC_OscConfig+0x504>)
 8003286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10d      	bne.n	80032ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003290:	4b27      	ldr	r3, [pc, #156]	; (8003330 <HAL_RCC_OscConfig+0x504>)
 8003292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003294:	4a26      	ldr	r2, [pc, #152]	; (8003330 <HAL_RCC_OscConfig+0x504>)
 8003296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800329a:	6593      	str	r3, [r2, #88]	; 0x58
 800329c:	4b24      	ldr	r3, [pc, #144]	; (8003330 <HAL_RCC_OscConfig+0x504>)
 800329e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a4:	60bb      	str	r3, [r7, #8]
 80032a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032a8:	2301      	movs	r3, #1
 80032aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032ac:	4b21      	ldr	r3, [pc, #132]	; (8003334 <HAL_RCC_OscConfig+0x508>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d118      	bne.n	80032ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032b8:	4b1e      	ldr	r3, [pc, #120]	; (8003334 <HAL_RCC_OscConfig+0x508>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a1d      	ldr	r2, [pc, #116]	; (8003334 <HAL_RCC_OscConfig+0x508>)
 80032be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032c4:	f7fd fe54 	bl	8000f70 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032cc:	f7fd fe50 	bl	8000f70 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e17a      	b.n	80035d4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032de:	4b15      	ldr	r3, [pc, #84]	; (8003334 <HAL_RCC_OscConfig+0x508>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d0f0      	beq.n	80032cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d108      	bne.n	8003304 <HAL_RCC_OscConfig+0x4d8>
 80032f2:	4b0f      	ldr	r3, [pc, #60]	; (8003330 <HAL_RCC_OscConfig+0x504>)
 80032f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f8:	4a0d      	ldr	r2, [pc, #52]	; (8003330 <HAL_RCC_OscConfig+0x504>)
 80032fa:	f043 0301 	orr.w	r3, r3, #1
 80032fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003302:	e029      	b.n	8003358 <HAL_RCC_OscConfig+0x52c>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	2b05      	cmp	r3, #5
 800330a:	d115      	bne.n	8003338 <HAL_RCC_OscConfig+0x50c>
 800330c:	4b08      	ldr	r3, [pc, #32]	; (8003330 <HAL_RCC_OscConfig+0x504>)
 800330e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003312:	4a07      	ldr	r2, [pc, #28]	; (8003330 <HAL_RCC_OscConfig+0x504>)
 8003314:	f043 0304 	orr.w	r3, r3, #4
 8003318:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800331c:	4b04      	ldr	r3, [pc, #16]	; (8003330 <HAL_RCC_OscConfig+0x504>)
 800331e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003322:	4a03      	ldr	r2, [pc, #12]	; (8003330 <HAL_RCC_OscConfig+0x504>)
 8003324:	f043 0301 	orr.w	r3, r3, #1
 8003328:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800332c:	e014      	b.n	8003358 <HAL_RCC_OscConfig+0x52c>
 800332e:	bf00      	nop
 8003330:	40021000 	.word	0x40021000
 8003334:	40007000 	.word	0x40007000
 8003338:	4b9c      	ldr	r3, [pc, #624]	; (80035ac <HAL_RCC_OscConfig+0x780>)
 800333a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800333e:	4a9b      	ldr	r2, [pc, #620]	; (80035ac <HAL_RCC_OscConfig+0x780>)
 8003340:	f023 0301 	bic.w	r3, r3, #1
 8003344:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003348:	4b98      	ldr	r3, [pc, #608]	; (80035ac <HAL_RCC_OscConfig+0x780>)
 800334a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800334e:	4a97      	ldr	r2, [pc, #604]	; (80035ac <HAL_RCC_OscConfig+0x780>)
 8003350:	f023 0304 	bic.w	r3, r3, #4
 8003354:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d016      	beq.n	800338e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003360:	f7fd fe06 	bl	8000f70 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003366:	e00a      	b.n	800337e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003368:	f7fd fe02 	bl	8000f70 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	f241 3288 	movw	r2, #5000	; 0x1388
 8003376:	4293      	cmp	r3, r2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e12a      	b.n	80035d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800337e:	4b8b      	ldr	r3, [pc, #556]	; (80035ac <HAL_RCC_OscConfig+0x780>)
 8003380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0ed      	beq.n	8003368 <HAL_RCC_OscConfig+0x53c>
 800338c:	e015      	b.n	80033ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800338e:	f7fd fdef 	bl	8000f70 <HAL_GetTick>
 8003392:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003394:	e00a      	b.n	80033ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003396:	f7fd fdeb 	bl	8000f70 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d901      	bls.n	80033ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e113      	b.n	80035d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033ac:	4b7f      	ldr	r3, [pc, #508]	; (80035ac <HAL_RCC_OscConfig+0x780>)
 80033ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1ed      	bne.n	8003396 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033ba:	7ffb      	ldrb	r3, [r7, #31]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d105      	bne.n	80033cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033c0:	4b7a      	ldr	r3, [pc, #488]	; (80035ac <HAL_RCC_OscConfig+0x780>)
 80033c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c4:	4a79      	ldr	r2, [pc, #484]	; (80035ac <HAL_RCC_OscConfig+0x780>)
 80033c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033ca:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 80fe 	beq.w	80035d2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033da:	2b02      	cmp	r3, #2
 80033dc:	f040 80d0 	bne.w	8003580 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80033e0:	4b72      	ldr	r3, [pc, #456]	; (80035ac <HAL_RCC_OscConfig+0x780>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f003 0203 	and.w	r2, r3, #3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d130      	bne.n	8003456 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	3b01      	subs	r3, #1
 8003400:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003402:	429a      	cmp	r2, r3
 8003404:	d127      	bne.n	8003456 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003410:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003412:	429a      	cmp	r2, r3
 8003414:	d11f      	bne.n	8003456 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003420:	2a07      	cmp	r2, #7
 8003422:	bf14      	ite	ne
 8003424:	2201      	movne	r2, #1
 8003426:	2200      	moveq	r2, #0
 8003428:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800342a:	4293      	cmp	r3, r2
 800342c:	d113      	bne.n	8003456 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003438:	085b      	lsrs	r3, r3, #1
 800343a:	3b01      	subs	r3, #1
 800343c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800343e:	429a      	cmp	r2, r3
 8003440:	d109      	bne.n	8003456 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	085b      	lsrs	r3, r3, #1
 800344e:	3b01      	subs	r3, #1
 8003450:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003452:	429a      	cmp	r2, r3
 8003454:	d06e      	beq.n	8003534 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	2b0c      	cmp	r3, #12
 800345a:	d069      	beq.n	8003530 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800345c:	4b53      	ldr	r3, [pc, #332]	; (80035ac <HAL_RCC_OscConfig+0x780>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d105      	bne.n	8003474 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003468:	4b50      	ldr	r3, [pc, #320]	; (80035ac <HAL_RCC_OscConfig+0x780>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e0ad      	b.n	80035d4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003478:	4b4c      	ldr	r3, [pc, #304]	; (80035ac <HAL_RCC_OscConfig+0x780>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a4b      	ldr	r2, [pc, #300]	; (80035ac <HAL_RCC_OscConfig+0x780>)
 800347e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003482:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003484:	f7fd fd74 	bl	8000f70 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800348c:	f7fd fd70 	bl	8000f70 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e09a      	b.n	80035d4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800349e:	4b43      	ldr	r3, [pc, #268]	; (80035ac <HAL_RCC_OscConfig+0x780>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f0      	bne.n	800348c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034aa:	4b40      	ldr	r3, [pc, #256]	; (80035ac <HAL_RCC_OscConfig+0x780>)
 80034ac:	68da      	ldr	r2, [r3, #12]
 80034ae:	4b40      	ldr	r3, [pc, #256]	; (80035b0 <HAL_RCC_OscConfig+0x784>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80034ba:	3a01      	subs	r2, #1
 80034bc:	0112      	lsls	r2, r2, #4
 80034be:	4311      	orrs	r1, r2
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80034c4:	0212      	lsls	r2, r2, #8
 80034c6:	4311      	orrs	r1, r2
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80034cc:	0852      	lsrs	r2, r2, #1
 80034ce:	3a01      	subs	r2, #1
 80034d0:	0552      	lsls	r2, r2, #21
 80034d2:	4311      	orrs	r1, r2
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80034d8:	0852      	lsrs	r2, r2, #1
 80034da:	3a01      	subs	r2, #1
 80034dc:	0652      	lsls	r2, r2, #25
 80034de:	4311      	orrs	r1, r2
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034e4:	0912      	lsrs	r2, r2, #4
 80034e6:	0452      	lsls	r2, r2, #17
 80034e8:	430a      	orrs	r2, r1
 80034ea:	4930      	ldr	r1, [pc, #192]	; (80035ac <HAL_RCC_OscConfig+0x780>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80034f0:	4b2e      	ldr	r3, [pc, #184]	; (80035ac <HAL_RCC_OscConfig+0x780>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a2d      	ldr	r2, [pc, #180]	; (80035ac <HAL_RCC_OscConfig+0x780>)
 80034f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034fc:	4b2b      	ldr	r3, [pc, #172]	; (80035ac <HAL_RCC_OscConfig+0x780>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	4a2a      	ldr	r2, [pc, #168]	; (80035ac <HAL_RCC_OscConfig+0x780>)
 8003502:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003506:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003508:	f7fd fd32 	bl	8000f70 <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003510:	f7fd fd2e 	bl	8000f70 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e058      	b.n	80035d4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003522:	4b22      	ldr	r3, [pc, #136]	; (80035ac <HAL_RCC_OscConfig+0x780>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d0f0      	beq.n	8003510 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800352e:	e050      	b.n	80035d2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e04f      	b.n	80035d4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003534:	4b1d      	ldr	r3, [pc, #116]	; (80035ac <HAL_RCC_OscConfig+0x780>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d148      	bne.n	80035d2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003540:	4b1a      	ldr	r3, [pc, #104]	; (80035ac <HAL_RCC_OscConfig+0x780>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a19      	ldr	r2, [pc, #100]	; (80035ac <HAL_RCC_OscConfig+0x780>)
 8003546:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800354a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800354c:	4b17      	ldr	r3, [pc, #92]	; (80035ac <HAL_RCC_OscConfig+0x780>)
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	4a16      	ldr	r2, [pc, #88]	; (80035ac <HAL_RCC_OscConfig+0x780>)
 8003552:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003556:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003558:	f7fd fd0a 	bl	8000f70 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003560:	f7fd fd06 	bl	8000f70 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e030      	b.n	80035d4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003572:	4b0e      	ldr	r3, [pc, #56]	; (80035ac <HAL_RCC_OscConfig+0x780>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d0f0      	beq.n	8003560 <HAL_RCC_OscConfig+0x734>
 800357e:	e028      	b.n	80035d2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	2b0c      	cmp	r3, #12
 8003584:	d023      	beq.n	80035ce <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003586:	4b09      	ldr	r3, [pc, #36]	; (80035ac <HAL_RCC_OscConfig+0x780>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a08      	ldr	r2, [pc, #32]	; (80035ac <HAL_RCC_OscConfig+0x780>)
 800358c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003590:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003592:	f7fd fced 	bl	8000f70 <HAL_GetTick>
 8003596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003598:	e00c      	b.n	80035b4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800359a:	f7fd fce9 	bl	8000f70 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d905      	bls.n	80035b4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e013      	b.n	80035d4 <HAL_RCC_OscConfig+0x7a8>
 80035ac:	40021000 	.word	0x40021000
 80035b0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035b4:	4b09      	ldr	r3, [pc, #36]	; (80035dc <HAL_RCC_OscConfig+0x7b0>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1ec      	bne.n	800359a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80035c0:	4b06      	ldr	r3, [pc, #24]	; (80035dc <HAL_RCC_OscConfig+0x7b0>)
 80035c2:	68da      	ldr	r2, [r3, #12]
 80035c4:	4905      	ldr	r1, [pc, #20]	; (80035dc <HAL_RCC_OscConfig+0x7b0>)
 80035c6:	4b06      	ldr	r3, [pc, #24]	; (80035e0 <HAL_RCC_OscConfig+0x7b4>)
 80035c8:	4013      	ands	r3, r2
 80035ca:	60cb      	str	r3, [r1, #12]
 80035cc:	e001      	b.n	80035d2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3720      	adds	r7, #32
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40021000 	.word	0x40021000
 80035e0:	feeefffc 	.word	0xfeeefffc

080035e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d101      	bne.n	80035f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e0e7      	b.n	80037c8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035f8:	4b75      	ldr	r3, [pc, #468]	; (80037d0 <HAL_RCC_ClockConfig+0x1ec>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0307 	and.w	r3, r3, #7
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	429a      	cmp	r2, r3
 8003604:	d910      	bls.n	8003628 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003606:	4b72      	ldr	r3, [pc, #456]	; (80037d0 <HAL_RCC_ClockConfig+0x1ec>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f023 0207 	bic.w	r2, r3, #7
 800360e:	4970      	ldr	r1, [pc, #448]	; (80037d0 <HAL_RCC_ClockConfig+0x1ec>)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	4313      	orrs	r3, r2
 8003614:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003616:	4b6e      	ldr	r3, [pc, #440]	; (80037d0 <HAL_RCC_ClockConfig+0x1ec>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0307 	and.w	r3, r3, #7
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	429a      	cmp	r2, r3
 8003622:	d001      	beq.n	8003628 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e0cf      	b.n	80037c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d010      	beq.n	8003656 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	4b66      	ldr	r3, [pc, #408]	; (80037d4 <HAL_RCC_ClockConfig+0x1f0>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003640:	429a      	cmp	r2, r3
 8003642:	d908      	bls.n	8003656 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003644:	4b63      	ldr	r3, [pc, #396]	; (80037d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	4960      	ldr	r1, [pc, #384]	; (80037d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003652:	4313      	orrs	r3, r2
 8003654:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d04c      	beq.n	80036fc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2b03      	cmp	r3, #3
 8003668:	d107      	bne.n	800367a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800366a:	4b5a      	ldr	r3, [pc, #360]	; (80037d4 <HAL_RCC_ClockConfig+0x1f0>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d121      	bne.n	80036ba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e0a6      	b.n	80037c8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b02      	cmp	r3, #2
 8003680:	d107      	bne.n	8003692 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003682:	4b54      	ldr	r3, [pc, #336]	; (80037d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d115      	bne.n	80036ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e09a      	b.n	80037c8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d107      	bne.n	80036aa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800369a:	4b4e      	ldr	r3, [pc, #312]	; (80037d4 <HAL_RCC_ClockConfig+0x1f0>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d109      	bne.n	80036ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e08e      	b.n	80037c8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036aa:	4b4a      	ldr	r3, [pc, #296]	; (80037d4 <HAL_RCC_ClockConfig+0x1f0>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e086      	b.n	80037c8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036ba:	4b46      	ldr	r3, [pc, #280]	; (80037d4 <HAL_RCC_ClockConfig+0x1f0>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f023 0203 	bic.w	r2, r3, #3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	4943      	ldr	r1, [pc, #268]	; (80037d4 <HAL_RCC_ClockConfig+0x1f0>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036cc:	f7fd fc50 	bl	8000f70 <HAL_GetTick>
 80036d0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036d2:	e00a      	b.n	80036ea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036d4:	f7fd fc4c 	bl	8000f70 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e06e      	b.n	80037c8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ea:	4b3a      	ldr	r3, [pc, #232]	; (80037d4 <HAL_RCC_ClockConfig+0x1f0>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 020c 	and.w	r2, r3, #12
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d1eb      	bne.n	80036d4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d010      	beq.n	800372a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	4b31      	ldr	r3, [pc, #196]	; (80037d4 <HAL_RCC_ClockConfig+0x1f0>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003714:	429a      	cmp	r2, r3
 8003716:	d208      	bcs.n	800372a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003718:	4b2e      	ldr	r3, [pc, #184]	; (80037d4 <HAL_RCC_ClockConfig+0x1f0>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	492b      	ldr	r1, [pc, #172]	; (80037d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003726:	4313      	orrs	r3, r2
 8003728:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800372a:	4b29      	ldr	r3, [pc, #164]	; (80037d0 <HAL_RCC_ClockConfig+0x1ec>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0307 	and.w	r3, r3, #7
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	429a      	cmp	r2, r3
 8003736:	d210      	bcs.n	800375a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003738:	4b25      	ldr	r3, [pc, #148]	; (80037d0 <HAL_RCC_ClockConfig+0x1ec>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f023 0207 	bic.w	r2, r3, #7
 8003740:	4923      	ldr	r1, [pc, #140]	; (80037d0 <HAL_RCC_ClockConfig+0x1ec>)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	4313      	orrs	r3, r2
 8003746:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003748:	4b21      	ldr	r3, [pc, #132]	; (80037d0 <HAL_RCC_ClockConfig+0x1ec>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	429a      	cmp	r2, r3
 8003754:	d001      	beq.n	800375a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e036      	b.n	80037c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0304 	and.w	r3, r3, #4
 8003762:	2b00      	cmp	r3, #0
 8003764:	d008      	beq.n	8003778 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003766:	4b1b      	ldr	r3, [pc, #108]	; (80037d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	4918      	ldr	r1, [pc, #96]	; (80037d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003774:	4313      	orrs	r3, r2
 8003776:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0308 	and.w	r3, r3, #8
 8003780:	2b00      	cmp	r3, #0
 8003782:	d009      	beq.n	8003798 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003784:	4b13      	ldr	r3, [pc, #76]	; (80037d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	4910      	ldr	r1, [pc, #64]	; (80037d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003794:	4313      	orrs	r3, r2
 8003796:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003798:	f000 f824 	bl	80037e4 <HAL_RCC_GetSysClockFreq>
 800379c:	4602      	mov	r2, r0
 800379e:	4b0d      	ldr	r3, [pc, #52]	; (80037d4 <HAL_RCC_ClockConfig+0x1f0>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	091b      	lsrs	r3, r3, #4
 80037a4:	f003 030f 	and.w	r3, r3, #15
 80037a8:	490b      	ldr	r1, [pc, #44]	; (80037d8 <HAL_RCC_ClockConfig+0x1f4>)
 80037aa:	5ccb      	ldrb	r3, [r1, r3]
 80037ac:	f003 031f 	and.w	r3, r3, #31
 80037b0:	fa22 f303 	lsr.w	r3, r2, r3
 80037b4:	4a09      	ldr	r2, [pc, #36]	; (80037dc <HAL_RCC_ClockConfig+0x1f8>)
 80037b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80037b8:	4b09      	ldr	r3, [pc, #36]	; (80037e0 <HAL_RCC_ClockConfig+0x1fc>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4618      	mov	r0, r3
 80037be:	f7fd fb87 	bl	8000ed0 <HAL_InitTick>
 80037c2:	4603      	mov	r3, r0
 80037c4:	72fb      	strb	r3, [r7, #11]

  return status;
 80037c6:	7afb      	ldrb	r3, [r7, #11]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40022000 	.word	0x40022000
 80037d4:	40021000 	.word	0x40021000
 80037d8:	08005d4c 	.word	0x08005d4c
 80037dc:	20000000 	.word	0x20000000
 80037e0:	20000004 	.word	0x20000004

080037e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b089      	sub	sp, #36	; 0x24
 80037e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	61fb      	str	r3, [r7, #28]
 80037ee:	2300      	movs	r3, #0
 80037f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037f2:	4b3e      	ldr	r3, [pc, #248]	; (80038ec <HAL_RCC_GetSysClockFreq+0x108>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 030c 	and.w	r3, r3, #12
 80037fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037fc:	4b3b      	ldr	r3, [pc, #236]	; (80038ec <HAL_RCC_GetSysClockFreq+0x108>)
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	f003 0303 	and.w	r3, r3, #3
 8003804:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d005      	beq.n	8003818 <HAL_RCC_GetSysClockFreq+0x34>
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	2b0c      	cmp	r3, #12
 8003810:	d121      	bne.n	8003856 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d11e      	bne.n	8003856 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003818:	4b34      	ldr	r3, [pc, #208]	; (80038ec <HAL_RCC_GetSysClockFreq+0x108>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0308 	and.w	r3, r3, #8
 8003820:	2b00      	cmp	r3, #0
 8003822:	d107      	bne.n	8003834 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003824:	4b31      	ldr	r3, [pc, #196]	; (80038ec <HAL_RCC_GetSysClockFreq+0x108>)
 8003826:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800382a:	0a1b      	lsrs	r3, r3, #8
 800382c:	f003 030f 	and.w	r3, r3, #15
 8003830:	61fb      	str	r3, [r7, #28]
 8003832:	e005      	b.n	8003840 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003834:	4b2d      	ldr	r3, [pc, #180]	; (80038ec <HAL_RCC_GetSysClockFreq+0x108>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	091b      	lsrs	r3, r3, #4
 800383a:	f003 030f 	and.w	r3, r3, #15
 800383e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003840:	4a2b      	ldr	r2, [pc, #172]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003848:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10d      	bne.n	800386c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003854:	e00a      	b.n	800386c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	2b04      	cmp	r3, #4
 800385a:	d102      	bne.n	8003862 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800385c:	4b25      	ldr	r3, [pc, #148]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800385e:	61bb      	str	r3, [r7, #24]
 8003860:	e004      	b.n	800386c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	2b08      	cmp	r3, #8
 8003866:	d101      	bne.n	800386c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003868:	4b23      	ldr	r3, [pc, #140]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800386a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	2b0c      	cmp	r3, #12
 8003870:	d134      	bne.n	80038dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003872:	4b1e      	ldr	r3, [pc, #120]	; (80038ec <HAL_RCC_GetSysClockFreq+0x108>)
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f003 0303 	and.w	r3, r3, #3
 800387a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	2b02      	cmp	r3, #2
 8003880:	d003      	beq.n	800388a <HAL_RCC_GetSysClockFreq+0xa6>
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	2b03      	cmp	r3, #3
 8003886:	d003      	beq.n	8003890 <HAL_RCC_GetSysClockFreq+0xac>
 8003888:	e005      	b.n	8003896 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800388a:	4b1a      	ldr	r3, [pc, #104]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800388c:	617b      	str	r3, [r7, #20]
      break;
 800388e:	e005      	b.n	800389c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003890:	4b19      	ldr	r3, [pc, #100]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003892:	617b      	str	r3, [r7, #20]
      break;
 8003894:	e002      	b.n	800389c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	617b      	str	r3, [r7, #20]
      break;
 800389a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800389c:	4b13      	ldr	r3, [pc, #76]	; (80038ec <HAL_RCC_GetSysClockFreq+0x108>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	091b      	lsrs	r3, r3, #4
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	3301      	adds	r3, #1
 80038a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80038aa:	4b10      	ldr	r3, [pc, #64]	; (80038ec <HAL_RCC_GetSysClockFreq+0x108>)
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	0a1b      	lsrs	r3, r3, #8
 80038b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	fb03 f202 	mul.w	r2, r3, r2
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038c2:	4b0a      	ldr	r3, [pc, #40]	; (80038ec <HAL_RCC_GetSysClockFreq+0x108>)
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	0e5b      	lsrs	r3, r3, #25
 80038c8:	f003 0303 	and.w	r3, r3, #3
 80038cc:	3301      	adds	r3, #1
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80038dc:	69bb      	ldr	r3, [r7, #24]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3724      	adds	r7, #36	; 0x24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	40021000 	.word	0x40021000
 80038f0:	08005d64 	.word	0x08005d64
 80038f4:	00f42400 	.word	0x00f42400
 80038f8:	007a1200 	.word	0x007a1200

080038fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003900:	4b03      	ldr	r3, [pc, #12]	; (8003910 <HAL_RCC_GetHCLKFreq+0x14>)
 8003902:	681b      	ldr	r3, [r3, #0]
}
 8003904:	4618      	mov	r0, r3
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	20000000 	.word	0x20000000

08003914 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003918:	f7ff fff0 	bl	80038fc <HAL_RCC_GetHCLKFreq>
 800391c:	4602      	mov	r2, r0
 800391e:	4b06      	ldr	r3, [pc, #24]	; (8003938 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	0a1b      	lsrs	r3, r3, #8
 8003924:	f003 0307 	and.w	r3, r3, #7
 8003928:	4904      	ldr	r1, [pc, #16]	; (800393c <HAL_RCC_GetPCLK1Freq+0x28>)
 800392a:	5ccb      	ldrb	r3, [r1, r3]
 800392c:	f003 031f 	and.w	r3, r3, #31
 8003930:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003934:	4618      	mov	r0, r3
 8003936:	bd80      	pop	{r7, pc}
 8003938:	40021000 	.word	0x40021000
 800393c:	08005d5c 	.word	0x08005d5c

08003940 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003944:	f7ff ffda 	bl	80038fc <HAL_RCC_GetHCLKFreq>
 8003948:	4602      	mov	r2, r0
 800394a:	4b06      	ldr	r3, [pc, #24]	; (8003964 <HAL_RCC_GetPCLK2Freq+0x24>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	0adb      	lsrs	r3, r3, #11
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	4904      	ldr	r1, [pc, #16]	; (8003968 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003956:	5ccb      	ldrb	r3, [r1, r3]
 8003958:	f003 031f 	and.w	r3, r3, #31
 800395c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003960:	4618      	mov	r0, r3
 8003962:	bd80      	pop	{r7, pc}
 8003964:	40021000 	.word	0x40021000
 8003968:	08005d5c 	.word	0x08005d5c

0800396c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003974:	2300      	movs	r3, #0
 8003976:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003978:	4b2a      	ldr	r3, [pc, #168]	; (8003a24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800397a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800397c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d003      	beq.n	800398c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003984:	f7ff f9ee 	bl	8002d64 <HAL_PWREx_GetVoltageRange>
 8003988:	6178      	str	r0, [r7, #20]
 800398a:	e014      	b.n	80039b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800398c:	4b25      	ldr	r3, [pc, #148]	; (8003a24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800398e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003990:	4a24      	ldr	r2, [pc, #144]	; (8003a24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003992:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003996:	6593      	str	r3, [r2, #88]	; 0x58
 8003998:	4b22      	ldr	r3, [pc, #136]	; (8003a24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800399a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a0:	60fb      	str	r3, [r7, #12]
 80039a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80039a4:	f7ff f9de 	bl	8002d64 <HAL_PWREx_GetVoltageRange>
 80039a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80039aa:	4b1e      	ldr	r3, [pc, #120]	; (8003a24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ae:	4a1d      	ldr	r2, [pc, #116]	; (8003a24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039bc:	d10b      	bne.n	80039d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b80      	cmp	r3, #128	; 0x80
 80039c2:	d919      	bls.n	80039f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2ba0      	cmp	r3, #160	; 0xa0
 80039c8:	d902      	bls.n	80039d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039ca:	2302      	movs	r3, #2
 80039cc:	613b      	str	r3, [r7, #16]
 80039ce:	e013      	b.n	80039f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039d0:	2301      	movs	r3, #1
 80039d2:	613b      	str	r3, [r7, #16]
 80039d4:	e010      	b.n	80039f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2b80      	cmp	r3, #128	; 0x80
 80039da:	d902      	bls.n	80039e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80039dc:	2303      	movs	r3, #3
 80039de:	613b      	str	r3, [r7, #16]
 80039e0:	e00a      	b.n	80039f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b80      	cmp	r3, #128	; 0x80
 80039e6:	d102      	bne.n	80039ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039e8:	2302      	movs	r3, #2
 80039ea:	613b      	str	r3, [r7, #16]
 80039ec:	e004      	b.n	80039f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2b70      	cmp	r3, #112	; 0x70
 80039f2:	d101      	bne.n	80039f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039f4:	2301      	movs	r3, #1
 80039f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80039f8:	4b0b      	ldr	r3, [pc, #44]	; (8003a28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f023 0207 	bic.w	r2, r3, #7
 8003a00:	4909      	ldr	r1, [pc, #36]	; (8003a28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a08:	4b07      	ldr	r3, [pc, #28]	; (8003a28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0307 	and.w	r3, r3, #7
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d001      	beq.n	8003a1a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e000      	b.n	8003a1c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3718      	adds	r7, #24
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40021000 	.word	0x40021000
 8003a28:	40022000 	.word	0x40022000

08003a2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a34:	2300      	movs	r3, #0
 8003a36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a38:	2300      	movs	r3, #0
 8003a3a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d041      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a4c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a50:	d02a      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003a52:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a56:	d824      	bhi.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003a58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a5c:	d008      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003a5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a62:	d81e      	bhi.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00a      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003a68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a6c:	d010      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003a6e:	e018      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a70:	4b86      	ldr	r3, [pc, #536]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	4a85      	ldr	r2, [pc, #532]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a7a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a7c:	e015      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	3304      	adds	r3, #4
 8003a82:	2100      	movs	r1, #0
 8003a84:	4618      	mov	r0, r3
 8003a86:	f000 fabb 	bl	8004000 <RCCEx_PLLSAI1_Config>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a8e:	e00c      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	3320      	adds	r3, #32
 8003a94:	2100      	movs	r1, #0
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 fba6 	bl	80041e8 <RCCEx_PLLSAI2_Config>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003aa0:	e003      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	74fb      	strb	r3, [r7, #19]
      break;
 8003aa6:	e000      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003aa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aaa:	7cfb      	ldrb	r3, [r7, #19]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10b      	bne.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ab0:	4b76      	ldr	r3, [pc, #472]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003abe:	4973      	ldr	r1, [pc, #460]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003ac6:	e001      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac8:	7cfb      	ldrb	r3, [r7, #19]
 8003aca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d041      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003adc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ae0:	d02a      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003ae2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ae6:	d824      	bhi.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ae8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003aec:	d008      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003aee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003af2:	d81e      	bhi.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00a      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003af8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003afc:	d010      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003afe:	e018      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b00:	4b62      	ldr	r3, [pc, #392]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	4a61      	ldr	r2, [pc, #388]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b0a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b0c:	e015      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	3304      	adds	r3, #4
 8003b12:	2100      	movs	r1, #0
 8003b14:	4618      	mov	r0, r3
 8003b16:	f000 fa73 	bl	8004000 <RCCEx_PLLSAI1_Config>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b1e:	e00c      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	3320      	adds	r3, #32
 8003b24:	2100      	movs	r1, #0
 8003b26:	4618      	mov	r0, r3
 8003b28:	f000 fb5e 	bl	80041e8 <RCCEx_PLLSAI2_Config>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b30:	e003      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	74fb      	strb	r3, [r7, #19]
      break;
 8003b36:	e000      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003b38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b3a:	7cfb      	ldrb	r3, [r7, #19]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10b      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b40:	4b52      	ldr	r3, [pc, #328]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b46:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b4e:	494f      	ldr	r1, [pc, #316]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b56:	e001      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b58:	7cfb      	ldrb	r3, [r7, #19]
 8003b5a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f000 80a0 	beq.w	8003caa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b6e:	4b47      	ldr	r3, [pc, #284]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e000      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003b7e:	2300      	movs	r3, #0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00d      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b84:	4b41      	ldr	r3, [pc, #260]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b88:	4a40      	ldr	r2, [pc, #256]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b8e:	6593      	str	r3, [r2, #88]	; 0x58
 8003b90:	4b3e      	ldr	r3, [pc, #248]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b98:	60bb      	str	r3, [r7, #8]
 8003b9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ba0:	4b3b      	ldr	r3, [pc, #236]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a3a      	ldr	r2, [pc, #232]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ba6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003baa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bac:	f7fd f9e0 	bl	8000f70 <HAL_GetTick>
 8003bb0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003bb2:	e009      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bb4:	f7fd f9dc 	bl	8000f70 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d902      	bls.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	74fb      	strb	r3, [r7, #19]
        break;
 8003bc6:	e005      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003bc8:	4b31      	ldr	r3, [pc, #196]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d0ef      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003bd4:	7cfb      	ldrb	r3, [r7, #19]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d15c      	bne.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003bda:	4b2c      	ldr	r3, [pc, #176]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003be4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d01f      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d019      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003bf8:	4b24      	ldr	r3, [pc, #144]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c02:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c04:	4b21      	ldr	r3, [pc, #132]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0a:	4a20      	ldr	r2, [pc, #128]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c14:	4b1d      	ldr	r3, [pc, #116]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1a:	4a1c      	ldr	r2, [pc, #112]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c24:	4a19      	ldr	r2, [pc, #100]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d016      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c36:	f7fd f99b 	bl	8000f70 <HAL_GetTick>
 8003c3a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c3c:	e00b      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c3e:	f7fd f997 	bl	8000f70 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d902      	bls.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	74fb      	strb	r3, [r7, #19]
            break;
 8003c54:	e006      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c56:	4b0d      	ldr	r3, [pc, #52]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d0ec      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003c64:	7cfb      	ldrb	r3, [r7, #19]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10c      	bne.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c6a:	4b08      	ldr	r3, [pc, #32]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c7a:	4904      	ldr	r1, [pc, #16]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c82:	e009      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c84:	7cfb      	ldrb	r3, [r7, #19]
 8003c86:	74bb      	strb	r3, [r7, #18]
 8003c88:	e006      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003c8a:	bf00      	nop
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c94:	7cfb      	ldrb	r3, [r7, #19]
 8003c96:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c98:	7c7b      	ldrb	r3, [r7, #17]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d105      	bne.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c9e:	4b9e      	ldr	r3, [pc, #632]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca2:	4a9d      	ldr	r2, [pc, #628]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ca8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00a      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cb6:	4b98      	ldr	r3, [pc, #608]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cbc:	f023 0203 	bic.w	r2, r3, #3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc4:	4994      	ldr	r1, [pc, #592]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00a      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cd8:	4b8f      	ldr	r3, [pc, #572]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cde:	f023 020c 	bic.w	r2, r3, #12
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce6:	498c      	ldr	r1, [pc, #560]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0304 	and.w	r3, r3, #4
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00a      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cfa:	4b87      	ldr	r3, [pc, #540]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d00:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d08:	4983      	ldr	r1, [pc, #524]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0308 	and.w	r3, r3, #8
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00a      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d1c:	4b7e      	ldr	r3, [pc, #504]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d22:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2a:	497b      	ldr	r1, [pc, #492]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0310 	and.w	r3, r3, #16
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00a      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d3e:	4b76      	ldr	r3, [pc, #472]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d4c:	4972      	ldr	r1, [pc, #456]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0320 	and.w	r3, r3, #32
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00a      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d60:	4b6d      	ldr	r3, [pc, #436]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d66:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d6e:	496a      	ldr	r1, [pc, #424]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00a      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d82:	4b65      	ldr	r3, [pc, #404]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d88:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d90:	4961      	ldr	r1, [pc, #388]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00a      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003da4:	4b5c      	ldr	r3, [pc, #368]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003daa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003db2:	4959      	ldr	r1, [pc, #356]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00a      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dc6:	4b54      	ldr	r3, [pc, #336]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dcc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dd4:	4950      	ldr	r1, [pc, #320]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00a      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003de8:	4b4b      	ldr	r3, [pc, #300]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df6:	4948      	ldr	r1, [pc, #288]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00a      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e0a:	4b43      	ldr	r3, [pc, #268]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e18:	493f      	ldr	r1, [pc, #252]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d028      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e2c:	4b3a      	ldr	r3, [pc, #232]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e3a:	4937      	ldr	r1, [pc, #220]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e4a:	d106      	bne.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e4c:	4b32      	ldr	r3, [pc, #200]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	4a31      	ldr	r2, [pc, #196]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e56:	60d3      	str	r3, [r2, #12]
 8003e58:	e011      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e62:	d10c      	bne.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	3304      	adds	r3, #4
 8003e68:	2101      	movs	r1, #1
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f000 f8c8 	bl	8004000 <RCCEx_PLLSAI1_Config>
 8003e70:	4603      	mov	r3, r0
 8003e72:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003e74:	7cfb      	ldrb	r3, [r7, #19]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003e7a:	7cfb      	ldrb	r3, [r7, #19]
 8003e7c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d028      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e8a:	4b23      	ldr	r3, [pc, #140]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e90:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e98:	491f      	ldr	r1, [pc, #124]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ea8:	d106      	bne.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003eaa:	4b1b      	ldr	r3, [pc, #108]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	4a1a      	ldr	r2, [pc, #104]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003eb4:	60d3      	str	r3, [r2, #12]
 8003eb6:	e011      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ec0:	d10c      	bne.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 f899 	bl	8004000 <RCCEx_PLLSAI1_Config>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ed2:	7cfb      	ldrb	r3, [r7, #19]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d001      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003ed8:	7cfb      	ldrb	r3, [r7, #19]
 8003eda:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d02b      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ee8:	4b0b      	ldr	r3, [pc, #44]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ef6:	4908      	ldr	r1, [pc, #32]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f06:	d109      	bne.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f08:	4b03      	ldr	r3, [pc, #12]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	4a02      	ldr	r2, [pc, #8]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f12:	60d3      	str	r3, [r2, #12]
 8003f14:	e014      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003f16:	bf00      	nop
 8003f18:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f24:	d10c      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	3304      	adds	r3, #4
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f000 f867 	bl	8004000 <RCCEx_PLLSAI1_Config>
 8003f32:	4603      	mov	r3, r0
 8003f34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f36:	7cfb      	ldrb	r3, [r7, #19]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003f3c:	7cfb      	ldrb	r3, [r7, #19]
 8003f3e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d02f      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f4c:	4b2b      	ldr	r3, [pc, #172]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f52:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f5a:	4928      	ldr	r1, [pc, #160]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f6a:	d10d      	bne.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	3304      	adds	r3, #4
 8003f70:	2102      	movs	r1, #2
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 f844 	bl	8004000 <RCCEx_PLLSAI1_Config>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f7c:	7cfb      	ldrb	r3, [r7, #19]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d014      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003f82:	7cfb      	ldrb	r3, [r7, #19]
 8003f84:	74bb      	strb	r3, [r7, #18]
 8003f86:	e011      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f90:	d10c      	bne.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	3320      	adds	r3, #32
 8003f96:	2102      	movs	r1, #2
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f000 f925 	bl	80041e8 <RCCEx_PLLSAI2_Config>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fa2:	7cfb      	ldrb	r3, [r7, #19]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003fa8:	7cfb      	ldrb	r3, [r7, #19]
 8003faa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00a      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003fb8:	4b10      	ldr	r3, [pc, #64]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fbe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fc6:	490d      	ldr	r1, [pc, #52]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00b      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003fda:	4b08      	ldr	r3, [pc, #32]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fea:	4904      	ldr	r1, [pc, #16]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003ff2:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3718      	adds	r7, #24
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	40021000 	.word	0x40021000

08004000 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800400a:	2300      	movs	r3, #0
 800400c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800400e:	4b75      	ldr	r3, [pc, #468]	; (80041e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	f003 0303 	and.w	r3, r3, #3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d018      	beq.n	800404c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800401a:	4b72      	ldr	r3, [pc, #456]	; (80041e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	f003 0203 	and.w	r2, r3, #3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	429a      	cmp	r2, r3
 8004028:	d10d      	bne.n	8004046 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
       ||
 800402e:	2b00      	cmp	r3, #0
 8004030:	d009      	beq.n	8004046 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004032:	4b6c      	ldr	r3, [pc, #432]	; (80041e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	091b      	lsrs	r3, r3, #4
 8004038:	f003 0307 	and.w	r3, r3, #7
 800403c:	1c5a      	adds	r2, r3, #1
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
       ||
 8004042:	429a      	cmp	r2, r3
 8004044:	d047      	beq.n	80040d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	73fb      	strb	r3, [r7, #15]
 800404a:	e044      	b.n	80040d6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2b03      	cmp	r3, #3
 8004052:	d018      	beq.n	8004086 <RCCEx_PLLSAI1_Config+0x86>
 8004054:	2b03      	cmp	r3, #3
 8004056:	d825      	bhi.n	80040a4 <RCCEx_PLLSAI1_Config+0xa4>
 8004058:	2b01      	cmp	r3, #1
 800405a:	d002      	beq.n	8004062 <RCCEx_PLLSAI1_Config+0x62>
 800405c:	2b02      	cmp	r3, #2
 800405e:	d009      	beq.n	8004074 <RCCEx_PLLSAI1_Config+0x74>
 8004060:	e020      	b.n	80040a4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004062:	4b60      	ldr	r3, [pc, #384]	; (80041e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d11d      	bne.n	80040aa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004072:	e01a      	b.n	80040aa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004074:	4b5b      	ldr	r3, [pc, #364]	; (80041e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800407c:	2b00      	cmp	r3, #0
 800407e:	d116      	bne.n	80040ae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004084:	e013      	b.n	80040ae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004086:	4b57      	ldr	r3, [pc, #348]	; (80041e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10f      	bne.n	80040b2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004092:	4b54      	ldr	r3, [pc, #336]	; (80041e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d109      	bne.n	80040b2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80040a2:	e006      	b.n	80040b2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	73fb      	strb	r3, [r7, #15]
      break;
 80040a8:	e004      	b.n	80040b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040aa:	bf00      	nop
 80040ac:	e002      	b.n	80040b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040ae:	bf00      	nop
 80040b0:	e000      	b.n	80040b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80040b4:	7bfb      	ldrb	r3, [r7, #15]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10d      	bne.n	80040d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80040ba:	4b4a      	ldr	r3, [pc, #296]	; (80041e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6819      	ldr	r1, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	3b01      	subs	r3, #1
 80040cc:	011b      	lsls	r3, r3, #4
 80040ce:	430b      	orrs	r3, r1
 80040d0:	4944      	ldr	r1, [pc, #272]	; (80041e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80040d6:	7bfb      	ldrb	r3, [r7, #15]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d17d      	bne.n	80041d8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80040dc:	4b41      	ldr	r3, [pc, #260]	; (80041e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a40      	ldr	r2, [pc, #256]	; (80041e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040e8:	f7fc ff42 	bl	8000f70 <HAL_GetTick>
 80040ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80040ee:	e009      	b.n	8004104 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040f0:	f7fc ff3e 	bl	8000f70 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d902      	bls.n	8004104 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	73fb      	strb	r3, [r7, #15]
        break;
 8004102:	e005      	b.n	8004110 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004104:	4b37      	ldr	r3, [pc, #220]	; (80041e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1ef      	bne.n	80040f0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004110:	7bfb      	ldrb	r3, [r7, #15]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d160      	bne.n	80041d8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d111      	bne.n	8004140 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800411c:	4b31      	ldr	r3, [pc, #196]	; (80041e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004124:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	6892      	ldr	r2, [r2, #8]
 800412c:	0211      	lsls	r1, r2, #8
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	68d2      	ldr	r2, [r2, #12]
 8004132:	0912      	lsrs	r2, r2, #4
 8004134:	0452      	lsls	r2, r2, #17
 8004136:	430a      	orrs	r2, r1
 8004138:	492a      	ldr	r1, [pc, #168]	; (80041e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800413a:	4313      	orrs	r3, r2
 800413c:	610b      	str	r3, [r1, #16]
 800413e:	e027      	b.n	8004190 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d112      	bne.n	800416c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004146:	4b27      	ldr	r3, [pc, #156]	; (80041e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800414e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	6892      	ldr	r2, [r2, #8]
 8004156:	0211      	lsls	r1, r2, #8
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	6912      	ldr	r2, [r2, #16]
 800415c:	0852      	lsrs	r2, r2, #1
 800415e:	3a01      	subs	r2, #1
 8004160:	0552      	lsls	r2, r2, #21
 8004162:	430a      	orrs	r2, r1
 8004164:	491f      	ldr	r1, [pc, #124]	; (80041e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004166:	4313      	orrs	r3, r2
 8004168:	610b      	str	r3, [r1, #16]
 800416a:	e011      	b.n	8004190 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800416c:	4b1d      	ldr	r3, [pc, #116]	; (80041e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004174:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	6892      	ldr	r2, [r2, #8]
 800417c:	0211      	lsls	r1, r2, #8
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6952      	ldr	r2, [r2, #20]
 8004182:	0852      	lsrs	r2, r2, #1
 8004184:	3a01      	subs	r2, #1
 8004186:	0652      	lsls	r2, r2, #25
 8004188:	430a      	orrs	r2, r1
 800418a:	4916      	ldr	r1, [pc, #88]	; (80041e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800418c:	4313      	orrs	r3, r2
 800418e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004190:	4b14      	ldr	r3, [pc, #80]	; (80041e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a13      	ldr	r2, [pc, #76]	; (80041e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004196:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800419a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800419c:	f7fc fee8 	bl	8000f70 <HAL_GetTick>
 80041a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041a2:	e009      	b.n	80041b8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041a4:	f7fc fee4 	bl	8000f70 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d902      	bls.n	80041b8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	73fb      	strb	r3, [r7, #15]
          break;
 80041b6:	e005      	b.n	80041c4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041b8:	4b0a      	ldr	r3, [pc, #40]	; (80041e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d0ef      	beq.n	80041a4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80041c4:	7bfb      	ldrb	r3, [r7, #15]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d106      	bne.n	80041d8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80041ca:	4b06      	ldr	r3, [pc, #24]	; (80041e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041cc:	691a      	ldr	r2, [r3, #16]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	4904      	ldr	r1, [pc, #16]	; (80041e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80041d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	40021000 	.word	0x40021000

080041e8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041f2:	2300      	movs	r3, #0
 80041f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80041f6:	4b6a      	ldr	r3, [pc, #424]	; (80043a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	f003 0303 	and.w	r3, r3, #3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d018      	beq.n	8004234 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004202:	4b67      	ldr	r3, [pc, #412]	; (80043a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f003 0203 	and.w	r2, r3, #3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	429a      	cmp	r2, r3
 8004210:	d10d      	bne.n	800422e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
       ||
 8004216:	2b00      	cmp	r3, #0
 8004218:	d009      	beq.n	800422e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800421a:	4b61      	ldr	r3, [pc, #388]	; (80043a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	091b      	lsrs	r3, r3, #4
 8004220:	f003 0307 	and.w	r3, r3, #7
 8004224:	1c5a      	adds	r2, r3, #1
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
       ||
 800422a:	429a      	cmp	r2, r3
 800422c:	d047      	beq.n	80042be <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	73fb      	strb	r3, [r7, #15]
 8004232:	e044      	b.n	80042be <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2b03      	cmp	r3, #3
 800423a:	d018      	beq.n	800426e <RCCEx_PLLSAI2_Config+0x86>
 800423c:	2b03      	cmp	r3, #3
 800423e:	d825      	bhi.n	800428c <RCCEx_PLLSAI2_Config+0xa4>
 8004240:	2b01      	cmp	r3, #1
 8004242:	d002      	beq.n	800424a <RCCEx_PLLSAI2_Config+0x62>
 8004244:	2b02      	cmp	r3, #2
 8004246:	d009      	beq.n	800425c <RCCEx_PLLSAI2_Config+0x74>
 8004248:	e020      	b.n	800428c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800424a:	4b55      	ldr	r3, [pc, #340]	; (80043a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d11d      	bne.n	8004292 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800425a:	e01a      	b.n	8004292 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800425c:	4b50      	ldr	r3, [pc, #320]	; (80043a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004264:	2b00      	cmp	r3, #0
 8004266:	d116      	bne.n	8004296 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800426c:	e013      	b.n	8004296 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800426e:	4b4c      	ldr	r3, [pc, #304]	; (80043a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10f      	bne.n	800429a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800427a:	4b49      	ldr	r3, [pc, #292]	; (80043a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d109      	bne.n	800429a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800428a:	e006      	b.n	800429a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	73fb      	strb	r3, [r7, #15]
      break;
 8004290:	e004      	b.n	800429c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004292:	bf00      	nop
 8004294:	e002      	b.n	800429c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004296:	bf00      	nop
 8004298:	e000      	b.n	800429c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800429a:	bf00      	nop
    }

    if(status == HAL_OK)
 800429c:	7bfb      	ldrb	r3, [r7, #15]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10d      	bne.n	80042be <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042a2:	4b3f      	ldr	r3, [pc, #252]	; (80043a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6819      	ldr	r1, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	3b01      	subs	r3, #1
 80042b4:	011b      	lsls	r3, r3, #4
 80042b6:	430b      	orrs	r3, r1
 80042b8:	4939      	ldr	r1, [pc, #228]	; (80043a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80042be:	7bfb      	ldrb	r3, [r7, #15]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d167      	bne.n	8004394 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80042c4:	4b36      	ldr	r3, [pc, #216]	; (80043a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a35      	ldr	r2, [pc, #212]	; (80043a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042d0:	f7fc fe4e 	bl	8000f70 <HAL_GetTick>
 80042d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80042d6:	e009      	b.n	80042ec <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042d8:	f7fc fe4a 	bl	8000f70 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d902      	bls.n	80042ec <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	73fb      	strb	r3, [r7, #15]
        break;
 80042ea:	e005      	b.n	80042f8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80042ec:	4b2c      	ldr	r3, [pc, #176]	; (80043a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1ef      	bne.n	80042d8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80042f8:	7bfb      	ldrb	r3, [r7, #15]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d14a      	bne.n	8004394 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d111      	bne.n	8004328 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004304:	4b26      	ldr	r3, [pc, #152]	; (80043a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004306:	695b      	ldr	r3, [r3, #20]
 8004308:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800430c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6892      	ldr	r2, [r2, #8]
 8004314:	0211      	lsls	r1, r2, #8
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	68d2      	ldr	r2, [r2, #12]
 800431a:	0912      	lsrs	r2, r2, #4
 800431c:	0452      	lsls	r2, r2, #17
 800431e:	430a      	orrs	r2, r1
 8004320:	491f      	ldr	r1, [pc, #124]	; (80043a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004322:	4313      	orrs	r3, r2
 8004324:	614b      	str	r3, [r1, #20]
 8004326:	e011      	b.n	800434c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004328:	4b1d      	ldr	r3, [pc, #116]	; (80043a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004330:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	6892      	ldr	r2, [r2, #8]
 8004338:	0211      	lsls	r1, r2, #8
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	6912      	ldr	r2, [r2, #16]
 800433e:	0852      	lsrs	r2, r2, #1
 8004340:	3a01      	subs	r2, #1
 8004342:	0652      	lsls	r2, r2, #25
 8004344:	430a      	orrs	r2, r1
 8004346:	4916      	ldr	r1, [pc, #88]	; (80043a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004348:	4313      	orrs	r3, r2
 800434a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800434c:	4b14      	ldr	r3, [pc, #80]	; (80043a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a13      	ldr	r2, [pc, #76]	; (80043a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004356:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004358:	f7fc fe0a 	bl	8000f70 <HAL_GetTick>
 800435c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800435e:	e009      	b.n	8004374 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004360:	f7fc fe06 	bl	8000f70 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b02      	cmp	r3, #2
 800436c:	d902      	bls.n	8004374 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	73fb      	strb	r3, [r7, #15]
          break;
 8004372:	e005      	b.n	8004380 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004374:	4b0a      	ldr	r3, [pc, #40]	; (80043a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d0ef      	beq.n	8004360 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004380:	7bfb      	ldrb	r3, [r7, #15]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d106      	bne.n	8004394 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004386:	4b06      	ldr	r3, [pc, #24]	; (80043a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004388:	695a      	ldr	r2, [r3, #20]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	4904      	ldr	r1, [pc, #16]	; (80043a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004390:	4313      	orrs	r3, r2
 8004392:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004394:	7bfb      	ldrb	r3, [r7, #15]
}
 8004396:	4618      	mov	r0, r3
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	40021000 	.word	0x40021000

080043a4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d06c      	beq.n	8004490 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d106      	bne.n	80043d0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f7fc fbd8 	bl	8000b80 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2202      	movs	r2, #2
 80043d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	22ca      	movs	r2, #202	; 0xca
 80043de:	625a      	str	r2, [r3, #36]	; 0x24
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2253      	movs	r2, #83	; 0x53
 80043e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 f87c 	bl	80044e6 <RTC_EnterInitMode>
 80043ee:	4603      	mov	r3, r0
 80043f0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80043f2:	7bfb      	ldrb	r3, [r7, #15]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d14b      	bne.n	8004490 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	6812      	ldr	r2, [r2, #0]
 8004402:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004406:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800440a:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6899      	ldr	r1, [r3, #8]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685a      	ldr	r2, [r3, #4]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	431a      	orrs	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	431a      	orrs	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	430a      	orrs	r2, r1
 8004428:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	68d2      	ldr	r2, [r2, #12]
 8004432:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6919      	ldr	r1, [r3, #16]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	041a      	lsls	r2, r3, #16
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 f87f 	bl	800454c <RTC_ExitInitMode>
 800444e:	4603      	mov	r3, r0
 8004450:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004452:	7bfb      	ldrb	r3, [r7, #15]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d11b      	bne.n	8004490 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 0203 	bic.w	r2, r2, #3
 8004466:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	69da      	ldr	r2, [r3, #28]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	431a      	orrs	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	430a      	orrs	r2, r1
 800447e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	22ff      	movs	r2, #255	; 0xff
 8004486:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8004490:	7bfb      	ldrb	r3, [r7, #15]
}
 8004492:	4618      	mov	r0, r3
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b084      	sub	sp, #16
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68da      	ldr	r2, [r3, #12]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044b0:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80044b2:	f7fc fd5d 	bl	8000f70 <HAL_GetTick>
 80044b6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80044b8:	e009      	b.n	80044ce <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80044ba:	f7fc fd59 	bl	8000f70 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044c8:	d901      	bls.n	80044ce <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e007      	b.n	80044de <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f003 0320 	and.w	r3, r3, #32
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d0ee      	beq.n	80044ba <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b084      	sub	sp, #16
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044ee:	2300      	movs	r3, #0
 80044f0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d120      	bne.n	8004542 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f04f 32ff 	mov.w	r2, #4294967295
 8004508:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800450a:	f7fc fd31 	bl	8000f70 <HAL_GetTick>
 800450e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004510:	e00d      	b.n	800452e <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004512:	f7fc fd2d 	bl	8000f70 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004520:	d905      	bls.n	800452e <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2203      	movs	r2, #3
 800452a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004538:	2b00      	cmp	r3, #0
 800453a:	d102      	bne.n	8004542 <RTC_EnterInitMode+0x5c>
 800453c:	7bfb      	ldrb	r3, [r7, #15]
 800453e:	2b03      	cmp	r3, #3
 8004540:	d1e7      	bne.n	8004512 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8004542:	7bfb      	ldrb	r3, [r7, #15]
}
 8004544:	4618      	mov	r0, r3
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004554:	2300      	movs	r3, #0
 8004556:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004558:	4b1a      	ldr	r3, [pc, #104]	; (80045c4 <RTC_ExitInitMode+0x78>)
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	4a19      	ldr	r2, [pc, #100]	; (80045c4 <RTC_ExitInitMode+0x78>)
 800455e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004562:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004564:	4b17      	ldr	r3, [pc, #92]	; (80045c4 <RTC_ExitInitMode+0x78>)
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f003 0320 	and.w	r3, r3, #32
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10c      	bne.n	800458a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f7ff ff92 	bl	800449a <HAL_RTC_WaitForSynchro>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d01e      	beq.n	80045ba <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2203      	movs	r2, #3
 8004580:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	73fb      	strb	r3, [r7, #15]
 8004588:	e017      	b.n	80045ba <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800458a:	4b0e      	ldr	r3, [pc, #56]	; (80045c4 <RTC_ExitInitMode+0x78>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	4a0d      	ldr	r2, [pc, #52]	; (80045c4 <RTC_ExitInitMode+0x78>)
 8004590:	f023 0320 	bic.w	r3, r3, #32
 8004594:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7ff ff7f 	bl	800449a <HAL_RTC_WaitForSynchro>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d005      	beq.n	80045ae <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2203      	movs	r2, #3
 80045a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80045ae:	4b05      	ldr	r3, [pc, #20]	; (80045c4 <RTC_ExitInitMode+0x78>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	4a04      	ldr	r2, [pc, #16]	; (80045c4 <RTC_ExitInitMode+0x78>)
 80045b4:	f043 0320 	orr.w	r3, r3, #32
 80045b8:	6093      	str	r3, [r2, #8]
  }

  return status;
 80045ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	40002800 	.word	0x40002800

080045c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e040      	b.n	800465c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d106      	bne.n	80045f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7fc fbca 	bl	8000d84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2224      	movs	r2, #36	; 0x24
 80045f4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 0201 	bic.w	r2, r2, #1
 8004604:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f82c 	bl	8004664 <UART_SetConfig>
 800460c:	4603      	mov	r3, r0
 800460e:	2b01      	cmp	r3, #1
 8004610:	d101      	bne.n	8004616 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e022      	b.n	800465c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461a:	2b00      	cmp	r3, #0
 800461c:	d002      	beq.n	8004624 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 fad8 	bl	8004bd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685a      	ldr	r2, [r3, #4]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004632:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	689a      	ldr	r2, [r3, #8]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004642:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f042 0201 	orr.w	r2, r2, #1
 8004652:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 fb5f 	bl	8004d18 <UART_CheckIdleState>
 800465a:	4603      	mov	r3, r0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3708      	adds	r7, #8
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004664:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004668:	b08a      	sub	sp, #40	; 0x28
 800466a:	af00      	add	r7, sp, #0
 800466c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800466e:	2300      	movs	r3, #0
 8004670:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	689a      	ldr	r2, [r3, #8]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	431a      	orrs	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	431a      	orrs	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	69db      	ldr	r3, [r3, #28]
 8004688:	4313      	orrs	r3, r2
 800468a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	4ba4      	ldr	r3, [pc, #656]	; (8004924 <UART_SetConfig+0x2c0>)
 8004694:	4013      	ands	r3, r2
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	6812      	ldr	r2, [r2, #0]
 800469a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800469c:	430b      	orrs	r3, r1
 800469e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	68da      	ldr	r2, [r3, #12]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a99      	ldr	r2, [pc, #612]	; (8004928 <UART_SetConfig+0x2c4>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d004      	beq.n	80046d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046cc:	4313      	orrs	r3, r2
 80046ce:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046e0:	430a      	orrs	r2, r1
 80046e2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a90      	ldr	r2, [pc, #576]	; (800492c <UART_SetConfig+0x2c8>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d126      	bne.n	800473c <UART_SetConfig+0xd8>
 80046ee:	4b90      	ldr	r3, [pc, #576]	; (8004930 <UART_SetConfig+0x2cc>)
 80046f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f4:	f003 0303 	and.w	r3, r3, #3
 80046f8:	2b03      	cmp	r3, #3
 80046fa:	d81b      	bhi.n	8004734 <UART_SetConfig+0xd0>
 80046fc:	a201      	add	r2, pc, #4	; (adr r2, 8004704 <UART_SetConfig+0xa0>)
 80046fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004702:	bf00      	nop
 8004704:	08004715 	.word	0x08004715
 8004708:	08004725 	.word	0x08004725
 800470c:	0800471d 	.word	0x0800471d
 8004710:	0800472d 	.word	0x0800472d
 8004714:	2301      	movs	r3, #1
 8004716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800471a:	e116      	b.n	800494a <UART_SetConfig+0x2e6>
 800471c:	2302      	movs	r3, #2
 800471e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004722:	e112      	b.n	800494a <UART_SetConfig+0x2e6>
 8004724:	2304      	movs	r3, #4
 8004726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800472a:	e10e      	b.n	800494a <UART_SetConfig+0x2e6>
 800472c:	2308      	movs	r3, #8
 800472e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004732:	e10a      	b.n	800494a <UART_SetConfig+0x2e6>
 8004734:	2310      	movs	r3, #16
 8004736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800473a:	e106      	b.n	800494a <UART_SetConfig+0x2e6>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a7c      	ldr	r2, [pc, #496]	; (8004934 <UART_SetConfig+0x2d0>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d138      	bne.n	80047b8 <UART_SetConfig+0x154>
 8004746:	4b7a      	ldr	r3, [pc, #488]	; (8004930 <UART_SetConfig+0x2cc>)
 8004748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800474c:	f003 030c 	and.w	r3, r3, #12
 8004750:	2b0c      	cmp	r3, #12
 8004752:	d82d      	bhi.n	80047b0 <UART_SetConfig+0x14c>
 8004754:	a201      	add	r2, pc, #4	; (adr r2, 800475c <UART_SetConfig+0xf8>)
 8004756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475a:	bf00      	nop
 800475c:	08004791 	.word	0x08004791
 8004760:	080047b1 	.word	0x080047b1
 8004764:	080047b1 	.word	0x080047b1
 8004768:	080047b1 	.word	0x080047b1
 800476c:	080047a1 	.word	0x080047a1
 8004770:	080047b1 	.word	0x080047b1
 8004774:	080047b1 	.word	0x080047b1
 8004778:	080047b1 	.word	0x080047b1
 800477c:	08004799 	.word	0x08004799
 8004780:	080047b1 	.word	0x080047b1
 8004784:	080047b1 	.word	0x080047b1
 8004788:	080047b1 	.word	0x080047b1
 800478c:	080047a9 	.word	0x080047a9
 8004790:	2300      	movs	r3, #0
 8004792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004796:	e0d8      	b.n	800494a <UART_SetConfig+0x2e6>
 8004798:	2302      	movs	r3, #2
 800479a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800479e:	e0d4      	b.n	800494a <UART_SetConfig+0x2e6>
 80047a0:	2304      	movs	r3, #4
 80047a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047a6:	e0d0      	b.n	800494a <UART_SetConfig+0x2e6>
 80047a8:	2308      	movs	r3, #8
 80047aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ae:	e0cc      	b.n	800494a <UART_SetConfig+0x2e6>
 80047b0:	2310      	movs	r3, #16
 80047b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047b6:	e0c8      	b.n	800494a <UART_SetConfig+0x2e6>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a5e      	ldr	r2, [pc, #376]	; (8004938 <UART_SetConfig+0x2d4>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d125      	bne.n	800480e <UART_SetConfig+0x1aa>
 80047c2:	4b5b      	ldr	r3, [pc, #364]	; (8004930 <UART_SetConfig+0x2cc>)
 80047c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80047cc:	2b30      	cmp	r3, #48	; 0x30
 80047ce:	d016      	beq.n	80047fe <UART_SetConfig+0x19a>
 80047d0:	2b30      	cmp	r3, #48	; 0x30
 80047d2:	d818      	bhi.n	8004806 <UART_SetConfig+0x1a2>
 80047d4:	2b20      	cmp	r3, #32
 80047d6:	d00a      	beq.n	80047ee <UART_SetConfig+0x18a>
 80047d8:	2b20      	cmp	r3, #32
 80047da:	d814      	bhi.n	8004806 <UART_SetConfig+0x1a2>
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d002      	beq.n	80047e6 <UART_SetConfig+0x182>
 80047e0:	2b10      	cmp	r3, #16
 80047e2:	d008      	beq.n	80047f6 <UART_SetConfig+0x192>
 80047e4:	e00f      	b.n	8004806 <UART_SetConfig+0x1a2>
 80047e6:	2300      	movs	r3, #0
 80047e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ec:	e0ad      	b.n	800494a <UART_SetConfig+0x2e6>
 80047ee:	2302      	movs	r3, #2
 80047f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047f4:	e0a9      	b.n	800494a <UART_SetConfig+0x2e6>
 80047f6:	2304      	movs	r3, #4
 80047f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047fc:	e0a5      	b.n	800494a <UART_SetConfig+0x2e6>
 80047fe:	2308      	movs	r3, #8
 8004800:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004804:	e0a1      	b.n	800494a <UART_SetConfig+0x2e6>
 8004806:	2310      	movs	r3, #16
 8004808:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800480c:	e09d      	b.n	800494a <UART_SetConfig+0x2e6>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a4a      	ldr	r2, [pc, #296]	; (800493c <UART_SetConfig+0x2d8>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d125      	bne.n	8004864 <UART_SetConfig+0x200>
 8004818:	4b45      	ldr	r3, [pc, #276]	; (8004930 <UART_SetConfig+0x2cc>)
 800481a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004822:	2bc0      	cmp	r3, #192	; 0xc0
 8004824:	d016      	beq.n	8004854 <UART_SetConfig+0x1f0>
 8004826:	2bc0      	cmp	r3, #192	; 0xc0
 8004828:	d818      	bhi.n	800485c <UART_SetConfig+0x1f8>
 800482a:	2b80      	cmp	r3, #128	; 0x80
 800482c:	d00a      	beq.n	8004844 <UART_SetConfig+0x1e0>
 800482e:	2b80      	cmp	r3, #128	; 0x80
 8004830:	d814      	bhi.n	800485c <UART_SetConfig+0x1f8>
 8004832:	2b00      	cmp	r3, #0
 8004834:	d002      	beq.n	800483c <UART_SetConfig+0x1d8>
 8004836:	2b40      	cmp	r3, #64	; 0x40
 8004838:	d008      	beq.n	800484c <UART_SetConfig+0x1e8>
 800483a:	e00f      	b.n	800485c <UART_SetConfig+0x1f8>
 800483c:	2300      	movs	r3, #0
 800483e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004842:	e082      	b.n	800494a <UART_SetConfig+0x2e6>
 8004844:	2302      	movs	r3, #2
 8004846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800484a:	e07e      	b.n	800494a <UART_SetConfig+0x2e6>
 800484c:	2304      	movs	r3, #4
 800484e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004852:	e07a      	b.n	800494a <UART_SetConfig+0x2e6>
 8004854:	2308      	movs	r3, #8
 8004856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800485a:	e076      	b.n	800494a <UART_SetConfig+0x2e6>
 800485c:	2310      	movs	r3, #16
 800485e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004862:	e072      	b.n	800494a <UART_SetConfig+0x2e6>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a35      	ldr	r2, [pc, #212]	; (8004940 <UART_SetConfig+0x2dc>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d12a      	bne.n	80048c4 <UART_SetConfig+0x260>
 800486e:	4b30      	ldr	r3, [pc, #192]	; (8004930 <UART_SetConfig+0x2cc>)
 8004870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004874:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004878:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800487c:	d01a      	beq.n	80048b4 <UART_SetConfig+0x250>
 800487e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004882:	d81b      	bhi.n	80048bc <UART_SetConfig+0x258>
 8004884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004888:	d00c      	beq.n	80048a4 <UART_SetConfig+0x240>
 800488a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800488e:	d815      	bhi.n	80048bc <UART_SetConfig+0x258>
 8004890:	2b00      	cmp	r3, #0
 8004892:	d003      	beq.n	800489c <UART_SetConfig+0x238>
 8004894:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004898:	d008      	beq.n	80048ac <UART_SetConfig+0x248>
 800489a:	e00f      	b.n	80048bc <UART_SetConfig+0x258>
 800489c:	2300      	movs	r3, #0
 800489e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048a2:	e052      	b.n	800494a <UART_SetConfig+0x2e6>
 80048a4:	2302      	movs	r3, #2
 80048a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048aa:	e04e      	b.n	800494a <UART_SetConfig+0x2e6>
 80048ac:	2304      	movs	r3, #4
 80048ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048b2:	e04a      	b.n	800494a <UART_SetConfig+0x2e6>
 80048b4:	2308      	movs	r3, #8
 80048b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ba:	e046      	b.n	800494a <UART_SetConfig+0x2e6>
 80048bc:	2310      	movs	r3, #16
 80048be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048c2:	e042      	b.n	800494a <UART_SetConfig+0x2e6>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a17      	ldr	r2, [pc, #92]	; (8004928 <UART_SetConfig+0x2c4>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d13a      	bne.n	8004944 <UART_SetConfig+0x2e0>
 80048ce:	4b18      	ldr	r3, [pc, #96]	; (8004930 <UART_SetConfig+0x2cc>)
 80048d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80048d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048dc:	d01a      	beq.n	8004914 <UART_SetConfig+0x2b0>
 80048de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048e2:	d81b      	bhi.n	800491c <UART_SetConfig+0x2b8>
 80048e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048e8:	d00c      	beq.n	8004904 <UART_SetConfig+0x2a0>
 80048ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048ee:	d815      	bhi.n	800491c <UART_SetConfig+0x2b8>
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d003      	beq.n	80048fc <UART_SetConfig+0x298>
 80048f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048f8:	d008      	beq.n	800490c <UART_SetConfig+0x2a8>
 80048fa:	e00f      	b.n	800491c <UART_SetConfig+0x2b8>
 80048fc:	2300      	movs	r3, #0
 80048fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004902:	e022      	b.n	800494a <UART_SetConfig+0x2e6>
 8004904:	2302      	movs	r3, #2
 8004906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800490a:	e01e      	b.n	800494a <UART_SetConfig+0x2e6>
 800490c:	2304      	movs	r3, #4
 800490e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004912:	e01a      	b.n	800494a <UART_SetConfig+0x2e6>
 8004914:	2308      	movs	r3, #8
 8004916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800491a:	e016      	b.n	800494a <UART_SetConfig+0x2e6>
 800491c:	2310      	movs	r3, #16
 800491e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004922:	e012      	b.n	800494a <UART_SetConfig+0x2e6>
 8004924:	efff69f3 	.word	0xefff69f3
 8004928:	40008000 	.word	0x40008000
 800492c:	40013800 	.word	0x40013800
 8004930:	40021000 	.word	0x40021000
 8004934:	40004400 	.word	0x40004400
 8004938:	40004800 	.word	0x40004800
 800493c:	40004c00 	.word	0x40004c00
 8004940:	40005000 	.word	0x40005000
 8004944:	2310      	movs	r3, #16
 8004946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a9f      	ldr	r2, [pc, #636]	; (8004bcc <UART_SetConfig+0x568>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d17a      	bne.n	8004a4a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004954:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004958:	2b08      	cmp	r3, #8
 800495a:	d824      	bhi.n	80049a6 <UART_SetConfig+0x342>
 800495c:	a201      	add	r2, pc, #4	; (adr r2, 8004964 <UART_SetConfig+0x300>)
 800495e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004962:	bf00      	nop
 8004964:	08004989 	.word	0x08004989
 8004968:	080049a7 	.word	0x080049a7
 800496c:	08004991 	.word	0x08004991
 8004970:	080049a7 	.word	0x080049a7
 8004974:	08004997 	.word	0x08004997
 8004978:	080049a7 	.word	0x080049a7
 800497c:	080049a7 	.word	0x080049a7
 8004980:	080049a7 	.word	0x080049a7
 8004984:	0800499f 	.word	0x0800499f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004988:	f7fe ffc4 	bl	8003914 <HAL_RCC_GetPCLK1Freq>
 800498c:	61f8      	str	r0, [r7, #28]
        break;
 800498e:	e010      	b.n	80049b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004990:	4b8f      	ldr	r3, [pc, #572]	; (8004bd0 <UART_SetConfig+0x56c>)
 8004992:	61fb      	str	r3, [r7, #28]
        break;
 8004994:	e00d      	b.n	80049b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004996:	f7fe ff25 	bl	80037e4 <HAL_RCC_GetSysClockFreq>
 800499a:	61f8      	str	r0, [r7, #28]
        break;
 800499c:	e009      	b.n	80049b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800499e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049a2:	61fb      	str	r3, [r7, #28]
        break;
 80049a4:	e005      	b.n	80049b2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80049b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 80fb 	beq.w	8004bb0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	685a      	ldr	r2, [r3, #4]
 80049be:	4613      	mov	r3, r2
 80049c0:	005b      	lsls	r3, r3, #1
 80049c2:	4413      	add	r3, r2
 80049c4:	69fa      	ldr	r2, [r7, #28]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d305      	bcc.n	80049d6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049d0:	69fa      	ldr	r2, [r7, #28]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d903      	bls.n	80049de <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80049dc:	e0e8      	b.n	8004bb0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	2200      	movs	r2, #0
 80049e2:	461c      	mov	r4, r3
 80049e4:	4615      	mov	r5, r2
 80049e6:	f04f 0200 	mov.w	r2, #0
 80049ea:	f04f 0300 	mov.w	r3, #0
 80049ee:	022b      	lsls	r3, r5, #8
 80049f0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80049f4:	0222      	lsls	r2, r4, #8
 80049f6:	68f9      	ldr	r1, [r7, #12]
 80049f8:	6849      	ldr	r1, [r1, #4]
 80049fa:	0849      	lsrs	r1, r1, #1
 80049fc:	2000      	movs	r0, #0
 80049fe:	4688      	mov	r8, r1
 8004a00:	4681      	mov	r9, r0
 8004a02:	eb12 0a08 	adds.w	sl, r2, r8
 8004a06:	eb43 0b09 	adc.w	fp, r3, r9
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	603b      	str	r3, [r7, #0]
 8004a12:	607a      	str	r2, [r7, #4]
 8004a14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a18:	4650      	mov	r0, sl
 8004a1a:	4659      	mov	r1, fp
 8004a1c:	f7fb fc30 	bl	8000280 <__aeabi_uldivmod>
 8004a20:	4602      	mov	r2, r0
 8004a22:	460b      	mov	r3, r1
 8004a24:	4613      	mov	r3, r2
 8004a26:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a2e:	d308      	bcc.n	8004a42 <UART_SetConfig+0x3de>
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a36:	d204      	bcs.n	8004a42 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	60da      	str	r2, [r3, #12]
 8004a40:	e0b6      	b.n	8004bb0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a48:	e0b2      	b.n	8004bb0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a52:	d15e      	bne.n	8004b12 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004a54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a58:	2b08      	cmp	r3, #8
 8004a5a:	d828      	bhi.n	8004aae <UART_SetConfig+0x44a>
 8004a5c:	a201      	add	r2, pc, #4	; (adr r2, 8004a64 <UART_SetConfig+0x400>)
 8004a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a62:	bf00      	nop
 8004a64:	08004a89 	.word	0x08004a89
 8004a68:	08004a91 	.word	0x08004a91
 8004a6c:	08004a99 	.word	0x08004a99
 8004a70:	08004aaf 	.word	0x08004aaf
 8004a74:	08004a9f 	.word	0x08004a9f
 8004a78:	08004aaf 	.word	0x08004aaf
 8004a7c:	08004aaf 	.word	0x08004aaf
 8004a80:	08004aaf 	.word	0x08004aaf
 8004a84:	08004aa7 	.word	0x08004aa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a88:	f7fe ff44 	bl	8003914 <HAL_RCC_GetPCLK1Freq>
 8004a8c:	61f8      	str	r0, [r7, #28]
        break;
 8004a8e:	e014      	b.n	8004aba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a90:	f7fe ff56 	bl	8003940 <HAL_RCC_GetPCLK2Freq>
 8004a94:	61f8      	str	r0, [r7, #28]
        break;
 8004a96:	e010      	b.n	8004aba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a98:	4b4d      	ldr	r3, [pc, #308]	; (8004bd0 <UART_SetConfig+0x56c>)
 8004a9a:	61fb      	str	r3, [r7, #28]
        break;
 8004a9c:	e00d      	b.n	8004aba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a9e:	f7fe fea1 	bl	80037e4 <HAL_RCC_GetSysClockFreq>
 8004aa2:	61f8      	str	r0, [r7, #28]
        break;
 8004aa4:	e009      	b.n	8004aba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aaa:	61fb      	str	r3, [r7, #28]
        break;
 8004aac:	e005      	b.n	8004aba <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ab8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d077      	beq.n	8004bb0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	005a      	lsls	r2, r3, #1
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	085b      	lsrs	r3, r3, #1
 8004aca:	441a      	add	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	2b0f      	cmp	r3, #15
 8004ada:	d916      	bls.n	8004b0a <UART_SetConfig+0x4a6>
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae2:	d212      	bcs.n	8004b0a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	f023 030f 	bic.w	r3, r3, #15
 8004aec:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	085b      	lsrs	r3, r3, #1
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	f003 0307 	and.w	r3, r3, #7
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	8afb      	ldrh	r3, [r7, #22]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	8afa      	ldrh	r2, [r7, #22]
 8004b06:	60da      	str	r2, [r3, #12]
 8004b08:	e052      	b.n	8004bb0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004b10:	e04e      	b.n	8004bb0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b16:	2b08      	cmp	r3, #8
 8004b18:	d827      	bhi.n	8004b6a <UART_SetConfig+0x506>
 8004b1a:	a201      	add	r2, pc, #4	; (adr r2, 8004b20 <UART_SetConfig+0x4bc>)
 8004b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b20:	08004b45 	.word	0x08004b45
 8004b24:	08004b4d 	.word	0x08004b4d
 8004b28:	08004b55 	.word	0x08004b55
 8004b2c:	08004b6b 	.word	0x08004b6b
 8004b30:	08004b5b 	.word	0x08004b5b
 8004b34:	08004b6b 	.word	0x08004b6b
 8004b38:	08004b6b 	.word	0x08004b6b
 8004b3c:	08004b6b 	.word	0x08004b6b
 8004b40:	08004b63 	.word	0x08004b63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b44:	f7fe fee6 	bl	8003914 <HAL_RCC_GetPCLK1Freq>
 8004b48:	61f8      	str	r0, [r7, #28]
        break;
 8004b4a:	e014      	b.n	8004b76 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b4c:	f7fe fef8 	bl	8003940 <HAL_RCC_GetPCLK2Freq>
 8004b50:	61f8      	str	r0, [r7, #28]
        break;
 8004b52:	e010      	b.n	8004b76 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b54:	4b1e      	ldr	r3, [pc, #120]	; (8004bd0 <UART_SetConfig+0x56c>)
 8004b56:	61fb      	str	r3, [r7, #28]
        break;
 8004b58:	e00d      	b.n	8004b76 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b5a:	f7fe fe43 	bl	80037e4 <HAL_RCC_GetSysClockFreq>
 8004b5e:	61f8      	str	r0, [r7, #28]
        break;
 8004b60:	e009      	b.n	8004b76 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b66:	61fb      	str	r3, [r7, #28]
        break;
 8004b68:	e005      	b.n	8004b76 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004b74:	bf00      	nop
    }

    if (pclk != 0U)
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d019      	beq.n	8004bb0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	085a      	lsrs	r2, r3, #1
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	441a      	add	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b8e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	2b0f      	cmp	r3, #15
 8004b94:	d909      	bls.n	8004baa <UART_SetConfig+0x546>
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b9c:	d205      	bcs.n	8004baa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	60da      	str	r2, [r3, #12]
 8004ba8:	e002      	b.n	8004bb0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004bbc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3728      	adds	r7, #40	; 0x28
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bca:	bf00      	nop
 8004bcc:	40008000 	.word	0x40008000
 8004bd0:	00f42400 	.word	0x00f42400

08004bd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	f003 0301 	and.w	r3, r3, #1
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00a      	beq.n	8004bfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00a      	beq.n	8004c20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c24:	f003 0304 	and.w	r3, r3, #4
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00a      	beq.n	8004c42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c46:	f003 0308 	and.w	r3, r3, #8
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00a      	beq.n	8004c64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	430a      	orrs	r2, r1
 8004c62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c68:	f003 0310 	and.w	r3, r3, #16
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00a      	beq.n	8004c86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8a:	f003 0320 	and.w	r3, r3, #32
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00a      	beq.n	8004ca8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d01a      	beq.n	8004cea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cd2:	d10a      	bne.n	8004cea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00a      	beq.n	8004d0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	605a      	str	r2, [r3, #4]
  }
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af02      	add	r7, sp, #8
 8004d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d28:	f7fc f922 	bl	8000f70 <HAL_GetTick>
 8004d2c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0308 	and.w	r3, r3, #8
 8004d38:	2b08      	cmp	r3, #8
 8004d3a:	d10e      	bne.n	8004d5a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f82d 	bl	8004daa <UART_WaitOnFlagUntilTimeout>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d001      	beq.n	8004d5a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e023      	b.n	8004da2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0304 	and.w	r3, r3, #4
 8004d64:	2b04      	cmp	r3, #4
 8004d66:	d10e      	bne.n	8004d86 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 f817 	bl	8004daa <UART_WaitOnFlagUntilTimeout>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e00d      	b.n	8004da2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2220      	movs	r2, #32
 8004d90:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b09c      	sub	sp, #112	; 0x70
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	60f8      	str	r0, [r7, #12]
 8004db2:	60b9      	str	r1, [r7, #8]
 8004db4:	603b      	str	r3, [r7, #0]
 8004db6:	4613      	mov	r3, r2
 8004db8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dba:	e0a5      	b.n	8004f08 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc2:	f000 80a1 	beq.w	8004f08 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dc6:	f7fc f8d3 	bl	8000f70 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d302      	bcc.n	8004ddc <UART_WaitOnFlagUntilTimeout+0x32>
 8004dd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d13e      	bne.n	8004e5a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004de4:	e853 3f00 	ldrex	r3, [r3]
 8004de8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004dea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004df0:	667b      	str	r3, [r7, #100]	; 0x64
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	461a      	mov	r2, r3
 8004df8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dfc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004e00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e02:	e841 2300 	strex	r3, r2, [r1]
 8004e06:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004e08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1e6      	bne.n	8004ddc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	3308      	adds	r3, #8
 8004e14:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e18:	e853 3f00 	ldrex	r3, [r3]
 8004e1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e20:	f023 0301 	bic.w	r3, r3, #1
 8004e24:	663b      	str	r3, [r7, #96]	; 0x60
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	3308      	adds	r3, #8
 8004e2c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e2e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004e30:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e36:	e841 2300 	strex	r3, r2, [r1]
 8004e3a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004e3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1e5      	bne.n	8004e0e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2220      	movs	r2, #32
 8004e46:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e067      	b.n	8004f2a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0304 	and.w	r3, r3, #4
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d04f      	beq.n	8004f08 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	69db      	ldr	r3, [r3, #28]
 8004e6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e76:	d147      	bne.n	8004f08 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e80:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8a:	e853 3f00 	ldrex	r3, [r3]
 8004e8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ea0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ea2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ea6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ea8:	e841 2300 	strex	r3, r2, [r1]
 8004eac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1e6      	bne.n	8004e82 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	3308      	adds	r3, #8
 8004eba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	e853 3f00 	ldrex	r3, [r3]
 8004ec2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	f023 0301 	bic.w	r3, r3, #1
 8004eca:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	3308      	adds	r3, #8
 8004ed2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ed4:	623a      	str	r2, [r7, #32]
 8004ed6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed8:	69f9      	ldr	r1, [r7, #28]
 8004eda:	6a3a      	ldr	r2, [r7, #32]
 8004edc:	e841 2300 	strex	r3, r2, [r1]
 8004ee0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1e5      	bne.n	8004eb4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2220      	movs	r2, #32
 8004eec:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e010      	b.n	8004f2a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	69da      	ldr	r2, [r3, #28]
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	4013      	ands	r3, r2
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	bf0c      	ite	eq
 8004f18:	2301      	moveq	r3, #1
 8004f1a:	2300      	movne	r3, #0
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	461a      	mov	r2, r3
 8004f20:	79fb      	ldrb	r3, [r7, #7]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	f43f af4a 	beq.w	8004dbc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3770      	adds	r7, #112	; 0x70
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8004f32:	b5b0      	push	{r4, r5, r7, lr}
 8004f34:	b08a      	sub	sp, #40	; 0x28
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	60f8      	str	r0, [r7, #12]
 8004f3a:	60b9      	str	r1, [r7, #8]
 8004f3c:	607a      	str	r2, [r7, #4]
 8004f3e:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8004f40:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8004f44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8004f48:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004f4c:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8004f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f50:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8004f52:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004f54:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8004f62:	f107 0310 	add.w	r3, r7, #16
 8004f66:	4618      	mov	r0, r3
 8004f68:	f000 f80e 	bl	8004f88 <Lcd_init>

	return lcd;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	461d      	mov	r5, r3
 8004f70:	f107 0410 	add.w	r4, r7, #16
 8004f74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f78:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f7c:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	3728      	adds	r7, #40	; 0x28
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bdb0      	pop	{r4, r5, r7, pc}

08004f88 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	7d9b      	ldrb	r3, [r3, #22]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d10c      	bne.n	8004fb2 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8004f98:	2133      	movs	r1, #51	; 0x33
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 f87c 	bl	8005098 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8004fa0:	2132      	movs	r1, #50	; 0x32
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f878 	bl	8005098 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8004fa8:	2128      	movs	r1, #40	; 0x28
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f874 	bl	8005098 <lcd_write_command>
 8004fb0:	e003      	b.n	8004fba <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8004fb2:	2138      	movs	r1, #56	; 0x38
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 f86f 	bl	8005098 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8004fba:	2101      	movs	r1, #1
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 f86b 	bl	8005098 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8004fc2:	210c      	movs	r1, #12
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 f867 	bl	8005098 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8004fca:	2106      	movs	r1, #6
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 f863 	bl	8005098 <lcd_write_command>
}
 8004fd2:	bf00      	nop
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
	...

08004fdc <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8004fe6:	f107 030c 	add.w	r3, r7, #12
 8004fea:	683a      	ldr	r2, [r7, #0]
 8004fec:	4906      	ldr	r1, [pc, #24]	; (8005008 <Lcd_int+0x2c>)
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 fa1c 	bl	800542c <siprintf>

	Lcd_string(lcd, buffer);
 8004ff4:	f107 030c 	add.w	r3, r7, #12
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f806 	bl	800500c <Lcd_string>
}
 8005000:	bf00      	nop
 8005002:	3718      	adds	r7, #24
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	08005d48 	.word	0x08005d48

0800500c <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 800500c:	b590      	push	{r4, r7, lr}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8005016:	2300      	movs	r3, #0
 8005018:	73fb      	strb	r3, [r7, #15]
 800501a:	e00a      	b.n	8005032 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 800501c:	7bfb      	ldrb	r3, [r7, #15]
 800501e:	683a      	ldr	r2, [r7, #0]
 8005020:	4413      	add	r3, r2
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	4619      	mov	r1, r3
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f864 	bl	80050f4 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 800502c:	7bfb      	ldrb	r3, [r7, #15]
 800502e:	3301      	adds	r3, #1
 8005030:	73fb      	strb	r3, [r7, #15]
 8005032:	7bfc      	ldrb	r4, [r7, #15]
 8005034:	6838      	ldr	r0, [r7, #0]
 8005036:	f7fb f8cb 	bl	80001d0 <strlen>
 800503a:	4603      	mov	r3, r0
 800503c:	429c      	cmp	r4, r3
 800503e:	d3ed      	bcc.n	800501c <Lcd_string+0x10>
	}
}
 8005040:	bf00      	nop
 8005042:	bf00      	nop
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	bd90      	pop	{r4, r7, pc}
	...

0800504c <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	460b      	mov	r3, r1
 8005056:	70fb      	strb	r3, [r7, #3]
 8005058:	4613      	mov	r3, r2
 800505a:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 800505c:	78fb      	ldrb	r3, [r7, #3]
 800505e:	4a07      	ldr	r2, [pc, #28]	; (800507c <Lcd_cursor+0x30>)
 8005060:	5cd2      	ldrb	r2, [r2, r3]
 8005062:	78bb      	ldrb	r3, [r7, #2]
 8005064:	4413      	add	r3, r2
 8005066:	b2db      	uxtb	r3, r3
 8005068:	3b80      	subs	r3, #128	; 0x80
 800506a:	b2db      	uxtb	r3, r3
 800506c:	4619      	mov	r1, r3
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f812 	bl	8005098 <lcd_write_command>
	#endif
}
 8005074:	bf00      	nop
 8005076:	3708      	adds	r7, #8
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	08005d94 	.word	0x08005d94

08005080 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8005088:	2101      	movs	r1, #1
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f804 	bl	8005098 <lcd_write_command>
}
 8005090:	bf00      	nop
 8005092:	3708      	adds	r7, #8
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	460b      	mov	r3, r1
 80050a2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6898      	ldr	r0, [r3, #8]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	899b      	ldrh	r3, [r3, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	4619      	mov	r1, r3
 80050b0:	f7fd fe40 	bl	8002d34 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	7d9b      	ldrb	r3, [r3, #22]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d111      	bne.n	80050e0 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80050bc:	78fb      	ldrb	r3, [r7, #3]
 80050be:	091b      	lsrs	r3, r3, #4
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2204      	movs	r2, #4
 80050c4:	4619      	mov	r1, r3
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 f842 	bl	8005150 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80050cc:	78fb      	ldrb	r3, [r7, #3]
 80050ce:	f003 030f 	and.w	r3, r3, #15
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2204      	movs	r2, #4
 80050d6:	4619      	mov	r1, r3
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 f839 	bl	8005150 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 80050de:	e005      	b.n	80050ec <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 80050e0:	78fb      	ldrb	r3, [r7, #3]
 80050e2:	2208      	movs	r2, #8
 80050e4:	4619      	mov	r1, r3
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f832 	bl	8005150 <lcd_write>
}
 80050ec:	bf00      	nop
 80050ee:	3708      	adds	r7, #8
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	460b      	mov	r3, r1
 80050fe:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6898      	ldr	r0, [r3, #8]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	899b      	ldrh	r3, [r3, #12]
 8005108:	2201      	movs	r2, #1
 800510a:	4619      	mov	r1, r3
 800510c:	f7fd fe12 	bl	8002d34 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	7d9b      	ldrb	r3, [r3, #22]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d111      	bne.n	800513c <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8005118:	78fb      	ldrb	r3, [r7, #3]
 800511a:	091b      	lsrs	r3, r3, #4
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2204      	movs	r2, #4
 8005120:	4619      	mov	r1, r3
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f814 	bl	8005150 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8005128:	78fb      	ldrb	r3, [r7, #3]
 800512a:	f003 030f 	and.w	r3, r3, #15
 800512e:	b2db      	uxtb	r3, r3
 8005130:	2204      	movs	r2, #4
 8005132:	4619      	mov	r1, r3
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 f80b 	bl	8005150 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 800513a:	e005      	b.n	8005148 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 800513c:	78fb      	ldrb	r3, [r7, #3]
 800513e:	2208      	movs	r2, #8
 8005140:	4619      	mov	r1, r3
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f804 	bl	8005150 <lcd_write>
}
 8005148:	bf00      	nop
 800514a:	3708      	adds	r7, #8
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	460b      	mov	r3, r1
 800515a:	70fb      	strb	r3, [r7, #3]
 800515c:	4613      	mov	r3, r2
 800515e:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8005160:	2300      	movs	r3, #0
 8005162:	73fb      	strb	r3, [r7, #15]
 8005164:	e019      	b.n	800519a <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	7bfb      	ldrb	r3, [r7, #15]
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4413      	add	r3, r2
 8005170:	6818      	ldr	r0, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	7bfb      	ldrb	r3, [r7, #15]
 8005178:	005b      	lsls	r3, r3, #1
 800517a:	4413      	add	r3, r2
 800517c:	8819      	ldrh	r1, [r3, #0]
 800517e:	78fa      	ldrb	r2, [r7, #3]
 8005180:	7bfb      	ldrb	r3, [r7, #15]
 8005182:	fa42 f303 	asr.w	r3, r2, r3
 8005186:	b2db      	uxtb	r3, r3
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	b2db      	uxtb	r3, r3
 800518e:	461a      	mov	r2, r3
 8005190:	f7fd fdd0 	bl	8002d34 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8005194:	7bfb      	ldrb	r3, [r7, #15]
 8005196:	3301      	adds	r3, #1
 8005198:	73fb      	strb	r3, [r7, #15]
 800519a:	7bfa      	ldrb	r2, [r7, #15]
 800519c:	78bb      	ldrb	r3, [r7, #2]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d3e1      	bcc.n	8005166 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6918      	ldr	r0, [r3, #16]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	8a9b      	ldrh	r3, [r3, #20]
 80051aa:	2201      	movs	r2, #1
 80051ac:	4619      	mov	r1, r3
 80051ae:	f7fd fdc1 	bl	8002d34 <HAL_GPIO_WritePin>
	DELAY(1);
 80051b2:	2001      	movs	r0, #1
 80051b4:	f7fb fee8 	bl	8000f88 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6918      	ldr	r0, [r3, #16]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	8a9b      	ldrh	r3, [r3, #20]
 80051c0:	2200      	movs	r2, #0
 80051c2:	4619      	mov	r1, r3
 80051c4:	f7fd fdb6 	bl	8002d34 <HAL_GPIO_WritePin>
}
 80051c8:	bf00      	nop
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <arm_rfft_32_fast_init_f32>:
 80051d0:	b178      	cbz	r0, 80051f2 <arm_rfft_32_fast_init_f32+0x22>
 80051d2:	b430      	push	{r4, r5}
 80051d4:	4908      	ldr	r1, [pc, #32]	; (80051f8 <arm_rfft_32_fast_init_f32+0x28>)
 80051d6:	4a09      	ldr	r2, [pc, #36]	; (80051fc <arm_rfft_32_fast_init_f32+0x2c>)
 80051d8:	2310      	movs	r3, #16
 80051da:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80051de:	8003      	strh	r3, [r0, #0]
 80051e0:	2520      	movs	r5, #32
 80051e2:	2414      	movs	r4, #20
 80051e4:	4b06      	ldr	r3, [pc, #24]	; (8005200 <arm_rfft_32_fast_init_f32+0x30>)
 80051e6:	8205      	strh	r5, [r0, #16]
 80051e8:	8184      	strh	r4, [r0, #12]
 80051ea:	6143      	str	r3, [r0, #20]
 80051ec:	bc30      	pop	{r4, r5}
 80051ee:	2000      	movs	r0, #0
 80051f0:	4770      	bx	lr
 80051f2:	f04f 30ff 	mov.w	r0, #4294967295
 80051f6:	4770      	bx	lr
 80051f8:	08006d48 	.word	0x08006d48
 80051fc:	0800b680 	.word	0x0800b680
 8005200:	08014400 	.word	0x08014400

08005204 <arm_rfft_64_fast_init_f32>:
 8005204:	b178      	cbz	r0, 8005226 <arm_rfft_64_fast_init_f32+0x22>
 8005206:	b430      	push	{r4, r5}
 8005208:	4908      	ldr	r1, [pc, #32]	; (800522c <arm_rfft_64_fast_init_f32+0x28>)
 800520a:	4a09      	ldr	r2, [pc, #36]	; (8005230 <arm_rfft_64_fast_init_f32+0x2c>)
 800520c:	2320      	movs	r3, #32
 800520e:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8005212:	8003      	strh	r3, [r0, #0]
 8005214:	2540      	movs	r5, #64	; 0x40
 8005216:	2430      	movs	r4, #48	; 0x30
 8005218:	4b06      	ldr	r3, [pc, #24]	; (8005234 <arm_rfft_64_fast_init_f32+0x30>)
 800521a:	8205      	strh	r5, [r0, #16]
 800521c:	8184      	strh	r4, [r0, #12]
 800521e:	6143      	str	r3, [r0, #20]
 8005220:	bc30      	pop	{r4, r5}
 8005222:	2000      	movs	r0, #0
 8005224:	4770      	bx	lr
 8005226:	f04f 30ff 	mov.w	r0, #4294967295
 800522a:	4770      	bx	lr
 800522c:	08008ea0 	.word	0x08008ea0
 8005230:	0800ff00 	.word	0x0800ff00
 8005234:	08018c80 	.word	0x08018c80

08005238 <arm_rfft_256_fast_init_f32>:
 8005238:	b180      	cbz	r0, 800525c <arm_rfft_256_fast_init_f32+0x24>
 800523a:	b430      	push	{r4, r5}
 800523c:	4909      	ldr	r1, [pc, #36]	; (8005264 <arm_rfft_256_fast_init_f32+0x2c>)
 800523e:	4a0a      	ldr	r2, [pc, #40]	; (8005268 <arm_rfft_256_fast_init_f32+0x30>)
 8005240:	2380      	movs	r3, #128	; 0x80
 8005242:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8005246:	8003      	strh	r3, [r0, #0]
 8005248:	f44f 7580 	mov.w	r5, #256	; 0x100
 800524c:	24d0      	movs	r4, #208	; 0xd0
 800524e:	4b07      	ldr	r3, [pc, #28]	; (800526c <arm_rfft_256_fast_init_f32+0x34>)
 8005250:	8205      	strh	r5, [r0, #16]
 8005252:	8184      	strh	r4, [r0, #12]
 8005254:	6143      	str	r3, [r0, #20]
 8005256:	bc30      	pop	{r4, r5}
 8005258:	2000      	movs	r0, #0
 800525a:	4770      	bx	lr
 800525c:	f04f 30ff 	mov.w	r0, #4294967295
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	08006ba8 	.word	0x08006ba8
 8005268:	0800b280 	.word	0x0800b280
 800526c:	08014000 	.word	0x08014000

08005270 <arm_rfft_512_fast_init_f32>:
 8005270:	b190      	cbz	r0, 8005298 <arm_rfft_512_fast_init_f32+0x28>
 8005272:	b430      	push	{r4, r5}
 8005274:	490a      	ldr	r1, [pc, #40]	; (80052a0 <arm_rfft_512_fast_init_f32+0x30>)
 8005276:	4a0b      	ldr	r2, [pc, #44]	; (80052a4 <arm_rfft_512_fast_init_f32+0x34>)
 8005278:	f44f 7380 	mov.w	r3, #256	; 0x100
 800527c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8005280:	8003      	strh	r3, [r0, #0]
 8005282:	f44f 7500 	mov.w	r5, #512	; 0x200
 8005286:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 800528a:	4b07      	ldr	r3, [pc, #28]	; (80052a8 <arm_rfft_512_fast_init_f32+0x38>)
 800528c:	8205      	strh	r5, [r0, #16]
 800528e:	8184      	strh	r4, [r0, #12]
 8005290:	6143      	str	r3, [r0, #20]
 8005292:	bc30      	pop	{r4, r5}
 8005294:	2000      	movs	r0, #0
 8005296:	4770      	bx	lr
 8005298:	f04f 30ff 	mov.w	r0, #4294967295
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	08008b30 	.word	0x08008b30
 80052a4:	0800f700 	.word	0x0800f700
 80052a8:	08018480 	.word	0x08018480

080052ac <arm_rfft_1024_fast_init_f32>:
 80052ac:	b190      	cbz	r0, 80052d4 <arm_rfft_1024_fast_init_f32+0x28>
 80052ae:	b430      	push	{r4, r5}
 80052b0:	490a      	ldr	r1, [pc, #40]	; (80052dc <arm_rfft_1024_fast_init_f32+0x30>)
 80052b2:	4a0b      	ldr	r2, [pc, #44]	; (80052e0 <arm_rfft_1024_fast_init_f32+0x34>)
 80052b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052b8:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80052bc:	8003      	strh	r3, [r0, #0]
 80052be:	f44f 6580 	mov.w	r5, #1024	; 0x400
 80052c2:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 80052c6:	4b07      	ldr	r3, [pc, #28]	; (80052e4 <arm_rfft_1024_fast_init_f32+0x38>)
 80052c8:	8205      	strh	r5, [r0, #16]
 80052ca:	8184      	strh	r4, [r0, #12]
 80052cc:	6143      	str	r3, [r0, #20]
 80052ce:	bc30      	pop	{r4, r5}
 80052d0:	2000      	movs	r0, #0
 80052d2:	4770      	bx	lr
 80052d4:	f04f 30ff 	mov.w	r0, #4294967295
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	08008f00 	.word	0x08008f00
 80052e0:	08010000 	.word	0x08010000
 80052e4:	08011000 	.word	0x08011000

080052e8 <arm_rfft_2048_fast_init_f32>:
 80052e8:	b190      	cbz	r0, 8005310 <arm_rfft_2048_fast_init_f32+0x28>
 80052ea:	b430      	push	{r4, r5}
 80052ec:	490a      	ldr	r1, [pc, #40]	; (8005318 <arm_rfft_2048_fast_init_f32+0x30>)
 80052ee:	4a0b      	ldr	r2, [pc, #44]	; (800531c <arm_rfft_2048_fast_init_f32+0x34>)
 80052f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052f4:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80052f8:	8003      	strh	r3, [r0, #0]
 80052fa:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80052fe:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8005302:	4b07      	ldr	r3, [pc, #28]	; (8005320 <arm_rfft_2048_fast_init_f32+0x38>)
 8005304:	8205      	strh	r5, [r0, #16]
 8005306:	8184      	strh	r4, [r0, #12]
 8005308:	6143      	str	r3, [r0, #20]
 800530a:	bc30      	pop	{r4, r5}
 800530c:	2000      	movs	r0, #0
 800530e:	4770      	bx	lr
 8005310:	f04f 30ff 	mov.w	r0, #4294967295
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	08005d98 	.word	0x08005d98
 800531c:	08009280 	.word	0x08009280
 8005320:	08012000 	.word	0x08012000

08005324 <arm_rfft_4096_fast_init_f32>:
 8005324:	b190      	cbz	r0, 800534c <arm_rfft_4096_fast_init_f32+0x28>
 8005326:	b430      	push	{r4, r5}
 8005328:	490a      	ldr	r1, [pc, #40]	; (8005354 <arm_rfft_4096_fast_init_f32+0x30>)
 800532a:	4a0b      	ldr	r2, [pc, #44]	; (8005358 <arm_rfft_4096_fast_init_f32+0x34>)
 800532c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005330:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8005334:	8003      	strh	r3, [r0, #0]
 8005336:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 800533a:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 800533e:	4b07      	ldr	r3, [pc, #28]	; (800535c <arm_rfft_4096_fast_init_f32+0x38>)
 8005340:	8205      	strh	r5, [r0, #16]
 8005342:	8184      	strh	r4, [r0, #12]
 8005344:	6143      	str	r3, [r0, #20]
 8005346:	bc30      	pop	{r4, r5}
 8005348:	2000      	movs	r0, #0
 800534a:	4770      	bx	lr
 800534c:	f04f 30ff 	mov.w	r0, #4294967295
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	08006d70 	.word	0x08006d70
 8005358:	0800b700 	.word	0x0800b700
 800535c:	08014480 	.word	0x08014480

08005360 <arm_rfft_fast_init_f32>:
 8005360:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005364:	d01f      	beq.n	80053a6 <arm_rfft_fast_init_f32+0x46>
 8005366:	d90b      	bls.n	8005380 <arm_rfft_fast_init_f32+0x20>
 8005368:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800536c:	d019      	beq.n	80053a2 <arm_rfft_fast_init_f32+0x42>
 800536e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8005372:	d012      	beq.n	800539a <arm_rfft_fast_init_f32+0x3a>
 8005374:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005378:	d00d      	beq.n	8005396 <arm_rfft_fast_init_f32+0x36>
 800537a:	f04f 30ff 	mov.w	r0, #4294967295
 800537e:	4770      	bx	lr
 8005380:	2940      	cmp	r1, #64	; 0x40
 8005382:	d00c      	beq.n	800539e <arm_rfft_fast_init_f32+0x3e>
 8005384:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8005388:	d003      	beq.n	8005392 <arm_rfft_fast_init_f32+0x32>
 800538a:	2920      	cmp	r1, #32
 800538c:	d1f5      	bne.n	800537a <arm_rfft_fast_init_f32+0x1a>
 800538e:	4b07      	ldr	r3, [pc, #28]	; (80053ac <arm_rfft_fast_init_f32+0x4c>)
 8005390:	4718      	bx	r3
 8005392:	4b07      	ldr	r3, [pc, #28]	; (80053b0 <arm_rfft_fast_init_f32+0x50>)
 8005394:	4718      	bx	r3
 8005396:	4b07      	ldr	r3, [pc, #28]	; (80053b4 <arm_rfft_fast_init_f32+0x54>)
 8005398:	4718      	bx	r3
 800539a:	4b07      	ldr	r3, [pc, #28]	; (80053b8 <arm_rfft_fast_init_f32+0x58>)
 800539c:	4718      	bx	r3
 800539e:	4b07      	ldr	r3, [pc, #28]	; (80053bc <arm_rfft_fast_init_f32+0x5c>)
 80053a0:	e7f6      	b.n	8005390 <arm_rfft_fast_init_f32+0x30>
 80053a2:	4b07      	ldr	r3, [pc, #28]	; (80053c0 <arm_rfft_fast_init_f32+0x60>)
 80053a4:	e7f4      	b.n	8005390 <arm_rfft_fast_init_f32+0x30>
 80053a6:	4b07      	ldr	r3, [pc, #28]	; (80053c4 <arm_rfft_fast_init_f32+0x64>)
 80053a8:	e7f2      	b.n	8005390 <arm_rfft_fast_init_f32+0x30>
 80053aa:	bf00      	nop
 80053ac:	080051d1 	.word	0x080051d1
 80053b0:	08005239 	.word	0x08005239
 80053b4:	080052ad 	.word	0x080052ad
 80053b8:	08005325 	.word	0x08005325
 80053bc:	08005205 	.word	0x08005205
 80053c0:	080052e9 	.word	0x080052e9
 80053c4:	08005271 	.word	0x08005271

080053c8 <__errno>:
 80053c8:	4b01      	ldr	r3, [pc, #4]	; (80053d0 <__errno+0x8>)
 80053ca:	6818      	ldr	r0, [r3, #0]
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	2000000c 	.word	0x2000000c

080053d4 <__libc_init_array>:
 80053d4:	b570      	push	{r4, r5, r6, lr}
 80053d6:	4d0d      	ldr	r5, [pc, #52]	; (800540c <__libc_init_array+0x38>)
 80053d8:	4c0d      	ldr	r4, [pc, #52]	; (8005410 <__libc_init_array+0x3c>)
 80053da:	1b64      	subs	r4, r4, r5
 80053dc:	10a4      	asrs	r4, r4, #2
 80053de:	2600      	movs	r6, #0
 80053e0:	42a6      	cmp	r6, r4
 80053e2:	d109      	bne.n	80053f8 <__libc_init_array+0x24>
 80053e4:	4d0b      	ldr	r5, [pc, #44]	; (8005414 <__libc_init_array+0x40>)
 80053e6:	4c0c      	ldr	r4, [pc, #48]	; (8005418 <__libc_init_array+0x44>)
 80053e8:	f000 fc8e 	bl	8005d08 <_init>
 80053ec:	1b64      	subs	r4, r4, r5
 80053ee:	10a4      	asrs	r4, r4, #2
 80053f0:	2600      	movs	r6, #0
 80053f2:	42a6      	cmp	r6, r4
 80053f4:	d105      	bne.n	8005402 <__libc_init_array+0x2e>
 80053f6:	bd70      	pop	{r4, r5, r6, pc}
 80053f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80053fc:	4798      	blx	r3
 80053fe:	3601      	adds	r6, #1
 8005400:	e7ee      	b.n	80053e0 <__libc_init_array+0xc>
 8005402:	f855 3b04 	ldr.w	r3, [r5], #4
 8005406:	4798      	blx	r3
 8005408:	3601      	adds	r6, #1
 800540a:	e7f2      	b.n	80053f2 <__libc_init_array+0x1e>
 800540c:	08018dbc 	.word	0x08018dbc
 8005410:	08018dbc 	.word	0x08018dbc
 8005414:	08018dbc 	.word	0x08018dbc
 8005418:	08018dc0 	.word	0x08018dc0

0800541c <memset>:
 800541c:	4402      	add	r2, r0
 800541e:	4603      	mov	r3, r0
 8005420:	4293      	cmp	r3, r2
 8005422:	d100      	bne.n	8005426 <memset+0xa>
 8005424:	4770      	bx	lr
 8005426:	f803 1b01 	strb.w	r1, [r3], #1
 800542a:	e7f9      	b.n	8005420 <memset+0x4>

0800542c <siprintf>:
 800542c:	b40e      	push	{r1, r2, r3}
 800542e:	b500      	push	{lr}
 8005430:	b09c      	sub	sp, #112	; 0x70
 8005432:	ab1d      	add	r3, sp, #116	; 0x74
 8005434:	9002      	str	r0, [sp, #8]
 8005436:	9006      	str	r0, [sp, #24]
 8005438:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800543c:	4809      	ldr	r0, [pc, #36]	; (8005464 <siprintf+0x38>)
 800543e:	9107      	str	r1, [sp, #28]
 8005440:	9104      	str	r1, [sp, #16]
 8005442:	4909      	ldr	r1, [pc, #36]	; (8005468 <siprintf+0x3c>)
 8005444:	f853 2b04 	ldr.w	r2, [r3], #4
 8005448:	9105      	str	r1, [sp, #20]
 800544a:	6800      	ldr	r0, [r0, #0]
 800544c:	9301      	str	r3, [sp, #4]
 800544e:	a902      	add	r1, sp, #8
 8005450:	f000 f868 	bl	8005524 <_svfiprintf_r>
 8005454:	9b02      	ldr	r3, [sp, #8]
 8005456:	2200      	movs	r2, #0
 8005458:	701a      	strb	r2, [r3, #0]
 800545a:	b01c      	add	sp, #112	; 0x70
 800545c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005460:	b003      	add	sp, #12
 8005462:	4770      	bx	lr
 8005464:	2000000c 	.word	0x2000000c
 8005468:	ffff0208 	.word	0xffff0208

0800546c <__ssputs_r>:
 800546c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005470:	688e      	ldr	r6, [r1, #8]
 8005472:	429e      	cmp	r6, r3
 8005474:	4682      	mov	sl, r0
 8005476:	460c      	mov	r4, r1
 8005478:	4690      	mov	r8, r2
 800547a:	461f      	mov	r7, r3
 800547c:	d838      	bhi.n	80054f0 <__ssputs_r+0x84>
 800547e:	898a      	ldrh	r2, [r1, #12]
 8005480:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005484:	d032      	beq.n	80054ec <__ssputs_r+0x80>
 8005486:	6825      	ldr	r5, [r4, #0]
 8005488:	6909      	ldr	r1, [r1, #16]
 800548a:	eba5 0901 	sub.w	r9, r5, r1
 800548e:	6965      	ldr	r5, [r4, #20]
 8005490:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005494:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005498:	3301      	adds	r3, #1
 800549a:	444b      	add	r3, r9
 800549c:	106d      	asrs	r5, r5, #1
 800549e:	429d      	cmp	r5, r3
 80054a0:	bf38      	it	cc
 80054a2:	461d      	movcc	r5, r3
 80054a4:	0553      	lsls	r3, r2, #21
 80054a6:	d531      	bpl.n	800550c <__ssputs_r+0xa0>
 80054a8:	4629      	mov	r1, r5
 80054aa:	f000 fb63 	bl	8005b74 <_malloc_r>
 80054ae:	4606      	mov	r6, r0
 80054b0:	b950      	cbnz	r0, 80054c8 <__ssputs_r+0x5c>
 80054b2:	230c      	movs	r3, #12
 80054b4:	f8ca 3000 	str.w	r3, [sl]
 80054b8:	89a3      	ldrh	r3, [r4, #12]
 80054ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054be:	81a3      	strh	r3, [r4, #12]
 80054c0:	f04f 30ff 	mov.w	r0, #4294967295
 80054c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054c8:	6921      	ldr	r1, [r4, #16]
 80054ca:	464a      	mov	r2, r9
 80054cc:	f000 fabe 	bl	8005a4c <memcpy>
 80054d0:	89a3      	ldrh	r3, [r4, #12]
 80054d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80054d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054da:	81a3      	strh	r3, [r4, #12]
 80054dc:	6126      	str	r6, [r4, #16]
 80054de:	6165      	str	r5, [r4, #20]
 80054e0:	444e      	add	r6, r9
 80054e2:	eba5 0509 	sub.w	r5, r5, r9
 80054e6:	6026      	str	r6, [r4, #0]
 80054e8:	60a5      	str	r5, [r4, #8]
 80054ea:	463e      	mov	r6, r7
 80054ec:	42be      	cmp	r6, r7
 80054ee:	d900      	bls.n	80054f2 <__ssputs_r+0x86>
 80054f0:	463e      	mov	r6, r7
 80054f2:	6820      	ldr	r0, [r4, #0]
 80054f4:	4632      	mov	r2, r6
 80054f6:	4641      	mov	r1, r8
 80054f8:	f000 fab6 	bl	8005a68 <memmove>
 80054fc:	68a3      	ldr	r3, [r4, #8]
 80054fe:	1b9b      	subs	r3, r3, r6
 8005500:	60a3      	str	r3, [r4, #8]
 8005502:	6823      	ldr	r3, [r4, #0]
 8005504:	4433      	add	r3, r6
 8005506:	6023      	str	r3, [r4, #0]
 8005508:	2000      	movs	r0, #0
 800550a:	e7db      	b.n	80054c4 <__ssputs_r+0x58>
 800550c:	462a      	mov	r2, r5
 800550e:	f000 fba5 	bl	8005c5c <_realloc_r>
 8005512:	4606      	mov	r6, r0
 8005514:	2800      	cmp	r0, #0
 8005516:	d1e1      	bne.n	80054dc <__ssputs_r+0x70>
 8005518:	6921      	ldr	r1, [r4, #16]
 800551a:	4650      	mov	r0, sl
 800551c:	f000 fabe 	bl	8005a9c <_free_r>
 8005520:	e7c7      	b.n	80054b2 <__ssputs_r+0x46>
	...

08005524 <_svfiprintf_r>:
 8005524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005528:	4698      	mov	r8, r3
 800552a:	898b      	ldrh	r3, [r1, #12]
 800552c:	061b      	lsls	r3, r3, #24
 800552e:	b09d      	sub	sp, #116	; 0x74
 8005530:	4607      	mov	r7, r0
 8005532:	460d      	mov	r5, r1
 8005534:	4614      	mov	r4, r2
 8005536:	d50e      	bpl.n	8005556 <_svfiprintf_r+0x32>
 8005538:	690b      	ldr	r3, [r1, #16]
 800553a:	b963      	cbnz	r3, 8005556 <_svfiprintf_r+0x32>
 800553c:	2140      	movs	r1, #64	; 0x40
 800553e:	f000 fb19 	bl	8005b74 <_malloc_r>
 8005542:	6028      	str	r0, [r5, #0]
 8005544:	6128      	str	r0, [r5, #16]
 8005546:	b920      	cbnz	r0, 8005552 <_svfiprintf_r+0x2e>
 8005548:	230c      	movs	r3, #12
 800554a:	603b      	str	r3, [r7, #0]
 800554c:	f04f 30ff 	mov.w	r0, #4294967295
 8005550:	e0d1      	b.n	80056f6 <_svfiprintf_r+0x1d2>
 8005552:	2340      	movs	r3, #64	; 0x40
 8005554:	616b      	str	r3, [r5, #20]
 8005556:	2300      	movs	r3, #0
 8005558:	9309      	str	r3, [sp, #36]	; 0x24
 800555a:	2320      	movs	r3, #32
 800555c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005560:	f8cd 800c 	str.w	r8, [sp, #12]
 8005564:	2330      	movs	r3, #48	; 0x30
 8005566:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005710 <_svfiprintf_r+0x1ec>
 800556a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800556e:	f04f 0901 	mov.w	r9, #1
 8005572:	4623      	mov	r3, r4
 8005574:	469a      	mov	sl, r3
 8005576:	f813 2b01 	ldrb.w	r2, [r3], #1
 800557a:	b10a      	cbz	r2, 8005580 <_svfiprintf_r+0x5c>
 800557c:	2a25      	cmp	r2, #37	; 0x25
 800557e:	d1f9      	bne.n	8005574 <_svfiprintf_r+0x50>
 8005580:	ebba 0b04 	subs.w	fp, sl, r4
 8005584:	d00b      	beq.n	800559e <_svfiprintf_r+0x7a>
 8005586:	465b      	mov	r3, fp
 8005588:	4622      	mov	r2, r4
 800558a:	4629      	mov	r1, r5
 800558c:	4638      	mov	r0, r7
 800558e:	f7ff ff6d 	bl	800546c <__ssputs_r>
 8005592:	3001      	adds	r0, #1
 8005594:	f000 80aa 	beq.w	80056ec <_svfiprintf_r+0x1c8>
 8005598:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800559a:	445a      	add	r2, fp
 800559c:	9209      	str	r2, [sp, #36]	; 0x24
 800559e:	f89a 3000 	ldrb.w	r3, [sl]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f000 80a2 	beq.w	80056ec <_svfiprintf_r+0x1c8>
 80055a8:	2300      	movs	r3, #0
 80055aa:	f04f 32ff 	mov.w	r2, #4294967295
 80055ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055b2:	f10a 0a01 	add.w	sl, sl, #1
 80055b6:	9304      	str	r3, [sp, #16]
 80055b8:	9307      	str	r3, [sp, #28]
 80055ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055be:	931a      	str	r3, [sp, #104]	; 0x68
 80055c0:	4654      	mov	r4, sl
 80055c2:	2205      	movs	r2, #5
 80055c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055c8:	4851      	ldr	r0, [pc, #324]	; (8005710 <_svfiprintf_r+0x1ec>)
 80055ca:	f7fa fe09 	bl	80001e0 <memchr>
 80055ce:	9a04      	ldr	r2, [sp, #16]
 80055d0:	b9d8      	cbnz	r0, 800560a <_svfiprintf_r+0xe6>
 80055d2:	06d0      	lsls	r0, r2, #27
 80055d4:	bf44      	itt	mi
 80055d6:	2320      	movmi	r3, #32
 80055d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055dc:	0711      	lsls	r1, r2, #28
 80055de:	bf44      	itt	mi
 80055e0:	232b      	movmi	r3, #43	; 0x2b
 80055e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055e6:	f89a 3000 	ldrb.w	r3, [sl]
 80055ea:	2b2a      	cmp	r3, #42	; 0x2a
 80055ec:	d015      	beq.n	800561a <_svfiprintf_r+0xf6>
 80055ee:	9a07      	ldr	r2, [sp, #28]
 80055f0:	4654      	mov	r4, sl
 80055f2:	2000      	movs	r0, #0
 80055f4:	f04f 0c0a 	mov.w	ip, #10
 80055f8:	4621      	mov	r1, r4
 80055fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055fe:	3b30      	subs	r3, #48	; 0x30
 8005600:	2b09      	cmp	r3, #9
 8005602:	d94e      	bls.n	80056a2 <_svfiprintf_r+0x17e>
 8005604:	b1b0      	cbz	r0, 8005634 <_svfiprintf_r+0x110>
 8005606:	9207      	str	r2, [sp, #28]
 8005608:	e014      	b.n	8005634 <_svfiprintf_r+0x110>
 800560a:	eba0 0308 	sub.w	r3, r0, r8
 800560e:	fa09 f303 	lsl.w	r3, r9, r3
 8005612:	4313      	orrs	r3, r2
 8005614:	9304      	str	r3, [sp, #16]
 8005616:	46a2      	mov	sl, r4
 8005618:	e7d2      	b.n	80055c0 <_svfiprintf_r+0x9c>
 800561a:	9b03      	ldr	r3, [sp, #12]
 800561c:	1d19      	adds	r1, r3, #4
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	9103      	str	r1, [sp, #12]
 8005622:	2b00      	cmp	r3, #0
 8005624:	bfbb      	ittet	lt
 8005626:	425b      	neglt	r3, r3
 8005628:	f042 0202 	orrlt.w	r2, r2, #2
 800562c:	9307      	strge	r3, [sp, #28]
 800562e:	9307      	strlt	r3, [sp, #28]
 8005630:	bfb8      	it	lt
 8005632:	9204      	strlt	r2, [sp, #16]
 8005634:	7823      	ldrb	r3, [r4, #0]
 8005636:	2b2e      	cmp	r3, #46	; 0x2e
 8005638:	d10c      	bne.n	8005654 <_svfiprintf_r+0x130>
 800563a:	7863      	ldrb	r3, [r4, #1]
 800563c:	2b2a      	cmp	r3, #42	; 0x2a
 800563e:	d135      	bne.n	80056ac <_svfiprintf_r+0x188>
 8005640:	9b03      	ldr	r3, [sp, #12]
 8005642:	1d1a      	adds	r2, r3, #4
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	9203      	str	r2, [sp, #12]
 8005648:	2b00      	cmp	r3, #0
 800564a:	bfb8      	it	lt
 800564c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005650:	3402      	adds	r4, #2
 8005652:	9305      	str	r3, [sp, #20]
 8005654:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005720 <_svfiprintf_r+0x1fc>
 8005658:	7821      	ldrb	r1, [r4, #0]
 800565a:	2203      	movs	r2, #3
 800565c:	4650      	mov	r0, sl
 800565e:	f7fa fdbf 	bl	80001e0 <memchr>
 8005662:	b140      	cbz	r0, 8005676 <_svfiprintf_r+0x152>
 8005664:	2340      	movs	r3, #64	; 0x40
 8005666:	eba0 000a 	sub.w	r0, r0, sl
 800566a:	fa03 f000 	lsl.w	r0, r3, r0
 800566e:	9b04      	ldr	r3, [sp, #16]
 8005670:	4303      	orrs	r3, r0
 8005672:	3401      	adds	r4, #1
 8005674:	9304      	str	r3, [sp, #16]
 8005676:	f814 1b01 	ldrb.w	r1, [r4], #1
 800567a:	4826      	ldr	r0, [pc, #152]	; (8005714 <_svfiprintf_r+0x1f0>)
 800567c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005680:	2206      	movs	r2, #6
 8005682:	f7fa fdad 	bl	80001e0 <memchr>
 8005686:	2800      	cmp	r0, #0
 8005688:	d038      	beq.n	80056fc <_svfiprintf_r+0x1d8>
 800568a:	4b23      	ldr	r3, [pc, #140]	; (8005718 <_svfiprintf_r+0x1f4>)
 800568c:	bb1b      	cbnz	r3, 80056d6 <_svfiprintf_r+0x1b2>
 800568e:	9b03      	ldr	r3, [sp, #12]
 8005690:	3307      	adds	r3, #7
 8005692:	f023 0307 	bic.w	r3, r3, #7
 8005696:	3308      	adds	r3, #8
 8005698:	9303      	str	r3, [sp, #12]
 800569a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800569c:	4433      	add	r3, r6
 800569e:	9309      	str	r3, [sp, #36]	; 0x24
 80056a0:	e767      	b.n	8005572 <_svfiprintf_r+0x4e>
 80056a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80056a6:	460c      	mov	r4, r1
 80056a8:	2001      	movs	r0, #1
 80056aa:	e7a5      	b.n	80055f8 <_svfiprintf_r+0xd4>
 80056ac:	2300      	movs	r3, #0
 80056ae:	3401      	adds	r4, #1
 80056b0:	9305      	str	r3, [sp, #20]
 80056b2:	4619      	mov	r1, r3
 80056b4:	f04f 0c0a 	mov.w	ip, #10
 80056b8:	4620      	mov	r0, r4
 80056ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056be:	3a30      	subs	r2, #48	; 0x30
 80056c0:	2a09      	cmp	r2, #9
 80056c2:	d903      	bls.n	80056cc <_svfiprintf_r+0x1a8>
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d0c5      	beq.n	8005654 <_svfiprintf_r+0x130>
 80056c8:	9105      	str	r1, [sp, #20]
 80056ca:	e7c3      	b.n	8005654 <_svfiprintf_r+0x130>
 80056cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80056d0:	4604      	mov	r4, r0
 80056d2:	2301      	movs	r3, #1
 80056d4:	e7f0      	b.n	80056b8 <_svfiprintf_r+0x194>
 80056d6:	ab03      	add	r3, sp, #12
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	462a      	mov	r2, r5
 80056dc:	4b0f      	ldr	r3, [pc, #60]	; (800571c <_svfiprintf_r+0x1f8>)
 80056de:	a904      	add	r1, sp, #16
 80056e0:	4638      	mov	r0, r7
 80056e2:	f3af 8000 	nop.w
 80056e6:	1c42      	adds	r2, r0, #1
 80056e8:	4606      	mov	r6, r0
 80056ea:	d1d6      	bne.n	800569a <_svfiprintf_r+0x176>
 80056ec:	89ab      	ldrh	r3, [r5, #12]
 80056ee:	065b      	lsls	r3, r3, #25
 80056f0:	f53f af2c 	bmi.w	800554c <_svfiprintf_r+0x28>
 80056f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056f6:	b01d      	add	sp, #116	; 0x74
 80056f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056fc:	ab03      	add	r3, sp, #12
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	462a      	mov	r2, r5
 8005702:	4b06      	ldr	r3, [pc, #24]	; (800571c <_svfiprintf_r+0x1f8>)
 8005704:	a904      	add	r1, sp, #16
 8005706:	4638      	mov	r0, r7
 8005708:	f000 f87a 	bl	8005800 <_printf_i>
 800570c:	e7eb      	b.n	80056e6 <_svfiprintf_r+0x1c2>
 800570e:	bf00      	nop
 8005710:	08018d80 	.word	0x08018d80
 8005714:	08018d8a 	.word	0x08018d8a
 8005718:	00000000 	.word	0x00000000
 800571c:	0800546d 	.word	0x0800546d
 8005720:	08018d86 	.word	0x08018d86

08005724 <_printf_common>:
 8005724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005728:	4616      	mov	r6, r2
 800572a:	4699      	mov	r9, r3
 800572c:	688a      	ldr	r2, [r1, #8]
 800572e:	690b      	ldr	r3, [r1, #16]
 8005730:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005734:	4293      	cmp	r3, r2
 8005736:	bfb8      	it	lt
 8005738:	4613      	movlt	r3, r2
 800573a:	6033      	str	r3, [r6, #0]
 800573c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005740:	4607      	mov	r7, r0
 8005742:	460c      	mov	r4, r1
 8005744:	b10a      	cbz	r2, 800574a <_printf_common+0x26>
 8005746:	3301      	adds	r3, #1
 8005748:	6033      	str	r3, [r6, #0]
 800574a:	6823      	ldr	r3, [r4, #0]
 800574c:	0699      	lsls	r1, r3, #26
 800574e:	bf42      	ittt	mi
 8005750:	6833      	ldrmi	r3, [r6, #0]
 8005752:	3302      	addmi	r3, #2
 8005754:	6033      	strmi	r3, [r6, #0]
 8005756:	6825      	ldr	r5, [r4, #0]
 8005758:	f015 0506 	ands.w	r5, r5, #6
 800575c:	d106      	bne.n	800576c <_printf_common+0x48>
 800575e:	f104 0a19 	add.w	sl, r4, #25
 8005762:	68e3      	ldr	r3, [r4, #12]
 8005764:	6832      	ldr	r2, [r6, #0]
 8005766:	1a9b      	subs	r3, r3, r2
 8005768:	42ab      	cmp	r3, r5
 800576a:	dc26      	bgt.n	80057ba <_printf_common+0x96>
 800576c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005770:	1e13      	subs	r3, r2, #0
 8005772:	6822      	ldr	r2, [r4, #0]
 8005774:	bf18      	it	ne
 8005776:	2301      	movne	r3, #1
 8005778:	0692      	lsls	r2, r2, #26
 800577a:	d42b      	bmi.n	80057d4 <_printf_common+0xb0>
 800577c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005780:	4649      	mov	r1, r9
 8005782:	4638      	mov	r0, r7
 8005784:	47c0      	blx	r8
 8005786:	3001      	adds	r0, #1
 8005788:	d01e      	beq.n	80057c8 <_printf_common+0xa4>
 800578a:	6823      	ldr	r3, [r4, #0]
 800578c:	68e5      	ldr	r5, [r4, #12]
 800578e:	6832      	ldr	r2, [r6, #0]
 8005790:	f003 0306 	and.w	r3, r3, #6
 8005794:	2b04      	cmp	r3, #4
 8005796:	bf08      	it	eq
 8005798:	1aad      	subeq	r5, r5, r2
 800579a:	68a3      	ldr	r3, [r4, #8]
 800579c:	6922      	ldr	r2, [r4, #16]
 800579e:	bf0c      	ite	eq
 80057a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057a4:	2500      	movne	r5, #0
 80057a6:	4293      	cmp	r3, r2
 80057a8:	bfc4      	itt	gt
 80057aa:	1a9b      	subgt	r3, r3, r2
 80057ac:	18ed      	addgt	r5, r5, r3
 80057ae:	2600      	movs	r6, #0
 80057b0:	341a      	adds	r4, #26
 80057b2:	42b5      	cmp	r5, r6
 80057b4:	d11a      	bne.n	80057ec <_printf_common+0xc8>
 80057b6:	2000      	movs	r0, #0
 80057b8:	e008      	b.n	80057cc <_printf_common+0xa8>
 80057ba:	2301      	movs	r3, #1
 80057bc:	4652      	mov	r2, sl
 80057be:	4649      	mov	r1, r9
 80057c0:	4638      	mov	r0, r7
 80057c2:	47c0      	blx	r8
 80057c4:	3001      	adds	r0, #1
 80057c6:	d103      	bne.n	80057d0 <_printf_common+0xac>
 80057c8:	f04f 30ff 	mov.w	r0, #4294967295
 80057cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057d0:	3501      	adds	r5, #1
 80057d2:	e7c6      	b.n	8005762 <_printf_common+0x3e>
 80057d4:	18e1      	adds	r1, r4, r3
 80057d6:	1c5a      	adds	r2, r3, #1
 80057d8:	2030      	movs	r0, #48	; 0x30
 80057da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057de:	4422      	add	r2, r4
 80057e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057e8:	3302      	adds	r3, #2
 80057ea:	e7c7      	b.n	800577c <_printf_common+0x58>
 80057ec:	2301      	movs	r3, #1
 80057ee:	4622      	mov	r2, r4
 80057f0:	4649      	mov	r1, r9
 80057f2:	4638      	mov	r0, r7
 80057f4:	47c0      	blx	r8
 80057f6:	3001      	adds	r0, #1
 80057f8:	d0e6      	beq.n	80057c8 <_printf_common+0xa4>
 80057fa:	3601      	adds	r6, #1
 80057fc:	e7d9      	b.n	80057b2 <_printf_common+0x8e>
	...

08005800 <_printf_i>:
 8005800:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005804:	7e0f      	ldrb	r7, [r1, #24]
 8005806:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005808:	2f78      	cmp	r7, #120	; 0x78
 800580a:	4691      	mov	r9, r2
 800580c:	4680      	mov	r8, r0
 800580e:	460c      	mov	r4, r1
 8005810:	469a      	mov	sl, r3
 8005812:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005816:	d807      	bhi.n	8005828 <_printf_i+0x28>
 8005818:	2f62      	cmp	r7, #98	; 0x62
 800581a:	d80a      	bhi.n	8005832 <_printf_i+0x32>
 800581c:	2f00      	cmp	r7, #0
 800581e:	f000 80d8 	beq.w	80059d2 <_printf_i+0x1d2>
 8005822:	2f58      	cmp	r7, #88	; 0x58
 8005824:	f000 80a3 	beq.w	800596e <_printf_i+0x16e>
 8005828:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800582c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005830:	e03a      	b.n	80058a8 <_printf_i+0xa8>
 8005832:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005836:	2b15      	cmp	r3, #21
 8005838:	d8f6      	bhi.n	8005828 <_printf_i+0x28>
 800583a:	a101      	add	r1, pc, #4	; (adr r1, 8005840 <_printf_i+0x40>)
 800583c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005840:	08005899 	.word	0x08005899
 8005844:	080058ad 	.word	0x080058ad
 8005848:	08005829 	.word	0x08005829
 800584c:	08005829 	.word	0x08005829
 8005850:	08005829 	.word	0x08005829
 8005854:	08005829 	.word	0x08005829
 8005858:	080058ad 	.word	0x080058ad
 800585c:	08005829 	.word	0x08005829
 8005860:	08005829 	.word	0x08005829
 8005864:	08005829 	.word	0x08005829
 8005868:	08005829 	.word	0x08005829
 800586c:	080059b9 	.word	0x080059b9
 8005870:	080058dd 	.word	0x080058dd
 8005874:	0800599b 	.word	0x0800599b
 8005878:	08005829 	.word	0x08005829
 800587c:	08005829 	.word	0x08005829
 8005880:	080059db 	.word	0x080059db
 8005884:	08005829 	.word	0x08005829
 8005888:	080058dd 	.word	0x080058dd
 800588c:	08005829 	.word	0x08005829
 8005890:	08005829 	.word	0x08005829
 8005894:	080059a3 	.word	0x080059a3
 8005898:	682b      	ldr	r3, [r5, #0]
 800589a:	1d1a      	adds	r2, r3, #4
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	602a      	str	r2, [r5, #0]
 80058a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058a8:	2301      	movs	r3, #1
 80058aa:	e0a3      	b.n	80059f4 <_printf_i+0x1f4>
 80058ac:	6820      	ldr	r0, [r4, #0]
 80058ae:	6829      	ldr	r1, [r5, #0]
 80058b0:	0606      	lsls	r6, r0, #24
 80058b2:	f101 0304 	add.w	r3, r1, #4
 80058b6:	d50a      	bpl.n	80058ce <_printf_i+0xce>
 80058b8:	680e      	ldr	r6, [r1, #0]
 80058ba:	602b      	str	r3, [r5, #0]
 80058bc:	2e00      	cmp	r6, #0
 80058be:	da03      	bge.n	80058c8 <_printf_i+0xc8>
 80058c0:	232d      	movs	r3, #45	; 0x2d
 80058c2:	4276      	negs	r6, r6
 80058c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058c8:	485e      	ldr	r0, [pc, #376]	; (8005a44 <_printf_i+0x244>)
 80058ca:	230a      	movs	r3, #10
 80058cc:	e019      	b.n	8005902 <_printf_i+0x102>
 80058ce:	680e      	ldr	r6, [r1, #0]
 80058d0:	602b      	str	r3, [r5, #0]
 80058d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80058d6:	bf18      	it	ne
 80058d8:	b236      	sxthne	r6, r6
 80058da:	e7ef      	b.n	80058bc <_printf_i+0xbc>
 80058dc:	682b      	ldr	r3, [r5, #0]
 80058de:	6820      	ldr	r0, [r4, #0]
 80058e0:	1d19      	adds	r1, r3, #4
 80058e2:	6029      	str	r1, [r5, #0]
 80058e4:	0601      	lsls	r1, r0, #24
 80058e6:	d501      	bpl.n	80058ec <_printf_i+0xec>
 80058e8:	681e      	ldr	r6, [r3, #0]
 80058ea:	e002      	b.n	80058f2 <_printf_i+0xf2>
 80058ec:	0646      	lsls	r6, r0, #25
 80058ee:	d5fb      	bpl.n	80058e8 <_printf_i+0xe8>
 80058f0:	881e      	ldrh	r6, [r3, #0]
 80058f2:	4854      	ldr	r0, [pc, #336]	; (8005a44 <_printf_i+0x244>)
 80058f4:	2f6f      	cmp	r7, #111	; 0x6f
 80058f6:	bf0c      	ite	eq
 80058f8:	2308      	moveq	r3, #8
 80058fa:	230a      	movne	r3, #10
 80058fc:	2100      	movs	r1, #0
 80058fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005902:	6865      	ldr	r5, [r4, #4]
 8005904:	60a5      	str	r5, [r4, #8]
 8005906:	2d00      	cmp	r5, #0
 8005908:	bfa2      	ittt	ge
 800590a:	6821      	ldrge	r1, [r4, #0]
 800590c:	f021 0104 	bicge.w	r1, r1, #4
 8005910:	6021      	strge	r1, [r4, #0]
 8005912:	b90e      	cbnz	r6, 8005918 <_printf_i+0x118>
 8005914:	2d00      	cmp	r5, #0
 8005916:	d04d      	beq.n	80059b4 <_printf_i+0x1b4>
 8005918:	4615      	mov	r5, r2
 800591a:	fbb6 f1f3 	udiv	r1, r6, r3
 800591e:	fb03 6711 	mls	r7, r3, r1, r6
 8005922:	5dc7      	ldrb	r7, [r0, r7]
 8005924:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005928:	4637      	mov	r7, r6
 800592a:	42bb      	cmp	r3, r7
 800592c:	460e      	mov	r6, r1
 800592e:	d9f4      	bls.n	800591a <_printf_i+0x11a>
 8005930:	2b08      	cmp	r3, #8
 8005932:	d10b      	bne.n	800594c <_printf_i+0x14c>
 8005934:	6823      	ldr	r3, [r4, #0]
 8005936:	07de      	lsls	r6, r3, #31
 8005938:	d508      	bpl.n	800594c <_printf_i+0x14c>
 800593a:	6923      	ldr	r3, [r4, #16]
 800593c:	6861      	ldr	r1, [r4, #4]
 800593e:	4299      	cmp	r1, r3
 8005940:	bfde      	ittt	le
 8005942:	2330      	movle	r3, #48	; 0x30
 8005944:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005948:	f105 35ff 	addle.w	r5, r5, #4294967295
 800594c:	1b52      	subs	r2, r2, r5
 800594e:	6122      	str	r2, [r4, #16]
 8005950:	f8cd a000 	str.w	sl, [sp]
 8005954:	464b      	mov	r3, r9
 8005956:	aa03      	add	r2, sp, #12
 8005958:	4621      	mov	r1, r4
 800595a:	4640      	mov	r0, r8
 800595c:	f7ff fee2 	bl	8005724 <_printf_common>
 8005960:	3001      	adds	r0, #1
 8005962:	d14c      	bne.n	80059fe <_printf_i+0x1fe>
 8005964:	f04f 30ff 	mov.w	r0, #4294967295
 8005968:	b004      	add	sp, #16
 800596a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800596e:	4835      	ldr	r0, [pc, #212]	; (8005a44 <_printf_i+0x244>)
 8005970:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005974:	6829      	ldr	r1, [r5, #0]
 8005976:	6823      	ldr	r3, [r4, #0]
 8005978:	f851 6b04 	ldr.w	r6, [r1], #4
 800597c:	6029      	str	r1, [r5, #0]
 800597e:	061d      	lsls	r5, r3, #24
 8005980:	d514      	bpl.n	80059ac <_printf_i+0x1ac>
 8005982:	07df      	lsls	r7, r3, #31
 8005984:	bf44      	itt	mi
 8005986:	f043 0320 	orrmi.w	r3, r3, #32
 800598a:	6023      	strmi	r3, [r4, #0]
 800598c:	b91e      	cbnz	r6, 8005996 <_printf_i+0x196>
 800598e:	6823      	ldr	r3, [r4, #0]
 8005990:	f023 0320 	bic.w	r3, r3, #32
 8005994:	6023      	str	r3, [r4, #0]
 8005996:	2310      	movs	r3, #16
 8005998:	e7b0      	b.n	80058fc <_printf_i+0xfc>
 800599a:	6823      	ldr	r3, [r4, #0]
 800599c:	f043 0320 	orr.w	r3, r3, #32
 80059a0:	6023      	str	r3, [r4, #0]
 80059a2:	2378      	movs	r3, #120	; 0x78
 80059a4:	4828      	ldr	r0, [pc, #160]	; (8005a48 <_printf_i+0x248>)
 80059a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80059aa:	e7e3      	b.n	8005974 <_printf_i+0x174>
 80059ac:	0659      	lsls	r1, r3, #25
 80059ae:	bf48      	it	mi
 80059b0:	b2b6      	uxthmi	r6, r6
 80059b2:	e7e6      	b.n	8005982 <_printf_i+0x182>
 80059b4:	4615      	mov	r5, r2
 80059b6:	e7bb      	b.n	8005930 <_printf_i+0x130>
 80059b8:	682b      	ldr	r3, [r5, #0]
 80059ba:	6826      	ldr	r6, [r4, #0]
 80059bc:	6961      	ldr	r1, [r4, #20]
 80059be:	1d18      	adds	r0, r3, #4
 80059c0:	6028      	str	r0, [r5, #0]
 80059c2:	0635      	lsls	r5, r6, #24
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	d501      	bpl.n	80059cc <_printf_i+0x1cc>
 80059c8:	6019      	str	r1, [r3, #0]
 80059ca:	e002      	b.n	80059d2 <_printf_i+0x1d2>
 80059cc:	0670      	lsls	r0, r6, #25
 80059ce:	d5fb      	bpl.n	80059c8 <_printf_i+0x1c8>
 80059d0:	8019      	strh	r1, [r3, #0]
 80059d2:	2300      	movs	r3, #0
 80059d4:	6123      	str	r3, [r4, #16]
 80059d6:	4615      	mov	r5, r2
 80059d8:	e7ba      	b.n	8005950 <_printf_i+0x150>
 80059da:	682b      	ldr	r3, [r5, #0]
 80059dc:	1d1a      	adds	r2, r3, #4
 80059de:	602a      	str	r2, [r5, #0]
 80059e0:	681d      	ldr	r5, [r3, #0]
 80059e2:	6862      	ldr	r2, [r4, #4]
 80059e4:	2100      	movs	r1, #0
 80059e6:	4628      	mov	r0, r5
 80059e8:	f7fa fbfa 	bl	80001e0 <memchr>
 80059ec:	b108      	cbz	r0, 80059f2 <_printf_i+0x1f2>
 80059ee:	1b40      	subs	r0, r0, r5
 80059f0:	6060      	str	r0, [r4, #4]
 80059f2:	6863      	ldr	r3, [r4, #4]
 80059f4:	6123      	str	r3, [r4, #16]
 80059f6:	2300      	movs	r3, #0
 80059f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059fc:	e7a8      	b.n	8005950 <_printf_i+0x150>
 80059fe:	6923      	ldr	r3, [r4, #16]
 8005a00:	462a      	mov	r2, r5
 8005a02:	4649      	mov	r1, r9
 8005a04:	4640      	mov	r0, r8
 8005a06:	47d0      	blx	sl
 8005a08:	3001      	adds	r0, #1
 8005a0a:	d0ab      	beq.n	8005964 <_printf_i+0x164>
 8005a0c:	6823      	ldr	r3, [r4, #0]
 8005a0e:	079b      	lsls	r3, r3, #30
 8005a10:	d413      	bmi.n	8005a3a <_printf_i+0x23a>
 8005a12:	68e0      	ldr	r0, [r4, #12]
 8005a14:	9b03      	ldr	r3, [sp, #12]
 8005a16:	4298      	cmp	r0, r3
 8005a18:	bfb8      	it	lt
 8005a1a:	4618      	movlt	r0, r3
 8005a1c:	e7a4      	b.n	8005968 <_printf_i+0x168>
 8005a1e:	2301      	movs	r3, #1
 8005a20:	4632      	mov	r2, r6
 8005a22:	4649      	mov	r1, r9
 8005a24:	4640      	mov	r0, r8
 8005a26:	47d0      	blx	sl
 8005a28:	3001      	adds	r0, #1
 8005a2a:	d09b      	beq.n	8005964 <_printf_i+0x164>
 8005a2c:	3501      	adds	r5, #1
 8005a2e:	68e3      	ldr	r3, [r4, #12]
 8005a30:	9903      	ldr	r1, [sp, #12]
 8005a32:	1a5b      	subs	r3, r3, r1
 8005a34:	42ab      	cmp	r3, r5
 8005a36:	dcf2      	bgt.n	8005a1e <_printf_i+0x21e>
 8005a38:	e7eb      	b.n	8005a12 <_printf_i+0x212>
 8005a3a:	2500      	movs	r5, #0
 8005a3c:	f104 0619 	add.w	r6, r4, #25
 8005a40:	e7f5      	b.n	8005a2e <_printf_i+0x22e>
 8005a42:	bf00      	nop
 8005a44:	08018d91 	.word	0x08018d91
 8005a48:	08018da2 	.word	0x08018da2

08005a4c <memcpy>:
 8005a4c:	440a      	add	r2, r1
 8005a4e:	4291      	cmp	r1, r2
 8005a50:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a54:	d100      	bne.n	8005a58 <memcpy+0xc>
 8005a56:	4770      	bx	lr
 8005a58:	b510      	push	{r4, lr}
 8005a5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a62:	4291      	cmp	r1, r2
 8005a64:	d1f9      	bne.n	8005a5a <memcpy+0xe>
 8005a66:	bd10      	pop	{r4, pc}

08005a68 <memmove>:
 8005a68:	4288      	cmp	r0, r1
 8005a6a:	b510      	push	{r4, lr}
 8005a6c:	eb01 0402 	add.w	r4, r1, r2
 8005a70:	d902      	bls.n	8005a78 <memmove+0x10>
 8005a72:	4284      	cmp	r4, r0
 8005a74:	4623      	mov	r3, r4
 8005a76:	d807      	bhi.n	8005a88 <memmove+0x20>
 8005a78:	1e43      	subs	r3, r0, #1
 8005a7a:	42a1      	cmp	r1, r4
 8005a7c:	d008      	beq.n	8005a90 <memmove+0x28>
 8005a7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a86:	e7f8      	b.n	8005a7a <memmove+0x12>
 8005a88:	4402      	add	r2, r0
 8005a8a:	4601      	mov	r1, r0
 8005a8c:	428a      	cmp	r2, r1
 8005a8e:	d100      	bne.n	8005a92 <memmove+0x2a>
 8005a90:	bd10      	pop	{r4, pc}
 8005a92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a9a:	e7f7      	b.n	8005a8c <memmove+0x24>

08005a9c <_free_r>:
 8005a9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a9e:	2900      	cmp	r1, #0
 8005aa0:	d044      	beq.n	8005b2c <_free_r+0x90>
 8005aa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005aa6:	9001      	str	r0, [sp, #4]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f1a1 0404 	sub.w	r4, r1, #4
 8005aae:	bfb8      	it	lt
 8005ab0:	18e4      	addlt	r4, r4, r3
 8005ab2:	f000 f913 	bl	8005cdc <__malloc_lock>
 8005ab6:	4a1e      	ldr	r2, [pc, #120]	; (8005b30 <_free_r+0x94>)
 8005ab8:	9801      	ldr	r0, [sp, #4]
 8005aba:	6813      	ldr	r3, [r2, #0]
 8005abc:	b933      	cbnz	r3, 8005acc <_free_r+0x30>
 8005abe:	6063      	str	r3, [r4, #4]
 8005ac0:	6014      	str	r4, [r2, #0]
 8005ac2:	b003      	add	sp, #12
 8005ac4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ac8:	f000 b90e 	b.w	8005ce8 <__malloc_unlock>
 8005acc:	42a3      	cmp	r3, r4
 8005ace:	d908      	bls.n	8005ae2 <_free_r+0x46>
 8005ad0:	6825      	ldr	r5, [r4, #0]
 8005ad2:	1961      	adds	r1, r4, r5
 8005ad4:	428b      	cmp	r3, r1
 8005ad6:	bf01      	itttt	eq
 8005ad8:	6819      	ldreq	r1, [r3, #0]
 8005ada:	685b      	ldreq	r3, [r3, #4]
 8005adc:	1949      	addeq	r1, r1, r5
 8005ade:	6021      	streq	r1, [r4, #0]
 8005ae0:	e7ed      	b.n	8005abe <_free_r+0x22>
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	b10b      	cbz	r3, 8005aec <_free_r+0x50>
 8005ae8:	42a3      	cmp	r3, r4
 8005aea:	d9fa      	bls.n	8005ae2 <_free_r+0x46>
 8005aec:	6811      	ldr	r1, [r2, #0]
 8005aee:	1855      	adds	r5, r2, r1
 8005af0:	42a5      	cmp	r5, r4
 8005af2:	d10b      	bne.n	8005b0c <_free_r+0x70>
 8005af4:	6824      	ldr	r4, [r4, #0]
 8005af6:	4421      	add	r1, r4
 8005af8:	1854      	adds	r4, r2, r1
 8005afa:	42a3      	cmp	r3, r4
 8005afc:	6011      	str	r1, [r2, #0]
 8005afe:	d1e0      	bne.n	8005ac2 <_free_r+0x26>
 8005b00:	681c      	ldr	r4, [r3, #0]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	6053      	str	r3, [r2, #4]
 8005b06:	4421      	add	r1, r4
 8005b08:	6011      	str	r1, [r2, #0]
 8005b0a:	e7da      	b.n	8005ac2 <_free_r+0x26>
 8005b0c:	d902      	bls.n	8005b14 <_free_r+0x78>
 8005b0e:	230c      	movs	r3, #12
 8005b10:	6003      	str	r3, [r0, #0]
 8005b12:	e7d6      	b.n	8005ac2 <_free_r+0x26>
 8005b14:	6825      	ldr	r5, [r4, #0]
 8005b16:	1961      	adds	r1, r4, r5
 8005b18:	428b      	cmp	r3, r1
 8005b1a:	bf04      	itt	eq
 8005b1c:	6819      	ldreq	r1, [r3, #0]
 8005b1e:	685b      	ldreq	r3, [r3, #4]
 8005b20:	6063      	str	r3, [r4, #4]
 8005b22:	bf04      	itt	eq
 8005b24:	1949      	addeq	r1, r1, r5
 8005b26:	6021      	streq	r1, [r4, #0]
 8005b28:	6054      	str	r4, [r2, #4]
 8005b2a:	e7ca      	b.n	8005ac2 <_free_r+0x26>
 8005b2c:	b003      	add	sp, #12
 8005b2e:	bd30      	pop	{r4, r5, pc}
 8005b30:	20000254 	.word	0x20000254

08005b34 <sbrk_aligned>:
 8005b34:	b570      	push	{r4, r5, r6, lr}
 8005b36:	4e0e      	ldr	r6, [pc, #56]	; (8005b70 <sbrk_aligned+0x3c>)
 8005b38:	460c      	mov	r4, r1
 8005b3a:	6831      	ldr	r1, [r6, #0]
 8005b3c:	4605      	mov	r5, r0
 8005b3e:	b911      	cbnz	r1, 8005b46 <sbrk_aligned+0x12>
 8005b40:	f000 f8bc 	bl	8005cbc <_sbrk_r>
 8005b44:	6030      	str	r0, [r6, #0]
 8005b46:	4621      	mov	r1, r4
 8005b48:	4628      	mov	r0, r5
 8005b4a:	f000 f8b7 	bl	8005cbc <_sbrk_r>
 8005b4e:	1c43      	adds	r3, r0, #1
 8005b50:	d00a      	beq.n	8005b68 <sbrk_aligned+0x34>
 8005b52:	1cc4      	adds	r4, r0, #3
 8005b54:	f024 0403 	bic.w	r4, r4, #3
 8005b58:	42a0      	cmp	r0, r4
 8005b5a:	d007      	beq.n	8005b6c <sbrk_aligned+0x38>
 8005b5c:	1a21      	subs	r1, r4, r0
 8005b5e:	4628      	mov	r0, r5
 8005b60:	f000 f8ac 	bl	8005cbc <_sbrk_r>
 8005b64:	3001      	adds	r0, #1
 8005b66:	d101      	bne.n	8005b6c <sbrk_aligned+0x38>
 8005b68:	f04f 34ff 	mov.w	r4, #4294967295
 8005b6c:	4620      	mov	r0, r4
 8005b6e:	bd70      	pop	{r4, r5, r6, pc}
 8005b70:	20000258 	.word	0x20000258

08005b74 <_malloc_r>:
 8005b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b78:	1ccd      	adds	r5, r1, #3
 8005b7a:	f025 0503 	bic.w	r5, r5, #3
 8005b7e:	3508      	adds	r5, #8
 8005b80:	2d0c      	cmp	r5, #12
 8005b82:	bf38      	it	cc
 8005b84:	250c      	movcc	r5, #12
 8005b86:	2d00      	cmp	r5, #0
 8005b88:	4607      	mov	r7, r0
 8005b8a:	db01      	blt.n	8005b90 <_malloc_r+0x1c>
 8005b8c:	42a9      	cmp	r1, r5
 8005b8e:	d905      	bls.n	8005b9c <_malloc_r+0x28>
 8005b90:	230c      	movs	r3, #12
 8005b92:	603b      	str	r3, [r7, #0]
 8005b94:	2600      	movs	r6, #0
 8005b96:	4630      	mov	r0, r6
 8005b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b9c:	4e2e      	ldr	r6, [pc, #184]	; (8005c58 <_malloc_r+0xe4>)
 8005b9e:	f000 f89d 	bl	8005cdc <__malloc_lock>
 8005ba2:	6833      	ldr	r3, [r6, #0]
 8005ba4:	461c      	mov	r4, r3
 8005ba6:	bb34      	cbnz	r4, 8005bf6 <_malloc_r+0x82>
 8005ba8:	4629      	mov	r1, r5
 8005baa:	4638      	mov	r0, r7
 8005bac:	f7ff ffc2 	bl	8005b34 <sbrk_aligned>
 8005bb0:	1c43      	adds	r3, r0, #1
 8005bb2:	4604      	mov	r4, r0
 8005bb4:	d14d      	bne.n	8005c52 <_malloc_r+0xde>
 8005bb6:	6834      	ldr	r4, [r6, #0]
 8005bb8:	4626      	mov	r6, r4
 8005bba:	2e00      	cmp	r6, #0
 8005bbc:	d140      	bne.n	8005c40 <_malloc_r+0xcc>
 8005bbe:	6823      	ldr	r3, [r4, #0]
 8005bc0:	4631      	mov	r1, r6
 8005bc2:	4638      	mov	r0, r7
 8005bc4:	eb04 0803 	add.w	r8, r4, r3
 8005bc8:	f000 f878 	bl	8005cbc <_sbrk_r>
 8005bcc:	4580      	cmp	r8, r0
 8005bce:	d13a      	bne.n	8005c46 <_malloc_r+0xd2>
 8005bd0:	6821      	ldr	r1, [r4, #0]
 8005bd2:	3503      	adds	r5, #3
 8005bd4:	1a6d      	subs	r5, r5, r1
 8005bd6:	f025 0503 	bic.w	r5, r5, #3
 8005bda:	3508      	adds	r5, #8
 8005bdc:	2d0c      	cmp	r5, #12
 8005bde:	bf38      	it	cc
 8005be0:	250c      	movcc	r5, #12
 8005be2:	4629      	mov	r1, r5
 8005be4:	4638      	mov	r0, r7
 8005be6:	f7ff ffa5 	bl	8005b34 <sbrk_aligned>
 8005bea:	3001      	adds	r0, #1
 8005bec:	d02b      	beq.n	8005c46 <_malloc_r+0xd2>
 8005bee:	6823      	ldr	r3, [r4, #0]
 8005bf0:	442b      	add	r3, r5
 8005bf2:	6023      	str	r3, [r4, #0]
 8005bf4:	e00e      	b.n	8005c14 <_malloc_r+0xa0>
 8005bf6:	6822      	ldr	r2, [r4, #0]
 8005bf8:	1b52      	subs	r2, r2, r5
 8005bfa:	d41e      	bmi.n	8005c3a <_malloc_r+0xc6>
 8005bfc:	2a0b      	cmp	r2, #11
 8005bfe:	d916      	bls.n	8005c2e <_malloc_r+0xba>
 8005c00:	1961      	adds	r1, r4, r5
 8005c02:	42a3      	cmp	r3, r4
 8005c04:	6025      	str	r5, [r4, #0]
 8005c06:	bf18      	it	ne
 8005c08:	6059      	strne	r1, [r3, #4]
 8005c0a:	6863      	ldr	r3, [r4, #4]
 8005c0c:	bf08      	it	eq
 8005c0e:	6031      	streq	r1, [r6, #0]
 8005c10:	5162      	str	r2, [r4, r5]
 8005c12:	604b      	str	r3, [r1, #4]
 8005c14:	4638      	mov	r0, r7
 8005c16:	f104 060b 	add.w	r6, r4, #11
 8005c1a:	f000 f865 	bl	8005ce8 <__malloc_unlock>
 8005c1e:	f026 0607 	bic.w	r6, r6, #7
 8005c22:	1d23      	adds	r3, r4, #4
 8005c24:	1af2      	subs	r2, r6, r3
 8005c26:	d0b6      	beq.n	8005b96 <_malloc_r+0x22>
 8005c28:	1b9b      	subs	r3, r3, r6
 8005c2a:	50a3      	str	r3, [r4, r2]
 8005c2c:	e7b3      	b.n	8005b96 <_malloc_r+0x22>
 8005c2e:	6862      	ldr	r2, [r4, #4]
 8005c30:	42a3      	cmp	r3, r4
 8005c32:	bf0c      	ite	eq
 8005c34:	6032      	streq	r2, [r6, #0]
 8005c36:	605a      	strne	r2, [r3, #4]
 8005c38:	e7ec      	b.n	8005c14 <_malloc_r+0xa0>
 8005c3a:	4623      	mov	r3, r4
 8005c3c:	6864      	ldr	r4, [r4, #4]
 8005c3e:	e7b2      	b.n	8005ba6 <_malloc_r+0x32>
 8005c40:	4634      	mov	r4, r6
 8005c42:	6876      	ldr	r6, [r6, #4]
 8005c44:	e7b9      	b.n	8005bba <_malloc_r+0x46>
 8005c46:	230c      	movs	r3, #12
 8005c48:	603b      	str	r3, [r7, #0]
 8005c4a:	4638      	mov	r0, r7
 8005c4c:	f000 f84c 	bl	8005ce8 <__malloc_unlock>
 8005c50:	e7a1      	b.n	8005b96 <_malloc_r+0x22>
 8005c52:	6025      	str	r5, [r4, #0]
 8005c54:	e7de      	b.n	8005c14 <_malloc_r+0xa0>
 8005c56:	bf00      	nop
 8005c58:	20000254 	.word	0x20000254

08005c5c <_realloc_r>:
 8005c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c60:	4680      	mov	r8, r0
 8005c62:	4614      	mov	r4, r2
 8005c64:	460e      	mov	r6, r1
 8005c66:	b921      	cbnz	r1, 8005c72 <_realloc_r+0x16>
 8005c68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c6c:	4611      	mov	r1, r2
 8005c6e:	f7ff bf81 	b.w	8005b74 <_malloc_r>
 8005c72:	b92a      	cbnz	r2, 8005c80 <_realloc_r+0x24>
 8005c74:	f7ff ff12 	bl	8005a9c <_free_r>
 8005c78:	4625      	mov	r5, r4
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c80:	f000 f838 	bl	8005cf4 <_malloc_usable_size_r>
 8005c84:	4284      	cmp	r4, r0
 8005c86:	4607      	mov	r7, r0
 8005c88:	d802      	bhi.n	8005c90 <_realloc_r+0x34>
 8005c8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005c8e:	d812      	bhi.n	8005cb6 <_realloc_r+0x5a>
 8005c90:	4621      	mov	r1, r4
 8005c92:	4640      	mov	r0, r8
 8005c94:	f7ff ff6e 	bl	8005b74 <_malloc_r>
 8005c98:	4605      	mov	r5, r0
 8005c9a:	2800      	cmp	r0, #0
 8005c9c:	d0ed      	beq.n	8005c7a <_realloc_r+0x1e>
 8005c9e:	42bc      	cmp	r4, r7
 8005ca0:	4622      	mov	r2, r4
 8005ca2:	4631      	mov	r1, r6
 8005ca4:	bf28      	it	cs
 8005ca6:	463a      	movcs	r2, r7
 8005ca8:	f7ff fed0 	bl	8005a4c <memcpy>
 8005cac:	4631      	mov	r1, r6
 8005cae:	4640      	mov	r0, r8
 8005cb0:	f7ff fef4 	bl	8005a9c <_free_r>
 8005cb4:	e7e1      	b.n	8005c7a <_realloc_r+0x1e>
 8005cb6:	4635      	mov	r5, r6
 8005cb8:	e7df      	b.n	8005c7a <_realloc_r+0x1e>
	...

08005cbc <_sbrk_r>:
 8005cbc:	b538      	push	{r3, r4, r5, lr}
 8005cbe:	4d06      	ldr	r5, [pc, #24]	; (8005cd8 <_sbrk_r+0x1c>)
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	4604      	mov	r4, r0
 8005cc4:	4608      	mov	r0, r1
 8005cc6:	602b      	str	r3, [r5, #0]
 8005cc8:	f7fa ffe4 	bl	8000c94 <_sbrk>
 8005ccc:	1c43      	adds	r3, r0, #1
 8005cce:	d102      	bne.n	8005cd6 <_sbrk_r+0x1a>
 8005cd0:	682b      	ldr	r3, [r5, #0]
 8005cd2:	b103      	cbz	r3, 8005cd6 <_sbrk_r+0x1a>
 8005cd4:	6023      	str	r3, [r4, #0]
 8005cd6:	bd38      	pop	{r3, r4, r5, pc}
 8005cd8:	2000025c 	.word	0x2000025c

08005cdc <__malloc_lock>:
 8005cdc:	4801      	ldr	r0, [pc, #4]	; (8005ce4 <__malloc_lock+0x8>)
 8005cde:	f000 b811 	b.w	8005d04 <__retarget_lock_acquire_recursive>
 8005ce2:	bf00      	nop
 8005ce4:	20000260 	.word	0x20000260

08005ce8 <__malloc_unlock>:
 8005ce8:	4801      	ldr	r0, [pc, #4]	; (8005cf0 <__malloc_unlock+0x8>)
 8005cea:	f000 b80c 	b.w	8005d06 <__retarget_lock_release_recursive>
 8005cee:	bf00      	nop
 8005cf0:	20000260 	.word	0x20000260

08005cf4 <_malloc_usable_size_r>:
 8005cf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cf8:	1f18      	subs	r0, r3, #4
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	bfbc      	itt	lt
 8005cfe:	580b      	ldrlt	r3, [r1, r0]
 8005d00:	18c0      	addlt	r0, r0, r3
 8005d02:	4770      	bx	lr

08005d04 <__retarget_lock_acquire_recursive>:
 8005d04:	4770      	bx	lr

08005d06 <__retarget_lock_release_recursive>:
 8005d06:	4770      	bx	lr

08005d08 <_init>:
 8005d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d0a:	bf00      	nop
 8005d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d0e:	bc08      	pop	{r3}
 8005d10:	469e      	mov	lr, r3
 8005d12:	4770      	bx	lr

08005d14 <_fini>:
 8005d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d16:	bf00      	nop
 8005d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d1a:	bc08      	pop	{r3}
 8005d1c:	469e      	mov	lr, r3
 8005d1e:	4770      	bx	lr
