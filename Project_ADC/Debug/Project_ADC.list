
Project_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08005a4c  08005a4c  00015a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005af4  08005af4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005af4  08005af4  00015af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005afc  08005afc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005afc  08005afc  00015afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b00  08005b00  00015b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005b04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  20000070  08005b74  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08005b74  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012aed  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a85  00000000  00000000  00032b8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  00035618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd8  00000000  00000000  00036528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029c95  00000000  00000000  00037300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a60  00000000  00000000  00060f95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010373c  00000000  00000000  000759f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00179131  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000413c  00000000  00000000  00179184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005a34 	.word	0x08005a34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005a34 	.word	0x08005a34

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08a      	sub	sp, #40	; 0x28
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800058a:	f107 031c 	add.w	r3, r7, #28
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]
 80005a4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005a6:	4b2f      	ldr	r3, [pc, #188]	; (8000664 <MX_ADC1_Init+0xe0>)
 80005a8:	4a2f      	ldr	r2, [pc, #188]	; (8000668 <MX_ADC1_Init+0xe4>)
 80005aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005ac:	4b2d      	ldr	r3, [pc, #180]	; (8000664 <MX_ADC1_Init+0xe0>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005b2:	4b2c      	ldr	r3, [pc, #176]	; (8000664 <MX_ADC1_Init+0xe0>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005b8:	4b2a      	ldr	r3, [pc, #168]	; (8000664 <MX_ADC1_Init+0xe0>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005be:	4b29      	ldr	r3, [pc, #164]	; (8000664 <MX_ADC1_Init+0xe0>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005c4:	4b27      	ldr	r3, [pc, #156]	; (8000664 <MX_ADC1_Init+0xe0>)
 80005c6:	2204      	movs	r2, #4
 80005c8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005ca:	4b26      	ldr	r3, [pc, #152]	; (8000664 <MX_ADC1_Init+0xe0>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005d0:	4b24      	ldr	r3, [pc, #144]	; (8000664 <MX_ADC1_Init+0xe0>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005d6:	4b23      	ldr	r3, [pc, #140]	; (8000664 <MX_ADC1_Init+0xe0>)
 80005d8:	2201      	movs	r2, #1
 80005da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005dc:	4b21      	ldr	r3, [pc, #132]	; (8000664 <MX_ADC1_Init+0xe0>)
 80005de:	2200      	movs	r2, #0
 80005e0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005e4:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <MX_ADC1_Init+0xe0>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ea:	4b1e      	ldr	r3, [pc, #120]	; (8000664 <MX_ADC1_Init+0xe0>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005f0:	4b1c      	ldr	r3, [pc, #112]	; (8000664 <MX_ADC1_Init+0xe0>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005f8:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <MX_ADC1_Init+0xe0>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005fe:	4b19      	ldr	r3, [pc, #100]	; (8000664 <MX_ADC1_Init+0xe0>)
 8000600:	2200      	movs	r2, #0
 8000602:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000606:	4817      	ldr	r0, [pc, #92]	; (8000664 <MX_ADC1_Init+0xe0>)
 8000608:	f000 fe6e 	bl	80012e8 <HAL_ADC_Init>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000612:	f000 fa3e 	bl	8000a92 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000616:	2300      	movs	r3, #0
 8000618:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800061a:	f107 031c 	add.w	r3, r7, #28
 800061e:	4619      	mov	r1, r3
 8000620:	4810      	ldr	r0, [pc, #64]	; (8000664 <MX_ADC1_Init+0xe0>)
 8000622:	f001 fdc1 	bl	80021a8 <HAL_ADCEx_MultiModeConfigChannel>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800062c:	f000 fa31 	bl	8000a92 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000630:	4b0e      	ldr	r3, [pc, #56]	; (800066c <MX_ADC1_Init+0xe8>)
 8000632:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000634:	2306      	movs	r3, #6
 8000636:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000638:	2300      	movs	r3, #0
 800063a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800063c:	237f      	movs	r3, #127	; 0x7f
 800063e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000640:	2304      	movs	r3, #4
 8000642:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	4619      	mov	r1, r3
 800064c:	4805      	ldr	r0, [pc, #20]	; (8000664 <MX_ADC1_Init+0xe0>)
 800064e:	f001 f87b 	bl	8001748 <HAL_ADC_ConfigChannel>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000658:	f000 fa1b 	bl	8000a92 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	3728      	adds	r7, #40	; 0x28
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	2000008c 	.word	0x2000008c
 8000668:	50040000 	.word	0x50040000
 800066c:	32601000 	.word	0x32601000

08000670 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b0ac      	sub	sp, #176	; 0xb0
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000678:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	2288      	movs	r2, #136	; 0x88
 800068e:	2100      	movs	r1, #0
 8000690:	4618      	mov	r0, r3
 8000692:	f004 fd59 	bl	8005148 <memset>
  if(adcHandle->Instance==ADC1)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a3d      	ldr	r2, [pc, #244]	; (8000790 <HAL_ADC_MspInit+0x120>)
 800069c:	4293      	cmp	r3, r2
 800069e:	d172      	bne.n	8000786 <HAL_ADC_MspInit+0x116>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006a4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80006a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80006aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80006ae:	2302      	movs	r3, #2
 80006b0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006b2:	2301      	movs	r3, #1
 80006b4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80006b6:	2308      	movs	r3, #8
 80006b8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80006ba:	2307      	movs	r3, #7
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006be:	2302      	movs	r3, #2
 80006c0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80006c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80006ca:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	4618      	mov	r0, r3
 80006d2:	f003 f949 	bl	8003968 <HAL_RCCEx_PeriphCLKConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80006dc:	f000 f9d9 	bl	8000a92 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80006e0:	4b2c      	ldr	r3, [pc, #176]	; (8000794 <HAL_ADC_MspInit+0x124>)
 80006e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e4:	4a2b      	ldr	r2, [pc, #172]	; (8000794 <HAL_ADC_MspInit+0x124>)
 80006e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ec:	4b29      	ldr	r3, [pc, #164]	; (8000794 <HAL_ADC_MspInit+0x124>)
 80006ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006f4:	613b      	str	r3, [r7, #16]
 80006f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f8:	4b26      	ldr	r3, [pc, #152]	; (8000794 <HAL_ADC_MspInit+0x124>)
 80006fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fc:	4a25      	ldr	r2, [pc, #148]	; (8000794 <HAL_ADC_MspInit+0x124>)
 80006fe:	f043 0301 	orr.w	r3, r3, #1
 8000702:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000704:	4b23      	ldr	r3, [pc, #140]	; (8000794 <HAL_ADC_MspInit+0x124>)
 8000706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000708:	f003 0301 	and.w	r3, r3, #1
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000710:	2380      	movs	r3, #128	; 0x80
 8000712:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000716:	230b      	movs	r3, #11
 8000718:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000722:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000726:	4619      	mov	r1, r3
 8000728:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072c:	f002 f8f6 	bl	800291c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000730:	4b19      	ldr	r3, [pc, #100]	; (8000798 <HAL_ADC_MspInit+0x128>)
 8000732:	4a1a      	ldr	r2, [pc, #104]	; (800079c <HAL_ADC_MspInit+0x12c>)
 8000734:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000736:	4b18      	ldr	r3, [pc, #96]	; (8000798 <HAL_ADC_MspInit+0x128>)
 8000738:	2200      	movs	r2, #0
 800073a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800073c:	4b16      	ldr	r3, [pc, #88]	; (8000798 <HAL_ADC_MspInit+0x128>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <HAL_ADC_MspInit+0x128>)
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000748:	4b13      	ldr	r3, [pc, #76]	; (8000798 <HAL_ADC_MspInit+0x128>)
 800074a:	2280      	movs	r2, #128	; 0x80
 800074c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <HAL_ADC_MspInit+0x128>)
 8000750:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000754:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000756:	4b10      	ldr	r3, [pc, #64]	; (8000798 <HAL_ADC_MspInit+0x128>)
 8000758:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800075c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <HAL_ADC_MspInit+0x128>)
 8000760:	2220      	movs	r2, #32
 8000762:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <HAL_ADC_MspInit+0x128>)
 8000766:	2200      	movs	r2, #0
 8000768:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800076a:	480b      	ldr	r0, [pc, #44]	; (8000798 <HAL_ADC_MspInit+0x128>)
 800076c:	f001 fede 	bl	800252c <HAL_DMA_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 8000776:	f000 f98c 	bl	8000a92 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4a06      	ldr	r2, [pc, #24]	; (8000798 <HAL_ADC_MspInit+0x128>)
 800077e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000780:	4a05      	ldr	r2, [pc, #20]	; (8000798 <HAL_ADC_MspInit+0x128>)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000786:	bf00      	nop
 8000788:	37b0      	adds	r7, #176	; 0xb0
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	50040000 	.word	0x50040000
 8000794:	40021000 	.word	0x40021000
 8000798:	200000f0 	.word	0x200000f0
 800079c:	40020008 	.word	0x40020008

080007a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007a6:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <MX_DMA_Init+0x38>)
 80007a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007aa:	4a0b      	ldr	r2, [pc, #44]	; (80007d8 <MX_DMA_Init+0x38>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6493      	str	r3, [r2, #72]	; 0x48
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_DMA_Init+0x38>)
 80007b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007be:	2200      	movs	r2, #0
 80007c0:	2100      	movs	r1, #0
 80007c2:	200b      	movs	r0, #11
 80007c4:	f001 fe7b 	bl	80024be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007c8:	200b      	movs	r0, #11
 80007ca:	f001 fe94 	bl	80024f6 <HAL_NVIC_EnableIRQ>

}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40021000 	.word	0x40021000

080007dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	; 0x28
 80007e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f2:	4b3f      	ldr	r3, [pc, #252]	; (80008f0 <MX_GPIO_Init+0x114>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	4a3e      	ldr	r2, [pc, #248]	; (80008f0 <MX_GPIO_Init+0x114>)
 80007f8:	f043 0304 	orr.w	r3, r3, #4
 80007fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fe:	4b3c      	ldr	r3, [pc, #240]	; (80008f0 <MX_GPIO_Init+0x114>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	f003 0304 	and.w	r3, r3, #4
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080a:	4b39      	ldr	r3, [pc, #228]	; (80008f0 <MX_GPIO_Init+0x114>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	4a38      	ldr	r2, [pc, #224]	; (80008f0 <MX_GPIO_Init+0x114>)
 8000810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000816:	4b36      	ldr	r3, [pc, #216]	; (80008f0 <MX_GPIO_Init+0x114>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	4b33      	ldr	r3, [pc, #204]	; (80008f0 <MX_GPIO_Init+0x114>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	4a32      	ldr	r2, [pc, #200]	; (80008f0 <MX_GPIO_Init+0x114>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082e:	4b30      	ldr	r3, [pc, #192]	; (80008f0 <MX_GPIO_Init+0x114>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	4b2d      	ldr	r3, [pc, #180]	; (80008f0 <MX_GPIO_Init+0x114>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	4a2c      	ldr	r2, [pc, #176]	; (80008f0 <MX_GPIO_Init+0x114>)
 8000840:	f043 0302 	orr.w	r3, r3, #2
 8000844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000846:	4b2a      	ldr	r3, [pc, #168]	; (80008f0 <MX_GPIO_Init+0x114>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	f003 0302 	and.w	r3, r3, #2
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_9, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	f44f 7118 	mov.w	r1, #608	; 0x260
 8000858:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800085c:	f002 fa08 	bl	8002c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000860:	2200      	movs	r2, #0
 8000862:	2180      	movs	r1, #128	; 0x80
 8000864:	4823      	ldr	r0, [pc, #140]	; (80008f4 <MX_GPIO_Init+0x118>)
 8000866:	f002 fa03 	bl	8002c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2170      	movs	r1, #112	; 0x70
 800086e:	4822      	ldr	r0, [pc, #136]	; (80008f8 <MX_GPIO_Init+0x11c>)
 8000870:	f002 f9fe 	bl	8002c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000874:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800087a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800087e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	4619      	mov	r1, r3
 800088a:	481a      	ldr	r0, [pc, #104]	; (80008f4 <MX_GPIO_Init+0x118>)
 800088c:	f002 f846 	bl	800291c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA6 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_9;
 8000890:	f44f 7318 	mov.w	r3, #608	; 0x260
 8000894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000896:	2301      	movs	r3, #1
 8000898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	4619      	mov	r1, r3
 80008a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ac:	f002 f836 	bl	800291c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80008b0:	2380      	movs	r3, #128	; 0x80
 80008b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	4619      	mov	r1, r3
 80008c6:	480b      	ldr	r0, [pc, #44]	; (80008f4 <MX_GPIO_Init+0x118>)
 80008c8:	f002 f828 	bl	800291c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80008cc:	2370      	movs	r3, #112	; 0x70
 80008ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	2301      	movs	r3, #1
 80008d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4619      	mov	r1, r3
 80008e2:	4805      	ldr	r0, [pc, #20]	; (80008f8 <MX_GPIO_Init+0x11c>)
 80008e4:	f002 f81a 	bl	800291c <HAL_GPIO_Init>

}
 80008e8:	bf00      	nop
 80008ea:	3728      	adds	r7, #40	; 0x28
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40021000 	.word	0x40021000
 80008f4:	48000800 	.word	0x48000800
 80008f8:	48000400 	.word	0x48000400

080008fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008fc:	b5b0      	push	{r4, r5, r7, lr}
 80008fe:	b098      	sub	sp, #96	; 0x60
 8000900:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000902:	f000 fa7b 	bl	8000dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000906:	f000 f871 	bl	80009ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800090a:	f7ff ff67 	bl	80007dc <MX_GPIO_Init>
  MX_DMA_Init();
 800090e:	f7ff ff47 	bl	80007a0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000912:	f000 f9bd 	bl	8000c90 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000916:	f7ff fe35 	bl	8000584 <MX_ADC1_Init>
  MX_RTC_Init();
 800091a:	f000 f8bf 	bl	8000a9c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  //HAL_ADCEx_Calibration_Start(&hdac1);
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC_Value, 50);
 800091e:	2232      	movs	r2, #50	; 0x32
 8000920:	492b      	ldr	r1, [pc, #172]	; (80009d0 <main+0xd4>)
 8000922:	482c      	ldr	r0, [pc, #176]	; (80009d4 <main+0xd8>)
 8000924:	f000 fe36 	bl	8001594 <HAL_ADC_Start_DMA>

  // Lcd_PortType ports[] = { D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port };
    Lcd_PortType ports[] = { GPIOC, GPIOB, GPIOA, GPIOA };
 8000928:	4b2b      	ldr	r3, [pc, #172]	; (80009d8 <main+0xdc>)
 800092a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800092e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000930:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
    Lcd_PinType pins[] = {GPIO_PIN_7, GPIO_PIN_6, GPIO_PIN_9, GPIO_PIN_6};
 8000934:	4a29      	ldr	r2, [pc, #164]	; (80009dc <main+0xe0>)
 8000936:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800093a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800093e:	e883 0003 	stmia.w	r3, {r0, r1}
    Lcd_HandleTypeDef lcd;
    // Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
    lcd = Lcd_create(ports, pins, GPIOB, GPIO_PIN_5, GPIOB, GPIO_PIN_4, LCD_4_BIT_MODE);
 8000942:	4638      	mov	r0, r7
 8000944:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000948:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800094c:	2300      	movs	r3, #0
 800094e:	9303      	str	r3, [sp, #12]
 8000950:	2310      	movs	r3, #16
 8000952:	9302      	str	r3, [sp, #8]
 8000954:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <main+0xe4>)
 8000956:	9301      	str	r3, [sp, #4]
 8000958:	2320      	movs	r3, #32
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	4b20      	ldr	r3, [pc, #128]	; (80009e0 <main+0xe4>)
 800095e:	f004 fa86 	bl	8004e6e <Lcd_create>
 8000962:	f107 041c 	add.w	r4, r7, #28
 8000966:	463d      	mov	r5, r7
 8000968:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800096a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800096c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000970:	e884 0003 	stmia.w	r4, {r0, r1}
    Lcd_cursor(&lcd, 0,1);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	2201      	movs	r2, #1
 800097a:	2100      	movs	r1, #0
 800097c:	4618      	mov	r0, r3
 800097e:	f004 fb03 	bl	8004f88 <Lcd_cursor>
    Lcd_string(&lcd, "$$$$$$$$$$");
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4917      	ldr	r1, [pc, #92]	; (80009e4 <main+0xe8>)
 8000988:	4618      	mov	r0, r3
 800098a:	f004 fadd 	bl	8004f48 <Lcd_string>
      for ( int x = 1; x <= 200 ; x++ )
 800098e:	2301      	movs	r3, #1
 8000990:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000992:	e013      	b.n	80009bc <main+0xc0>
      {
        Lcd_cursor(&lcd, 1,7);
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	2207      	movs	r2, #7
 800099a:	2101      	movs	r1, #1
 800099c:	4618      	mov	r0, r3
 800099e:	f004 faf3 	bl	8004f88 <Lcd_cursor>
        Lcd_int(&lcd, x);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80009a8:	4618      	mov	r0, r3
 80009aa:	f004 fab5 	bl	8004f18 <Lcd_int>
        HAL_Delay (1000);
 80009ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009b2:	f000 fa9f 	bl	8000ef4 <HAL_Delay>
      for ( int x = 1; x <= 200 ; x++ )
 80009b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80009b8:	3301      	adds	r3, #1
 80009ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80009bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80009be:	2bc8      	cmp	r3, #200	; 0xc8
 80009c0:	dde8      	ble.n	8000994 <main+0x98>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	  cnt ++;
 80009c2:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <main+0xec>)
 80009c4:	881b      	ldrh	r3, [r3, #0]
 80009c6:	3301      	adds	r3, #1
 80009c8:	b29a      	uxth	r2, r3
 80009ca:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <main+0xec>)
 80009cc:	801a      	strh	r2, [r3, #0]
 80009ce:	e7f8      	b.n	80009c2 <main+0xc6>
 80009d0:	2000013c 	.word	0x2000013c
 80009d4:	2000008c 	.word	0x2000008c
 80009d8:	08005a58 	.word	0x08005a58
 80009dc:	08005a68 	.word	0x08005a68
 80009e0:	48000400 	.word	0x48000400
 80009e4:	08005a4c 	.word	0x08005a4c
 80009e8:	20000138 	.word	0x20000138

080009ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b096      	sub	sp, #88	; 0x58
 80009f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	2244      	movs	r2, #68	; 0x44
 80009f8:	2100      	movs	r1, #0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f004 fba4 	bl	8005148 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a00:	463b      	mov	r3, r7
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
 8000a0c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a0e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a12:	f002 f953 	bl	8002cbc <HAL_PWREx_ControlVoltageScaling>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a1c:	f000 f839 	bl	8000a92 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000a20:	230a      	movs	r3, #10
 8000a22:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a28:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a2a:	2310      	movs	r3, #16
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a32:	2302      	movs	r3, #2
 8000a34:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a36:	2302      	movs	r3, #2
 8000a38:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a3e:	230a      	movs	r3, #10
 8000a40:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a42:	2307      	movs	r3, #7
 8000a44:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a46:	2302      	movs	r3, #2
 8000a48:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4618      	mov	r0, r3
 8000a54:	f002 f988 	bl	8002d68 <HAL_RCC_OscConfig>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000a5e:	f000 f818 	bl	8000a92 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a62:	230f      	movs	r3, #15
 8000a64:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a66:	2303      	movs	r3, #3
 8000a68:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a72:	2300      	movs	r3, #0
 8000a74:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a76:	463b      	mov	r3, r7
 8000a78:	2104      	movs	r1, #4
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f002 fd50 	bl	8003520 <HAL_RCC_ClockConfig>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a86:	f000 f804 	bl	8000a92 <Error_Handler>
  }
}
 8000a8a:	bf00      	nop
 8000a8c:	3758      	adds	r7, #88	; 0x58
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a96:	b672      	cpsid	i
}
 8000a98:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a9a:	e7fe      	b.n	8000a9a <Error_Handler+0x8>

08000a9c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000aa0:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <MX_RTC_Init+0x48>)
 8000aa2:	4a11      	ldr	r2, [pc, #68]	; (8000ae8 <MX_RTC_Init+0x4c>)
 8000aa4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <MX_RTC_Init+0x48>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000aac:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <MX_RTC_Init+0x48>)
 8000aae:	227f      	movs	r2, #127	; 0x7f
 8000ab0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_RTC_Init+0x48>)
 8000ab4:	22ff      	movs	r2, #255	; 0xff
 8000ab6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ab8:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <MX_RTC_Init+0x48>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <MX_RTC_Init+0x48>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ac4:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <MX_RTC_Init+0x48>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <MX_RTC_Init+0x48>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ad0:	4804      	ldr	r0, [pc, #16]	; (8000ae4 <MX_RTC_Init+0x48>)
 8000ad2:	f003 fc05 	bl	80042e0 <HAL_RTC_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000adc:	f7ff ffd9 	bl	8000a92 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	200001a0 	.word	0x200001a0
 8000ae8:	40002800 	.word	0x40002800

08000aec <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b0a4      	sub	sp, #144	; 0x90
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000af4:	f107 0308 	add.w	r3, r7, #8
 8000af8:	2288      	movs	r2, #136	; 0x88
 8000afa:	2100      	movs	r1, #0
 8000afc:	4618      	mov	r0, r3
 8000afe:	f004 fb23 	bl	8005148 <memset>
  if(rtcHandle->Instance==RTC)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a10      	ldr	r2, [pc, #64]	; (8000b48 <HAL_RTC_MspInit+0x5c>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d118      	bne.n	8000b3e <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b10:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b1a:	f107 0308 	add.w	r3, r7, #8
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f002 ff22 	bl	8003968 <HAL_RCCEx_PeriphCLKConfig>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000b2a:	f7ff ffb2 	bl	8000a92 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b2e:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <HAL_RTC_MspInit+0x60>)
 8000b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b34:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <HAL_RTC_MspInit+0x60>)
 8000b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000b3e:	bf00      	nop
 8000b40:	3790      	adds	r7, #144	; 0x90
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40002800 	.word	0x40002800
 8000b4c:	40021000 	.word	0x40021000

08000b50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b56:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <HAL_MspInit+0x44>)
 8000b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b5a:	4a0e      	ldr	r2, [pc, #56]	; (8000b94 <HAL_MspInit+0x44>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6613      	str	r3, [r2, #96]	; 0x60
 8000b62:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <HAL_MspInit+0x44>)
 8000b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6e:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <HAL_MspInit+0x44>)
 8000b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b72:	4a08      	ldr	r2, [pc, #32]	; (8000b94 <HAL_MspInit+0x44>)
 8000b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b78:	6593      	str	r3, [r2, #88]	; 0x58
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_MspInit+0x44>)
 8000b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	40021000 	.word	0x40021000

08000b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <NMI_Handler+0x4>

08000b9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <HardFault_Handler+0x4>

08000ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <MemManage_Handler+0x4>

08000baa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <BusFault_Handler+0x4>

08000bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <UsageFault_Handler+0x4>

08000bb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be4:	f000 f966 	bl	8000eb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}

08000bec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000bf0:	4802      	ldr	r0, [pc, #8]	; (8000bfc <DMA1_Channel1_IRQHandler+0x10>)
 8000bf2:	f001 fdb3 	bl	800275c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200000f0 	.word	0x200000f0

08000c00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c08:	4a14      	ldr	r2, [pc, #80]	; (8000c5c <_sbrk+0x5c>)
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <_sbrk+0x60>)
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c14:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <_sbrk+0x64>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d102      	bne.n	8000c22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c1c:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <_sbrk+0x64>)
 8000c1e:	4a12      	ldr	r2, [pc, #72]	; (8000c68 <_sbrk+0x68>)
 8000c20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <_sbrk+0x64>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d207      	bcs.n	8000c40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c30:	f004 fa60 	bl	80050f4 <__errno>
 8000c34:	4603      	mov	r3, r0
 8000c36:	220c      	movs	r2, #12
 8000c38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3e:	e009      	b.n	8000c54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c46:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <_sbrk+0x64>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	4a05      	ldr	r2, [pc, #20]	; (8000c64 <_sbrk+0x64>)
 8000c50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c52:	68fb      	ldr	r3, [r7, #12]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3718      	adds	r7, #24
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20018000 	.word	0x20018000
 8000c60:	00000400 	.word	0x00000400
 8000c64:	200001c4 	.word	0x200001c4
 8000c68:	20000260 	.word	0x20000260

08000c6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <SystemInit+0x20>)
 8000c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c76:	4a05      	ldr	r2, [pc, #20]	; (8000c8c <SystemInit+0x20>)
 8000c78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c94:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <MX_USART2_UART_Init+0x58>)
 8000c96:	4a15      	ldr	r2, [pc, #84]	; (8000cec <MX_USART2_UART_Init+0x5c>)
 8000c98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c9a:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <MX_USART2_UART_Init+0x58>)
 8000c9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ca0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca2:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <MX_USART2_UART_Init+0x58>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <MX_USART2_UART_Init+0x58>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <MX_USART2_UART_Init+0x58>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <MX_USART2_UART_Init+0x58>)
 8000cb6:	220c      	movs	r2, #12
 8000cb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cba:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <MX_USART2_UART_Init+0x58>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc0:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <MX_USART2_UART_Init+0x58>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cc6:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <MX_USART2_UART_Init+0x58>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <MX_USART2_UART_Init+0x58>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cd2:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <MX_USART2_UART_Init+0x58>)
 8000cd4:	f003 fc16 	bl	8004504 <HAL_UART_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000cde:	f7ff fed8 	bl	8000a92 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200001c8 	.word	0x200001c8
 8000cec:	40004400 	.word	0x40004400

08000cf0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b0ac      	sub	sp, #176	; 0xb0
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	2288      	movs	r2, #136	; 0x88
 8000d0e:	2100      	movs	r1, #0
 8000d10:	4618      	mov	r0, r3
 8000d12:	f004 fa19 	bl	8005148 <memset>
  if(uartHandle->Instance==USART2)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a21      	ldr	r2, [pc, #132]	; (8000da0 <HAL_UART_MspInit+0xb0>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d13b      	bne.n	8000d98 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d20:	2302      	movs	r3, #2
 8000d22:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d24:	2300      	movs	r3, #0
 8000d26:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f002 fe1b 	bl	8003968 <HAL_RCCEx_PeriphCLKConfig>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d38:	f7ff feab 	bl	8000a92 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d3c:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <HAL_UART_MspInit+0xb4>)
 8000d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d40:	4a18      	ldr	r2, [pc, #96]	; (8000da4 <HAL_UART_MspInit+0xb4>)
 8000d42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d46:	6593      	str	r3, [r2, #88]	; 0x58
 8000d48:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <HAL_UART_MspInit+0xb4>)
 8000d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d54:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <HAL_UART_MspInit+0xb4>)
 8000d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d58:	4a12      	ldr	r2, [pc, #72]	; (8000da4 <HAL_UART_MspInit+0xb4>)
 8000d5a:	f043 0301 	orr.w	r3, r3, #1
 8000d5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d60:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <HAL_UART_MspInit+0xb4>)
 8000d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d64:	f003 0301 	and.w	r3, r3, #1
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d6c:	230c      	movs	r3, #12
 8000d6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d84:	2307      	movs	r3, #7
 8000d86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d94:	f001 fdc2 	bl	800291c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d98:	bf00      	nop
 8000d9a:	37b0      	adds	r7, #176	; 0xb0
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40004400 	.word	0x40004400
 8000da4:	40021000 	.word	0x40021000

08000da8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000da8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000de0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dac:	f7ff ff5e 	bl	8000c6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000db0:	480c      	ldr	r0, [pc, #48]	; (8000de4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000db2:	490d      	ldr	r1, [pc, #52]	; (8000de8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000db4:	4a0d      	ldr	r2, [pc, #52]	; (8000dec <LoopForever+0xe>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db8:	e002      	b.n	8000dc0 <LoopCopyDataInit>

08000dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dbe:	3304      	adds	r3, #4

08000dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc4:	d3f9      	bcc.n	8000dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dc8:	4c0a      	ldr	r4, [pc, #40]	; (8000df4 <LoopForever+0x16>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dcc:	e001      	b.n	8000dd2 <LoopFillZerobss>

08000dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd0:	3204      	adds	r2, #4

08000dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd4:	d3fb      	bcc.n	8000dce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dd6:	f004 f993 	bl	8005100 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dda:	f7ff fd8f 	bl	80008fc <main>

08000dde <LoopForever>:

LoopForever:
    b LoopForever
 8000dde:	e7fe      	b.n	8000dde <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000de0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000dec:	08005b04 	.word	0x08005b04
  ldr r2, =_sbss
 8000df0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000df4:	20000260 	.word	0x20000260

08000df8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000df8:	e7fe      	b.n	8000df8 <ADC1_2_IRQHandler>
	...

08000dfc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e02:	2300      	movs	r3, #0
 8000e04:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <HAL_Init+0x3c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a0b      	ldr	r2, [pc, #44]	; (8000e38 <HAL_Init+0x3c>)
 8000e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e10:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e12:	2003      	movs	r0, #3
 8000e14:	f001 fb48 	bl	80024a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e18:	2000      	movs	r0, #0
 8000e1a:	f000 f80f 	bl	8000e3c <HAL_InitTick>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d002      	beq.n	8000e2a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e24:	2301      	movs	r3, #1
 8000e26:	71fb      	strb	r3, [r7, #7]
 8000e28:	e001      	b.n	8000e2e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e2a:	f7ff fe91 	bl	8000b50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40022000 	.word	0x40022000

08000e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e44:	2300      	movs	r3, #0
 8000e46:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e48:	4b17      	ldr	r3, [pc, #92]	; (8000ea8 <HAL_InitTick+0x6c>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d023      	beq.n	8000e98 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e50:	4b16      	ldr	r3, [pc, #88]	; (8000eac <HAL_InitTick+0x70>)
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <HAL_InitTick+0x6c>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e66:	4618      	mov	r0, r3
 8000e68:	f001 fb53 	bl	8002512 <HAL_SYSTICK_Config>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d10f      	bne.n	8000e92 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2b0f      	cmp	r3, #15
 8000e76:	d809      	bhi.n	8000e8c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	6879      	ldr	r1, [r7, #4]
 8000e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e80:	f001 fb1d 	bl	80024be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e84:	4a0a      	ldr	r2, [pc, #40]	; (8000eb0 <HAL_InitTick+0x74>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6013      	str	r3, [r2, #0]
 8000e8a:	e007      	b.n	8000e9c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	73fb      	strb	r3, [r7, #15]
 8000e90:	e004      	b.n	8000e9c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	73fb      	strb	r3, [r7, #15]
 8000e96:	e001      	b.n	8000e9c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000008 	.word	0x20000008
 8000eac:	20000000 	.word	0x20000000
 8000eb0:	20000004 	.word	0x20000004

08000eb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_IncTick+0x20>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_IncTick+0x24>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <HAL_IncTick+0x24>)
 8000ec6:	6013      	str	r3, [r2, #0]
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	20000008 	.word	0x20000008
 8000ed8:	2000024c 	.word	0x2000024c

08000edc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee0:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <HAL_GetTick+0x14>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	2000024c 	.word	0x2000024c

08000ef4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000efc:	f7ff ffee 	bl	8000edc <HAL_GetTick>
 8000f00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f0c:	d005      	beq.n	8000f1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <HAL_Delay+0x44>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	461a      	mov	r2, r3
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4413      	add	r3, r2
 8000f18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f1a:	bf00      	nop
 8000f1c:	f7ff ffde 	bl	8000edc <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d8f7      	bhi.n	8000f1c <HAL_Delay+0x28>
  {
  }
}
 8000f2c:	bf00      	nop
 8000f2e:	bf00      	nop
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000008 	.word	0x20000008

08000f3c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	431a      	orrs	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	609a      	str	r2, [r3, #8]
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f62:	b480      	push	{r7}
 8000f64:	b083      	sub	sp, #12
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
 8000f6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	431a      	orrs	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b087      	sub	sp, #28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
 8000fb0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	3360      	adds	r3, #96	; 0x60
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	4413      	add	r3, r2
 8000fbe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <LL_ADC_SetOffset+0x44>)
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000fce:	683a      	ldr	r2, [r7, #0]
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000fdc:	bf00      	nop
 8000fde:	371c      	adds	r7, #28
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	03fff000 	.word	0x03fff000

08000fec <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	3360      	adds	r3, #96	; 0x60
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	4413      	add	r3, r2
 8001002:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800100c:	4618      	mov	r0, r3
 800100e:	3714      	adds	r7, #20
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001018:	b480      	push	{r7}
 800101a:	b087      	sub	sp, #28
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	3360      	adds	r3, #96	; 0x60
 8001028:	461a      	mov	r2, r3
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	4413      	add	r3, r2
 8001030:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	431a      	orrs	r2, r3
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001042:	bf00      	nop
 8001044:	371c      	adds	r7, #28
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800104e:	b480      	push	{r7}
 8001050:	b083      	sub	sp, #12
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800105e:	2b00      	cmp	r3, #0
 8001060:	d101      	bne.n	8001066 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001062:	2301      	movs	r3, #1
 8001064:	e000      	b.n	8001068 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001066:	2300      	movs	r3, #0
}
 8001068:	4618      	mov	r0, r3
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001074:	b480      	push	{r7}
 8001076:	b087      	sub	sp, #28
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	3330      	adds	r3, #48	; 0x30
 8001084:	461a      	mov	r2, r3
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	0a1b      	lsrs	r3, r3, #8
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	f003 030c 	and.w	r3, r3, #12
 8001090:	4413      	add	r3, r2
 8001092:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	f003 031f 	and.w	r3, r3, #31
 800109e:	211f      	movs	r1, #31
 80010a0:	fa01 f303 	lsl.w	r3, r1, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	401a      	ands	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	0e9b      	lsrs	r3, r3, #26
 80010ac:	f003 011f 	and.w	r1, r3, #31
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	f003 031f 	and.w	r3, r3, #31
 80010b6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ba:	431a      	orrs	r2, r3
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80010c0:	bf00      	nop
 80010c2:	371c      	adds	r7, #28
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b087      	sub	sp, #28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	3314      	adds	r3, #20
 80010dc:	461a      	mov	r2, r3
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	0e5b      	lsrs	r3, r3, #25
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	f003 0304 	and.w	r3, r3, #4
 80010e8:	4413      	add	r3, r2
 80010ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	0d1b      	lsrs	r3, r3, #20
 80010f4:	f003 031f 	and.w	r3, r3, #31
 80010f8:	2107      	movs	r1, #7
 80010fa:	fa01 f303 	lsl.w	r3, r1, r3
 80010fe:	43db      	mvns	r3, r3
 8001100:	401a      	ands	r2, r3
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	0d1b      	lsrs	r3, r3, #20
 8001106:	f003 031f 	and.w	r3, r3, #31
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	fa01 f303 	lsl.w	r3, r1, r3
 8001110:	431a      	orrs	r2, r3
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001116:	bf00      	nop
 8001118:	371c      	adds	r7, #28
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
	...

08001124 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800113c:	43db      	mvns	r3, r3
 800113e:	401a      	ands	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f003 0318 	and.w	r3, r3, #24
 8001146:	4908      	ldr	r1, [pc, #32]	; (8001168 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001148:	40d9      	lsrs	r1, r3
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	400b      	ands	r3, r1
 800114e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001152:	431a      	orrs	r2, r3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800115a:	bf00      	nop
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	0007ffff 	.word	0x0007ffff

0800116c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f003 031f 	and.w	r3, r3, #31
}
 800117c:	4618      	mov	r0, r3
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001198:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	6093      	str	r3, [r2, #8]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011c0:	d101      	bne.n	80011c6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80011c2:	2301      	movs	r3, #1
 80011c4:	e000      	b.n	80011c8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80011e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001210:	d101      	bne.n	8001216 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001212:	2301      	movs	r3, #1
 8001214:	e000      	b.n	8001218 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001216:	2300      	movs	r3, #0
}
 8001218:	4618      	mov	r0, r3
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001234:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001238:	f043 0201 	orr.w	r2, r3, #1
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	2b01      	cmp	r3, #1
 800125e:	d101      	bne.n	8001264 <LL_ADC_IsEnabled+0x18>
 8001260:	2301      	movs	r3, #1
 8001262:	e000      	b.n	8001266 <LL_ADC_IsEnabled+0x1a>
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001272:	b480      	push	{r7}
 8001274:	b083      	sub	sp, #12
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001282:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001286:	f043 0204 	orr.w	r2, r3, #4
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800129a:	b480      	push	{r7}
 800129c:	b083      	sub	sp, #12
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f003 0304 	and.w	r3, r3, #4
 80012aa:	2b04      	cmp	r3, #4
 80012ac:	d101      	bne.n	80012b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80012ae:	2301      	movs	r3, #1
 80012b0:	e000      	b.n	80012b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f003 0308 	and.w	r3, r3, #8
 80012d0:	2b08      	cmp	r3, #8
 80012d2:	d101      	bne.n	80012d8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80012d4:	2301      	movs	r3, #1
 80012d6:	e000      	b.n	80012da <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012e8:	b590      	push	{r4, r7, lr}
 80012ea:	b089      	sub	sp, #36	; 0x24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012f0:	2300      	movs	r3, #0
 80012f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d101      	bne.n	8001302 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e136      	b.n	8001570 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800130c:	2b00      	cmp	r3, #0
 800130e:	d109      	bne.n	8001324 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff f9ad 	bl	8000670 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff3f 	bl	80011ac <LL_ADC_IsDeepPowerDownEnabled>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d004      	beq.n	800133e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ff25 	bl	8001188 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff ff5a 	bl	80011fc <LL_ADC_IsInternalRegulatorEnabled>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d115      	bne.n	800137a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff ff3e 	bl	80011d4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001358:	4b87      	ldr	r3, [pc, #540]	; (8001578 <HAL_ADC_Init+0x290>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	099b      	lsrs	r3, r3, #6
 800135e:	4a87      	ldr	r2, [pc, #540]	; (800157c <HAL_ADC_Init+0x294>)
 8001360:	fba2 2303 	umull	r2, r3, r2, r3
 8001364:	099b      	lsrs	r3, r3, #6
 8001366:	3301      	adds	r3, #1
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800136c:	e002      	b.n	8001374 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	3b01      	subs	r3, #1
 8001372:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1f9      	bne.n	800136e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff ff3c 	bl	80011fc <LL_ADC_IsInternalRegulatorEnabled>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10d      	bne.n	80013a6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800138e:	f043 0210 	orr.w	r2, r3, #16
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139a:	f043 0201 	orr.w	r2, r3, #1
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff ff75 	bl	800129a <LL_ADC_REG_IsConversionOngoing>
 80013b0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013b6:	f003 0310 	and.w	r3, r3, #16
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f040 80cf 	bne.w	800155e <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f040 80cb 	bne.w	800155e <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013cc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80013d0:	f043 0202 	orr.w	r2, r3, #2
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff35 	bl	800124c <LL_ADC_IsEnabled>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d115      	bne.n	8001414 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80013e8:	4865      	ldr	r0, [pc, #404]	; (8001580 <HAL_ADC_Init+0x298>)
 80013ea:	f7ff ff2f 	bl	800124c <LL_ADC_IsEnabled>
 80013ee:	4604      	mov	r4, r0
 80013f0:	4864      	ldr	r0, [pc, #400]	; (8001584 <HAL_ADC_Init+0x29c>)
 80013f2:	f7ff ff2b 	bl	800124c <LL_ADC_IsEnabled>
 80013f6:	4603      	mov	r3, r0
 80013f8:	431c      	orrs	r4, r3
 80013fa:	4863      	ldr	r0, [pc, #396]	; (8001588 <HAL_ADC_Init+0x2a0>)
 80013fc:	f7ff ff26 	bl	800124c <LL_ADC_IsEnabled>
 8001400:	4603      	mov	r3, r0
 8001402:	4323      	orrs	r3, r4
 8001404:	2b00      	cmp	r3, #0
 8001406:	d105      	bne.n	8001414 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	4619      	mov	r1, r3
 800140e:	485f      	ldr	r0, [pc, #380]	; (800158c <HAL_ADC_Init+0x2a4>)
 8001410:	f7ff fd94 	bl	8000f3c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	7e5b      	ldrb	r3, [r3, #25]
 8001418:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800141e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001424:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800142a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001432:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001434:	4313      	orrs	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d106      	bne.n	8001450 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001446:	3b01      	subs	r3, #1
 8001448:	045b      	lsls	r3, r3, #17
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001454:	2b00      	cmp	r3, #0
 8001456:	d009      	beq.n	800146c <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001464:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4313      	orrs	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	68da      	ldr	r2, [r3, #12]
 8001472:	4b47      	ldr	r3, [pc, #284]	; (8001590 <HAL_ADC_Init+0x2a8>)
 8001474:	4013      	ands	r3, r2
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	6812      	ldr	r2, [r2, #0]
 800147a:	69b9      	ldr	r1, [r7, #24]
 800147c:	430b      	orrs	r3, r1
 800147e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff ff08 	bl	800129a <LL_ADC_REG_IsConversionOngoing>
 800148a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ff15 	bl	80012c0 <LL_ADC_INJ_IsConversionOngoing>
 8001496:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d13d      	bne.n	800151a <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d13a      	bne.n	800151a <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80014a8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014b0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014c0:	f023 0302 	bic.w	r3, r3, #2
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	6812      	ldr	r2, [r2, #0]
 80014c8:	69b9      	ldr	r1, [r7, #24]
 80014ca:	430b      	orrs	r3, r1
 80014cc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d118      	bne.n	800150a <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80014e2:	f023 0304 	bic.w	r3, r3, #4
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80014ee:	4311      	orrs	r1, r2
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80014f4:	4311      	orrs	r1, r2
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80014fa:	430a      	orrs	r2, r1
 80014fc:	431a      	orrs	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f042 0201 	orr.w	r2, r2, #1
 8001506:	611a      	str	r2, [r3, #16]
 8001508:	e007      	b.n	800151a <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	691a      	ldr	r2, [r3, #16]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f022 0201 	bic.w	r2, r2, #1
 8001518:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d10c      	bne.n	800153c <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001528:	f023 010f 	bic.w	r1, r3, #15
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69db      	ldr	r3, [r3, #28]
 8001530:	1e5a      	subs	r2, r3, #1
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	430a      	orrs	r2, r1
 8001538:	631a      	str	r2, [r3, #48]	; 0x30
 800153a:	e007      	b.n	800154c <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 020f 	bic.w	r2, r2, #15
 800154a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001550:	f023 0303 	bic.w	r3, r3, #3
 8001554:	f043 0201 	orr.w	r2, r3, #1
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	655a      	str	r2, [r3, #84]	; 0x54
 800155c:	e007      	b.n	800156e <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001562:	f043 0210 	orr.w	r2, r3, #16
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800156e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3724      	adds	r7, #36	; 0x24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd90      	pop	{r4, r7, pc}
 8001578:	20000000 	.word	0x20000000
 800157c:	053e2d63 	.word	0x053e2d63
 8001580:	50040000 	.word	0x50040000
 8001584:	50040100 	.word	0x50040100
 8001588:	50040200 	.word	0x50040200
 800158c:	50040300 	.word	0x50040300
 8001590:	fff0c007 	.word	0xfff0c007

08001594 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015a0:	4853      	ldr	r0, [pc, #332]	; (80016f0 <HAL_ADC_Start_DMA+0x15c>)
 80015a2:	f7ff fde3 	bl	800116c <LL_ADC_GetMultimode>
 80015a6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff fe74 	bl	800129a <LL_ADC_REG_IsConversionOngoing>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f040 8093 	bne.w	80016e0 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d101      	bne.n	80015c8 <HAL_ADC_Start_DMA+0x34>
 80015c4:	2302      	movs	r3, #2
 80015c6:	e08e      	b.n	80016e6 <HAL_ADC_Start_DMA+0x152>
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a47      	ldr	r2, [pc, #284]	; (80016f4 <HAL_ADC_Start_DMA+0x160>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d008      	beq.n	80015ec <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d005      	beq.n	80015ec <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	2b05      	cmp	r3, #5
 80015e4:	d002      	beq.n	80015ec <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	2b09      	cmp	r3, #9
 80015ea:	d172      	bne.n	80016d2 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80015ec:	68f8      	ldr	r0, [r7, #12]
 80015ee:	f000 fc9b 	bl	8001f28 <ADC_Enable>
 80015f2:	4603      	mov	r3, r0
 80015f4:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80015f6:	7dfb      	ldrb	r3, [r7, #23]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d165      	bne.n	80016c8 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001600:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001604:	f023 0301 	bic.w	r3, r3, #1
 8001608:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a38      	ldr	r2, [pc, #224]	; (80016f8 <HAL_ADC_Start_DMA+0x164>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d002      	beq.n	8001620 <HAL_ADC_Start_DMA+0x8c>
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	e000      	b.n	8001622 <HAL_ADC_Start_DMA+0x8e>
 8001620:	4b36      	ldr	r3, [pc, #216]	; (80016fc <HAL_ADC_Start_DMA+0x168>)
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	6812      	ldr	r2, [r2, #0]
 8001626:	4293      	cmp	r3, r2
 8001628:	d002      	beq.n	8001630 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d105      	bne.n	800163c <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001634:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001640:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d006      	beq.n	8001656 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800164c:	f023 0206 	bic.w	r2, r3, #6
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	659a      	str	r2, [r3, #88]	; 0x58
 8001654:	e002      	b.n	800165c <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2200      	movs	r2, #0
 800165a:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001660:	4a27      	ldr	r2, [pc, #156]	; (8001700 <HAL_ADC_Start_DMA+0x16c>)
 8001662:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001668:	4a26      	ldr	r2, [pc, #152]	; (8001704 <HAL_ADC_Start_DMA+0x170>)
 800166a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001670:	4a25      	ldr	r2, [pc, #148]	; (8001708 <HAL_ADC_Start_DMA+0x174>)
 8001672:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	221c      	movs	r2, #28
 800167a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	685a      	ldr	r2, [r3, #4]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f042 0210 	orr.w	r2, r2, #16
 8001692:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	68da      	ldr	r2, [r3, #12]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f042 0201 	orr.w	r2, r2, #1
 80016a2:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	3340      	adds	r3, #64	; 0x40
 80016ae:	4619      	mov	r1, r3
 80016b0:	68ba      	ldr	r2, [r7, #8]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f000 fff2 	bl	800269c <HAL_DMA_Start_IT>
 80016b8:	4603      	mov	r3, r0
 80016ba:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fdd6 	bl	8001272 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80016c6:	e00d      	b.n	80016e4 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80016d0:	e008      	b.n	80016e4 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80016de:	e001      	b.n	80016e4 <HAL_ADC_Start_DMA+0x150>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80016e0:	2302      	movs	r3, #2
 80016e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80016e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3718      	adds	r7, #24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	50040300 	.word	0x50040300
 80016f4:	50040200 	.word	0x50040200
 80016f8:	50040100 	.word	0x50040100
 80016fc:	50040000 	.word	0x50040000
 8001700:	08002035 	.word	0x08002035
 8001704:	0800210d 	.word	0x0800210d
 8001708:	08002129 	.word	0x08002129

0800170c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b0b6      	sub	sp, #216	; 0xd8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001752:	2300      	movs	r3, #0
 8001754:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001758:	2300      	movs	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001762:	2b01      	cmp	r3, #1
 8001764:	d101      	bne.n	800176a <HAL_ADC_ConfigChannel+0x22>
 8001766:	2302      	movs	r3, #2
 8001768:	e3c7      	b.n	8001efa <HAL_ADC_ConfigChannel+0x7b2>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2201      	movs	r2, #1
 800176e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff fd8f 	bl	800129a <LL_ADC_REG_IsConversionOngoing>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	f040 83a8 	bne.w	8001ed4 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2b05      	cmp	r3, #5
 800178a:	d824      	bhi.n	80017d6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	3b02      	subs	r3, #2
 8001792:	2b03      	cmp	r3, #3
 8001794:	d81b      	bhi.n	80017ce <HAL_ADC_ConfigChannel+0x86>
 8001796:	a201      	add	r2, pc, #4	; (adr r2, 800179c <HAL_ADC_ConfigChannel+0x54>)
 8001798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800179c:	080017ad 	.word	0x080017ad
 80017a0:	080017b5 	.word	0x080017b5
 80017a4:	080017bd 	.word	0x080017bd
 80017a8:	080017c5 	.word	0x080017c5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	220c      	movs	r2, #12
 80017b0:	605a      	str	r2, [r3, #4]
          break;
 80017b2:	e011      	b.n	80017d8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	2212      	movs	r2, #18
 80017b8:	605a      	str	r2, [r3, #4]
          break;
 80017ba:	e00d      	b.n	80017d8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	2218      	movs	r2, #24
 80017c0:	605a      	str	r2, [r3, #4]
          break;
 80017c2:	e009      	b.n	80017d8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017ca:	605a      	str	r2, [r3, #4]
          break;
 80017cc:	e004      	b.n	80017d8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	2206      	movs	r2, #6
 80017d2:	605a      	str	r2, [r3, #4]
          break;
 80017d4:	e000      	b.n	80017d8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80017d6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6818      	ldr	r0, [r3, #0]
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	6859      	ldr	r1, [r3, #4]
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	461a      	mov	r2, r3
 80017e6:	f7ff fc45 	bl	8001074 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff fd53 	bl	800129a <LL_ADC_REG_IsConversionOngoing>
 80017f4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fd5f 	bl	80012c0 <LL_ADC_INJ_IsConversionOngoing>
 8001802:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001806:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800180a:	2b00      	cmp	r3, #0
 800180c:	f040 81a6 	bne.w	8001b5c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001810:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001814:	2b00      	cmp	r3, #0
 8001816:	f040 81a1 	bne.w	8001b5c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6818      	ldr	r0, [r3, #0]
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	6819      	ldr	r1, [r3, #0]
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	461a      	mov	r2, r3
 8001828:	f7ff fc50 	bl	80010cc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	695a      	ldr	r2, [r3, #20]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	08db      	lsrs	r3, r3, #3
 8001838:	f003 0303 	and.w	r3, r3, #3
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	2b04      	cmp	r3, #4
 800184c:	d00a      	beq.n	8001864 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6818      	ldr	r0, [r3, #0]
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	6919      	ldr	r1, [r3, #16]
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800185e:	f7ff fba1 	bl	8000fa4 <LL_ADC_SetOffset>
 8001862:	e17b      	b.n	8001b5c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2100      	movs	r1, #0
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff fbbe 	bl	8000fec <LL_ADC_GetOffsetChannel>
 8001870:	4603      	mov	r3, r0
 8001872:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001876:	2b00      	cmp	r3, #0
 8001878:	d10a      	bne.n	8001890 <HAL_ADC_ConfigChannel+0x148>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2100      	movs	r1, #0
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fbb3 	bl	8000fec <LL_ADC_GetOffsetChannel>
 8001886:	4603      	mov	r3, r0
 8001888:	0e9b      	lsrs	r3, r3, #26
 800188a:	f003 021f 	and.w	r2, r3, #31
 800188e:	e01e      	b.n	80018ce <HAL_ADC_ConfigChannel+0x186>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2100      	movs	r1, #0
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fba8 	bl	8000fec <LL_ADC_GetOffsetChannel>
 800189c:	4603      	mov	r3, r0
 800189e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80018a6:	fa93 f3a3 	rbit	r3, r3
 80018aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80018b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80018b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80018be:	2320      	movs	r3, #32
 80018c0:	e004      	b.n	80018cc <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80018c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018c6:	fab3 f383 	clz	r3, r3
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d105      	bne.n	80018e6 <HAL_ADC_ConfigChannel+0x19e>
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	0e9b      	lsrs	r3, r3, #26
 80018e0:	f003 031f 	and.w	r3, r3, #31
 80018e4:	e018      	b.n	8001918 <HAL_ADC_ConfigChannel+0x1d0>
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80018f2:	fa93 f3a3 	rbit	r3, r3
 80018f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80018fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001902:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800190a:	2320      	movs	r3, #32
 800190c:	e004      	b.n	8001918 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800190e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001912:	fab3 f383 	clz	r3, r3
 8001916:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001918:	429a      	cmp	r2, r3
 800191a:	d106      	bne.n	800192a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2200      	movs	r2, #0
 8001922:	2100      	movs	r1, #0
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fb77 	bl	8001018 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2101      	movs	r1, #1
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fb5b 	bl	8000fec <LL_ADC_GetOffsetChannel>
 8001936:	4603      	mov	r3, r0
 8001938:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800193c:	2b00      	cmp	r3, #0
 800193e:	d10a      	bne.n	8001956 <HAL_ADC_ConfigChannel+0x20e>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2101      	movs	r1, #1
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff fb50 	bl	8000fec <LL_ADC_GetOffsetChannel>
 800194c:	4603      	mov	r3, r0
 800194e:	0e9b      	lsrs	r3, r3, #26
 8001950:	f003 021f 	and.w	r2, r3, #31
 8001954:	e01e      	b.n	8001994 <HAL_ADC_ConfigChannel+0x24c>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2101      	movs	r1, #1
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff fb45 	bl	8000fec <LL_ADC_GetOffsetChannel>
 8001962:	4603      	mov	r3, r0
 8001964:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001968:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800196c:	fa93 f3a3 	rbit	r3, r3
 8001970:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001974:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001978:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800197c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001984:	2320      	movs	r3, #32
 8001986:	e004      	b.n	8001992 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001988:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800198c:	fab3 f383 	clz	r3, r3
 8001990:	b2db      	uxtb	r3, r3
 8001992:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800199c:	2b00      	cmp	r3, #0
 800199e:	d105      	bne.n	80019ac <HAL_ADC_ConfigChannel+0x264>
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	0e9b      	lsrs	r3, r3, #26
 80019a6:	f003 031f 	and.w	r3, r3, #31
 80019aa:	e018      	b.n	80019de <HAL_ADC_ConfigChannel+0x296>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80019b8:	fa93 f3a3 	rbit	r3, r3
 80019bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80019c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80019c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80019c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80019d0:	2320      	movs	r3, #32
 80019d2:	e004      	b.n	80019de <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80019d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019d8:	fab3 f383 	clz	r3, r3
 80019dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019de:	429a      	cmp	r2, r3
 80019e0:	d106      	bne.n	80019f0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2200      	movs	r2, #0
 80019e8:	2101      	movs	r1, #1
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff fb14 	bl	8001018 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2102      	movs	r1, #2
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff faf8 	bl	8000fec <LL_ADC_GetOffsetChannel>
 80019fc:	4603      	mov	r3, r0
 80019fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10a      	bne.n	8001a1c <HAL_ADC_ConfigChannel+0x2d4>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2102      	movs	r1, #2
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff faed 	bl	8000fec <LL_ADC_GetOffsetChannel>
 8001a12:	4603      	mov	r3, r0
 8001a14:	0e9b      	lsrs	r3, r3, #26
 8001a16:	f003 021f 	and.w	r2, r3, #31
 8001a1a:	e01e      	b.n	8001a5a <HAL_ADC_ConfigChannel+0x312>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2102      	movs	r1, #2
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff fae2 	bl	8000fec <LL_ADC_GetOffsetChannel>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a32:	fa93 f3a3 	rbit	r3, r3
 8001a36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001a3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001a42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001a4a:	2320      	movs	r3, #32
 8001a4c:	e004      	b.n	8001a58 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001a4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a52:	fab3 f383 	clz	r3, r3
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d105      	bne.n	8001a72 <HAL_ADC_ConfigChannel+0x32a>
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	0e9b      	lsrs	r3, r3, #26
 8001a6c:	f003 031f 	and.w	r3, r3, #31
 8001a70:	e016      	b.n	8001aa0 <HAL_ADC_ConfigChannel+0x358>
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a7e:	fa93 f3a3 	rbit	r3, r3
 8001a82:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001a84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001a8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001a92:	2320      	movs	r3, #32
 8001a94:	e004      	b.n	8001aa0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001a96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a9a:	fab3 f383 	clz	r3, r3
 8001a9e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d106      	bne.n	8001ab2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2102      	movs	r1, #2
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fab3 	bl	8001018 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2103      	movs	r1, #3
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fa97 	bl	8000fec <LL_ADC_GetOffsetChannel>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d10a      	bne.n	8001ade <HAL_ADC_ConfigChannel+0x396>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2103      	movs	r1, #3
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff fa8c 	bl	8000fec <LL_ADC_GetOffsetChannel>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	0e9b      	lsrs	r3, r3, #26
 8001ad8:	f003 021f 	and.w	r2, r3, #31
 8001adc:	e017      	b.n	8001b0e <HAL_ADC_ConfigChannel+0x3c6>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2103      	movs	r1, #3
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff fa81 	bl	8000fec <LL_ADC_GetOffsetChannel>
 8001aea:	4603      	mov	r3, r0
 8001aec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001af0:	fa93 f3a3 	rbit	r3, r3
 8001af4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001af6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001af8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001afa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d101      	bne.n	8001b04 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001b00:	2320      	movs	r3, #32
 8001b02:	e003      	b.n	8001b0c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001b04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b06:	fab3 f383 	clz	r3, r3
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d105      	bne.n	8001b26 <HAL_ADC_ConfigChannel+0x3de>
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	0e9b      	lsrs	r3, r3, #26
 8001b20:	f003 031f 	and.w	r3, r3, #31
 8001b24:	e011      	b.n	8001b4a <HAL_ADC_ConfigChannel+0x402>
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b2e:	fa93 f3a3 	rbit	r3, r3
 8001b32:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001b34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b36:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001b38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001b3e:	2320      	movs	r3, #32
 8001b40:	e003      	b.n	8001b4a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b44:	fab3 f383 	clz	r3, r3
 8001b48:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d106      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2200      	movs	r2, #0
 8001b54:	2103      	movs	r1, #3
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fa5e 	bl	8001018 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fb73 	bl	800124c <LL_ADC_IsEnabled>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f040 813f 	bne.w	8001dec <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6818      	ldr	r0, [r3, #0]
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	6819      	ldr	r1, [r3, #0]
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	f7ff fad2 	bl	8001124 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	4a8e      	ldr	r2, [pc, #568]	; (8001dc0 <HAL_ADC_ConfigChannel+0x678>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	f040 8130 	bne.w	8001dec <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d10b      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x46c>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	0e9b      	lsrs	r3, r3, #26
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	f003 031f 	and.w	r3, r3, #31
 8001ba8:	2b09      	cmp	r3, #9
 8001baa:	bf94      	ite	ls
 8001bac:	2301      	movls	r3, #1
 8001bae:	2300      	movhi	r3, #0
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	e019      	b.n	8001be8 <HAL_ADC_ConfigChannel+0x4a0>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bbc:	fa93 f3a3 	rbit	r3, r3
 8001bc0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001bc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bc4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001bc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001bcc:	2320      	movs	r3, #32
 8001bce:	e003      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001bd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bd2:	fab3 f383 	clz	r3, r3
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	3301      	adds	r3, #1
 8001bda:	f003 031f 	and.w	r3, r3, #31
 8001bde:	2b09      	cmp	r3, #9
 8001be0:	bf94      	ite	ls
 8001be2:	2301      	movls	r3, #1
 8001be4:	2300      	movhi	r3, #0
 8001be6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d079      	beq.n	8001ce0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d107      	bne.n	8001c08 <HAL_ADC_ConfigChannel+0x4c0>
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	0e9b      	lsrs	r3, r3, #26
 8001bfe:	3301      	adds	r3, #1
 8001c00:	069b      	lsls	r3, r3, #26
 8001c02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c06:	e015      	b.n	8001c34 <HAL_ADC_ConfigChannel+0x4ec>
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c10:	fa93 f3a3 	rbit	r3, r3
 8001c14:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c18:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d101      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001c20:	2320      	movs	r3, #32
 8001c22:	e003      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c26:	fab3 f383 	clz	r3, r3
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	069b      	lsls	r3, r3, #26
 8001c30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d109      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x50c>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	0e9b      	lsrs	r3, r3, #26
 8001c46:	3301      	adds	r3, #1
 8001c48:	f003 031f 	and.w	r3, r3, #31
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c52:	e017      	b.n	8001c84 <HAL_ADC_ConfigChannel+0x53c>
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c5c:	fa93 f3a3 	rbit	r3, r3
 8001c60:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001c62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c64:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001c66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001c6c:	2320      	movs	r3, #32
 8001c6e:	e003      	b.n	8001c78 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001c70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c72:	fab3 f383 	clz	r3, r3
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	3301      	adds	r3, #1
 8001c7a:	f003 031f 	and.w	r3, r3, #31
 8001c7e:	2101      	movs	r1, #1
 8001c80:	fa01 f303 	lsl.w	r3, r1, r3
 8001c84:	ea42 0103 	orr.w	r1, r2, r3
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d10a      	bne.n	8001caa <HAL_ADC_ConfigChannel+0x562>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	0e9b      	lsrs	r3, r3, #26
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	f003 021f 	and.w	r2, r3, #31
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	4413      	add	r3, r2
 8001ca6:	051b      	lsls	r3, r3, #20
 8001ca8:	e018      	b.n	8001cdc <HAL_ADC_ConfigChannel+0x594>
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cb2:	fa93 f3a3 	rbit	r3, r3
 8001cb6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001cc2:	2320      	movs	r3, #32
 8001cc4:	e003      	b.n	8001cce <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cc8:	fab3 f383 	clz	r3, r3
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	3301      	adds	r3, #1
 8001cd0:	f003 021f 	and.w	r2, r3, #31
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4413      	add	r3, r2
 8001cda:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cdc:	430b      	orrs	r3, r1
 8001cde:	e080      	b.n	8001de2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d107      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x5b4>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	0e9b      	lsrs	r3, r3, #26
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	069b      	lsls	r3, r3, #26
 8001cf6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cfa:	e015      	b.n	8001d28 <HAL_ADC_ConfigChannel+0x5e0>
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d04:	fa93 f3a3 	rbit	r3, r3
 8001d08:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d0c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001d14:	2320      	movs	r3, #32
 8001d16:	e003      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d1a:	fab3 f383 	clz	r3, r3
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	3301      	adds	r3, #1
 8001d22:	069b      	lsls	r3, r3, #26
 8001d24:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d109      	bne.n	8001d48 <HAL_ADC_ConfigChannel+0x600>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	0e9b      	lsrs	r3, r3, #26
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	f003 031f 	and.w	r3, r3, #31
 8001d40:	2101      	movs	r1, #1
 8001d42:	fa01 f303 	lsl.w	r3, r1, r3
 8001d46:	e017      	b.n	8001d78 <HAL_ADC_ConfigChannel+0x630>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
 8001d50:	fa93 f3a3 	rbit	r3, r3
 8001d54:	61fb      	str	r3, [r7, #28]
  return result;
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001d60:	2320      	movs	r3, #32
 8001d62:	e003      	b.n	8001d6c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d66:	fab3 f383 	clz	r3, r3
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	f003 031f 	and.w	r3, r3, #31
 8001d72:	2101      	movs	r1, #1
 8001d74:	fa01 f303 	lsl.w	r3, r1, r3
 8001d78:	ea42 0103 	orr.w	r1, r2, r3
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d10d      	bne.n	8001da4 <HAL_ADC_ConfigChannel+0x65c>
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	0e9b      	lsrs	r3, r3, #26
 8001d8e:	3301      	adds	r3, #1
 8001d90:	f003 021f 	and.w	r2, r3, #31
 8001d94:	4613      	mov	r3, r2
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	4413      	add	r3, r2
 8001d9a:	3b1e      	subs	r3, #30
 8001d9c:	051b      	lsls	r3, r3, #20
 8001d9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001da2:	e01d      	b.n	8001de0 <HAL_ADC_ConfigChannel+0x698>
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	fa93 f3a3 	rbit	r3, r3
 8001db0:	613b      	str	r3, [r7, #16]
  return result;
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d103      	bne.n	8001dc4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001dbc:	2320      	movs	r3, #32
 8001dbe:	e005      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x684>
 8001dc0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	fab3 f383 	clz	r3, r3
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	3301      	adds	r3, #1
 8001dce:	f003 021f 	and.w	r2, r3, #31
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3b1e      	subs	r3, #30
 8001dda:	051b      	lsls	r3, r3, #20
 8001ddc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001de0:	430b      	orrs	r3, r1
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	6892      	ldr	r2, [r2, #8]
 8001de6:	4619      	mov	r1, r3
 8001de8:	f7ff f970 	bl	80010cc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	4b44      	ldr	r3, [pc, #272]	; (8001f04 <HAL_ADC_ConfigChannel+0x7bc>)
 8001df2:	4013      	ands	r3, r2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d07a      	beq.n	8001eee <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001df8:	4843      	ldr	r0, [pc, #268]	; (8001f08 <HAL_ADC_ConfigChannel+0x7c0>)
 8001dfa:	f7ff f8c5 	bl	8000f88 <LL_ADC_GetCommonPathInternalCh>
 8001dfe:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a41      	ldr	r2, [pc, #260]	; (8001f0c <HAL_ADC_ConfigChannel+0x7c4>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d12c      	bne.n	8001e66 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d126      	bne.n	8001e66 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a3c      	ldr	r2, [pc, #240]	; (8001f10 <HAL_ADC_ConfigChannel+0x7c8>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d004      	beq.n	8001e2c <HAL_ADC_ConfigChannel+0x6e4>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a3b      	ldr	r2, [pc, #236]	; (8001f14 <HAL_ADC_ConfigChannel+0x7cc>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d15d      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e34:	4619      	mov	r1, r3
 8001e36:	4834      	ldr	r0, [pc, #208]	; (8001f08 <HAL_ADC_ConfigChannel+0x7c0>)
 8001e38:	f7ff f893 	bl	8000f62 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e3c:	4b36      	ldr	r3, [pc, #216]	; (8001f18 <HAL_ADC_ConfigChannel+0x7d0>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	099b      	lsrs	r3, r3, #6
 8001e42:	4a36      	ldr	r2, [pc, #216]	; (8001f1c <HAL_ADC_ConfigChannel+0x7d4>)
 8001e44:	fba2 2303 	umull	r2, r3, r2, r3
 8001e48:	099b      	lsrs	r3, r3, #6
 8001e4a:	1c5a      	adds	r2, r3, #1
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	4413      	add	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e56:	e002      	b.n	8001e5e <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1f9      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e64:	e040      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a2d      	ldr	r2, [pc, #180]	; (8001f20 <HAL_ADC_ConfigChannel+0x7d8>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d118      	bne.n	8001ea2 <HAL_ADC_ConfigChannel+0x75a>
 8001e70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d112      	bne.n	8001ea2 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a23      	ldr	r2, [pc, #140]	; (8001f10 <HAL_ADC_ConfigChannel+0x7c8>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d004      	beq.n	8001e90 <HAL_ADC_ConfigChannel+0x748>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a22      	ldr	r2, [pc, #136]	; (8001f14 <HAL_ADC_ConfigChannel+0x7cc>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d12d      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e98:	4619      	mov	r1, r3
 8001e9a:	481b      	ldr	r0, [pc, #108]	; (8001f08 <HAL_ADC_ConfigChannel+0x7c0>)
 8001e9c:	f7ff f861 	bl	8000f62 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ea0:	e024      	b.n	8001eec <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a1f      	ldr	r2, [pc, #124]	; (8001f24 <HAL_ADC_ConfigChannel+0x7dc>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d120      	bne.n	8001eee <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001eac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001eb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d11a      	bne.n	8001eee <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a14      	ldr	r2, [pc, #80]	; (8001f10 <HAL_ADC_ConfigChannel+0x7c8>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d115      	bne.n	8001eee <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ec2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ec6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001eca:	4619      	mov	r1, r3
 8001ecc:	480e      	ldr	r0, [pc, #56]	; (8001f08 <HAL_ADC_ConfigChannel+0x7c0>)
 8001ece:	f7ff f848 	bl	8000f62 <LL_ADC_SetCommonPathInternalCh>
 8001ed2:	e00c      	b.n	8001eee <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed8:	f043 0220 	orr.w	r2, r3, #32
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001ee6:	e002      	b.n	8001eee <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ee8:	bf00      	nop
 8001eea:	e000      	b.n	8001eee <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001eec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001ef6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	37d8      	adds	r7, #216	; 0xd8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	80080000 	.word	0x80080000
 8001f08:	50040300 	.word	0x50040300
 8001f0c:	c7520000 	.word	0xc7520000
 8001f10:	50040000 	.word	0x50040000
 8001f14:	50040200 	.word	0x50040200
 8001f18:	20000000 	.word	0x20000000
 8001f1c:	053e2d63 	.word	0x053e2d63
 8001f20:	cb840000 	.word	0xcb840000
 8001f24:	80000001 	.word	0x80000001

08001f28 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff f987 	bl	800124c <LL_ADC_IsEnabled>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d169      	bne.n	8002018 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689a      	ldr	r2, [r3, #8]
 8001f4a:	4b36      	ldr	r3, [pc, #216]	; (8002024 <ADC_Enable+0xfc>)
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00d      	beq.n	8001f6e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f56:	f043 0210 	orr.w	r2, r3, #16
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f62:	f043 0201 	orr.w	r2, r3, #1
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e055      	b.n	800201a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff f956 	bl	8001224 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001f78:	482b      	ldr	r0, [pc, #172]	; (8002028 <ADC_Enable+0x100>)
 8001f7a:	f7ff f805 	bl	8000f88 <LL_ADC_GetCommonPathInternalCh>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d013      	beq.n	8001fb0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f88:	4b28      	ldr	r3, [pc, #160]	; (800202c <ADC_Enable+0x104>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	099b      	lsrs	r3, r3, #6
 8001f8e:	4a28      	ldr	r2, [pc, #160]	; (8002030 <ADC_Enable+0x108>)
 8001f90:	fba2 2303 	umull	r2, r3, r2, r3
 8001f94:	099b      	lsrs	r3, r3, #6
 8001f96:	1c5a      	adds	r2, r3, #1
 8001f98:	4613      	mov	r3, r2
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	4413      	add	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001fa2:	e002      	b.n	8001faa <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1f9      	bne.n	8001fa4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001fb0:	f7fe ff94 	bl	8000edc <HAL_GetTick>
 8001fb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fb6:	e028      	b.n	800200a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff f945 	bl	800124c <LL_ADC_IsEnabled>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d104      	bne.n	8001fd2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff f929 	bl	8001224 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001fd2:	f7fe ff83 	bl	8000edc <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d914      	bls.n	800200a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d00d      	beq.n	800200a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff2:	f043 0210 	orr.w	r2, r3, #16
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffe:	f043 0201 	orr.w	r2, r3, #1
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e007      	b.n	800201a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	2b01      	cmp	r3, #1
 8002016:	d1cf      	bne.n	8001fb8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	8000003f 	.word	0x8000003f
 8002028:	50040300 	.word	0x50040300
 800202c:	20000000 	.word	0x20000000
 8002030:	053e2d63 	.word	0x053e2d63

08002034 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002040:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002046:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800204a:	2b00      	cmp	r3, #0
 800204c:	d14b      	bne.n	80020e6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002052:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0308 	and.w	r3, r3, #8
 8002064:	2b00      	cmp	r3, #0
 8002066:	d021      	beq.n	80020ac <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f7fe ffee 	bl	800104e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d032      	beq.n	80020de <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d12b      	bne.n	80020de <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800208a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002096:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d11f      	bne.n	80020de <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a2:	f043 0201 	orr.w	r2, r3, #1
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	655a      	str	r2, [r3, #84]	; 0x54
 80020aa:	e018      	b.n	80020de <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d111      	bne.n	80020de <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d105      	bne.n	80020de <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d6:	f043 0201 	orr.w	r2, r3, #1
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f7ff fb14 	bl	800170c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80020e4:	e00e      	b.n	8002104 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ea:	f003 0310 	and.w	r3, r3, #16
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f7ff fb1e 	bl	8001734 <HAL_ADC_ErrorCallback>
}
 80020f8:	e004      	b.n	8002104 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	4798      	blx	r3
}
 8002104:	bf00      	nop
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002118:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f7ff fb00 	bl	8001720 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002120:	bf00      	nop
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002134:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002146:	f043 0204 	orr.w	r2, r3, #4
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f7ff faf0 	bl	8001734 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002154:	bf00      	nop
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <LL_ADC_IsEnabled>:
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	2b01      	cmp	r3, #1
 800216e:	d101      	bne.n	8002174 <LL_ADC_IsEnabled+0x18>
 8002170:	2301      	movs	r3, #1
 8002172:	e000      	b.n	8002176 <LL_ADC_IsEnabled+0x1a>
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <LL_ADC_REG_IsConversionOngoing>:
{
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 0304 	and.w	r3, r3, #4
 8002192:	2b04      	cmp	r3, #4
 8002194:	d101      	bne.n	800219a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002196:	2301      	movs	r3, #1
 8002198:	e000      	b.n	800219c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80021a8:	b590      	push	{r4, r7, lr}
 80021aa:	b09f      	sub	sp, #124	; 0x7c
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021b2:	2300      	movs	r3, #0
 80021b4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d101      	bne.n	80021c6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80021c2:	2302      	movs	r3, #2
 80021c4:	e093      	b.n	80022ee <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80021ce:	2300      	movs	r3, #0
 80021d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80021d2:	2300      	movs	r3, #0
 80021d4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a47      	ldr	r2, [pc, #284]	; (80022f8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d102      	bne.n	80021e6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80021e0:	4b46      	ldr	r3, [pc, #280]	; (80022fc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80021e2:	60bb      	str	r3, [r7, #8]
 80021e4:	e001      	b.n	80021ea <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80021e6:	2300      	movs	r3, #0
 80021e8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10b      	bne.n	8002208 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f4:	f043 0220 	orr.w	r2, r3, #32
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e072      	b.n	80022ee <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff ffb9 	bl	8002182 <LL_ADC_REG_IsConversionOngoing>
 8002210:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff ffb3 	bl	8002182 <LL_ADC_REG_IsConversionOngoing>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d154      	bne.n	80022cc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002222:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002224:	2b00      	cmp	r3, #0
 8002226:	d151      	bne.n	80022cc <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002228:	4b35      	ldr	r3, [pc, #212]	; (8002300 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800222a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d02c      	beq.n	800228e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	6859      	ldr	r1, [r3, #4]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002246:	035b      	lsls	r3, r3, #13
 8002248:	430b      	orrs	r3, r1
 800224a:	431a      	orrs	r2, r3
 800224c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800224e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002250:	4829      	ldr	r0, [pc, #164]	; (80022f8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002252:	f7ff ff83 	bl	800215c <LL_ADC_IsEnabled>
 8002256:	4604      	mov	r4, r0
 8002258:	4828      	ldr	r0, [pc, #160]	; (80022fc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800225a:	f7ff ff7f 	bl	800215c <LL_ADC_IsEnabled>
 800225e:	4603      	mov	r3, r0
 8002260:	431c      	orrs	r4, r3
 8002262:	4828      	ldr	r0, [pc, #160]	; (8002304 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002264:	f7ff ff7a 	bl	800215c <LL_ADC_IsEnabled>
 8002268:	4603      	mov	r3, r0
 800226a:	4323      	orrs	r3, r4
 800226c:	2b00      	cmp	r3, #0
 800226e:	d137      	bne.n	80022e0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002278:	f023 030f 	bic.w	r3, r3, #15
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	6811      	ldr	r1, [r2, #0]
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	6892      	ldr	r2, [r2, #8]
 8002284:	430a      	orrs	r2, r1
 8002286:	431a      	orrs	r2, r3
 8002288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800228a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800228c:	e028      	b.n	80022e0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800228e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002298:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800229a:	4817      	ldr	r0, [pc, #92]	; (80022f8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800229c:	f7ff ff5e 	bl	800215c <LL_ADC_IsEnabled>
 80022a0:	4604      	mov	r4, r0
 80022a2:	4816      	ldr	r0, [pc, #88]	; (80022fc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80022a4:	f7ff ff5a 	bl	800215c <LL_ADC_IsEnabled>
 80022a8:	4603      	mov	r3, r0
 80022aa:	431c      	orrs	r4, r3
 80022ac:	4815      	ldr	r0, [pc, #84]	; (8002304 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80022ae:	f7ff ff55 	bl	800215c <LL_ADC_IsEnabled>
 80022b2:	4603      	mov	r3, r0
 80022b4:	4323      	orrs	r3, r4
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d112      	bne.n	80022e0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80022ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80022c2:	f023 030f 	bic.w	r3, r3, #15
 80022c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80022c8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80022ca:	e009      	b.n	80022e0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d0:	f043 0220 	orr.w	r2, r3, #32
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80022de:	e000      	b.n	80022e2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80022e0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80022ea:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	377c      	adds	r7, #124	; 0x7c
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd90      	pop	{r4, r7, pc}
 80022f6:	bf00      	nop
 80022f8:	50040000 	.word	0x50040000
 80022fc:	50040100 	.word	0x50040100
 8002300:	50040300 	.word	0x50040300
 8002304:	50040200 	.word	0x50040200

08002308 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002318:	4b0c      	ldr	r3, [pc, #48]	; (800234c <__NVIC_SetPriorityGrouping+0x44>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002324:	4013      	ands	r3, r2
 8002326:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002330:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002338:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800233a:	4a04      	ldr	r2, [pc, #16]	; (800234c <__NVIC_SetPriorityGrouping+0x44>)
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	60d3      	str	r3, [r2, #12]
}
 8002340:	bf00      	nop
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002354:	4b04      	ldr	r3, [pc, #16]	; (8002368 <__NVIC_GetPriorityGrouping+0x18>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	0a1b      	lsrs	r3, r3, #8
 800235a:	f003 0307 	and.w	r3, r3, #7
}
 800235e:	4618      	mov	r0, r3
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237a:	2b00      	cmp	r3, #0
 800237c:	db0b      	blt.n	8002396 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800237e:	79fb      	ldrb	r3, [r7, #7]
 8002380:	f003 021f 	and.w	r2, r3, #31
 8002384:	4907      	ldr	r1, [pc, #28]	; (80023a4 <__NVIC_EnableIRQ+0x38>)
 8002386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238a:	095b      	lsrs	r3, r3, #5
 800238c:	2001      	movs	r0, #1
 800238e:	fa00 f202 	lsl.w	r2, r0, r2
 8002392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	e000e100 	.word	0xe000e100

080023a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	6039      	str	r1, [r7, #0]
 80023b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	db0a      	blt.n	80023d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	490c      	ldr	r1, [pc, #48]	; (80023f4 <__NVIC_SetPriority+0x4c>)
 80023c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c6:	0112      	lsls	r2, r2, #4
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	440b      	add	r3, r1
 80023cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023d0:	e00a      	b.n	80023e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	4908      	ldr	r1, [pc, #32]	; (80023f8 <__NVIC_SetPriority+0x50>)
 80023d8:	79fb      	ldrb	r3, [r7, #7]
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	3b04      	subs	r3, #4
 80023e0:	0112      	lsls	r2, r2, #4
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	440b      	add	r3, r1
 80023e6:	761a      	strb	r2, [r3, #24]
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	e000e100 	.word	0xe000e100
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b089      	sub	sp, #36	; 0x24
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	f1c3 0307 	rsb	r3, r3, #7
 8002416:	2b04      	cmp	r3, #4
 8002418:	bf28      	it	cs
 800241a:	2304      	movcs	r3, #4
 800241c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	3304      	adds	r3, #4
 8002422:	2b06      	cmp	r3, #6
 8002424:	d902      	bls.n	800242c <NVIC_EncodePriority+0x30>
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	3b03      	subs	r3, #3
 800242a:	e000      	b.n	800242e <NVIC_EncodePriority+0x32>
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002430:	f04f 32ff 	mov.w	r2, #4294967295
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43da      	mvns	r2, r3
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	401a      	ands	r2, r3
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002444:	f04f 31ff 	mov.w	r1, #4294967295
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	fa01 f303 	lsl.w	r3, r1, r3
 800244e:	43d9      	mvns	r1, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002454:	4313      	orrs	r3, r2
         );
}
 8002456:	4618      	mov	r0, r3
 8002458:	3724      	adds	r7, #36	; 0x24
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
	...

08002464 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3b01      	subs	r3, #1
 8002470:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002474:	d301      	bcc.n	800247a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002476:	2301      	movs	r3, #1
 8002478:	e00f      	b.n	800249a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800247a:	4a0a      	ldr	r2, [pc, #40]	; (80024a4 <SysTick_Config+0x40>)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3b01      	subs	r3, #1
 8002480:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002482:	210f      	movs	r1, #15
 8002484:	f04f 30ff 	mov.w	r0, #4294967295
 8002488:	f7ff ff8e 	bl	80023a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800248c:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <SysTick_Config+0x40>)
 800248e:	2200      	movs	r2, #0
 8002490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002492:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <SysTick_Config+0x40>)
 8002494:	2207      	movs	r2, #7
 8002496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	e000e010 	.word	0xe000e010

080024a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff ff29 	bl	8002308 <__NVIC_SetPriorityGrouping>
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b086      	sub	sp, #24
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	4603      	mov	r3, r0
 80024c6:	60b9      	str	r1, [r7, #8]
 80024c8:	607a      	str	r2, [r7, #4]
 80024ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024d0:	f7ff ff3e 	bl	8002350 <__NVIC_GetPriorityGrouping>
 80024d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	68b9      	ldr	r1, [r7, #8]
 80024da:	6978      	ldr	r0, [r7, #20]
 80024dc:	f7ff ff8e 	bl	80023fc <NVIC_EncodePriority>
 80024e0:	4602      	mov	r2, r0
 80024e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024e6:	4611      	mov	r1, r2
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff ff5d 	bl	80023a8 <__NVIC_SetPriority>
}
 80024ee:	bf00      	nop
 80024f0:	3718      	adds	r7, #24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b082      	sub	sp, #8
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	4603      	mov	r3, r0
 80024fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff ff31 	bl	800236c <__NVIC_EnableIRQ>
}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7ff ffa2 	bl	8002464 <SysTick_Config>
 8002520:	4603      	mov	r3, r0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
	...

0800252c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e098      	b.n	8002670 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	461a      	mov	r2, r3
 8002544:	4b4d      	ldr	r3, [pc, #308]	; (800267c <HAL_DMA_Init+0x150>)
 8002546:	429a      	cmp	r2, r3
 8002548:	d80f      	bhi.n	800256a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	461a      	mov	r2, r3
 8002550:	4b4b      	ldr	r3, [pc, #300]	; (8002680 <HAL_DMA_Init+0x154>)
 8002552:	4413      	add	r3, r2
 8002554:	4a4b      	ldr	r2, [pc, #300]	; (8002684 <HAL_DMA_Init+0x158>)
 8002556:	fba2 2303 	umull	r2, r3, r2, r3
 800255a:	091b      	lsrs	r3, r3, #4
 800255c:	009a      	lsls	r2, r3, #2
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a48      	ldr	r2, [pc, #288]	; (8002688 <HAL_DMA_Init+0x15c>)
 8002566:	641a      	str	r2, [r3, #64]	; 0x40
 8002568:	e00e      	b.n	8002588 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	461a      	mov	r2, r3
 8002570:	4b46      	ldr	r3, [pc, #280]	; (800268c <HAL_DMA_Init+0x160>)
 8002572:	4413      	add	r3, r2
 8002574:	4a43      	ldr	r2, [pc, #268]	; (8002684 <HAL_DMA_Init+0x158>)
 8002576:	fba2 2303 	umull	r2, r3, r2, r3
 800257a:	091b      	lsrs	r3, r3, #4
 800257c:	009a      	lsls	r2, r3, #2
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a42      	ldr	r2, [pc, #264]	; (8002690 <HAL_DMA_Init+0x164>)
 8002586:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2202      	movs	r2, #2
 800258c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800259e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80025ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025e2:	d039      	beq.n	8002658 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e8:	4a27      	ldr	r2, [pc, #156]	; (8002688 <HAL_DMA_Init+0x15c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d11a      	bne.n	8002624 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80025ee:	4b29      	ldr	r3, [pc, #164]	; (8002694 <HAL_DMA_Init+0x168>)
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f6:	f003 031c 	and.w	r3, r3, #28
 80025fa:	210f      	movs	r1, #15
 80025fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002600:	43db      	mvns	r3, r3
 8002602:	4924      	ldr	r1, [pc, #144]	; (8002694 <HAL_DMA_Init+0x168>)
 8002604:	4013      	ands	r3, r2
 8002606:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002608:	4b22      	ldr	r3, [pc, #136]	; (8002694 <HAL_DMA_Init+0x168>)
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6859      	ldr	r1, [r3, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002614:	f003 031c 	and.w	r3, r3, #28
 8002618:	fa01 f303 	lsl.w	r3, r1, r3
 800261c:	491d      	ldr	r1, [pc, #116]	; (8002694 <HAL_DMA_Init+0x168>)
 800261e:	4313      	orrs	r3, r2
 8002620:	600b      	str	r3, [r1, #0]
 8002622:	e019      	b.n	8002658 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002624:	4b1c      	ldr	r3, [pc, #112]	; (8002698 <HAL_DMA_Init+0x16c>)
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262c:	f003 031c 	and.w	r3, r3, #28
 8002630:	210f      	movs	r1, #15
 8002632:	fa01 f303 	lsl.w	r3, r1, r3
 8002636:	43db      	mvns	r3, r3
 8002638:	4917      	ldr	r1, [pc, #92]	; (8002698 <HAL_DMA_Init+0x16c>)
 800263a:	4013      	ands	r3, r2
 800263c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800263e:	4b16      	ldr	r3, [pc, #88]	; (8002698 <HAL_DMA_Init+0x16c>)
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6859      	ldr	r1, [r3, #4]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264a:	f003 031c 	and.w	r3, r3, #28
 800264e:	fa01 f303 	lsl.w	r3, r1, r3
 8002652:	4911      	ldr	r1, [pc, #68]	; (8002698 <HAL_DMA_Init+0x16c>)
 8002654:	4313      	orrs	r3, r2
 8002656:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	40020407 	.word	0x40020407
 8002680:	bffdfff8 	.word	0xbffdfff8
 8002684:	cccccccd 	.word	0xcccccccd
 8002688:	40020000 	.word	0x40020000
 800268c:	bffdfbf8 	.word	0xbffdfbf8
 8002690:	40020400 	.word	0x40020400
 8002694:	400200a8 	.word	0x400200a8
 8002698:	400204a8 	.word	0x400204a8

0800269c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
 80026a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026aa:	2300      	movs	r3, #0
 80026ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d101      	bne.n	80026bc <HAL_DMA_Start_IT+0x20>
 80026b8:	2302      	movs	r3, #2
 80026ba:	e04b      	b.n	8002754 <HAL_DMA_Start_IT+0xb8>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d13a      	bne.n	8002746 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2202      	movs	r2, #2
 80026d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 0201 	bic.w	r2, r2, #1
 80026ec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	68b9      	ldr	r1, [r7, #8]
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f000 f8e0 	bl	80028ba <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d008      	beq.n	8002714 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f042 020e 	orr.w	r2, r2, #14
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	e00f      	b.n	8002734 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0204 	bic.w	r2, r2, #4
 8002722:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 020a 	orr.w	r2, r2, #10
 8002732:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0201 	orr.w	r2, r2, #1
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	e005      	b.n	8002752 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800274e:	2302      	movs	r3, #2
 8002750:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002752:	7dfb      	ldrb	r3, [r7, #23]
}
 8002754:	4618      	mov	r0, r3
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002778:	f003 031c 	and.w	r3, r3, #28
 800277c:	2204      	movs	r2, #4
 800277e:	409a      	lsls	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	4013      	ands	r3, r2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d026      	beq.n	80027d6 <HAL_DMA_IRQHandler+0x7a>
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	f003 0304 	and.w	r3, r3, #4
 800278e:	2b00      	cmp	r3, #0
 8002790:	d021      	beq.n	80027d6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0320 	and.w	r3, r3, #32
 800279c:	2b00      	cmp	r3, #0
 800279e:	d107      	bne.n	80027b0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 0204 	bic.w	r2, r2, #4
 80027ae:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b4:	f003 021c 	and.w	r2, r3, #28
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	2104      	movs	r1, #4
 80027be:	fa01 f202 	lsl.w	r2, r1, r2
 80027c2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d071      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80027d4:	e06c      	b.n	80028b0 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027da:	f003 031c 	and.w	r3, r3, #28
 80027de:	2202      	movs	r2, #2
 80027e0:	409a      	lsls	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	4013      	ands	r3, r2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d02e      	beq.n	8002848 <HAL_DMA_IRQHandler+0xec>
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d029      	beq.n	8002848 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0320 	and.w	r3, r3, #32
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10b      	bne.n	800281a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 020a 	bic.w	r2, r2, #10
 8002810:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281e:	f003 021c 	and.w	r2, r3, #28
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	2102      	movs	r1, #2
 8002828:	fa01 f202 	lsl.w	r2, r1, r2
 800282c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283a:	2b00      	cmp	r3, #0
 800283c:	d038      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002846:	e033      	b.n	80028b0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284c:	f003 031c 	and.w	r3, r3, #28
 8002850:	2208      	movs	r2, #8
 8002852:	409a      	lsls	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	4013      	ands	r3, r2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d02a      	beq.n	80028b2 <HAL_DMA_IRQHandler+0x156>
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f003 0308 	and.w	r3, r3, #8
 8002862:	2b00      	cmp	r3, #0
 8002864:	d025      	beq.n	80028b2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 020e 	bic.w	r2, r2, #14
 8002874:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287a:	f003 021c 	and.w	r2, r3, #28
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	2101      	movs	r1, #1
 8002884:	fa01 f202 	lsl.w	r2, r1, r2
 8002888:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d004      	beq.n	80028b2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80028b0:	bf00      	nop
 80028b2:	bf00      	nop
}
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b085      	sub	sp, #20
 80028be:	af00      	add	r7, sp, #0
 80028c0:	60f8      	str	r0, [r7, #12]
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	607a      	str	r2, [r7, #4]
 80028c6:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028cc:	f003 021c 	and.w	r2, r3, #28
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d4:	2101      	movs	r1, #1
 80028d6:	fa01 f202 	lsl.w	r2, r1, r2
 80028da:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	2b10      	cmp	r3, #16
 80028ea:	d108      	bne.n	80028fe <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68ba      	ldr	r2, [r7, #8]
 80028fa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80028fc:	e007      	b.n	800290e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68ba      	ldr	r2, [r7, #8]
 8002904:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	60da      	str	r2, [r3, #12]
}
 800290e:	bf00      	nop
 8002910:	3714      	adds	r7, #20
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
	...

0800291c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800291c:	b480      	push	{r7}
 800291e:	b087      	sub	sp, #28
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002926:	2300      	movs	r3, #0
 8002928:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800292a:	e17f      	b.n	8002c2c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	2101      	movs	r1, #1
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	fa01 f303 	lsl.w	r3, r1, r3
 8002938:	4013      	ands	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 8171 	beq.w	8002c26 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f003 0303 	and.w	r3, r3, #3
 800294c:	2b01      	cmp	r3, #1
 800294e:	d005      	beq.n	800295c <HAL_GPIO_Init+0x40>
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 0303 	and.w	r3, r3, #3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d130      	bne.n	80029be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	2203      	movs	r2, #3
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	4013      	ands	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	68da      	ldr	r2, [r3, #12]
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	4313      	orrs	r3, r2
 8002984:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002992:	2201      	movs	r2, #1
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	43db      	mvns	r3, r3
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	4013      	ands	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	091b      	lsrs	r3, r3, #4
 80029a8:	f003 0201 	and.w	r2, r3, #1
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	2b03      	cmp	r3, #3
 80029c8:	d118      	bne.n	80029fc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80029d0:	2201      	movs	r2, #1
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4013      	ands	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	08db      	lsrs	r3, r3, #3
 80029e6:	f003 0201 	and.w	r2, r3, #1
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f003 0303 	and.w	r3, r3, #3
 8002a04:	2b03      	cmp	r3, #3
 8002a06:	d017      	beq.n	8002a38 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	2203      	movs	r2, #3
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f003 0303 	and.w	r3, r3, #3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d123      	bne.n	8002a8c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	08da      	lsrs	r2, r3, #3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3208      	adds	r2, #8
 8002a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a50:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	220f      	movs	r2, #15
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	43db      	mvns	r3, r3
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	4013      	ands	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	691a      	ldr	r2, [r3, #16]
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	f003 0307 	and.w	r3, r3, #7
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	08da      	lsrs	r2, r3, #3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3208      	adds	r2, #8
 8002a86:	6939      	ldr	r1, [r7, #16]
 8002a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	2203      	movs	r2, #3
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 0203 	and.w	r2, r3, #3
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 80ac 	beq.w	8002c26 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ace:	4b5f      	ldr	r3, [pc, #380]	; (8002c4c <HAL_GPIO_Init+0x330>)
 8002ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ad2:	4a5e      	ldr	r2, [pc, #376]	; (8002c4c <HAL_GPIO_Init+0x330>)
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	6613      	str	r3, [r2, #96]	; 0x60
 8002ada:	4b5c      	ldr	r3, [pc, #368]	; (8002c4c <HAL_GPIO_Init+0x330>)
 8002adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	60bb      	str	r3, [r7, #8]
 8002ae4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ae6:	4a5a      	ldr	r2, [pc, #360]	; (8002c50 <HAL_GPIO_Init+0x334>)
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	089b      	lsrs	r3, r3, #2
 8002aec:	3302      	adds	r3, #2
 8002aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	220f      	movs	r2, #15
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	43db      	mvns	r3, r3
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	4013      	ands	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b10:	d025      	beq.n	8002b5e <HAL_GPIO_Init+0x242>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a4f      	ldr	r2, [pc, #316]	; (8002c54 <HAL_GPIO_Init+0x338>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d01f      	beq.n	8002b5a <HAL_GPIO_Init+0x23e>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a4e      	ldr	r2, [pc, #312]	; (8002c58 <HAL_GPIO_Init+0x33c>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d019      	beq.n	8002b56 <HAL_GPIO_Init+0x23a>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a4d      	ldr	r2, [pc, #308]	; (8002c5c <HAL_GPIO_Init+0x340>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d013      	beq.n	8002b52 <HAL_GPIO_Init+0x236>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a4c      	ldr	r2, [pc, #304]	; (8002c60 <HAL_GPIO_Init+0x344>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d00d      	beq.n	8002b4e <HAL_GPIO_Init+0x232>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a4b      	ldr	r2, [pc, #300]	; (8002c64 <HAL_GPIO_Init+0x348>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d007      	beq.n	8002b4a <HAL_GPIO_Init+0x22e>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a4a      	ldr	r2, [pc, #296]	; (8002c68 <HAL_GPIO_Init+0x34c>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d101      	bne.n	8002b46 <HAL_GPIO_Init+0x22a>
 8002b42:	2306      	movs	r3, #6
 8002b44:	e00c      	b.n	8002b60 <HAL_GPIO_Init+0x244>
 8002b46:	2307      	movs	r3, #7
 8002b48:	e00a      	b.n	8002b60 <HAL_GPIO_Init+0x244>
 8002b4a:	2305      	movs	r3, #5
 8002b4c:	e008      	b.n	8002b60 <HAL_GPIO_Init+0x244>
 8002b4e:	2304      	movs	r3, #4
 8002b50:	e006      	b.n	8002b60 <HAL_GPIO_Init+0x244>
 8002b52:	2303      	movs	r3, #3
 8002b54:	e004      	b.n	8002b60 <HAL_GPIO_Init+0x244>
 8002b56:	2302      	movs	r3, #2
 8002b58:	e002      	b.n	8002b60 <HAL_GPIO_Init+0x244>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <HAL_GPIO_Init+0x244>
 8002b5e:	2300      	movs	r3, #0
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	f002 0203 	and.w	r2, r2, #3
 8002b66:	0092      	lsls	r2, r2, #2
 8002b68:	4093      	lsls	r3, r2
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b70:	4937      	ldr	r1, [pc, #220]	; (8002c50 <HAL_GPIO_Init+0x334>)
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	089b      	lsrs	r3, r3, #2
 8002b76:	3302      	adds	r3, #2
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b7e:	4b3b      	ldr	r3, [pc, #236]	; (8002c6c <HAL_GPIO_Init+0x350>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	43db      	mvns	r3, r3
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ba2:	4a32      	ldr	r2, [pc, #200]	; (8002c6c <HAL_GPIO_Init+0x350>)
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ba8:	4b30      	ldr	r3, [pc, #192]	; (8002c6c <HAL_GPIO_Init+0x350>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d003      	beq.n	8002bcc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002bcc:	4a27      	ldr	r2, [pc, #156]	; (8002c6c <HAL_GPIO_Init+0x350>)
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002bd2:	4b26      	ldr	r3, [pc, #152]	; (8002c6c <HAL_GPIO_Init+0x350>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	4013      	ands	r3, r2
 8002be0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002bf6:	4a1d      	ldr	r2, [pc, #116]	; (8002c6c <HAL_GPIO_Init+0x350>)
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002bfc:	4b1b      	ldr	r3, [pc, #108]	; (8002c6c <HAL_GPIO_Init+0x350>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	43db      	mvns	r3, r3
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c20:	4a12      	ldr	r2, [pc, #72]	; (8002c6c <HAL_GPIO_Init+0x350>)
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	fa22 f303 	lsr.w	r3, r2, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f47f ae78 	bne.w	800292c <HAL_GPIO_Init+0x10>
  }
}
 8002c3c:	bf00      	nop
 8002c3e:	bf00      	nop
 8002c40:	371c      	adds	r7, #28
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	40010000 	.word	0x40010000
 8002c54:	48000400 	.word	0x48000400
 8002c58:	48000800 	.word	0x48000800
 8002c5c:	48000c00 	.word	0x48000c00
 8002c60:	48001000 	.word	0x48001000
 8002c64:	48001400 	.word	0x48001400
 8002c68:	48001800 	.word	0x48001800
 8002c6c:	40010400 	.word	0x40010400

08002c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	807b      	strh	r3, [r7, #2]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c80:	787b      	ldrb	r3, [r7, #1]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c86:	887a      	ldrh	r2, [r7, #2]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c8c:	e002      	b.n	8002c94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c8e:	887a      	ldrh	r2, [r7, #2]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ca4:	4b04      	ldr	r3, [pc, #16]	; (8002cb8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	40007000 	.word	0x40007000

08002cbc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cca:	d130      	bne.n	8002d2e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ccc:	4b23      	ldr	r3, [pc, #140]	; (8002d5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cd8:	d038      	beq.n	8002d4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cda:	4b20      	ldr	r3, [pc, #128]	; (8002d5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ce2:	4a1e      	ldr	r2, [pc, #120]	; (8002d5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ce4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ce8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cea:	4b1d      	ldr	r3, [pc, #116]	; (8002d60 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2232      	movs	r2, #50	; 0x32
 8002cf0:	fb02 f303 	mul.w	r3, r2, r3
 8002cf4:	4a1b      	ldr	r2, [pc, #108]	; (8002d64 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfa:	0c9b      	lsrs	r3, r3, #18
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d00:	e002      	b.n	8002d08 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	3b01      	subs	r3, #1
 8002d06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d08:	4b14      	ldr	r3, [pc, #80]	; (8002d5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d14:	d102      	bne.n	8002d1c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1f2      	bne.n	8002d02 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d1c:	4b0f      	ldr	r3, [pc, #60]	; (8002d5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d28:	d110      	bne.n	8002d4c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e00f      	b.n	8002d4e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d2e:	4b0b      	ldr	r3, [pc, #44]	; (8002d5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d3a:	d007      	beq.n	8002d4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d3c:	4b07      	ldr	r3, [pc, #28]	; (8002d5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d44:	4a05      	ldr	r2, [pc, #20]	; (8002d5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d4a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40007000 	.word	0x40007000
 8002d60:	20000000 	.word	0x20000000
 8002d64:	431bde83 	.word	0x431bde83

08002d68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b088      	sub	sp, #32
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e3ca      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d7a:	4b97      	ldr	r3, [pc, #604]	; (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 030c 	and.w	r3, r3, #12
 8002d82:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d84:	4b94      	ldr	r3, [pc, #592]	; (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f003 0303 	and.w	r3, r3, #3
 8002d8c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0310 	and.w	r3, r3, #16
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f000 80e4 	beq.w	8002f64 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d007      	beq.n	8002db2 <HAL_RCC_OscConfig+0x4a>
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	2b0c      	cmp	r3, #12
 8002da6:	f040 808b 	bne.w	8002ec0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	f040 8087 	bne.w	8002ec0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002db2:	4b89      	ldr	r3, [pc, #548]	; (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d005      	beq.n	8002dca <HAL_RCC_OscConfig+0x62>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e3a2      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a1a      	ldr	r2, [r3, #32]
 8002dce:	4b82      	ldr	r3, [pc, #520]	; (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0308 	and.w	r3, r3, #8
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d004      	beq.n	8002de4 <HAL_RCC_OscConfig+0x7c>
 8002dda:	4b7f      	ldr	r3, [pc, #508]	; (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002de2:	e005      	b.n	8002df0 <HAL_RCC_OscConfig+0x88>
 8002de4:	4b7c      	ldr	r3, [pc, #496]	; (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dea:	091b      	lsrs	r3, r3, #4
 8002dec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d223      	bcs.n	8002e3c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f000 fd55 	bl	80038a8 <RCC_SetFlashLatencyFromMSIRange>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e383      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e08:	4b73      	ldr	r3, [pc, #460]	; (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a72      	ldr	r2, [pc, #456]	; (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002e0e:	f043 0308 	orr.w	r3, r3, #8
 8002e12:	6013      	str	r3, [r2, #0]
 8002e14:	4b70      	ldr	r3, [pc, #448]	; (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	496d      	ldr	r1, [pc, #436]	; (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e26:	4b6c      	ldr	r3, [pc, #432]	; (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	021b      	lsls	r3, r3, #8
 8002e34:	4968      	ldr	r1, [pc, #416]	; (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	604b      	str	r3, [r1, #4]
 8002e3a:	e025      	b.n	8002e88 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e3c:	4b66      	ldr	r3, [pc, #408]	; (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a65      	ldr	r2, [pc, #404]	; (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002e42:	f043 0308 	orr.w	r3, r3, #8
 8002e46:	6013      	str	r3, [r2, #0]
 8002e48:	4b63      	ldr	r3, [pc, #396]	; (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	4960      	ldr	r1, [pc, #384]	; (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e5a:	4b5f      	ldr	r3, [pc, #380]	; (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	021b      	lsls	r3, r3, #8
 8002e68:	495b      	ldr	r1, [pc, #364]	; (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d109      	bne.n	8002e88 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f000 fd15 	bl	80038a8 <RCC_SetFlashLatencyFromMSIRange>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e343      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e88:	f000 fc4a 	bl	8003720 <HAL_RCC_GetSysClockFreq>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	4b52      	ldr	r3, [pc, #328]	; (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	091b      	lsrs	r3, r3, #4
 8002e94:	f003 030f 	and.w	r3, r3, #15
 8002e98:	4950      	ldr	r1, [pc, #320]	; (8002fdc <HAL_RCC_OscConfig+0x274>)
 8002e9a:	5ccb      	ldrb	r3, [r1, r3]
 8002e9c:	f003 031f 	and.w	r3, r3, #31
 8002ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea4:	4a4e      	ldr	r2, [pc, #312]	; (8002fe0 <HAL_RCC_OscConfig+0x278>)
 8002ea6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ea8:	4b4e      	ldr	r3, [pc, #312]	; (8002fe4 <HAL_RCC_OscConfig+0x27c>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7fd ffc5 	bl	8000e3c <HAL_InitTick>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002eb6:	7bfb      	ldrb	r3, [r7, #15]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d052      	beq.n	8002f62 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002ebc:	7bfb      	ldrb	r3, [r7, #15]
 8002ebe:	e327      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d032      	beq.n	8002f2e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ec8:	4b43      	ldr	r3, [pc, #268]	; (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a42      	ldr	r2, [pc, #264]	; (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002ece:	f043 0301 	orr.w	r3, r3, #1
 8002ed2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ed4:	f7fe f802 	bl	8000edc <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002edc:	f7fd fffe 	bl	8000edc <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e310      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002eee:	4b3a      	ldr	r3, [pc, #232]	; (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0f0      	beq.n	8002edc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002efa:	4b37      	ldr	r3, [pc, #220]	; (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a36      	ldr	r2, [pc, #216]	; (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002f00:	f043 0308 	orr.w	r3, r3, #8
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	4b34      	ldr	r3, [pc, #208]	; (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	4931      	ldr	r1, [pc, #196]	; (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f18:	4b2f      	ldr	r3, [pc, #188]	; (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	69db      	ldr	r3, [r3, #28]
 8002f24:	021b      	lsls	r3, r3, #8
 8002f26:	492c      	ldr	r1, [pc, #176]	; (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	604b      	str	r3, [r1, #4]
 8002f2c:	e01a      	b.n	8002f64 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f2e:	4b2a      	ldr	r3, [pc, #168]	; (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a29      	ldr	r2, [pc, #164]	; (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002f34:	f023 0301 	bic.w	r3, r3, #1
 8002f38:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f3a:	f7fd ffcf 	bl	8000edc <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f42:	f7fd ffcb 	bl	8000edc <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e2dd      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f54:	4b20      	ldr	r3, [pc, #128]	; (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1f0      	bne.n	8002f42 <HAL_RCC_OscConfig+0x1da>
 8002f60:	e000      	b.n	8002f64 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f62:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d074      	beq.n	800305a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	2b08      	cmp	r3, #8
 8002f74:	d005      	beq.n	8002f82 <HAL_RCC_OscConfig+0x21a>
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	2b0c      	cmp	r3, #12
 8002f7a:	d10e      	bne.n	8002f9a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	2b03      	cmp	r3, #3
 8002f80:	d10b      	bne.n	8002f9a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f82:	4b15      	ldr	r3, [pc, #84]	; (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d064      	beq.n	8003058 <HAL_RCC_OscConfig+0x2f0>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d160      	bne.n	8003058 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e2ba      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fa2:	d106      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x24a>
 8002fa4:	4b0c      	ldr	r3, [pc, #48]	; (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a0b      	ldr	r2, [pc, #44]	; (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fae:	6013      	str	r3, [r2, #0]
 8002fb0:	e026      	b.n	8003000 <HAL_RCC_OscConfig+0x298>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fba:	d115      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x280>
 8002fbc:	4b06      	ldr	r3, [pc, #24]	; (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a05      	ldr	r2, [pc, #20]	; (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002fc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fc6:	6013      	str	r3, [r2, #0]
 8002fc8:	4b03      	ldr	r3, [pc, #12]	; (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a02      	ldr	r2, [pc, #8]	; (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002fce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd2:	6013      	str	r3, [r2, #0]
 8002fd4:	e014      	b.n	8003000 <HAL_RCC_OscConfig+0x298>
 8002fd6:	bf00      	nop
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	08005a74 	.word	0x08005a74
 8002fe0:	20000000 	.word	0x20000000
 8002fe4:	20000004 	.word	0x20000004
 8002fe8:	4ba0      	ldr	r3, [pc, #640]	; (800326c <HAL_RCC_OscConfig+0x504>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a9f      	ldr	r2, [pc, #636]	; (800326c <HAL_RCC_OscConfig+0x504>)
 8002fee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ff2:	6013      	str	r3, [r2, #0]
 8002ff4:	4b9d      	ldr	r3, [pc, #628]	; (800326c <HAL_RCC_OscConfig+0x504>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a9c      	ldr	r2, [pc, #624]	; (800326c <HAL_RCC_OscConfig+0x504>)
 8002ffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ffe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d013      	beq.n	8003030 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003008:	f7fd ff68 	bl	8000edc <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003010:	f7fd ff64 	bl	8000edc <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b64      	cmp	r3, #100	; 0x64
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e276      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003022:	4b92      	ldr	r3, [pc, #584]	; (800326c <HAL_RCC_OscConfig+0x504>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0f0      	beq.n	8003010 <HAL_RCC_OscConfig+0x2a8>
 800302e:	e014      	b.n	800305a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003030:	f7fd ff54 	bl	8000edc <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003038:	f7fd ff50 	bl	8000edc <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b64      	cmp	r3, #100	; 0x64
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e262      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800304a:	4b88      	ldr	r3, [pc, #544]	; (800326c <HAL_RCC_OscConfig+0x504>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1f0      	bne.n	8003038 <HAL_RCC_OscConfig+0x2d0>
 8003056:	e000      	b.n	800305a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d060      	beq.n	8003128 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	2b04      	cmp	r3, #4
 800306a:	d005      	beq.n	8003078 <HAL_RCC_OscConfig+0x310>
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	2b0c      	cmp	r3, #12
 8003070:	d119      	bne.n	80030a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	2b02      	cmp	r3, #2
 8003076:	d116      	bne.n	80030a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003078:	4b7c      	ldr	r3, [pc, #496]	; (800326c <HAL_RCC_OscConfig+0x504>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003080:	2b00      	cmp	r3, #0
 8003082:	d005      	beq.n	8003090 <HAL_RCC_OscConfig+0x328>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e23f      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003090:	4b76      	ldr	r3, [pc, #472]	; (800326c <HAL_RCC_OscConfig+0x504>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	061b      	lsls	r3, r3, #24
 800309e:	4973      	ldr	r1, [pc, #460]	; (800326c <HAL_RCC_OscConfig+0x504>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030a4:	e040      	b.n	8003128 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d023      	beq.n	80030f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030ae:	4b6f      	ldr	r3, [pc, #444]	; (800326c <HAL_RCC_OscConfig+0x504>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a6e      	ldr	r2, [pc, #440]	; (800326c <HAL_RCC_OscConfig+0x504>)
 80030b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ba:	f7fd ff0f 	bl	8000edc <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030c0:	e008      	b.n	80030d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030c2:	f7fd ff0b 	bl	8000edc <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e21d      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030d4:	4b65      	ldr	r3, [pc, #404]	; (800326c <HAL_RCC_OscConfig+0x504>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0f0      	beq.n	80030c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e0:	4b62      	ldr	r3, [pc, #392]	; (800326c <HAL_RCC_OscConfig+0x504>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	061b      	lsls	r3, r3, #24
 80030ee:	495f      	ldr	r1, [pc, #380]	; (800326c <HAL_RCC_OscConfig+0x504>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	604b      	str	r3, [r1, #4]
 80030f4:	e018      	b.n	8003128 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030f6:	4b5d      	ldr	r3, [pc, #372]	; (800326c <HAL_RCC_OscConfig+0x504>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a5c      	ldr	r2, [pc, #368]	; (800326c <HAL_RCC_OscConfig+0x504>)
 80030fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003100:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003102:	f7fd feeb 	bl	8000edc <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800310a:	f7fd fee7 	bl	8000edc <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e1f9      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800311c:	4b53      	ldr	r3, [pc, #332]	; (800326c <HAL_RCC_OscConfig+0x504>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1f0      	bne.n	800310a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0308 	and.w	r3, r3, #8
 8003130:	2b00      	cmp	r3, #0
 8003132:	d03c      	beq.n	80031ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d01c      	beq.n	8003176 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800313c:	4b4b      	ldr	r3, [pc, #300]	; (800326c <HAL_RCC_OscConfig+0x504>)
 800313e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003142:	4a4a      	ldr	r2, [pc, #296]	; (800326c <HAL_RCC_OscConfig+0x504>)
 8003144:	f043 0301 	orr.w	r3, r3, #1
 8003148:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800314c:	f7fd fec6 	bl	8000edc <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003154:	f7fd fec2 	bl	8000edc <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e1d4      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003166:	4b41      	ldr	r3, [pc, #260]	; (800326c <HAL_RCC_OscConfig+0x504>)
 8003168:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0ef      	beq.n	8003154 <HAL_RCC_OscConfig+0x3ec>
 8003174:	e01b      	b.n	80031ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003176:	4b3d      	ldr	r3, [pc, #244]	; (800326c <HAL_RCC_OscConfig+0x504>)
 8003178:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800317c:	4a3b      	ldr	r2, [pc, #236]	; (800326c <HAL_RCC_OscConfig+0x504>)
 800317e:	f023 0301 	bic.w	r3, r3, #1
 8003182:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003186:	f7fd fea9 	bl	8000edc <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800318c:	e008      	b.n	80031a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800318e:	f7fd fea5 	bl	8000edc <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e1b7      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031a0:	4b32      	ldr	r3, [pc, #200]	; (800326c <HAL_RCC_OscConfig+0x504>)
 80031a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1ef      	bne.n	800318e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0304 	and.w	r3, r3, #4
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f000 80a6 	beq.w	8003308 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031bc:	2300      	movs	r3, #0
 80031be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80031c0:	4b2a      	ldr	r3, [pc, #168]	; (800326c <HAL_RCC_OscConfig+0x504>)
 80031c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10d      	bne.n	80031e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031cc:	4b27      	ldr	r3, [pc, #156]	; (800326c <HAL_RCC_OscConfig+0x504>)
 80031ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d0:	4a26      	ldr	r2, [pc, #152]	; (800326c <HAL_RCC_OscConfig+0x504>)
 80031d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031d6:	6593      	str	r3, [r2, #88]	; 0x58
 80031d8:	4b24      	ldr	r3, [pc, #144]	; (800326c <HAL_RCC_OscConfig+0x504>)
 80031da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e0:	60bb      	str	r3, [r7, #8]
 80031e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031e4:	2301      	movs	r3, #1
 80031e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031e8:	4b21      	ldr	r3, [pc, #132]	; (8003270 <HAL_RCC_OscConfig+0x508>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d118      	bne.n	8003226 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031f4:	4b1e      	ldr	r3, [pc, #120]	; (8003270 <HAL_RCC_OscConfig+0x508>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a1d      	ldr	r2, [pc, #116]	; (8003270 <HAL_RCC_OscConfig+0x508>)
 80031fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003200:	f7fd fe6c 	bl	8000edc <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003208:	f7fd fe68 	bl	8000edc <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e17a      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800321a:	4b15      	ldr	r3, [pc, #84]	; (8003270 <HAL_RCC_OscConfig+0x508>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0f0      	beq.n	8003208 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d108      	bne.n	8003240 <HAL_RCC_OscConfig+0x4d8>
 800322e:	4b0f      	ldr	r3, [pc, #60]	; (800326c <HAL_RCC_OscConfig+0x504>)
 8003230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003234:	4a0d      	ldr	r2, [pc, #52]	; (800326c <HAL_RCC_OscConfig+0x504>)
 8003236:	f043 0301 	orr.w	r3, r3, #1
 800323a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800323e:	e029      	b.n	8003294 <HAL_RCC_OscConfig+0x52c>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	2b05      	cmp	r3, #5
 8003246:	d115      	bne.n	8003274 <HAL_RCC_OscConfig+0x50c>
 8003248:	4b08      	ldr	r3, [pc, #32]	; (800326c <HAL_RCC_OscConfig+0x504>)
 800324a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800324e:	4a07      	ldr	r2, [pc, #28]	; (800326c <HAL_RCC_OscConfig+0x504>)
 8003250:	f043 0304 	orr.w	r3, r3, #4
 8003254:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003258:	4b04      	ldr	r3, [pc, #16]	; (800326c <HAL_RCC_OscConfig+0x504>)
 800325a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800325e:	4a03      	ldr	r2, [pc, #12]	; (800326c <HAL_RCC_OscConfig+0x504>)
 8003260:	f043 0301 	orr.w	r3, r3, #1
 8003264:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003268:	e014      	b.n	8003294 <HAL_RCC_OscConfig+0x52c>
 800326a:	bf00      	nop
 800326c:	40021000 	.word	0x40021000
 8003270:	40007000 	.word	0x40007000
 8003274:	4b9c      	ldr	r3, [pc, #624]	; (80034e8 <HAL_RCC_OscConfig+0x780>)
 8003276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327a:	4a9b      	ldr	r2, [pc, #620]	; (80034e8 <HAL_RCC_OscConfig+0x780>)
 800327c:	f023 0301 	bic.w	r3, r3, #1
 8003280:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003284:	4b98      	ldr	r3, [pc, #608]	; (80034e8 <HAL_RCC_OscConfig+0x780>)
 8003286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328a:	4a97      	ldr	r2, [pc, #604]	; (80034e8 <HAL_RCC_OscConfig+0x780>)
 800328c:	f023 0304 	bic.w	r3, r3, #4
 8003290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d016      	beq.n	80032ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800329c:	f7fd fe1e 	bl	8000edc <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032a2:	e00a      	b.n	80032ba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a4:	f7fd fe1a 	bl	8000edc <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e12a      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032ba:	4b8b      	ldr	r3, [pc, #556]	; (80034e8 <HAL_RCC_OscConfig+0x780>)
 80032bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0ed      	beq.n	80032a4 <HAL_RCC_OscConfig+0x53c>
 80032c8:	e015      	b.n	80032f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ca:	f7fd fe07 	bl	8000edc <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032d0:	e00a      	b.n	80032e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d2:	f7fd fe03 	bl	8000edc <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e113      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032e8:	4b7f      	ldr	r3, [pc, #508]	; (80034e8 <HAL_RCC_OscConfig+0x780>)
 80032ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1ed      	bne.n	80032d2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032f6:	7ffb      	ldrb	r3, [r7, #31]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d105      	bne.n	8003308 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032fc:	4b7a      	ldr	r3, [pc, #488]	; (80034e8 <HAL_RCC_OscConfig+0x780>)
 80032fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003300:	4a79      	ldr	r2, [pc, #484]	; (80034e8 <HAL_RCC_OscConfig+0x780>)
 8003302:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003306:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 80fe 	beq.w	800350e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003316:	2b02      	cmp	r3, #2
 8003318:	f040 80d0 	bne.w	80034bc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800331c:	4b72      	ldr	r3, [pc, #456]	; (80034e8 <HAL_RCC_OscConfig+0x780>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f003 0203 	and.w	r2, r3, #3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332c:	429a      	cmp	r2, r3
 800332e:	d130      	bne.n	8003392 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333a:	3b01      	subs	r3, #1
 800333c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800333e:	429a      	cmp	r2, r3
 8003340:	d127      	bne.n	8003392 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800334c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800334e:	429a      	cmp	r2, r3
 8003350:	d11f      	bne.n	8003392 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800335c:	2a07      	cmp	r2, #7
 800335e:	bf14      	ite	ne
 8003360:	2201      	movne	r2, #1
 8003362:	2200      	moveq	r2, #0
 8003364:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003366:	4293      	cmp	r3, r2
 8003368:	d113      	bne.n	8003392 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003374:	085b      	lsrs	r3, r3, #1
 8003376:	3b01      	subs	r3, #1
 8003378:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800337a:	429a      	cmp	r2, r3
 800337c:	d109      	bne.n	8003392 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003388:	085b      	lsrs	r3, r3, #1
 800338a:	3b01      	subs	r3, #1
 800338c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800338e:	429a      	cmp	r2, r3
 8003390:	d06e      	beq.n	8003470 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	2b0c      	cmp	r3, #12
 8003396:	d069      	beq.n	800346c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003398:	4b53      	ldr	r3, [pc, #332]	; (80034e8 <HAL_RCC_OscConfig+0x780>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d105      	bne.n	80033b0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80033a4:	4b50      	ldr	r3, [pc, #320]	; (80034e8 <HAL_RCC_OscConfig+0x780>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e0ad      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80033b4:	4b4c      	ldr	r3, [pc, #304]	; (80034e8 <HAL_RCC_OscConfig+0x780>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a4b      	ldr	r2, [pc, #300]	; (80034e8 <HAL_RCC_OscConfig+0x780>)
 80033ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033be:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033c0:	f7fd fd8c 	bl	8000edc <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c8:	f7fd fd88 	bl	8000edc <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e09a      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033da:	4b43      	ldr	r3, [pc, #268]	; (80034e8 <HAL_RCC_OscConfig+0x780>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1f0      	bne.n	80033c8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033e6:	4b40      	ldr	r3, [pc, #256]	; (80034e8 <HAL_RCC_OscConfig+0x780>)
 80033e8:	68da      	ldr	r2, [r3, #12]
 80033ea:	4b40      	ldr	r3, [pc, #256]	; (80034ec <HAL_RCC_OscConfig+0x784>)
 80033ec:	4013      	ands	r3, r2
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80033f6:	3a01      	subs	r2, #1
 80033f8:	0112      	lsls	r2, r2, #4
 80033fa:	4311      	orrs	r1, r2
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003400:	0212      	lsls	r2, r2, #8
 8003402:	4311      	orrs	r1, r2
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003408:	0852      	lsrs	r2, r2, #1
 800340a:	3a01      	subs	r2, #1
 800340c:	0552      	lsls	r2, r2, #21
 800340e:	4311      	orrs	r1, r2
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003414:	0852      	lsrs	r2, r2, #1
 8003416:	3a01      	subs	r2, #1
 8003418:	0652      	lsls	r2, r2, #25
 800341a:	4311      	orrs	r1, r2
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003420:	0912      	lsrs	r2, r2, #4
 8003422:	0452      	lsls	r2, r2, #17
 8003424:	430a      	orrs	r2, r1
 8003426:	4930      	ldr	r1, [pc, #192]	; (80034e8 <HAL_RCC_OscConfig+0x780>)
 8003428:	4313      	orrs	r3, r2
 800342a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800342c:	4b2e      	ldr	r3, [pc, #184]	; (80034e8 <HAL_RCC_OscConfig+0x780>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a2d      	ldr	r2, [pc, #180]	; (80034e8 <HAL_RCC_OscConfig+0x780>)
 8003432:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003436:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003438:	4b2b      	ldr	r3, [pc, #172]	; (80034e8 <HAL_RCC_OscConfig+0x780>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	4a2a      	ldr	r2, [pc, #168]	; (80034e8 <HAL_RCC_OscConfig+0x780>)
 800343e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003442:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003444:	f7fd fd4a 	bl	8000edc <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800344c:	f7fd fd46 	bl	8000edc <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e058      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800345e:	4b22      	ldr	r3, [pc, #136]	; (80034e8 <HAL_RCC_OscConfig+0x780>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0f0      	beq.n	800344c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800346a:	e050      	b.n	800350e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e04f      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003470:	4b1d      	ldr	r3, [pc, #116]	; (80034e8 <HAL_RCC_OscConfig+0x780>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d148      	bne.n	800350e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800347c:	4b1a      	ldr	r3, [pc, #104]	; (80034e8 <HAL_RCC_OscConfig+0x780>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a19      	ldr	r2, [pc, #100]	; (80034e8 <HAL_RCC_OscConfig+0x780>)
 8003482:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003486:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003488:	4b17      	ldr	r3, [pc, #92]	; (80034e8 <HAL_RCC_OscConfig+0x780>)
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	4a16      	ldr	r2, [pc, #88]	; (80034e8 <HAL_RCC_OscConfig+0x780>)
 800348e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003492:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003494:	f7fd fd22 	bl	8000edc <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800349c:	f7fd fd1e 	bl	8000edc <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e030      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ae:	4b0e      	ldr	r3, [pc, #56]	; (80034e8 <HAL_RCC_OscConfig+0x780>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0f0      	beq.n	800349c <HAL_RCC_OscConfig+0x734>
 80034ba:	e028      	b.n	800350e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	2b0c      	cmp	r3, #12
 80034c0:	d023      	beq.n	800350a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034c2:	4b09      	ldr	r3, [pc, #36]	; (80034e8 <HAL_RCC_OscConfig+0x780>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a08      	ldr	r2, [pc, #32]	; (80034e8 <HAL_RCC_OscConfig+0x780>)
 80034c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ce:	f7fd fd05 	bl	8000edc <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034d4:	e00c      	b.n	80034f0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d6:	f7fd fd01 	bl	8000edc <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d905      	bls.n	80034f0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e013      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
 80034e8:	40021000 	.word	0x40021000
 80034ec:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034f0:	4b09      	ldr	r3, [pc, #36]	; (8003518 <HAL_RCC_OscConfig+0x7b0>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1ec      	bne.n	80034d6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80034fc:	4b06      	ldr	r3, [pc, #24]	; (8003518 <HAL_RCC_OscConfig+0x7b0>)
 80034fe:	68da      	ldr	r2, [r3, #12]
 8003500:	4905      	ldr	r1, [pc, #20]	; (8003518 <HAL_RCC_OscConfig+0x7b0>)
 8003502:	4b06      	ldr	r3, [pc, #24]	; (800351c <HAL_RCC_OscConfig+0x7b4>)
 8003504:	4013      	ands	r3, r2
 8003506:	60cb      	str	r3, [r1, #12]
 8003508:	e001      	b.n	800350e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e000      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3720      	adds	r7, #32
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40021000 	.word	0x40021000
 800351c:	feeefffc 	.word	0xfeeefffc

08003520 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d101      	bne.n	8003534 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e0e7      	b.n	8003704 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003534:	4b75      	ldr	r3, [pc, #468]	; (800370c <HAL_RCC_ClockConfig+0x1ec>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0307 	and.w	r3, r3, #7
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	429a      	cmp	r2, r3
 8003540:	d910      	bls.n	8003564 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003542:	4b72      	ldr	r3, [pc, #456]	; (800370c <HAL_RCC_ClockConfig+0x1ec>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f023 0207 	bic.w	r2, r3, #7
 800354a:	4970      	ldr	r1, [pc, #448]	; (800370c <HAL_RCC_ClockConfig+0x1ec>)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	4313      	orrs	r3, r2
 8003550:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003552:	4b6e      	ldr	r3, [pc, #440]	; (800370c <HAL_RCC_ClockConfig+0x1ec>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	429a      	cmp	r2, r3
 800355e:	d001      	beq.n	8003564 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e0cf      	b.n	8003704 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d010      	beq.n	8003592 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	4b66      	ldr	r3, [pc, #408]	; (8003710 <HAL_RCC_ClockConfig+0x1f0>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800357c:	429a      	cmp	r2, r3
 800357e:	d908      	bls.n	8003592 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003580:	4b63      	ldr	r3, [pc, #396]	; (8003710 <HAL_RCC_ClockConfig+0x1f0>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	4960      	ldr	r1, [pc, #384]	; (8003710 <HAL_RCC_ClockConfig+0x1f0>)
 800358e:	4313      	orrs	r3, r2
 8003590:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d04c      	beq.n	8003638 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	d107      	bne.n	80035b6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035a6:	4b5a      	ldr	r3, [pc, #360]	; (8003710 <HAL_RCC_ClockConfig+0x1f0>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d121      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e0a6      	b.n	8003704 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d107      	bne.n	80035ce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035be:	4b54      	ldr	r3, [pc, #336]	; (8003710 <HAL_RCC_ClockConfig+0x1f0>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d115      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e09a      	b.n	8003704 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d107      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035d6:	4b4e      	ldr	r3, [pc, #312]	; (8003710 <HAL_RCC_ClockConfig+0x1f0>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d109      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e08e      	b.n	8003704 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035e6:	4b4a      	ldr	r3, [pc, #296]	; (8003710 <HAL_RCC_ClockConfig+0x1f0>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e086      	b.n	8003704 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035f6:	4b46      	ldr	r3, [pc, #280]	; (8003710 <HAL_RCC_ClockConfig+0x1f0>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f023 0203 	bic.w	r2, r3, #3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	4943      	ldr	r1, [pc, #268]	; (8003710 <HAL_RCC_ClockConfig+0x1f0>)
 8003604:	4313      	orrs	r3, r2
 8003606:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003608:	f7fd fc68 	bl	8000edc <HAL_GetTick>
 800360c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360e:	e00a      	b.n	8003626 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003610:	f7fd fc64 	bl	8000edc <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	f241 3288 	movw	r2, #5000	; 0x1388
 800361e:	4293      	cmp	r3, r2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e06e      	b.n	8003704 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003626:	4b3a      	ldr	r3, [pc, #232]	; (8003710 <HAL_RCC_ClockConfig+0x1f0>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 020c 	and.w	r2, r3, #12
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	429a      	cmp	r2, r3
 8003636:	d1eb      	bne.n	8003610 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d010      	beq.n	8003666 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	4b31      	ldr	r3, [pc, #196]	; (8003710 <HAL_RCC_ClockConfig+0x1f0>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003650:	429a      	cmp	r2, r3
 8003652:	d208      	bcs.n	8003666 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003654:	4b2e      	ldr	r3, [pc, #184]	; (8003710 <HAL_RCC_ClockConfig+0x1f0>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	492b      	ldr	r1, [pc, #172]	; (8003710 <HAL_RCC_ClockConfig+0x1f0>)
 8003662:	4313      	orrs	r3, r2
 8003664:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003666:	4b29      	ldr	r3, [pc, #164]	; (800370c <HAL_RCC_ClockConfig+0x1ec>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	429a      	cmp	r2, r3
 8003672:	d210      	bcs.n	8003696 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003674:	4b25      	ldr	r3, [pc, #148]	; (800370c <HAL_RCC_ClockConfig+0x1ec>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f023 0207 	bic.w	r2, r3, #7
 800367c:	4923      	ldr	r1, [pc, #140]	; (800370c <HAL_RCC_ClockConfig+0x1ec>)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	4313      	orrs	r3, r2
 8003682:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003684:	4b21      	ldr	r3, [pc, #132]	; (800370c <HAL_RCC_ClockConfig+0x1ec>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	429a      	cmp	r2, r3
 8003690:	d001      	beq.n	8003696 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e036      	b.n	8003704 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0304 	and.w	r3, r3, #4
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d008      	beq.n	80036b4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036a2:	4b1b      	ldr	r3, [pc, #108]	; (8003710 <HAL_RCC_ClockConfig+0x1f0>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	4918      	ldr	r1, [pc, #96]	; (8003710 <HAL_RCC_ClockConfig+0x1f0>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0308 	and.w	r3, r3, #8
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d009      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036c0:	4b13      	ldr	r3, [pc, #76]	; (8003710 <HAL_RCC_ClockConfig+0x1f0>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	4910      	ldr	r1, [pc, #64]	; (8003710 <HAL_RCC_ClockConfig+0x1f0>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036d4:	f000 f824 	bl	8003720 <HAL_RCC_GetSysClockFreq>
 80036d8:	4602      	mov	r2, r0
 80036da:	4b0d      	ldr	r3, [pc, #52]	; (8003710 <HAL_RCC_ClockConfig+0x1f0>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	091b      	lsrs	r3, r3, #4
 80036e0:	f003 030f 	and.w	r3, r3, #15
 80036e4:	490b      	ldr	r1, [pc, #44]	; (8003714 <HAL_RCC_ClockConfig+0x1f4>)
 80036e6:	5ccb      	ldrb	r3, [r1, r3]
 80036e8:	f003 031f 	and.w	r3, r3, #31
 80036ec:	fa22 f303 	lsr.w	r3, r2, r3
 80036f0:	4a09      	ldr	r2, [pc, #36]	; (8003718 <HAL_RCC_ClockConfig+0x1f8>)
 80036f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80036f4:	4b09      	ldr	r3, [pc, #36]	; (800371c <HAL_RCC_ClockConfig+0x1fc>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7fd fb9f 	bl	8000e3c <HAL_InitTick>
 80036fe:	4603      	mov	r3, r0
 8003700:	72fb      	strb	r3, [r7, #11]

  return status;
 8003702:	7afb      	ldrb	r3, [r7, #11]
}
 8003704:	4618      	mov	r0, r3
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	40022000 	.word	0x40022000
 8003710:	40021000 	.word	0x40021000
 8003714:	08005a74 	.word	0x08005a74
 8003718:	20000000 	.word	0x20000000
 800371c:	20000004 	.word	0x20000004

08003720 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003720:	b480      	push	{r7}
 8003722:	b089      	sub	sp, #36	; 0x24
 8003724:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003726:	2300      	movs	r3, #0
 8003728:	61fb      	str	r3, [r7, #28]
 800372a:	2300      	movs	r3, #0
 800372c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800372e:	4b3e      	ldr	r3, [pc, #248]	; (8003828 <HAL_RCC_GetSysClockFreq+0x108>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f003 030c 	and.w	r3, r3, #12
 8003736:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003738:	4b3b      	ldr	r3, [pc, #236]	; (8003828 <HAL_RCC_GetSysClockFreq+0x108>)
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f003 0303 	and.w	r3, r3, #3
 8003740:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d005      	beq.n	8003754 <HAL_RCC_GetSysClockFreq+0x34>
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	2b0c      	cmp	r3, #12
 800374c:	d121      	bne.n	8003792 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d11e      	bne.n	8003792 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003754:	4b34      	ldr	r3, [pc, #208]	; (8003828 <HAL_RCC_GetSysClockFreq+0x108>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	2b00      	cmp	r3, #0
 800375e:	d107      	bne.n	8003770 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003760:	4b31      	ldr	r3, [pc, #196]	; (8003828 <HAL_RCC_GetSysClockFreq+0x108>)
 8003762:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003766:	0a1b      	lsrs	r3, r3, #8
 8003768:	f003 030f 	and.w	r3, r3, #15
 800376c:	61fb      	str	r3, [r7, #28]
 800376e:	e005      	b.n	800377c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003770:	4b2d      	ldr	r3, [pc, #180]	; (8003828 <HAL_RCC_GetSysClockFreq+0x108>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	091b      	lsrs	r3, r3, #4
 8003776:	f003 030f 	and.w	r3, r3, #15
 800377a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800377c:	4a2b      	ldr	r2, [pc, #172]	; (800382c <HAL_RCC_GetSysClockFreq+0x10c>)
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003784:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10d      	bne.n	80037a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003790:	e00a      	b.n	80037a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	2b04      	cmp	r3, #4
 8003796:	d102      	bne.n	800379e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003798:	4b25      	ldr	r3, [pc, #148]	; (8003830 <HAL_RCC_GetSysClockFreq+0x110>)
 800379a:	61bb      	str	r3, [r7, #24]
 800379c:	e004      	b.n	80037a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d101      	bne.n	80037a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037a4:	4b23      	ldr	r3, [pc, #140]	; (8003834 <HAL_RCC_GetSysClockFreq+0x114>)
 80037a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	2b0c      	cmp	r3, #12
 80037ac:	d134      	bne.n	8003818 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037ae:	4b1e      	ldr	r3, [pc, #120]	; (8003828 <HAL_RCC_GetSysClockFreq+0x108>)
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	f003 0303 	and.w	r3, r3, #3
 80037b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d003      	beq.n	80037c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	2b03      	cmp	r3, #3
 80037c2:	d003      	beq.n	80037cc <HAL_RCC_GetSysClockFreq+0xac>
 80037c4:	e005      	b.n	80037d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80037c6:	4b1a      	ldr	r3, [pc, #104]	; (8003830 <HAL_RCC_GetSysClockFreq+0x110>)
 80037c8:	617b      	str	r3, [r7, #20]
      break;
 80037ca:	e005      	b.n	80037d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80037cc:	4b19      	ldr	r3, [pc, #100]	; (8003834 <HAL_RCC_GetSysClockFreq+0x114>)
 80037ce:	617b      	str	r3, [r7, #20]
      break;
 80037d0:	e002      	b.n	80037d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	617b      	str	r3, [r7, #20]
      break;
 80037d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037d8:	4b13      	ldr	r3, [pc, #76]	; (8003828 <HAL_RCC_GetSysClockFreq+0x108>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	091b      	lsrs	r3, r3, #4
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	3301      	adds	r3, #1
 80037e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80037e6:	4b10      	ldr	r3, [pc, #64]	; (8003828 <HAL_RCC_GetSysClockFreq+0x108>)
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	0a1b      	lsrs	r3, r3, #8
 80037ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	fb03 f202 	mul.w	r2, r3, r2
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037fe:	4b0a      	ldr	r3, [pc, #40]	; (8003828 <HAL_RCC_GetSysClockFreq+0x108>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	0e5b      	lsrs	r3, r3, #25
 8003804:	f003 0303 	and.w	r3, r3, #3
 8003808:	3301      	adds	r3, #1
 800380a:	005b      	lsls	r3, r3, #1
 800380c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	fbb2 f3f3 	udiv	r3, r2, r3
 8003816:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003818:	69bb      	ldr	r3, [r7, #24]
}
 800381a:	4618      	mov	r0, r3
 800381c:	3724      	adds	r7, #36	; 0x24
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40021000 	.word	0x40021000
 800382c:	08005a8c 	.word	0x08005a8c
 8003830:	00f42400 	.word	0x00f42400
 8003834:	007a1200 	.word	0x007a1200

08003838 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800383c:	4b03      	ldr	r3, [pc, #12]	; (800384c <HAL_RCC_GetHCLKFreq+0x14>)
 800383e:	681b      	ldr	r3, [r3, #0]
}
 8003840:	4618      	mov	r0, r3
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	20000000 	.word	0x20000000

08003850 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003854:	f7ff fff0 	bl	8003838 <HAL_RCC_GetHCLKFreq>
 8003858:	4602      	mov	r2, r0
 800385a:	4b06      	ldr	r3, [pc, #24]	; (8003874 <HAL_RCC_GetPCLK1Freq+0x24>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	0a1b      	lsrs	r3, r3, #8
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	4904      	ldr	r1, [pc, #16]	; (8003878 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003866:	5ccb      	ldrb	r3, [r1, r3]
 8003868:	f003 031f 	and.w	r3, r3, #31
 800386c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003870:	4618      	mov	r0, r3
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40021000 	.word	0x40021000
 8003878:	08005a84 	.word	0x08005a84

0800387c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003880:	f7ff ffda 	bl	8003838 <HAL_RCC_GetHCLKFreq>
 8003884:	4602      	mov	r2, r0
 8003886:	4b06      	ldr	r3, [pc, #24]	; (80038a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	0adb      	lsrs	r3, r3, #11
 800388c:	f003 0307 	and.w	r3, r3, #7
 8003890:	4904      	ldr	r1, [pc, #16]	; (80038a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003892:	5ccb      	ldrb	r3, [r1, r3]
 8003894:	f003 031f 	and.w	r3, r3, #31
 8003898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800389c:	4618      	mov	r0, r3
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40021000 	.word	0x40021000
 80038a4:	08005a84 	.word	0x08005a84

080038a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80038b0:	2300      	movs	r3, #0
 80038b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80038b4:	4b2a      	ldr	r3, [pc, #168]	; (8003960 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80038c0:	f7ff f9ee 	bl	8002ca0 <HAL_PWREx_GetVoltageRange>
 80038c4:	6178      	str	r0, [r7, #20]
 80038c6:	e014      	b.n	80038f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80038c8:	4b25      	ldr	r3, [pc, #148]	; (8003960 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038cc:	4a24      	ldr	r2, [pc, #144]	; (8003960 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038d2:	6593      	str	r3, [r2, #88]	; 0x58
 80038d4:	4b22      	ldr	r3, [pc, #136]	; (8003960 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80038e0:	f7ff f9de 	bl	8002ca0 <HAL_PWREx_GetVoltageRange>
 80038e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80038e6:	4b1e      	ldr	r3, [pc, #120]	; (8003960 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ea:	4a1d      	ldr	r2, [pc, #116]	; (8003960 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038f0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038f8:	d10b      	bne.n	8003912 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2b80      	cmp	r3, #128	; 0x80
 80038fe:	d919      	bls.n	8003934 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2ba0      	cmp	r3, #160	; 0xa0
 8003904:	d902      	bls.n	800390c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003906:	2302      	movs	r3, #2
 8003908:	613b      	str	r3, [r7, #16]
 800390a:	e013      	b.n	8003934 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800390c:	2301      	movs	r3, #1
 800390e:	613b      	str	r3, [r7, #16]
 8003910:	e010      	b.n	8003934 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b80      	cmp	r3, #128	; 0x80
 8003916:	d902      	bls.n	800391e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003918:	2303      	movs	r3, #3
 800391a:	613b      	str	r3, [r7, #16]
 800391c:	e00a      	b.n	8003934 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b80      	cmp	r3, #128	; 0x80
 8003922:	d102      	bne.n	800392a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003924:	2302      	movs	r3, #2
 8003926:	613b      	str	r3, [r7, #16]
 8003928:	e004      	b.n	8003934 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2b70      	cmp	r3, #112	; 0x70
 800392e:	d101      	bne.n	8003934 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003930:	2301      	movs	r3, #1
 8003932:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003934:	4b0b      	ldr	r3, [pc, #44]	; (8003964 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f023 0207 	bic.w	r2, r3, #7
 800393c:	4909      	ldr	r1, [pc, #36]	; (8003964 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	4313      	orrs	r3, r2
 8003942:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003944:	4b07      	ldr	r3, [pc, #28]	; (8003964 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	429a      	cmp	r2, r3
 8003950:	d001      	beq.n	8003956 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e000      	b.n	8003958 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3718      	adds	r7, #24
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40021000 	.word	0x40021000
 8003964:	40022000 	.word	0x40022000

08003968 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003970:	2300      	movs	r3, #0
 8003972:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003974:	2300      	movs	r3, #0
 8003976:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003980:	2b00      	cmp	r3, #0
 8003982:	d041      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003988:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800398c:	d02a      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800398e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003992:	d824      	bhi.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003994:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003998:	d008      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 800399a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800399e:	d81e      	bhi.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00a      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x52>
 80039a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039a8:	d010      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039aa:	e018      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039ac:	4b86      	ldr	r3, [pc, #536]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	4a85      	ldr	r2, [pc, #532]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039b6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039b8:	e015      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	3304      	adds	r3, #4
 80039be:	2100      	movs	r1, #0
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 fabb 	bl	8003f3c <RCCEx_PLLSAI1_Config>
 80039c6:	4603      	mov	r3, r0
 80039c8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039ca:	e00c      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	3320      	adds	r3, #32
 80039d0:	2100      	movs	r1, #0
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 fba6 	bl	8004124 <RCCEx_PLLSAI2_Config>
 80039d8:	4603      	mov	r3, r0
 80039da:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039dc:	e003      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	74fb      	strb	r3, [r7, #19]
      break;
 80039e2:	e000      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80039e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039e6:	7cfb      	ldrb	r3, [r7, #19]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10b      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039ec:	4b76      	ldr	r3, [pc, #472]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039fa:	4973      	ldr	r1, [pc, #460]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a02:	e001      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a04:	7cfb      	ldrb	r3, [r7, #19]
 8003a06:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d041      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a18:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a1c:	d02a      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003a1e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a22:	d824      	bhi.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a28:	d008      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a2e:	d81e      	bhi.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00a      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003a34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a38:	d010      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a3a:	e018      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a3c:	4b62      	ldr	r3, [pc, #392]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	4a61      	ldr	r2, [pc, #388]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a46:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a48:	e015      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	3304      	adds	r3, #4
 8003a4e:	2100      	movs	r1, #0
 8003a50:	4618      	mov	r0, r3
 8003a52:	f000 fa73 	bl	8003f3c <RCCEx_PLLSAI1_Config>
 8003a56:	4603      	mov	r3, r0
 8003a58:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a5a:	e00c      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3320      	adds	r3, #32
 8003a60:	2100      	movs	r1, #0
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 fb5e 	bl	8004124 <RCCEx_PLLSAI2_Config>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a6c:	e003      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	74fb      	strb	r3, [r7, #19]
      break;
 8003a72:	e000      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003a74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a76:	7cfb      	ldrb	r3, [r7, #19]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10b      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a7c:	4b52      	ldr	r3, [pc, #328]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a82:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a8a:	494f      	ldr	r1, [pc, #316]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a92:	e001      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a94:	7cfb      	ldrb	r3, [r7, #19]
 8003a96:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 80a0 	beq.w	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003aaa:	4b47      	ldr	r3, [pc, #284]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e000      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003aba:	2300      	movs	r3, #0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00d      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ac0:	4b41      	ldr	r3, [pc, #260]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac4:	4a40      	ldr	r2, [pc, #256]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aca:	6593      	str	r3, [r2, #88]	; 0x58
 8003acc:	4b3e      	ldr	r3, [pc, #248]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad4:	60bb      	str	r3, [r7, #8]
 8003ad6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003adc:	4b3b      	ldr	r3, [pc, #236]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a3a      	ldr	r2, [pc, #232]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ae8:	f7fd f9f8 	bl	8000edc <HAL_GetTick>
 8003aec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003aee:	e009      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af0:	f7fd f9f4 	bl	8000edc <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d902      	bls.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	74fb      	strb	r3, [r7, #19]
        break;
 8003b02:	e005      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b04:	4b31      	ldr	r3, [pc, #196]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0ef      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003b10:	7cfb      	ldrb	r3, [r7, #19]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d15c      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b16:	4b2c      	ldr	r3, [pc, #176]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b20:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d01f      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d019      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b34:	4b24      	ldr	r3, [pc, #144]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b3e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b40:	4b21      	ldr	r3, [pc, #132]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b46:	4a20      	ldr	r2, [pc, #128]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b50:	4b1d      	ldr	r3, [pc, #116]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b56:	4a1c      	ldr	r2, [pc, #112]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b60:	4a19      	ldr	r2, [pc, #100]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d016      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b72:	f7fd f9b3 	bl	8000edc <HAL_GetTick>
 8003b76:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b78:	e00b      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b7a:	f7fd f9af 	bl	8000edc <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d902      	bls.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	74fb      	strb	r3, [r7, #19]
            break;
 8003b90:	e006      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b92:	4b0d      	ldr	r3, [pc, #52]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0ec      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003ba0:	7cfb      	ldrb	r3, [r7, #19]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10c      	bne.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ba6:	4b08      	ldr	r3, [pc, #32]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bb6:	4904      	ldr	r1, [pc, #16]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003bbe:	e009      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bc0:	7cfb      	ldrb	r3, [r7, #19]
 8003bc2:	74bb      	strb	r3, [r7, #18]
 8003bc4:	e006      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003bc6:	bf00      	nop
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd0:	7cfb      	ldrb	r3, [r7, #19]
 8003bd2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bd4:	7c7b      	ldrb	r3, [r7, #17]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d105      	bne.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bda:	4b9e      	ldr	r3, [pc, #632]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bde:	4a9d      	ldr	r2, [pc, #628]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003be4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00a      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bf2:	4b98      	ldr	r3, [pc, #608]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf8:	f023 0203 	bic.w	r2, r3, #3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c00:	4994      	ldr	r1, [pc, #592]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00a      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c14:	4b8f      	ldr	r3, [pc, #572]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1a:	f023 020c 	bic.w	r2, r3, #12
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c22:	498c      	ldr	r1, [pc, #560]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0304 	and.w	r3, r3, #4
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00a      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c36:	4b87      	ldr	r3, [pc, #540]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c3c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c44:	4983      	ldr	r1, [pc, #524]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0308 	and.w	r3, r3, #8
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00a      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c58:	4b7e      	ldr	r3, [pc, #504]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c66:	497b      	ldr	r1, [pc, #492]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0310 	and.w	r3, r3, #16
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00a      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c7a:	4b76      	ldr	r3, [pc, #472]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c88:	4972      	ldr	r1, [pc, #456]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0320 	and.w	r3, r3, #32
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00a      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c9c:	4b6d      	ldr	r3, [pc, #436]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003caa:	496a      	ldr	r1, [pc, #424]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00a      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cbe:	4b65      	ldr	r3, [pc, #404]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ccc:	4961      	ldr	r1, [pc, #388]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00a      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ce0:	4b5c      	ldr	r3, [pc, #368]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cee:	4959      	ldr	r1, [pc, #356]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00a      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d02:	4b54      	ldr	r3, [pc, #336]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d08:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d10:	4950      	ldr	r1, [pc, #320]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00a      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d24:	4b4b      	ldr	r3, [pc, #300]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d32:	4948      	ldr	r1, [pc, #288]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00a      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d46:	4b43      	ldr	r3, [pc, #268]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d54:	493f      	ldr	r1, [pc, #252]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d028      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d68:	4b3a      	ldr	r3, [pc, #232]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d76:	4937      	ldr	r1, [pc, #220]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d86:	d106      	bne.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d88:	4b32      	ldr	r3, [pc, #200]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	4a31      	ldr	r2, [pc, #196]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d92:	60d3      	str	r3, [r2, #12]
 8003d94:	e011      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d9e:	d10c      	bne.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	3304      	adds	r3, #4
 8003da4:	2101      	movs	r1, #1
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 f8c8 	bl	8003f3c <RCCEx_PLLSAI1_Config>
 8003dac:	4603      	mov	r3, r0
 8003dae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003db0:	7cfb      	ldrb	r3, [r7, #19]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003db6:	7cfb      	ldrb	r3, [r7, #19]
 8003db8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d028      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003dc6:	4b23      	ldr	r3, [pc, #140]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dcc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd4:	491f      	ldr	r1, [pc, #124]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003de4:	d106      	bne.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003de6:	4b1b      	ldr	r3, [pc, #108]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	4a1a      	ldr	r2, [pc, #104]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003df0:	60d3      	str	r3, [r2, #12]
 8003df2:	e011      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003dfc:	d10c      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	3304      	adds	r3, #4
 8003e02:	2101      	movs	r1, #1
 8003e04:	4618      	mov	r0, r3
 8003e06:	f000 f899 	bl	8003f3c <RCCEx_PLLSAI1_Config>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e0e:	7cfb      	ldrb	r3, [r7, #19]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003e14:	7cfb      	ldrb	r3, [r7, #19]
 8003e16:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d02b      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e24:	4b0b      	ldr	r3, [pc, #44]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e32:	4908      	ldr	r1, [pc, #32]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e42:	d109      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e44:	4b03      	ldr	r3, [pc, #12]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	4a02      	ldr	r2, [pc, #8]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e4e:	60d3      	str	r3, [r2, #12]
 8003e50:	e014      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003e52:	bf00      	nop
 8003e54:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e60:	d10c      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	3304      	adds	r3, #4
 8003e66:	2101      	movs	r1, #1
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 f867 	bl	8003f3c <RCCEx_PLLSAI1_Config>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e72:	7cfb      	ldrb	r3, [r7, #19]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003e78:	7cfb      	ldrb	r3, [r7, #19]
 8003e7a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d02f      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e88:	4b2b      	ldr	r3, [pc, #172]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e96:	4928      	ldr	r1, [pc, #160]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ea2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ea6:	d10d      	bne.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	3304      	adds	r3, #4
 8003eac:	2102      	movs	r1, #2
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 f844 	bl	8003f3c <RCCEx_PLLSAI1_Config>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003eb8:	7cfb      	ldrb	r3, [r7, #19]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d014      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ebe:	7cfb      	ldrb	r3, [r7, #19]
 8003ec0:	74bb      	strb	r3, [r7, #18]
 8003ec2:	e011      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ec8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ecc:	d10c      	bne.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	3320      	adds	r3, #32
 8003ed2:	2102      	movs	r1, #2
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 f925 	bl	8004124 <RCCEx_PLLSAI2_Config>
 8003eda:	4603      	mov	r3, r0
 8003edc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ede:	7cfb      	ldrb	r3, [r7, #19]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d001      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ee4:	7cfb      	ldrb	r3, [r7, #19]
 8003ee6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00a      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ef4:	4b10      	ldr	r3, [pc, #64]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f02:	490d      	ldr	r1, [pc, #52]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00b      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f16:	4b08      	ldr	r3, [pc, #32]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f26:	4904      	ldr	r1, [pc, #16]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f2e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3718      	adds	r7, #24
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40021000 	.word	0x40021000

08003f3c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f46:	2300      	movs	r3, #0
 8003f48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f4a:	4b75      	ldr	r3, [pc, #468]	; (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f003 0303 	and.w	r3, r3, #3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d018      	beq.n	8003f88 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f56:	4b72      	ldr	r3, [pc, #456]	; (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f003 0203 	and.w	r2, r3, #3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d10d      	bne.n	8003f82 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
       ||
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d009      	beq.n	8003f82 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003f6e:	4b6c      	ldr	r3, [pc, #432]	; (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	091b      	lsrs	r3, r3, #4
 8003f74:	f003 0307 	and.w	r3, r3, #7
 8003f78:	1c5a      	adds	r2, r3, #1
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
       ||
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d047      	beq.n	8004012 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	73fb      	strb	r3, [r7, #15]
 8003f86:	e044      	b.n	8004012 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2b03      	cmp	r3, #3
 8003f8e:	d018      	beq.n	8003fc2 <RCCEx_PLLSAI1_Config+0x86>
 8003f90:	2b03      	cmp	r3, #3
 8003f92:	d825      	bhi.n	8003fe0 <RCCEx_PLLSAI1_Config+0xa4>
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d002      	beq.n	8003f9e <RCCEx_PLLSAI1_Config+0x62>
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d009      	beq.n	8003fb0 <RCCEx_PLLSAI1_Config+0x74>
 8003f9c:	e020      	b.n	8003fe0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f9e:	4b60      	ldr	r3, [pc, #384]	; (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d11d      	bne.n	8003fe6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fae:	e01a      	b.n	8003fe6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fb0:	4b5b      	ldr	r3, [pc, #364]	; (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d116      	bne.n	8003fea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fc0:	e013      	b.n	8003fea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003fc2:	4b57      	ldr	r3, [pc, #348]	; (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10f      	bne.n	8003fee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003fce:	4b54      	ldr	r3, [pc, #336]	; (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d109      	bne.n	8003fee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003fde:	e006      	b.n	8003fee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	73fb      	strb	r3, [r7, #15]
      break;
 8003fe4:	e004      	b.n	8003ff0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fe6:	bf00      	nop
 8003fe8:	e002      	b.n	8003ff0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fea:	bf00      	nop
 8003fec:	e000      	b.n	8003ff0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fee:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ff0:	7bfb      	ldrb	r3, [r7, #15]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10d      	bne.n	8004012 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ff6:	4b4a      	ldr	r3, [pc, #296]	; (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6819      	ldr	r1, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	3b01      	subs	r3, #1
 8004008:	011b      	lsls	r3, r3, #4
 800400a:	430b      	orrs	r3, r1
 800400c:	4944      	ldr	r1, [pc, #272]	; (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 800400e:	4313      	orrs	r3, r2
 8004010:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004012:	7bfb      	ldrb	r3, [r7, #15]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d17d      	bne.n	8004114 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004018:	4b41      	ldr	r3, [pc, #260]	; (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a40      	ldr	r2, [pc, #256]	; (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 800401e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004022:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004024:	f7fc ff5a 	bl	8000edc <HAL_GetTick>
 8004028:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800402a:	e009      	b.n	8004040 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800402c:	f7fc ff56 	bl	8000edc <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d902      	bls.n	8004040 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	73fb      	strb	r3, [r7, #15]
        break;
 800403e:	e005      	b.n	800404c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004040:	4b37      	ldr	r3, [pc, #220]	; (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1ef      	bne.n	800402c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800404c:	7bfb      	ldrb	r3, [r7, #15]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d160      	bne.n	8004114 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d111      	bne.n	800407c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004058:	4b31      	ldr	r3, [pc, #196]	; (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004060:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	6892      	ldr	r2, [r2, #8]
 8004068:	0211      	lsls	r1, r2, #8
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	68d2      	ldr	r2, [r2, #12]
 800406e:	0912      	lsrs	r2, r2, #4
 8004070:	0452      	lsls	r2, r2, #17
 8004072:	430a      	orrs	r2, r1
 8004074:	492a      	ldr	r1, [pc, #168]	; (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004076:	4313      	orrs	r3, r2
 8004078:	610b      	str	r3, [r1, #16]
 800407a:	e027      	b.n	80040cc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d112      	bne.n	80040a8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004082:	4b27      	ldr	r3, [pc, #156]	; (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800408a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6892      	ldr	r2, [r2, #8]
 8004092:	0211      	lsls	r1, r2, #8
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6912      	ldr	r2, [r2, #16]
 8004098:	0852      	lsrs	r2, r2, #1
 800409a:	3a01      	subs	r2, #1
 800409c:	0552      	lsls	r2, r2, #21
 800409e:	430a      	orrs	r2, r1
 80040a0:	491f      	ldr	r1, [pc, #124]	; (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	610b      	str	r3, [r1, #16]
 80040a6:	e011      	b.n	80040cc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040a8:	4b1d      	ldr	r3, [pc, #116]	; (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80040b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6892      	ldr	r2, [r2, #8]
 80040b8:	0211      	lsls	r1, r2, #8
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	6952      	ldr	r2, [r2, #20]
 80040be:	0852      	lsrs	r2, r2, #1
 80040c0:	3a01      	subs	r2, #1
 80040c2:	0652      	lsls	r2, r2, #25
 80040c4:	430a      	orrs	r2, r1
 80040c6:	4916      	ldr	r1, [pc, #88]	; (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80040cc:	4b14      	ldr	r3, [pc, #80]	; (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a13      	ldr	r2, [pc, #76]	; (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d8:	f7fc ff00 	bl	8000edc <HAL_GetTick>
 80040dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040de:	e009      	b.n	80040f4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040e0:	f7fc fefc 	bl	8000edc <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d902      	bls.n	80040f4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	73fb      	strb	r3, [r7, #15]
          break;
 80040f2:	e005      	b.n	8004100 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040f4:	4b0a      	ldr	r3, [pc, #40]	; (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d0ef      	beq.n	80040e0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004100:	7bfb      	ldrb	r3, [r7, #15]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d106      	bne.n	8004114 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004106:	4b06      	ldr	r3, [pc, #24]	; (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004108:	691a      	ldr	r2, [r3, #16]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	4904      	ldr	r1, [pc, #16]	; (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004110:	4313      	orrs	r3, r2
 8004112:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004114:	7bfb      	ldrb	r3, [r7, #15]
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	40021000 	.word	0x40021000

08004124 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800412e:	2300      	movs	r3, #0
 8004130:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004132:	4b6a      	ldr	r3, [pc, #424]	; (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f003 0303 	and.w	r3, r3, #3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d018      	beq.n	8004170 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800413e:	4b67      	ldr	r3, [pc, #412]	; (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	f003 0203 	and.w	r2, r3, #3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	429a      	cmp	r2, r3
 800414c:	d10d      	bne.n	800416a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
       ||
 8004152:	2b00      	cmp	r3, #0
 8004154:	d009      	beq.n	800416a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004156:	4b61      	ldr	r3, [pc, #388]	; (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	091b      	lsrs	r3, r3, #4
 800415c:	f003 0307 	and.w	r3, r3, #7
 8004160:	1c5a      	adds	r2, r3, #1
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
       ||
 8004166:	429a      	cmp	r2, r3
 8004168:	d047      	beq.n	80041fa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	73fb      	strb	r3, [r7, #15]
 800416e:	e044      	b.n	80041fa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2b03      	cmp	r3, #3
 8004176:	d018      	beq.n	80041aa <RCCEx_PLLSAI2_Config+0x86>
 8004178:	2b03      	cmp	r3, #3
 800417a:	d825      	bhi.n	80041c8 <RCCEx_PLLSAI2_Config+0xa4>
 800417c:	2b01      	cmp	r3, #1
 800417e:	d002      	beq.n	8004186 <RCCEx_PLLSAI2_Config+0x62>
 8004180:	2b02      	cmp	r3, #2
 8004182:	d009      	beq.n	8004198 <RCCEx_PLLSAI2_Config+0x74>
 8004184:	e020      	b.n	80041c8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004186:	4b55      	ldr	r3, [pc, #340]	; (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d11d      	bne.n	80041ce <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004196:	e01a      	b.n	80041ce <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004198:	4b50      	ldr	r3, [pc, #320]	; (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d116      	bne.n	80041d2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041a8:	e013      	b.n	80041d2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041aa:	4b4c      	ldr	r3, [pc, #304]	; (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10f      	bne.n	80041d6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041b6:	4b49      	ldr	r3, [pc, #292]	; (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d109      	bne.n	80041d6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041c6:	e006      	b.n	80041d6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	73fb      	strb	r3, [r7, #15]
      break;
 80041cc:	e004      	b.n	80041d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041ce:	bf00      	nop
 80041d0:	e002      	b.n	80041d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041d2:	bf00      	nop
 80041d4:	e000      	b.n	80041d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80041d8:	7bfb      	ldrb	r3, [r7, #15]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10d      	bne.n	80041fa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041de:	4b3f      	ldr	r3, [pc, #252]	; (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6819      	ldr	r1, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	011b      	lsls	r3, r3, #4
 80041f2:	430b      	orrs	r3, r1
 80041f4:	4939      	ldr	r1, [pc, #228]	; (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041fa:	7bfb      	ldrb	r3, [r7, #15]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d167      	bne.n	80042d0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004200:	4b36      	ldr	r3, [pc, #216]	; (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a35      	ldr	r2, [pc, #212]	; (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004206:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800420a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800420c:	f7fc fe66 	bl	8000edc <HAL_GetTick>
 8004210:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004212:	e009      	b.n	8004228 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004214:	f7fc fe62 	bl	8000edc <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d902      	bls.n	8004228 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	73fb      	strb	r3, [r7, #15]
        break;
 8004226:	e005      	b.n	8004234 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004228:	4b2c      	ldr	r3, [pc, #176]	; (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1ef      	bne.n	8004214 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004234:	7bfb      	ldrb	r3, [r7, #15]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d14a      	bne.n	80042d0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d111      	bne.n	8004264 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004240:	4b26      	ldr	r3, [pc, #152]	; (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	6892      	ldr	r2, [r2, #8]
 8004250:	0211      	lsls	r1, r2, #8
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	68d2      	ldr	r2, [r2, #12]
 8004256:	0912      	lsrs	r2, r2, #4
 8004258:	0452      	lsls	r2, r2, #17
 800425a:	430a      	orrs	r2, r1
 800425c:	491f      	ldr	r1, [pc, #124]	; (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800425e:	4313      	orrs	r3, r2
 8004260:	614b      	str	r3, [r1, #20]
 8004262:	e011      	b.n	8004288 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004264:	4b1d      	ldr	r3, [pc, #116]	; (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800426c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	6892      	ldr	r2, [r2, #8]
 8004274:	0211      	lsls	r1, r2, #8
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	6912      	ldr	r2, [r2, #16]
 800427a:	0852      	lsrs	r2, r2, #1
 800427c:	3a01      	subs	r2, #1
 800427e:	0652      	lsls	r2, r2, #25
 8004280:	430a      	orrs	r2, r1
 8004282:	4916      	ldr	r1, [pc, #88]	; (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004284:	4313      	orrs	r3, r2
 8004286:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004288:	4b14      	ldr	r3, [pc, #80]	; (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a13      	ldr	r2, [pc, #76]	; (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800428e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004292:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004294:	f7fc fe22 	bl	8000edc <HAL_GetTick>
 8004298:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800429a:	e009      	b.n	80042b0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800429c:	f7fc fe1e 	bl	8000edc <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d902      	bls.n	80042b0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	73fb      	strb	r3, [r7, #15]
          break;
 80042ae:	e005      	b.n	80042bc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042b0:	4b0a      	ldr	r3, [pc, #40]	; (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d0ef      	beq.n	800429c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80042bc:	7bfb      	ldrb	r3, [r7, #15]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d106      	bne.n	80042d0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80042c2:	4b06      	ldr	r3, [pc, #24]	; (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80042c4:	695a      	ldr	r2, [r3, #20]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	4904      	ldr	r1, [pc, #16]	; (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80042d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	40021000 	.word	0x40021000

080042e0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d06c      	beq.n	80043cc <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d106      	bne.n	800430c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7fc fbf0 	bl	8000aec <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2202      	movs	r2, #2
 8004310:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	22ca      	movs	r2, #202	; 0xca
 800431a:	625a      	str	r2, [r3, #36]	; 0x24
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2253      	movs	r2, #83	; 0x53
 8004322:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 f87c 	bl	8004422 <RTC_EnterInitMode>
 800432a:	4603      	mov	r3, r0
 800432c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800432e:	7bfb      	ldrb	r3, [r7, #15]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d14b      	bne.n	80043cc <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	6812      	ldr	r2, [r2, #0]
 800433e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004342:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004346:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6899      	ldr	r1, [r3, #8]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685a      	ldr	r2, [r3, #4]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	431a      	orrs	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	431a      	orrs	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	68d2      	ldr	r2, [r2, #12]
 800436e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6919      	ldr	r1, [r3, #16]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	041a      	lsls	r2, r3, #16
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	430a      	orrs	r2, r1
 8004382:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 f87f 	bl	8004488 <RTC_ExitInitMode>
 800438a:	4603      	mov	r3, r0
 800438c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800438e:	7bfb      	ldrb	r3, [r7, #15]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d11b      	bne.n	80043cc <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f022 0203 	bic.w	r2, r2, #3
 80043a2:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	69da      	ldr	r2, [r3, #28]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	431a      	orrs	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	430a      	orrs	r2, r1
 80043ba:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	22ff      	movs	r2, #255	; 0xff
 80043c2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80043cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b084      	sub	sp, #16
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68da      	ldr	r2, [r3, #12]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043ec:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80043ee:	f7fc fd75 	bl	8000edc <HAL_GetTick>
 80043f2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80043f4:	e009      	b.n	800440a <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80043f6:	f7fc fd71 	bl	8000edc <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004404:	d901      	bls.n	800440a <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e007      	b.n	800441a <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	f003 0320 	and.w	r3, r3, #32
 8004414:	2b00      	cmp	r3, #0
 8004416:	d0ee      	beq.n	80043f6 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b084      	sub	sp, #16
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800442a:	2300      	movs	r3, #0
 800442c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004438:	2b00      	cmp	r3, #0
 800443a:	d120      	bne.n	800447e <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f04f 32ff 	mov.w	r2, #4294967295
 8004444:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004446:	f7fc fd49 	bl	8000edc <HAL_GetTick>
 800444a:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800444c:	e00d      	b.n	800446a <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800444e:	f7fc fd45 	bl	8000edc <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800445c:	d905      	bls.n	800446a <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2203      	movs	r2, #3
 8004466:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004474:	2b00      	cmp	r3, #0
 8004476:	d102      	bne.n	800447e <RTC_EnterInitMode+0x5c>
 8004478:	7bfb      	ldrb	r3, [r7, #15]
 800447a:	2b03      	cmp	r3, #3
 800447c:	d1e7      	bne.n	800444e <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800447e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004480:	4618      	mov	r0, r3
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004490:	2300      	movs	r3, #0
 8004492:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004494:	4b1a      	ldr	r3, [pc, #104]	; (8004500 <RTC_ExitInitMode+0x78>)
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	4a19      	ldr	r2, [pc, #100]	; (8004500 <RTC_ExitInitMode+0x78>)
 800449a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800449e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80044a0:	4b17      	ldr	r3, [pc, #92]	; (8004500 <RTC_ExitInitMode+0x78>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f003 0320 	and.w	r3, r3, #32
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10c      	bne.n	80044c6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f7ff ff92 	bl	80043d6 <HAL_RTC_WaitForSynchro>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d01e      	beq.n	80044f6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2203      	movs	r2, #3
 80044bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	73fb      	strb	r3, [r7, #15]
 80044c4:	e017      	b.n	80044f6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80044c6:	4b0e      	ldr	r3, [pc, #56]	; (8004500 <RTC_ExitInitMode+0x78>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	4a0d      	ldr	r2, [pc, #52]	; (8004500 <RTC_ExitInitMode+0x78>)
 80044cc:	f023 0320 	bic.w	r3, r3, #32
 80044d0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7ff ff7f 	bl	80043d6 <HAL_RTC_WaitForSynchro>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d005      	beq.n	80044ea <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2203      	movs	r2, #3
 80044e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80044ea:	4b05      	ldr	r3, [pc, #20]	; (8004500 <RTC_ExitInitMode+0x78>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	4a04      	ldr	r2, [pc, #16]	; (8004500 <RTC_ExitInitMode+0x78>)
 80044f0:	f043 0320 	orr.w	r3, r3, #32
 80044f4:	6093      	str	r3, [r2, #8]
  }

  return status;
 80044f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	40002800 	.word	0x40002800

08004504 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e040      	b.n	8004598 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800451a:	2b00      	cmp	r3, #0
 800451c:	d106      	bne.n	800452c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7fc fbe2 	bl	8000cf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2224      	movs	r2, #36	; 0x24
 8004530:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f022 0201 	bic.w	r2, r2, #1
 8004540:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f82c 	bl	80045a0 <UART_SetConfig>
 8004548:	4603      	mov	r3, r0
 800454a:	2b01      	cmp	r3, #1
 800454c:	d101      	bne.n	8004552 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e022      	b.n	8004598 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004556:	2b00      	cmp	r3, #0
 8004558:	d002      	beq.n	8004560 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 fad8 	bl	8004b10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800456e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689a      	ldr	r2, [r3, #8]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800457e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f042 0201 	orr.w	r2, r2, #1
 800458e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 fb5f 	bl	8004c54 <UART_CheckIdleState>
 8004596:	4603      	mov	r3, r0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3708      	adds	r7, #8
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045a4:	b08a      	sub	sp, #40	; 0x28
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045aa:	2300      	movs	r3, #0
 80045ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	689a      	ldr	r2, [r3, #8]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	431a      	orrs	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	431a      	orrs	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	69db      	ldr	r3, [r3, #28]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	4ba4      	ldr	r3, [pc, #656]	; (8004860 <UART_SetConfig+0x2c0>)
 80045d0:	4013      	ands	r3, r2
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	6812      	ldr	r2, [r2, #0]
 80045d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045d8:	430b      	orrs	r3, r1
 80045da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	68da      	ldr	r2, [r3, #12]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a99      	ldr	r2, [pc, #612]	; (8004864 <UART_SetConfig+0x2c4>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d004      	beq.n	800460c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004608:	4313      	orrs	r3, r2
 800460a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800461c:	430a      	orrs	r2, r1
 800461e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a90      	ldr	r2, [pc, #576]	; (8004868 <UART_SetConfig+0x2c8>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d126      	bne.n	8004678 <UART_SetConfig+0xd8>
 800462a:	4b90      	ldr	r3, [pc, #576]	; (800486c <UART_SetConfig+0x2cc>)
 800462c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004630:	f003 0303 	and.w	r3, r3, #3
 8004634:	2b03      	cmp	r3, #3
 8004636:	d81b      	bhi.n	8004670 <UART_SetConfig+0xd0>
 8004638:	a201      	add	r2, pc, #4	; (adr r2, 8004640 <UART_SetConfig+0xa0>)
 800463a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800463e:	bf00      	nop
 8004640:	08004651 	.word	0x08004651
 8004644:	08004661 	.word	0x08004661
 8004648:	08004659 	.word	0x08004659
 800464c:	08004669 	.word	0x08004669
 8004650:	2301      	movs	r3, #1
 8004652:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004656:	e116      	b.n	8004886 <UART_SetConfig+0x2e6>
 8004658:	2302      	movs	r3, #2
 800465a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800465e:	e112      	b.n	8004886 <UART_SetConfig+0x2e6>
 8004660:	2304      	movs	r3, #4
 8004662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004666:	e10e      	b.n	8004886 <UART_SetConfig+0x2e6>
 8004668:	2308      	movs	r3, #8
 800466a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800466e:	e10a      	b.n	8004886 <UART_SetConfig+0x2e6>
 8004670:	2310      	movs	r3, #16
 8004672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004676:	e106      	b.n	8004886 <UART_SetConfig+0x2e6>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a7c      	ldr	r2, [pc, #496]	; (8004870 <UART_SetConfig+0x2d0>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d138      	bne.n	80046f4 <UART_SetConfig+0x154>
 8004682:	4b7a      	ldr	r3, [pc, #488]	; (800486c <UART_SetConfig+0x2cc>)
 8004684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004688:	f003 030c 	and.w	r3, r3, #12
 800468c:	2b0c      	cmp	r3, #12
 800468e:	d82d      	bhi.n	80046ec <UART_SetConfig+0x14c>
 8004690:	a201      	add	r2, pc, #4	; (adr r2, 8004698 <UART_SetConfig+0xf8>)
 8004692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004696:	bf00      	nop
 8004698:	080046cd 	.word	0x080046cd
 800469c:	080046ed 	.word	0x080046ed
 80046a0:	080046ed 	.word	0x080046ed
 80046a4:	080046ed 	.word	0x080046ed
 80046a8:	080046dd 	.word	0x080046dd
 80046ac:	080046ed 	.word	0x080046ed
 80046b0:	080046ed 	.word	0x080046ed
 80046b4:	080046ed 	.word	0x080046ed
 80046b8:	080046d5 	.word	0x080046d5
 80046bc:	080046ed 	.word	0x080046ed
 80046c0:	080046ed 	.word	0x080046ed
 80046c4:	080046ed 	.word	0x080046ed
 80046c8:	080046e5 	.word	0x080046e5
 80046cc:	2300      	movs	r3, #0
 80046ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046d2:	e0d8      	b.n	8004886 <UART_SetConfig+0x2e6>
 80046d4:	2302      	movs	r3, #2
 80046d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046da:	e0d4      	b.n	8004886 <UART_SetConfig+0x2e6>
 80046dc:	2304      	movs	r3, #4
 80046de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046e2:	e0d0      	b.n	8004886 <UART_SetConfig+0x2e6>
 80046e4:	2308      	movs	r3, #8
 80046e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ea:	e0cc      	b.n	8004886 <UART_SetConfig+0x2e6>
 80046ec:	2310      	movs	r3, #16
 80046ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046f2:	e0c8      	b.n	8004886 <UART_SetConfig+0x2e6>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a5e      	ldr	r2, [pc, #376]	; (8004874 <UART_SetConfig+0x2d4>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d125      	bne.n	800474a <UART_SetConfig+0x1aa>
 80046fe:	4b5b      	ldr	r3, [pc, #364]	; (800486c <UART_SetConfig+0x2cc>)
 8004700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004704:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004708:	2b30      	cmp	r3, #48	; 0x30
 800470a:	d016      	beq.n	800473a <UART_SetConfig+0x19a>
 800470c:	2b30      	cmp	r3, #48	; 0x30
 800470e:	d818      	bhi.n	8004742 <UART_SetConfig+0x1a2>
 8004710:	2b20      	cmp	r3, #32
 8004712:	d00a      	beq.n	800472a <UART_SetConfig+0x18a>
 8004714:	2b20      	cmp	r3, #32
 8004716:	d814      	bhi.n	8004742 <UART_SetConfig+0x1a2>
 8004718:	2b00      	cmp	r3, #0
 800471a:	d002      	beq.n	8004722 <UART_SetConfig+0x182>
 800471c:	2b10      	cmp	r3, #16
 800471e:	d008      	beq.n	8004732 <UART_SetConfig+0x192>
 8004720:	e00f      	b.n	8004742 <UART_SetConfig+0x1a2>
 8004722:	2300      	movs	r3, #0
 8004724:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004728:	e0ad      	b.n	8004886 <UART_SetConfig+0x2e6>
 800472a:	2302      	movs	r3, #2
 800472c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004730:	e0a9      	b.n	8004886 <UART_SetConfig+0x2e6>
 8004732:	2304      	movs	r3, #4
 8004734:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004738:	e0a5      	b.n	8004886 <UART_SetConfig+0x2e6>
 800473a:	2308      	movs	r3, #8
 800473c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004740:	e0a1      	b.n	8004886 <UART_SetConfig+0x2e6>
 8004742:	2310      	movs	r3, #16
 8004744:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004748:	e09d      	b.n	8004886 <UART_SetConfig+0x2e6>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a4a      	ldr	r2, [pc, #296]	; (8004878 <UART_SetConfig+0x2d8>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d125      	bne.n	80047a0 <UART_SetConfig+0x200>
 8004754:	4b45      	ldr	r3, [pc, #276]	; (800486c <UART_SetConfig+0x2cc>)
 8004756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800475e:	2bc0      	cmp	r3, #192	; 0xc0
 8004760:	d016      	beq.n	8004790 <UART_SetConfig+0x1f0>
 8004762:	2bc0      	cmp	r3, #192	; 0xc0
 8004764:	d818      	bhi.n	8004798 <UART_SetConfig+0x1f8>
 8004766:	2b80      	cmp	r3, #128	; 0x80
 8004768:	d00a      	beq.n	8004780 <UART_SetConfig+0x1e0>
 800476a:	2b80      	cmp	r3, #128	; 0x80
 800476c:	d814      	bhi.n	8004798 <UART_SetConfig+0x1f8>
 800476e:	2b00      	cmp	r3, #0
 8004770:	d002      	beq.n	8004778 <UART_SetConfig+0x1d8>
 8004772:	2b40      	cmp	r3, #64	; 0x40
 8004774:	d008      	beq.n	8004788 <UART_SetConfig+0x1e8>
 8004776:	e00f      	b.n	8004798 <UART_SetConfig+0x1f8>
 8004778:	2300      	movs	r3, #0
 800477a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800477e:	e082      	b.n	8004886 <UART_SetConfig+0x2e6>
 8004780:	2302      	movs	r3, #2
 8004782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004786:	e07e      	b.n	8004886 <UART_SetConfig+0x2e6>
 8004788:	2304      	movs	r3, #4
 800478a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800478e:	e07a      	b.n	8004886 <UART_SetConfig+0x2e6>
 8004790:	2308      	movs	r3, #8
 8004792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004796:	e076      	b.n	8004886 <UART_SetConfig+0x2e6>
 8004798:	2310      	movs	r3, #16
 800479a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800479e:	e072      	b.n	8004886 <UART_SetConfig+0x2e6>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a35      	ldr	r2, [pc, #212]	; (800487c <UART_SetConfig+0x2dc>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d12a      	bne.n	8004800 <UART_SetConfig+0x260>
 80047aa:	4b30      	ldr	r3, [pc, #192]	; (800486c <UART_SetConfig+0x2cc>)
 80047ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047b8:	d01a      	beq.n	80047f0 <UART_SetConfig+0x250>
 80047ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047be:	d81b      	bhi.n	80047f8 <UART_SetConfig+0x258>
 80047c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047c4:	d00c      	beq.n	80047e0 <UART_SetConfig+0x240>
 80047c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047ca:	d815      	bhi.n	80047f8 <UART_SetConfig+0x258>
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d003      	beq.n	80047d8 <UART_SetConfig+0x238>
 80047d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047d4:	d008      	beq.n	80047e8 <UART_SetConfig+0x248>
 80047d6:	e00f      	b.n	80047f8 <UART_SetConfig+0x258>
 80047d8:	2300      	movs	r3, #0
 80047da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047de:	e052      	b.n	8004886 <UART_SetConfig+0x2e6>
 80047e0:	2302      	movs	r3, #2
 80047e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047e6:	e04e      	b.n	8004886 <UART_SetConfig+0x2e6>
 80047e8:	2304      	movs	r3, #4
 80047ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ee:	e04a      	b.n	8004886 <UART_SetConfig+0x2e6>
 80047f0:	2308      	movs	r3, #8
 80047f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047f6:	e046      	b.n	8004886 <UART_SetConfig+0x2e6>
 80047f8:	2310      	movs	r3, #16
 80047fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047fe:	e042      	b.n	8004886 <UART_SetConfig+0x2e6>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a17      	ldr	r2, [pc, #92]	; (8004864 <UART_SetConfig+0x2c4>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d13a      	bne.n	8004880 <UART_SetConfig+0x2e0>
 800480a:	4b18      	ldr	r3, [pc, #96]	; (800486c <UART_SetConfig+0x2cc>)
 800480c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004810:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004814:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004818:	d01a      	beq.n	8004850 <UART_SetConfig+0x2b0>
 800481a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800481e:	d81b      	bhi.n	8004858 <UART_SetConfig+0x2b8>
 8004820:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004824:	d00c      	beq.n	8004840 <UART_SetConfig+0x2a0>
 8004826:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800482a:	d815      	bhi.n	8004858 <UART_SetConfig+0x2b8>
 800482c:	2b00      	cmp	r3, #0
 800482e:	d003      	beq.n	8004838 <UART_SetConfig+0x298>
 8004830:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004834:	d008      	beq.n	8004848 <UART_SetConfig+0x2a8>
 8004836:	e00f      	b.n	8004858 <UART_SetConfig+0x2b8>
 8004838:	2300      	movs	r3, #0
 800483a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800483e:	e022      	b.n	8004886 <UART_SetConfig+0x2e6>
 8004840:	2302      	movs	r3, #2
 8004842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004846:	e01e      	b.n	8004886 <UART_SetConfig+0x2e6>
 8004848:	2304      	movs	r3, #4
 800484a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800484e:	e01a      	b.n	8004886 <UART_SetConfig+0x2e6>
 8004850:	2308      	movs	r3, #8
 8004852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004856:	e016      	b.n	8004886 <UART_SetConfig+0x2e6>
 8004858:	2310      	movs	r3, #16
 800485a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800485e:	e012      	b.n	8004886 <UART_SetConfig+0x2e6>
 8004860:	efff69f3 	.word	0xefff69f3
 8004864:	40008000 	.word	0x40008000
 8004868:	40013800 	.word	0x40013800
 800486c:	40021000 	.word	0x40021000
 8004870:	40004400 	.word	0x40004400
 8004874:	40004800 	.word	0x40004800
 8004878:	40004c00 	.word	0x40004c00
 800487c:	40005000 	.word	0x40005000
 8004880:	2310      	movs	r3, #16
 8004882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a9f      	ldr	r2, [pc, #636]	; (8004b08 <UART_SetConfig+0x568>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d17a      	bne.n	8004986 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004890:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004894:	2b08      	cmp	r3, #8
 8004896:	d824      	bhi.n	80048e2 <UART_SetConfig+0x342>
 8004898:	a201      	add	r2, pc, #4	; (adr r2, 80048a0 <UART_SetConfig+0x300>)
 800489a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800489e:	bf00      	nop
 80048a0:	080048c5 	.word	0x080048c5
 80048a4:	080048e3 	.word	0x080048e3
 80048a8:	080048cd 	.word	0x080048cd
 80048ac:	080048e3 	.word	0x080048e3
 80048b0:	080048d3 	.word	0x080048d3
 80048b4:	080048e3 	.word	0x080048e3
 80048b8:	080048e3 	.word	0x080048e3
 80048bc:	080048e3 	.word	0x080048e3
 80048c0:	080048db 	.word	0x080048db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048c4:	f7fe ffc4 	bl	8003850 <HAL_RCC_GetPCLK1Freq>
 80048c8:	61f8      	str	r0, [r7, #28]
        break;
 80048ca:	e010      	b.n	80048ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048cc:	4b8f      	ldr	r3, [pc, #572]	; (8004b0c <UART_SetConfig+0x56c>)
 80048ce:	61fb      	str	r3, [r7, #28]
        break;
 80048d0:	e00d      	b.n	80048ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048d2:	f7fe ff25 	bl	8003720 <HAL_RCC_GetSysClockFreq>
 80048d6:	61f8      	str	r0, [r7, #28]
        break;
 80048d8:	e009      	b.n	80048ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048de:	61fb      	str	r3, [r7, #28]
        break;
 80048e0:	e005      	b.n	80048ee <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80048e2:	2300      	movs	r3, #0
 80048e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80048ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f000 80fb 	beq.w	8004aec <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	685a      	ldr	r2, [r3, #4]
 80048fa:	4613      	mov	r3, r2
 80048fc:	005b      	lsls	r3, r3, #1
 80048fe:	4413      	add	r3, r2
 8004900:	69fa      	ldr	r2, [r7, #28]
 8004902:	429a      	cmp	r2, r3
 8004904:	d305      	bcc.n	8004912 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800490c:	69fa      	ldr	r2, [r7, #28]
 800490e:	429a      	cmp	r2, r3
 8004910:	d903      	bls.n	800491a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004918:	e0e8      	b.n	8004aec <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	2200      	movs	r2, #0
 800491e:	461c      	mov	r4, r3
 8004920:	4615      	mov	r5, r2
 8004922:	f04f 0200 	mov.w	r2, #0
 8004926:	f04f 0300 	mov.w	r3, #0
 800492a:	022b      	lsls	r3, r5, #8
 800492c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004930:	0222      	lsls	r2, r4, #8
 8004932:	68f9      	ldr	r1, [r7, #12]
 8004934:	6849      	ldr	r1, [r1, #4]
 8004936:	0849      	lsrs	r1, r1, #1
 8004938:	2000      	movs	r0, #0
 800493a:	4688      	mov	r8, r1
 800493c:	4681      	mov	r9, r0
 800493e:	eb12 0a08 	adds.w	sl, r2, r8
 8004942:	eb43 0b09 	adc.w	fp, r3, r9
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	603b      	str	r3, [r7, #0]
 800494e:	607a      	str	r2, [r7, #4]
 8004950:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004954:	4650      	mov	r0, sl
 8004956:	4659      	mov	r1, fp
 8004958:	f7fb fc92 	bl	8000280 <__aeabi_uldivmod>
 800495c:	4602      	mov	r2, r0
 800495e:	460b      	mov	r3, r1
 8004960:	4613      	mov	r3, r2
 8004962:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800496a:	d308      	bcc.n	800497e <UART_SetConfig+0x3de>
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004972:	d204      	bcs.n	800497e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	60da      	str	r2, [r3, #12]
 800497c:	e0b6      	b.n	8004aec <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004984:	e0b2      	b.n	8004aec <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800498e:	d15e      	bne.n	8004a4e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004990:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004994:	2b08      	cmp	r3, #8
 8004996:	d828      	bhi.n	80049ea <UART_SetConfig+0x44a>
 8004998:	a201      	add	r2, pc, #4	; (adr r2, 80049a0 <UART_SetConfig+0x400>)
 800499a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800499e:	bf00      	nop
 80049a0:	080049c5 	.word	0x080049c5
 80049a4:	080049cd 	.word	0x080049cd
 80049a8:	080049d5 	.word	0x080049d5
 80049ac:	080049eb 	.word	0x080049eb
 80049b0:	080049db 	.word	0x080049db
 80049b4:	080049eb 	.word	0x080049eb
 80049b8:	080049eb 	.word	0x080049eb
 80049bc:	080049eb 	.word	0x080049eb
 80049c0:	080049e3 	.word	0x080049e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049c4:	f7fe ff44 	bl	8003850 <HAL_RCC_GetPCLK1Freq>
 80049c8:	61f8      	str	r0, [r7, #28]
        break;
 80049ca:	e014      	b.n	80049f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049cc:	f7fe ff56 	bl	800387c <HAL_RCC_GetPCLK2Freq>
 80049d0:	61f8      	str	r0, [r7, #28]
        break;
 80049d2:	e010      	b.n	80049f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049d4:	4b4d      	ldr	r3, [pc, #308]	; (8004b0c <UART_SetConfig+0x56c>)
 80049d6:	61fb      	str	r3, [r7, #28]
        break;
 80049d8:	e00d      	b.n	80049f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049da:	f7fe fea1 	bl	8003720 <HAL_RCC_GetSysClockFreq>
 80049de:	61f8      	str	r0, [r7, #28]
        break;
 80049e0:	e009      	b.n	80049f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049e6:	61fb      	str	r3, [r7, #28]
        break;
 80049e8:	e005      	b.n	80049f6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80049ea:	2300      	movs	r3, #0
 80049ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80049f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d077      	beq.n	8004aec <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	005a      	lsls	r2, r3, #1
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	085b      	lsrs	r3, r3, #1
 8004a06:	441a      	add	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a10:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	2b0f      	cmp	r3, #15
 8004a16:	d916      	bls.n	8004a46 <UART_SetConfig+0x4a6>
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a1e:	d212      	bcs.n	8004a46 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	f023 030f 	bic.w	r3, r3, #15
 8004a28:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	085b      	lsrs	r3, r3, #1
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	8afb      	ldrh	r3, [r7, #22]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	8afa      	ldrh	r2, [r7, #22]
 8004a42:	60da      	str	r2, [r3, #12]
 8004a44:	e052      	b.n	8004aec <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a4c:	e04e      	b.n	8004aec <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a52:	2b08      	cmp	r3, #8
 8004a54:	d827      	bhi.n	8004aa6 <UART_SetConfig+0x506>
 8004a56:	a201      	add	r2, pc, #4	; (adr r2, 8004a5c <UART_SetConfig+0x4bc>)
 8004a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5c:	08004a81 	.word	0x08004a81
 8004a60:	08004a89 	.word	0x08004a89
 8004a64:	08004a91 	.word	0x08004a91
 8004a68:	08004aa7 	.word	0x08004aa7
 8004a6c:	08004a97 	.word	0x08004a97
 8004a70:	08004aa7 	.word	0x08004aa7
 8004a74:	08004aa7 	.word	0x08004aa7
 8004a78:	08004aa7 	.word	0x08004aa7
 8004a7c:	08004a9f 	.word	0x08004a9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a80:	f7fe fee6 	bl	8003850 <HAL_RCC_GetPCLK1Freq>
 8004a84:	61f8      	str	r0, [r7, #28]
        break;
 8004a86:	e014      	b.n	8004ab2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a88:	f7fe fef8 	bl	800387c <HAL_RCC_GetPCLK2Freq>
 8004a8c:	61f8      	str	r0, [r7, #28]
        break;
 8004a8e:	e010      	b.n	8004ab2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a90:	4b1e      	ldr	r3, [pc, #120]	; (8004b0c <UART_SetConfig+0x56c>)
 8004a92:	61fb      	str	r3, [r7, #28]
        break;
 8004a94:	e00d      	b.n	8004ab2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a96:	f7fe fe43 	bl	8003720 <HAL_RCC_GetSysClockFreq>
 8004a9a:	61f8      	str	r0, [r7, #28]
        break;
 8004a9c:	e009      	b.n	8004ab2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aa2:	61fb      	str	r3, [r7, #28]
        break;
 8004aa4:	e005      	b.n	8004ab2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ab0:	bf00      	nop
    }

    if (pclk != 0U)
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d019      	beq.n	8004aec <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	085a      	lsrs	r2, r3, #1
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	441a      	add	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	2b0f      	cmp	r3, #15
 8004ad0:	d909      	bls.n	8004ae6 <UART_SetConfig+0x546>
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ad8:	d205      	bcs.n	8004ae6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	60da      	str	r2, [r3, #12]
 8004ae4:	e002      	b.n	8004aec <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004af8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3728      	adds	r7, #40	; 0x28
 8004b00:	46bd      	mov	sp, r7
 8004b02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b06:	bf00      	nop
 8004b08:	40008000 	.word	0x40008000
 8004b0c:	00f42400 	.word	0x00f42400

08004b10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	f003 0301 	and.w	r3, r3, #1
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00a      	beq.n	8004b3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00a      	beq.n	8004b5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00a      	beq.n	8004b7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b82:	f003 0308 	and.w	r3, r3, #8
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00a      	beq.n	8004ba0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	f003 0310 	and.w	r3, r3, #16
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00a      	beq.n	8004bc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc6:	f003 0320 	and.w	r3, r3, #32
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00a      	beq.n	8004be4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	430a      	orrs	r2, r1
 8004be2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d01a      	beq.n	8004c26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c0e:	d10a      	bne.n	8004c26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00a      	beq.n	8004c48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	605a      	str	r2, [r3, #4]
  }
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af02      	add	r7, sp, #8
 8004c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c64:	f7fc f93a 	bl	8000edc <HAL_GetTick>
 8004c68:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0308 	and.w	r3, r3, #8
 8004c74:	2b08      	cmp	r3, #8
 8004c76:	d10e      	bne.n	8004c96 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c7c:	9300      	str	r3, [sp, #0]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f82d 	bl	8004ce6 <UART_WaitOnFlagUntilTimeout>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d001      	beq.n	8004c96 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e023      	b.n	8004cde <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0304 	and.w	r3, r3, #4
 8004ca0:	2b04      	cmp	r3, #4
 8004ca2:	d10e      	bne.n	8004cc2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ca4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ca8:	9300      	str	r3, [sp, #0]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f817 	bl	8004ce6 <UART_WaitOnFlagUntilTimeout>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d001      	beq.n	8004cc2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e00d      	b.n	8004cde <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2220      	movs	r2, #32
 8004cc6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b09c      	sub	sp, #112	; 0x70
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	60f8      	str	r0, [r7, #12]
 8004cee:	60b9      	str	r1, [r7, #8]
 8004cf0:	603b      	str	r3, [r7, #0]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cf6:	e0a5      	b.n	8004e44 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cfe:	f000 80a1 	beq.w	8004e44 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d02:	f7fc f8eb 	bl	8000edc <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d302      	bcc.n	8004d18 <UART_WaitOnFlagUntilTimeout+0x32>
 8004d12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d13e      	bne.n	8004d96 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d20:	e853 3f00 	ldrex	r3, [r3]
 8004d24:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004d26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d2c:	667b      	str	r3, [r7, #100]	; 0x64
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	461a      	mov	r2, r3
 8004d34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d38:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d3e:	e841 2300 	strex	r3, r2, [r1]
 8004d42:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004d44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1e6      	bne.n	8004d18 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	3308      	adds	r3, #8
 8004d50:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d54:	e853 3f00 	ldrex	r3, [r3]
 8004d58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5c:	f023 0301 	bic.w	r3, r3, #1
 8004d60:	663b      	str	r3, [r7, #96]	; 0x60
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	3308      	adds	r3, #8
 8004d68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d6a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004d6c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d72:	e841 2300 	strex	r3, r2, [r1]
 8004d76:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004d78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1e5      	bne.n	8004d4a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2220      	movs	r2, #32
 8004d82:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2220      	movs	r2, #32
 8004d88:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e067      	b.n	8004e66 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0304 	and.w	r3, r3, #4
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d04f      	beq.n	8004e44 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	69db      	ldr	r3, [r3, #28]
 8004daa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004db2:	d147      	bne.n	8004e44 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004dbc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc6:	e853 3f00 	ldrex	r3, [r3]
 8004dca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004dd2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	461a      	mov	r2, r3
 8004dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ddc:	637b      	str	r3, [r7, #52]	; 0x34
 8004dde:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004de2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004de4:	e841 2300 	strex	r3, r2, [r1]
 8004de8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1e6      	bne.n	8004dbe <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	3308      	adds	r3, #8
 8004df6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	e853 3f00 	ldrex	r3, [r3]
 8004dfe:	613b      	str	r3, [r7, #16]
   return(result);
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	f023 0301 	bic.w	r3, r3, #1
 8004e06:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	3308      	adds	r3, #8
 8004e0e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e10:	623a      	str	r2, [r7, #32]
 8004e12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e14:	69f9      	ldr	r1, [r7, #28]
 8004e16:	6a3a      	ldr	r2, [r7, #32]
 8004e18:	e841 2300 	strex	r3, r2, [r1]
 8004e1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1e5      	bne.n	8004df0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2220      	movs	r2, #32
 8004e28:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2220      	movs	r2, #32
 8004e2e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2220      	movs	r2, #32
 8004e34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e010      	b.n	8004e66 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	69da      	ldr	r2, [r3, #28]
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	bf0c      	ite	eq
 8004e54:	2301      	moveq	r3, #1
 8004e56:	2300      	movne	r3, #0
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	79fb      	ldrb	r3, [r7, #7]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	f43f af4a 	beq.w	8004cf8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3770      	adds	r7, #112	; 0x70
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8004e6e:	b5b0      	push	{r4, r5, r7, lr}
 8004e70:	b08a      	sub	sp, #40	; 0x28
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	60f8      	str	r0, [r7, #12]
 8004e76:	60b9      	str	r1, [r7, #8]
 8004e78:	607a      	str	r2, [r7, #4]
 8004e7a:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8004e7c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8004e80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8004e84:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004e88:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8004e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e8c:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8004e8e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004e90:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8004e9e:	f107 0310 	add.w	r3, r7, #16
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f000 f80e 	bl	8004ec4 <Lcd_init>

	return lcd;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	461d      	mov	r5, r3
 8004eac:	f107 0410 	add.w	r4, r7, #16
 8004eb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004eb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004eb4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004eb8:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	3728      	adds	r7, #40	; 0x28
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bdb0      	pop	{r4, r5, r7, pc}

08004ec4 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	7d9b      	ldrb	r3, [r3, #22]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d10c      	bne.n	8004eee <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8004ed4:	2133      	movs	r1, #51	; 0x33
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 f870 	bl	8004fbc <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8004edc:	2132      	movs	r1, #50	; 0x32
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 f86c 	bl	8004fbc <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8004ee4:	2128      	movs	r1, #40	; 0x28
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 f868 	bl	8004fbc <lcd_write_command>
 8004eec:	e003      	b.n	8004ef6 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8004eee:	2138      	movs	r1, #56	; 0x38
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 f863 	bl	8004fbc <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8004ef6:	2101      	movs	r1, #1
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 f85f 	bl	8004fbc <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8004efe:	210c      	movs	r1, #12
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 f85b 	bl	8004fbc <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8004f06:	2106      	movs	r1, #6
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 f857 	bl	8004fbc <lcd_write_command>
}
 8004f0e:	bf00      	nop
 8004f10:	3708      	adds	r7, #8
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
	...

08004f18 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8004f22:	f107 030c 	add.w	r3, r7, #12
 8004f26:	683a      	ldr	r2, [r7, #0]
 8004f28:	4906      	ldr	r1, [pc, #24]	; (8004f44 <Lcd_int+0x2c>)
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 f914 	bl	8005158 <siprintf>

	Lcd_string(lcd, buffer);
 8004f30:	f107 030c 	add.w	r3, r7, #12
 8004f34:	4619      	mov	r1, r3
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 f806 	bl	8004f48 <Lcd_string>
}
 8004f3c:	bf00      	nop
 8004f3e:	3718      	adds	r7, #24
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	08005a70 	.word	0x08005a70

08004f48 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8004f48:	b590      	push	{r4, r7, lr}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8004f52:	2300      	movs	r3, #0
 8004f54:	73fb      	strb	r3, [r7, #15]
 8004f56:	e00a      	b.n	8004f6e <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8004f58:	7bfb      	ldrb	r3, [r7, #15]
 8004f5a:	683a      	ldr	r2, [r7, #0]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	4619      	mov	r1, r3
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f858 	bl	8005018 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8004f68:	7bfb      	ldrb	r3, [r7, #15]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	73fb      	strb	r3, [r7, #15]
 8004f6e:	7bfc      	ldrb	r4, [r7, #15]
 8004f70:	6838      	ldr	r0, [r7, #0]
 8004f72:	f7fb f92d 	bl	80001d0 <strlen>
 8004f76:	4603      	mov	r3, r0
 8004f78:	429c      	cmp	r4, r3
 8004f7a:	d3ed      	bcc.n	8004f58 <Lcd_string+0x10>
	}
}
 8004f7c:	bf00      	nop
 8004f7e:	bf00      	nop
 8004f80:	3714      	adds	r7, #20
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd90      	pop	{r4, r7, pc}
	...

08004f88 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	460b      	mov	r3, r1
 8004f92:	70fb      	strb	r3, [r7, #3]
 8004f94:	4613      	mov	r3, r2
 8004f96:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8004f98:	78fb      	ldrb	r3, [r7, #3]
 8004f9a:	4a07      	ldr	r2, [pc, #28]	; (8004fb8 <Lcd_cursor+0x30>)
 8004f9c:	5cd2      	ldrb	r2, [r2, r3]
 8004f9e:	78bb      	ldrb	r3, [r7, #2]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	3b80      	subs	r3, #128	; 0x80
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	4619      	mov	r1, r3
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f806 	bl	8004fbc <lcd_write_command>
	#endif
}
 8004fb0:	bf00      	nop
 8004fb2:	3708      	adds	r7, #8
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	08005abc 	.word	0x08005abc

08004fbc <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6898      	ldr	r0, [r3, #8]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	899b      	ldrh	r3, [r3, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	f7fd fe4c 	bl	8002c70 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	7d9b      	ldrb	r3, [r3, #22]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d111      	bne.n	8005004 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8004fe0:	78fb      	ldrb	r3, [r7, #3]
 8004fe2:	091b      	lsrs	r3, r3, #4
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2204      	movs	r2, #4
 8004fe8:	4619      	mov	r1, r3
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f842 	bl	8005074 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8004ff0:	78fb      	ldrb	r3, [r7, #3]
 8004ff2:	f003 030f 	and.w	r3, r3, #15
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	2204      	movs	r2, #4
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 f839 	bl	8005074 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8005002:	e005      	b.n	8005010 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8005004:	78fb      	ldrb	r3, [r7, #3]
 8005006:	2208      	movs	r2, #8
 8005008:	4619      	mov	r1, r3
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f832 	bl	8005074 <lcd_write>
}
 8005010:	bf00      	nop
 8005012:	3708      	adds	r7, #8
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	460b      	mov	r3, r1
 8005022:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6898      	ldr	r0, [r3, #8]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	899b      	ldrh	r3, [r3, #12]
 800502c:	2201      	movs	r2, #1
 800502e:	4619      	mov	r1, r3
 8005030:	f7fd fe1e 	bl	8002c70 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	7d9b      	ldrb	r3, [r3, #22]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d111      	bne.n	8005060 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 800503c:	78fb      	ldrb	r3, [r7, #3]
 800503e:	091b      	lsrs	r3, r3, #4
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2204      	movs	r2, #4
 8005044:	4619      	mov	r1, r3
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f814 	bl	8005074 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 800504c:	78fb      	ldrb	r3, [r7, #3]
 800504e:	f003 030f 	and.w	r3, r3, #15
 8005052:	b2db      	uxtb	r3, r3
 8005054:	2204      	movs	r2, #4
 8005056:	4619      	mov	r1, r3
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 f80b 	bl	8005074 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 800505e:	e005      	b.n	800506c <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8005060:	78fb      	ldrb	r3, [r7, #3]
 8005062:	2208      	movs	r2, #8
 8005064:	4619      	mov	r1, r3
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f804 	bl	8005074 <lcd_write>
}
 800506c:	bf00      	nop
 800506e:	3708      	adds	r7, #8
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	460b      	mov	r3, r1
 800507e:	70fb      	strb	r3, [r7, #3]
 8005080:	4613      	mov	r3, r2
 8005082:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8005084:	2300      	movs	r3, #0
 8005086:	73fb      	strb	r3, [r7, #15]
 8005088:	e019      	b.n	80050be <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	7bfb      	ldrb	r3, [r7, #15]
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4413      	add	r3, r2
 8005094:	6818      	ldr	r0, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	7bfb      	ldrb	r3, [r7, #15]
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	4413      	add	r3, r2
 80050a0:	8819      	ldrh	r1, [r3, #0]
 80050a2:	78fa      	ldrb	r2, [r7, #3]
 80050a4:	7bfb      	ldrb	r3, [r7, #15]
 80050a6:	fa42 f303 	asr.w	r3, r2, r3
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	461a      	mov	r2, r3
 80050b4:	f7fd fddc 	bl	8002c70 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80050b8:	7bfb      	ldrb	r3, [r7, #15]
 80050ba:	3301      	adds	r3, #1
 80050bc:	73fb      	strb	r3, [r7, #15]
 80050be:	7bfa      	ldrb	r2, [r7, #15]
 80050c0:	78bb      	ldrb	r3, [r7, #2]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d3e1      	bcc.n	800508a <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6918      	ldr	r0, [r3, #16]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	8a9b      	ldrh	r3, [r3, #20]
 80050ce:	2201      	movs	r2, #1
 80050d0:	4619      	mov	r1, r3
 80050d2:	f7fd fdcd 	bl	8002c70 <HAL_GPIO_WritePin>
	DELAY(1);
 80050d6:	2001      	movs	r0, #1
 80050d8:	f7fb ff0c 	bl	8000ef4 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6918      	ldr	r0, [r3, #16]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	8a9b      	ldrh	r3, [r3, #20]
 80050e4:	2200      	movs	r2, #0
 80050e6:	4619      	mov	r1, r3
 80050e8:	f7fd fdc2 	bl	8002c70 <HAL_GPIO_WritePin>
}
 80050ec:	bf00      	nop
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <__errno>:
 80050f4:	4b01      	ldr	r3, [pc, #4]	; (80050fc <__errno+0x8>)
 80050f6:	6818      	ldr	r0, [r3, #0]
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	2000000c 	.word	0x2000000c

08005100 <__libc_init_array>:
 8005100:	b570      	push	{r4, r5, r6, lr}
 8005102:	4d0d      	ldr	r5, [pc, #52]	; (8005138 <__libc_init_array+0x38>)
 8005104:	4c0d      	ldr	r4, [pc, #52]	; (800513c <__libc_init_array+0x3c>)
 8005106:	1b64      	subs	r4, r4, r5
 8005108:	10a4      	asrs	r4, r4, #2
 800510a:	2600      	movs	r6, #0
 800510c:	42a6      	cmp	r6, r4
 800510e:	d109      	bne.n	8005124 <__libc_init_array+0x24>
 8005110:	4d0b      	ldr	r5, [pc, #44]	; (8005140 <__libc_init_array+0x40>)
 8005112:	4c0c      	ldr	r4, [pc, #48]	; (8005144 <__libc_init_array+0x44>)
 8005114:	f000 fc8e 	bl	8005a34 <_init>
 8005118:	1b64      	subs	r4, r4, r5
 800511a:	10a4      	asrs	r4, r4, #2
 800511c:	2600      	movs	r6, #0
 800511e:	42a6      	cmp	r6, r4
 8005120:	d105      	bne.n	800512e <__libc_init_array+0x2e>
 8005122:	bd70      	pop	{r4, r5, r6, pc}
 8005124:	f855 3b04 	ldr.w	r3, [r5], #4
 8005128:	4798      	blx	r3
 800512a:	3601      	adds	r6, #1
 800512c:	e7ee      	b.n	800510c <__libc_init_array+0xc>
 800512e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005132:	4798      	blx	r3
 8005134:	3601      	adds	r6, #1
 8005136:	e7f2      	b.n	800511e <__libc_init_array+0x1e>
 8005138:	08005afc 	.word	0x08005afc
 800513c:	08005afc 	.word	0x08005afc
 8005140:	08005afc 	.word	0x08005afc
 8005144:	08005b00 	.word	0x08005b00

08005148 <memset>:
 8005148:	4402      	add	r2, r0
 800514a:	4603      	mov	r3, r0
 800514c:	4293      	cmp	r3, r2
 800514e:	d100      	bne.n	8005152 <memset+0xa>
 8005150:	4770      	bx	lr
 8005152:	f803 1b01 	strb.w	r1, [r3], #1
 8005156:	e7f9      	b.n	800514c <memset+0x4>

08005158 <siprintf>:
 8005158:	b40e      	push	{r1, r2, r3}
 800515a:	b500      	push	{lr}
 800515c:	b09c      	sub	sp, #112	; 0x70
 800515e:	ab1d      	add	r3, sp, #116	; 0x74
 8005160:	9002      	str	r0, [sp, #8]
 8005162:	9006      	str	r0, [sp, #24]
 8005164:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005168:	4809      	ldr	r0, [pc, #36]	; (8005190 <siprintf+0x38>)
 800516a:	9107      	str	r1, [sp, #28]
 800516c:	9104      	str	r1, [sp, #16]
 800516e:	4909      	ldr	r1, [pc, #36]	; (8005194 <siprintf+0x3c>)
 8005170:	f853 2b04 	ldr.w	r2, [r3], #4
 8005174:	9105      	str	r1, [sp, #20]
 8005176:	6800      	ldr	r0, [r0, #0]
 8005178:	9301      	str	r3, [sp, #4]
 800517a:	a902      	add	r1, sp, #8
 800517c:	f000 f868 	bl	8005250 <_svfiprintf_r>
 8005180:	9b02      	ldr	r3, [sp, #8]
 8005182:	2200      	movs	r2, #0
 8005184:	701a      	strb	r2, [r3, #0]
 8005186:	b01c      	add	sp, #112	; 0x70
 8005188:	f85d eb04 	ldr.w	lr, [sp], #4
 800518c:	b003      	add	sp, #12
 800518e:	4770      	bx	lr
 8005190:	2000000c 	.word	0x2000000c
 8005194:	ffff0208 	.word	0xffff0208

08005198 <__ssputs_r>:
 8005198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800519c:	688e      	ldr	r6, [r1, #8]
 800519e:	429e      	cmp	r6, r3
 80051a0:	4682      	mov	sl, r0
 80051a2:	460c      	mov	r4, r1
 80051a4:	4690      	mov	r8, r2
 80051a6:	461f      	mov	r7, r3
 80051a8:	d838      	bhi.n	800521c <__ssputs_r+0x84>
 80051aa:	898a      	ldrh	r2, [r1, #12]
 80051ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80051b0:	d032      	beq.n	8005218 <__ssputs_r+0x80>
 80051b2:	6825      	ldr	r5, [r4, #0]
 80051b4:	6909      	ldr	r1, [r1, #16]
 80051b6:	eba5 0901 	sub.w	r9, r5, r1
 80051ba:	6965      	ldr	r5, [r4, #20]
 80051bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80051c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80051c4:	3301      	adds	r3, #1
 80051c6:	444b      	add	r3, r9
 80051c8:	106d      	asrs	r5, r5, #1
 80051ca:	429d      	cmp	r5, r3
 80051cc:	bf38      	it	cc
 80051ce:	461d      	movcc	r5, r3
 80051d0:	0553      	lsls	r3, r2, #21
 80051d2:	d531      	bpl.n	8005238 <__ssputs_r+0xa0>
 80051d4:	4629      	mov	r1, r5
 80051d6:	f000 fb63 	bl	80058a0 <_malloc_r>
 80051da:	4606      	mov	r6, r0
 80051dc:	b950      	cbnz	r0, 80051f4 <__ssputs_r+0x5c>
 80051de:	230c      	movs	r3, #12
 80051e0:	f8ca 3000 	str.w	r3, [sl]
 80051e4:	89a3      	ldrh	r3, [r4, #12]
 80051e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051ea:	81a3      	strh	r3, [r4, #12]
 80051ec:	f04f 30ff 	mov.w	r0, #4294967295
 80051f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051f4:	6921      	ldr	r1, [r4, #16]
 80051f6:	464a      	mov	r2, r9
 80051f8:	f000 fabe 	bl	8005778 <memcpy>
 80051fc:	89a3      	ldrh	r3, [r4, #12]
 80051fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005206:	81a3      	strh	r3, [r4, #12]
 8005208:	6126      	str	r6, [r4, #16]
 800520a:	6165      	str	r5, [r4, #20]
 800520c:	444e      	add	r6, r9
 800520e:	eba5 0509 	sub.w	r5, r5, r9
 8005212:	6026      	str	r6, [r4, #0]
 8005214:	60a5      	str	r5, [r4, #8]
 8005216:	463e      	mov	r6, r7
 8005218:	42be      	cmp	r6, r7
 800521a:	d900      	bls.n	800521e <__ssputs_r+0x86>
 800521c:	463e      	mov	r6, r7
 800521e:	6820      	ldr	r0, [r4, #0]
 8005220:	4632      	mov	r2, r6
 8005222:	4641      	mov	r1, r8
 8005224:	f000 fab6 	bl	8005794 <memmove>
 8005228:	68a3      	ldr	r3, [r4, #8]
 800522a:	1b9b      	subs	r3, r3, r6
 800522c:	60a3      	str	r3, [r4, #8]
 800522e:	6823      	ldr	r3, [r4, #0]
 8005230:	4433      	add	r3, r6
 8005232:	6023      	str	r3, [r4, #0]
 8005234:	2000      	movs	r0, #0
 8005236:	e7db      	b.n	80051f0 <__ssputs_r+0x58>
 8005238:	462a      	mov	r2, r5
 800523a:	f000 fba5 	bl	8005988 <_realloc_r>
 800523e:	4606      	mov	r6, r0
 8005240:	2800      	cmp	r0, #0
 8005242:	d1e1      	bne.n	8005208 <__ssputs_r+0x70>
 8005244:	6921      	ldr	r1, [r4, #16]
 8005246:	4650      	mov	r0, sl
 8005248:	f000 fabe 	bl	80057c8 <_free_r>
 800524c:	e7c7      	b.n	80051de <__ssputs_r+0x46>
	...

08005250 <_svfiprintf_r>:
 8005250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005254:	4698      	mov	r8, r3
 8005256:	898b      	ldrh	r3, [r1, #12]
 8005258:	061b      	lsls	r3, r3, #24
 800525a:	b09d      	sub	sp, #116	; 0x74
 800525c:	4607      	mov	r7, r0
 800525e:	460d      	mov	r5, r1
 8005260:	4614      	mov	r4, r2
 8005262:	d50e      	bpl.n	8005282 <_svfiprintf_r+0x32>
 8005264:	690b      	ldr	r3, [r1, #16]
 8005266:	b963      	cbnz	r3, 8005282 <_svfiprintf_r+0x32>
 8005268:	2140      	movs	r1, #64	; 0x40
 800526a:	f000 fb19 	bl	80058a0 <_malloc_r>
 800526e:	6028      	str	r0, [r5, #0]
 8005270:	6128      	str	r0, [r5, #16]
 8005272:	b920      	cbnz	r0, 800527e <_svfiprintf_r+0x2e>
 8005274:	230c      	movs	r3, #12
 8005276:	603b      	str	r3, [r7, #0]
 8005278:	f04f 30ff 	mov.w	r0, #4294967295
 800527c:	e0d1      	b.n	8005422 <_svfiprintf_r+0x1d2>
 800527e:	2340      	movs	r3, #64	; 0x40
 8005280:	616b      	str	r3, [r5, #20]
 8005282:	2300      	movs	r3, #0
 8005284:	9309      	str	r3, [sp, #36]	; 0x24
 8005286:	2320      	movs	r3, #32
 8005288:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800528c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005290:	2330      	movs	r3, #48	; 0x30
 8005292:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800543c <_svfiprintf_r+0x1ec>
 8005296:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800529a:	f04f 0901 	mov.w	r9, #1
 800529e:	4623      	mov	r3, r4
 80052a0:	469a      	mov	sl, r3
 80052a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052a6:	b10a      	cbz	r2, 80052ac <_svfiprintf_r+0x5c>
 80052a8:	2a25      	cmp	r2, #37	; 0x25
 80052aa:	d1f9      	bne.n	80052a0 <_svfiprintf_r+0x50>
 80052ac:	ebba 0b04 	subs.w	fp, sl, r4
 80052b0:	d00b      	beq.n	80052ca <_svfiprintf_r+0x7a>
 80052b2:	465b      	mov	r3, fp
 80052b4:	4622      	mov	r2, r4
 80052b6:	4629      	mov	r1, r5
 80052b8:	4638      	mov	r0, r7
 80052ba:	f7ff ff6d 	bl	8005198 <__ssputs_r>
 80052be:	3001      	adds	r0, #1
 80052c0:	f000 80aa 	beq.w	8005418 <_svfiprintf_r+0x1c8>
 80052c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052c6:	445a      	add	r2, fp
 80052c8:	9209      	str	r2, [sp, #36]	; 0x24
 80052ca:	f89a 3000 	ldrb.w	r3, [sl]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f000 80a2 	beq.w	8005418 <_svfiprintf_r+0x1c8>
 80052d4:	2300      	movs	r3, #0
 80052d6:	f04f 32ff 	mov.w	r2, #4294967295
 80052da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052de:	f10a 0a01 	add.w	sl, sl, #1
 80052e2:	9304      	str	r3, [sp, #16]
 80052e4:	9307      	str	r3, [sp, #28]
 80052e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052ea:	931a      	str	r3, [sp, #104]	; 0x68
 80052ec:	4654      	mov	r4, sl
 80052ee:	2205      	movs	r2, #5
 80052f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052f4:	4851      	ldr	r0, [pc, #324]	; (800543c <_svfiprintf_r+0x1ec>)
 80052f6:	f7fa ff73 	bl	80001e0 <memchr>
 80052fa:	9a04      	ldr	r2, [sp, #16]
 80052fc:	b9d8      	cbnz	r0, 8005336 <_svfiprintf_r+0xe6>
 80052fe:	06d0      	lsls	r0, r2, #27
 8005300:	bf44      	itt	mi
 8005302:	2320      	movmi	r3, #32
 8005304:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005308:	0711      	lsls	r1, r2, #28
 800530a:	bf44      	itt	mi
 800530c:	232b      	movmi	r3, #43	; 0x2b
 800530e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005312:	f89a 3000 	ldrb.w	r3, [sl]
 8005316:	2b2a      	cmp	r3, #42	; 0x2a
 8005318:	d015      	beq.n	8005346 <_svfiprintf_r+0xf6>
 800531a:	9a07      	ldr	r2, [sp, #28]
 800531c:	4654      	mov	r4, sl
 800531e:	2000      	movs	r0, #0
 8005320:	f04f 0c0a 	mov.w	ip, #10
 8005324:	4621      	mov	r1, r4
 8005326:	f811 3b01 	ldrb.w	r3, [r1], #1
 800532a:	3b30      	subs	r3, #48	; 0x30
 800532c:	2b09      	cmp	r3, #9
 800532e:	d94e      	bls.n	80053ce <_svfiprintf_r+0x17e>
 8005330:	b1b0      	cbz	r0, 8005360 <_svfiprintf_r+0x110>
 8005332:	9207      	str	r2, [sp, #28]
 8005334:	e014      	b.n	8005360 <_svfiprintf_r+0x110>
 8005336:	eba0 0308 	sub.w	r3, r0, r8
 800533a:	fa09 f303 	lsl.w	r3, r9, r3
 800533e:	4313      	orrs	r3, r2
 8005340:	9304      	str	r3, [sp, #16]
 8005342:	46a2      	mov	sl, r4
 8005344:	e7d2      	b.n	80052ec <_svfiprintf_r+0x9c>
 8005346:	9b03      	ldr	r3, [sp, #12]
 8005348:	1d19      	adds	r1, r3, #4
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	9103      	str	r1, [sp, #12]
 800534e:	2b00      	cmp	r3, #0
 8005350:	bfbb      	ittet	lt
 8005352:	425b      	neglt	r3, r3
 8005354:	f042 0202 	orrlt.w	r2, r2, #2
 8005358:	9307      	strge	r3, [sp, #28]
 800535a:	9307      	strlt	r3, [sp, #28]
 800535c:	bfb8      	it	lt
 800535e:	9204      	strlt	r2, [sp, #16]
 8005360:	7823      	ldrb	r3, [r4, #0]
 8005362:	2b2e      	cmp	r3, #46	; 0x2e
 8005364:	d10c      	bne.n	8005380 <_svfiprintf_r+0x130>
 8005366:	7863      	ldrb	r3, [r4, #1]
 8005368:	2b2a      	cmp	r3, #42	; 0x2a
 800536a:	d135      	bne.n	80053d8 <_svfiprintf_r+0x188>
 800536c:	9b03      	ldr	r3, [sp, #12]
 800536e:	1d1a      	adds	r2, r3, #4
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	9203      	str	r2, [sp, #12]
 8005374:	2b00      	cmp	r3, #0
 8005376:	bfb8      	it	lt
 8005378:	f04f 33ff 	movlt.w	r3, #4294967295
 800537c:	3402      	adds	r4, #2
 800537e:	9305      	str	r3, [sp, #20]
 8005380:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800544c <_svfiprintf_r+0x1fc>
 8005384:	7821      	ldrb	r1, [r4, #0]
 8005386:	2203      	movs	r2, #3
 8005388:	4650      	mov	r0, sl
 800538a:	f7fa ff29 	bl	80001e0 <memchr>
 800538e:	b140      	cbz	r0, 80053a2 <_svfiprintf_r+0x152>
 8005390:	2340      	movs	r3, #64	; 0x40
 8005392:	eba0 000a 	sub.w	r0, r0, sl
 8005396:	fa03 f000 	lsl.w	r0, r3, r0
 800539a:	9b04      	ldr	r3, [sp, #16]
 800539c:	4303      	orrs	r3, r0
 800539e:	3401      	adds	r4, #1
 80053a0:	9304      	str	r3, [sp, #16]
 80053a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053a6:	4826      	ldr	r0, [pc, #152]	; (8005440 <_svfiprintf_r+0x1f0>)
 80053a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80053ac:	2206      	movs	r2, #6
 80053ae:	f7fa ff17 	bl	80001e0 <memchr>
 80053b2:	2800      	cmp	r0, #0
 80053b4:	d038      	beq.n	8005428 <_svfiprintf_r+0x1d8>
 80053b6:	4b23      	ldr	r3, [pc, #140]	; (8005444 <_svfiprintf_r+0x1f4>)
 80053b8:	bb1b      	cbnz	r3, 8005402 <_svfiprintf_r+0x1b2>
 80053ba:	9b03      	ldr	r3, [sp, #12]
 80053bc:	3307      	adds	r3, #7
 80053be:	f023 0307 	bic.w	r3, r3, #7
 80053c2:	3308      	adds	r3, #8
 80053c4:	9303      	str	r3, [sp, #12]
 80053c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053c8:	4433      	add	r3, r6
 80053ca:	9309      	str	r3, [sp, #36]	; 0x24
 80053cc:	e767      	b.n	800529e <_svfiprintf_r+0x4e>
 80053ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80053d2:	460c      	mov	r4, r1
 80053d4:	2001      	movs	r0, #1
 80053d6:	e7a5      	b.n	8005324 <_svfiprintf_r+0xd4>
 80053d8:	2300      	movs	r3, #0
 80053da:	3401      	adds	r4, #1
 80053dc:	9305      	str	r3, [sp, #20]
 80053de:	4619      	mov	r1, r3
 80053e0:	f04f 0c0a 	mov.w	ip, #10
 80053e4:	4620      	mov	r0, r4
 80053e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053ea:	3a30      	subs	r2, #48	; 0x30
 80053ec:	2a09      	cmp	r2, #9
 80053ee:	d903      	bls.n	80053f8 <_svfiprintf_r+0x1a8>
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d0c5      	beq.n	8005380 <_svfiprintf_r+0x130>
 80053f4:	9105      	str	r1, [sp, #20]
 80053f6:	e7c3      	b.n	8005380 <_svfiprintf_r+0x130>
 80053f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80053fc:	4604      	mov	r4, r0
 80053fe:	2301      	movs	r3, #1
 8005400:	e7f0      	b.n	80053e4 <_svfiprintf_r+0x194>
 8005402:	ab03      	add	r3, sp, #12
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	462a      	mov	r2, r5
 8005408:	4b0f      	ldr	r3, [pc, #60]	; (8005448 <_svfiprintf_r+0x1f8>)
 800540a:	a904      	add	r1, sp, #16
 800540c:	4638      	mov	r0, r7
 800540e:	f3af 8000 	nop.w
 8005412:	1c42      	adds	r2, r0, #1
 8005414:	4606      	mov	r6, r0
 8005416:	d1d6      	bne.n	80053c6 <_svfiprintf_r+0x176>
 8005418:	89ab      	ldrh	r3, [r5, #12]
 800541a:	065b      	lsls	r3, r3, #25
 800541c:	f53f af2c 	bmi.w	8005278 <_svfiprintf_r+0x28>
 8005420:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005422:	b01d      	add	sp, #116	; 0x74
 8005424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005428:	ab03      	add	r3, sp, #12
 800542a:	9300      	str	r3, [sp, #0]
 800542c:	462a      	mov	r2, r5
 800542e:	4b06      	ldr	r3, [pc, #24]	; (8005448 <_svfiprintf_r+0x1f8>)
 8005430:	a904      	add	r1, sp, #16
 8005432:	4638      	mov	r0, r7
 8005434:	f000 f87a 	bl	800552c <_printf_i>
 8005438:	e7eb      	b.n	8005412 <_svfiprintf_r+0x1c2>
 800543a:	bf00      	nop
 800543c:	08005ac0 	.word	0x08005ac0
 8005440:	08005aca 	.word	0x08005aca
 8005444:	00000000 	.word	0x00000000
 8005448:	08005199 	.word	0x08005199
 800544c:	08005ac6 	.word	0x08005ac6

08005450 <_printf_common>:
 8005450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005454:	4616      	mov	r6, r2
 8005456:	4699      	mov	r9, r3
 8005458:	688a      	ldr	r2, [r1, #8]
 800545a:	690b      	ldr	r3, [r1, #16]
 800545c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005460:	4293      	cmp	r3, r2
 8005462:	bfb8      	it	lt
 8005464:	4613      	movlt	r3, r2
 8005466:	6033      	str	r3, [r6, #0]
 8005468:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800546c:	4607      	mov	r7, r0
 800546e:	460c      	mov	r4, r1
 8005470:	b10a      	cbz	r2, 8005476 <_printf_common+0x26>
 8005472:	3301      	adds	r3, #1
 8005474:	6033      	str	r3, [r6, #0]
 8005476:	6823      	ldr	r3, [r4, #0]
 8005478:	0699      	lsls	r1, r3, #26
 800547a:	bf42      	ittt	mi
 800547c:	6833      	ldrmi	r3, [r6, #0]
 800547e:	3302      	addmi	r3, #2
 8005480:	6033      	strmi	r3, [r6, #0]
 8005482:	6825      	ldr	r5, [r4, #0]
 8005484:	f015 0506 	ands.w	r5, r5, #6
 8005488:	d106      	bne.n	8005498 <_printf_common+0x48>
 800548a:	f104 0a19 	add.w	sl, r4, #25
 800548e:	68e3      	ldr	r3, [r4, #12]
 8005490:	6832      	ldr	r2, [r6, #0]
 8005492:	1a9b      	subs	r3, r3, r2
 8005494:	42ab      	cmp	r3, r5
 8005496:	dc26      	bgt.n	80054e6 <_printf_common+0x96>
 8005498:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800549c:	1e13      	subs	r3, r2, #0
 800549e:	6822      	ldr	r2, [r4, #0]
 80054a0:	bf18      	it	ne
 80054a2:	2301      	movne	r3, #1
 80054a4:	0692      	lsls	r2, r2, #26
 80054a6:	d42b      	bmi.n	8005500 <_printf_common+0xb0>
 80054a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054ac:	4649      	mov	r1, r9
 80054ae:	4638      	mov	r0, r7
 80054b0:	47c0      	blx	r8
 80054b2:	3001      	adds	r0, #1
 80054b4:	d01e      	beq.n	80054f4 <_printf_common+0xa4>
 80054b6:	6823      	ldr	r3, [r4, #0]
 80054b8:	68e5      	ldr	r5, [r4, #12]
 80054ba:	6832      	ldr	r2, [r6, #0]
 80054bc:	f003 0306 	and.w	r3, r3, #6
 80054c0:	2b04      	cmp	r3, #4
 80054c2:	bf08      	it	eq
 80054c4:	1aad      	subeq	r5, r5, r2
 80054c6:	68a3      	ldr	r3, [r4, #8]
 80054c8:	6922      	ldr	r2, [r4, #16]
 80054ca:	bf0c      	ite	eq
 80054cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054d0:	2500      	movne	r5, #0
 80054d2:	4293      	cmp	r3, r2
 80054d4:	bfc4      	itt	gt
 80054d6:	1a9b      	subgt	r3, r3, r2
 80054d8:	18ed      	addgt	r5, r5, r3
 80054da:	2600      	movs	r6, #0
 80054dc:	341a      	adds	r4, #26
 80054de:	42b5      	cmp	r5, r6
 80054e0:	d11a      	bne.n	8005518 <_printf_common+0xc8>
 80054e2:	2000      	movs	r0, #0
 80054e4:	e008      	b.n	80054f8 <_printf_common+0xa8>
 80054e6:	2301      	movs	r3, #1
 80054e8:	4652      	mov	r2, sl
 80054ea:	4649      	mov	r1, r9
 80054ec:	4638      	mov	r0, r7
 80054ee:	47c0      	blx	r8
 80054f0:	3001      	adds	r0, #1
 80054f2:	d103      	bne.n	80054fc <_printf_common+0xac>
 80054f4:	f04f 30ff 	mov.w	r0, #4294967295
 80054f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054fc:	3501      	adds	r5, #1
 80054fe:	e7c6      	b.n	800548e <_printf_common+0x3e>
 8005500:	18e1      	adds	r1, r4, r3
 8005502:	1c5a      	adds	r2, r3, #1
 8005504:	2030      	movs	r0, #48	; 0x30
 8005506:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800550a:	4422      	add	r2, r4
 800550c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005510:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005514:	3302      	adds	r3, #2
 8005516:	e7c7      	b.n	80054a8 <_printf_common+0x58>
 8005518:	2301      	movs	r3, #1
 800551a:	4622      	mov	r2, r4
 800551c:	4649      	mov	r1, r9
 800551e:	4638      	mov	r0, r7
 8005520:	47c0      	blx	r8
 8005522:	3001      	adds	r0, #1
 8005524:	d0e6      	beq.n	80054f4 <_printf_common+0xa4>
 8005526:	3601      	adds	r6, #1
 8005528:	e7d9      	b.n	80054de <_printf_common+0x8e>
	...

0800552c <_printf_i>:
 800552c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005530:	7e0f      	ldrb	r7, [r1, #24]
 8005532:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005534:	2f78      	cmp	r7, #120	; 0x78
 8005536:	4691      	mov	r9, r2
 8005538:	4680      	mov	r8, r0
 800553a:	460c      	mov	r4, r1
 800553c:	469a      	mov	sl, r3
 800553e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005542:	d807      	bhi.n	8005554 <_printf_i+0x28>
 8005544:	2f62      	cmp	r7, #98	; 0x62
 8005546:	d80a      	bhi.n	800555e <_printf_i+0x32>
 8005548:	2f00      	cmp	r7, #0
 800554a:	f000 80d8 	beq.w	80056fe <_printf_i+0x1d2>
 800554e:	2f58      	cmp	r7, #88	; 0x58
 8005550:	f000 80a3 	beq.w	800569a <_printf_i+0x16e>
 8005554:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005558:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800555c:	e03a      	b.n	80055d4 <_printf_i+0xa8>
 800555e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005562:	2b15      	cmp	r3, #21
 8005564:	d8f6      	bhi.n	8005554 <_printf_i+0x28>
 8005566:	a101      	add	r1, pc, #4	; (adr r1, 800556c <_printf_i+0x40>)
 8005568:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800556c:	080055c5 	.word	0x080055c5
 8005570:	080055d9 	.word	0x080055d9
 8005574:	08005555 	.word	0x08005555
 8005578:	08005555 	.word	0x08005555
 800557c:	08005555 	.word	0x08005555
 8005580:	08005555 	.word	0x08005555
 8005584:	080055d9 	.word	0x080055d9
 8005588:	08005555 	.word	0x08005555
 800558c:	08005555 	.word	0x08005555
 8005590:	08005555 	.word	0x08005555
 8005594:	08005555 	.word	0x08005555
 8005598:	080056e5 	.word	0x080056e5
 800559c:	08005609 	.word	0x08005609
 80055a0:	080056c7 	.word	0x080056c7
 80055a4:	08005555 	.word	0x08005555
 80055a8:	08005555 	.word	0x08005555
 80055ac:	08005707 	.word	0x08005707
 80055b0:	08005555 	.word	0x08005555
 80055b4:	08005609 	.word	0x08005609
 80055b8:	08005555 	.word	0x08005555
 80055bc:	08005555 	.word	0x08005555
 80055c0:	080056cf 	.word	0x080056cf
 80055c4:	682b      	ldr	r3, [r5, #0]
 80055c6:	1d1a      	adds	r2, r3, #4
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	602a      	str	r2, [r5, #0]
 80055cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055d4:	2301      	movs	r3, #1
 80055d6:	e0a3      	b.n	8005720 <_printf_i+0x1f4>
 80055d8:	6820      	ldr	r0, [r4, #0]
 80055da:	6829      	ldr	r1, [r5, #0]
 80055dc:	0606      	lsls	r6, r0, #24
 80055de:	f101 0304 	add.w	r3, r1, #4
 80055e2:	d50a      	bpl.n	80055fa <_printf_i+0xce>
 80055e4:	680e      	ldr	r6, [r1, #0]
 80055e6:	602b      	str	r3, [r5, #0]
 80055e8:	2e00      	cmp	r6, #0
 80055ea:	da03      	bge.n	80055f4 <_printf_i+0xc8>
 80055ec:	232d      	movs	r3, #45	; 0x2d
 80055ee:	4276      	negs	r6, r6
 80055f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055f4:	485e      	ldr	r0, [pc, #376]	; (8005770 <_printf_i+0x244>)
 80055f6:	230a      	movs	r3, #10
 80055f8:	e019      	b.n	800562e <_printf_i+0x102>
 80055fa:	680e      	ldr	r6, [r1, #0]
 80055fc:	602b      	str	r3, [r5, #0]
 80055fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005602:	bf18      	it	ne
 8005604:	b236      	sxthne	r6, r6
 8005606:	e7ef      	b.n	80055e8 <_printf_i+0xbc>
 8005608:	682b      	ldr	r3, [r5, #0]
 800560a:	6820      	ldr	r0, [r4, #0]
 800560c:	1d19      	adds	r1, r3, #4
 800560e:	6029      	str	r1, [r5, #0]
 8005610:	0601      	lsls	r1, r0, #24
 8005612:	d501      	bpl.n	8005618 <_printf_i+0xec>
 8005614:	681e      	ldr	r6, [r3, #0]
 8005616:	e002      	b.n	800561e <_printf_i+0xf2>
 8005618:	0646      	lsls	r6, r0, #25
 800561a:	d5fb      	bpl.n	8005614 <_printf_i+0xe8>
 800561c:	881e      	ldrh	r6, [r3, #0]
 800561e:	4854      	ldr	r0, [pc, #336]	; (8005770 <_printf_i+0x244>)
 8005620:	2f6f      	cmp	r7, #111	; 0x6f
 8005622:	bf0c      	ite	eq
 8005624:	2308      	moveq	r3, #8
 8005626:	230a      	movne	r3, #10
 8005628:	2100      	movs	r1, #0
 800562a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800562e:	6865      	ldr	r5, [r4, #4]
 8005630:	60a5      	str	r5, [r4, #8]
 8005632:	2d00      	cmp	r5, #0
 8005634:	bfa2      	ittt	ge
 8005636:	6821      	ldrge	r1, [r4, #0]
 8005638:	f021 0104 	bicge.w	r1, r1, #4
 800563c:	6021      	strge	r1, [r4, #0]
 800563e:	b90e      	cbnz	r6, 8005644 <_printf_i+0x118>
 8005640:	2d00      	cmp	r5, #0
 8005642:	d04d      	beq.n	80056e0 <_printf_i+0x1b4>
 8005644:	4615      	mov	r5, r2
 8005646:	fbb6 f1f3 	udiv	r1, r6, r3
 800564a:	fb03 6711 	mls	r7, r3, r1, r6
 800564e:	5dc7      	ldrb	r7, [r0, r7]
 8005650:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005654:	4637      	mov	r7, r6
 8005656:	42bb      	cmp	r3, r7
 8005658:	460e      	mov	r6, r1
 800565a:	d9f4      	bls.n	8005646 <_printf_i+0x11a>
 800565c:	2b08      	cmp	r3, #8
 800565e:	d10b      	bne.n	8005678 <_printf_i+0x14c>
 8005660:	6823      	ldr	r3, [r4, #0]
 8005662:	07de      	lsls	r6, r3, #31
 8005664:	d508      	bpl.n	8005678 <_printf_i+0x14c>
 8005666:	6923      	ldr	r3, [r4, #16]
 8005668:	6861      	ldr	r1, [r4, #4]
 800566a:	4299      	cmp	r1, r3
 800566c:	bfde      	ittt	le
 800566e:	2330      	movle	r3, #48	; 0x30
 8005670:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005674:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005678:	1b52      	subs	r2, r2, r5
 800567a:	6122      	str	r2, [r4, #16]
 800567c:	f8cd a000 	str.w	sl, [sp]
 8005680:	464b      	mov	r3, r9
 8005682:	aa03      	add	r2, sp, #12
 8005684:	4621      	mov	r1, r4
 8005686:	4640      	mov	r0, r8
 8005688:	f7ff fee2 	bl	8005450 <_printf_common>
 800568c:	3001      	adds	r0, #1
 800568e:	d14c      	bne.n	800572a <_printf_i+0x1fe>
 8005690:	f04f 30ff 	mov.w	r0, #4294967295
 8005694:	b004      	add	sp, #16
 8005696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800569a:	4835      	ldr	r0, [pc, #212]	; (8005770 <_printf_i+0x244>)
 800569c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80056a0:	6829      	ldr	r1, [r5, #0]
 80056a2:	6823      	ldr	r3, [r4, #0]
 80056a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80056a8:	6029      	str	r1, [r5, #0]
 80056aa:	061d      	lsls	r5, r3, #24
 80056ac:	d514      	bpl.n	80056d8 <_printf_i+0x1ac>
 80056ae:	07df      	lsls	r7, r3, #31
 80056b0:	bf44      	itt	mi
 80056b2:	f043 0320 	orrmi.w	r3, r3, #32
 80056b6:	6023      	strmi	r3, [r4, #0]
 80056b8:	b91e      	cbnz	r6, 80056c2 <_printf_i+0x196>
 80056ba:	6823      	ldr	r3, [r4, #0]
 80056bc:	f023 0320 	bic.w	r3, r3, #32
 80056c0:	6023      	str	r3, [r4, #0]
 80056c2:	2310      	movs	r3, #16
 80056c4:	e7b0      	b.n	8005628 <_printf_i+0xfc>
 80056c6:	6823      	ldr	r3, [r4, #0]
 80056c8:	f043 0320 	orr.w	r3, r3, #32
 80056cc:	6023      	str	r3, [r4, #0]
 80056ce:	2378      	movs	r3, #120	; 0x78
 80056d0:	4828      	ldr	r0, [pc, #160]	; (8005774 <_printf_i+0x248>)
 80056d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80056d6:	e7e3      	b.n	80056a0 <_printf_i+0x174>
 80056d8:	0659      	lsls	r1, r3, #25
 80056da:	bf48      	it	mi
 80056dc:	b2b6      	uxthmi	r6, r6
 80056de:	e7e6      	b.n	80056ae <_printf_i+0x182>
 80056e0:	4615      	mov	r5, r2
 80056e2:	e7bb      	b.n	800565c <_printf_i+0x130>
 80056e4:	682b      	ldr	r3, [r5, #0]
 80056e6:	6826      	ldr	r6, [r4, #0]
 80056e8:	6961      	ldr	r1, [r4, #20]
 80056ea:	1d18      	adds	r0, r3, #4
 80056ec:	6028      	str	r0, [r5, #0]
 80056ee:	0635      	lsls	r5, r6, #24
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	d501      	bpl.n	80056f8 <_printf_i+0x1cc>
 80056f4:	6019      	str	r1, [r3, #0]
 80056f6:	e002      	b.n	80056fe <_printf_i+0x1d2>
 80056f8:	0670      	lsls	r0, r6, #25
 80056fa:	d5fb      	bpl.n	80056f4 <_printf_i+0x1c8>
 80056fc:	8019      	strh	r1, [r3, #0]
 80056fe:	2300      	movs	r3, #0
 8005700:	6123      	str	r3, [r4, #16]
 8005702:	4615      	mov	r5, r2
 8005704:	e7ba      	b.n	800567c <_printf_i+0x150>
 8005706:	682b      	ldr	r3, [r5, #0]
 8005708:	1d1a      	adds	r2, r3, #4
 800570a:	602a      	str	r2, [r5, #0]
 800570c:	681d      	ldr	r5, [r3, #0]
 800570e:	6862      	ldr	r2, [r4, #4]
 8005710:	2100      	movs	r1, #0
 8005712:	4628      	mov	r0, r5
 8005714:	f7fa fd64 	bl	80001e0 <memchr>
 8005718:	b108      	cbz	r0, 800571e <_printf_i+0x1f2>
 800571a:	1b40      	subs	r0, r0, r5
 800571c:	6060      	str	r0, [r4, #4]
 800571e:	6863      	ldr	r3, [r4, #4]
 8005720:	6123      	str	r3, [r4, #16]
 8005722:	2300      	movs	r3, #0
 8005724:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005728:	e7a8      	b.n	800567c <_printf_i+0x150>
 800572a:	6923      	ldr	r3, [r4, #16]
 800572c:	462a      	mov	r2, r5
 800572e:	4649      	mov	r1, r9
 8005730:	4640      	mov	r0, r8
 8005732:	47d0      	blx	sl
 8005734:	3001      	adds	r0, #1
 8005736:	d0ab      	beq.n	8005690 <_printf_i+0x164>
 8005738:	6823      	ldr	r3, [r4, #0]
 800573a:	079b      	lsls	r3, r3, #30
 800573c:	d413      	bmi.n	8005766 <_printf_i+0x23a>
 800573e:	68e0      	ldr	r0, [r4, #12]
 8005740:	9b03      	ldr	r3, [sp, #12]
 8005742:	4298      	cmp	r0, r3
 8005744:	bfb8      	it	lt
 8005746:	4618      	movlt	r0, r3
 8005748:	e7a4      	b.n	8005694 <_printf_i+0x168>
 800574a:	2301      	movs	r3, #1
 800574c:	4632      	mov	r2, r6
 800574e:	4649      	mov	r1, r9
 8005750:	4640      	mov	r0, r8
 8005752:	47d0      	blx	sl
 8005754:	3001      	adds	r0, #1
 8005756:	d09b      	beq.n	8005690 <_printf_i+0x164>
 8005758:	3501      	adds	r5, #1
 800575a:	68e3      	ldr	r3, [r4, #12]
 800575c:	9903      	ldr	r1, [sp, #12]
 800575e:	1a5b      	subs	r3, r3, r1
 8005760:	42ab      	cmp	r3, r5
 8005762:	dcf2      	bgt.n	800574a <_printf_i+0x21e>
 8005764:	e7eb      	b.n	800573e <_printf_i+0x212>
 8005766:	2500      	movs	r5, #0
 8005768:	f104 0619 	add.w	r6, r4, #25
 800576c:	e7f5      	b.n	800575a <_printf_i+0x22e>
 800576e:	bf00      	nop
 8005770:	08005ad1 	.word	0x08005ad1
 8005774:	08005ae2 	.word	0x08005ae2

08005778 <memcpy>:
 8005778:	440a      	add	r2, r1
 800577a:	4291      	cmp	r1, r2
 800577c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005780:	d100      	bne.n	8005784 <memcpy+0xc>
 8005782:	4770      	bx	lr
 8005784:	b510      	push	{r4, lr}
 8005786:	f811 4b01 	ldrb.w	r4, [r1], #1
 800578a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800578e:	4291      	cmp	r1, r2
 8005790:	d1f9      	bne.n	8005786 <memcpy+0xe>
 8005792:	bd10      	pop	{r4, pc}

08005794 <memmove>:
 8005794:	4288      	cmp	r0, r1
 8005796:	b510      	push	{r4, lr}
 8005798:	eb01 0402 	add.w	r4, r1, r2
 800579c:	d902      	bls.n	80057a4 <memmove+0x10>
 800579e:	4284      	cmp	r4, r0
 80057a0:	4623      	mov	r3, r4
 80057a2:	d807      	bhi.n	80057b4 <memmove+0x20>
 80057a4:	1e43      	subs	r3, r0, #1
 80057a6:	42a1      	cmp	r1, r4
 80057a8:	d008      	beq.n	80057bc <memmove+0x28>
 80057aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80057b2:	e7f8      	b.n	80057a6 <memmove+0x12>
 80057b4:	4402      	add	r2, r0
 80057b6:	4601      	mov	r1, r0
 80057b8:	428a      	cmp	r2, r1
 80057ba:	d100      	bne.n	80057be <memmove+0x2a>
 80057bc:	bd10      	pop	{r4, pc}
 80057be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80057c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80057c6:	e7f7      	b.n	80057b8 <memmove+0x24>

080057c8 <_free_r>:
 80057c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057ca:	2900      	cmp	r1, #0
 80057cc:	d044      	beq.n	8005858 <_free_r+0x90>
 80057ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057d2:	9001      	str	r0, [sp, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f1a1 0404 	sub.w	r4, r1, #4
 80057da:	bfb8      	it	lt
 80057dc:	18e4      	addlt	r4, r4, r3
 80057de:	f000 f913 	bl	8005a08 <__malloc_lock>
 80057e2:	4a1e      	ldr	r2, [pc, #120]	; (800585c <_free_r+0x94>)
 80057e4:	9801      	ldr	r0, [sp, #4]
 80057e6:	6813      	ldr	r3, [r2, #0]
 80057e8:	b933      	cbnz	r3, 80057f8 <_free_r+0x30>
 80057ea:	6063      	str	r3, [r4, #4]
 80057ec:	6014      	str	r4, [r2, #0]
 80057ee:	b003      	add	sp, #12
 80057f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057f4:	f000 b90e 	b.w	8005a14 <__malloc_unlock>
 80057f8:	42a3      	cmp	r3, r4
 80057fa:	d908      	bls.n	800580e <_free_r+0x46>
 80057fc:	6825      	ldr	r5, [r4, #0]
 80057fe:	1961      	adds	r1, r4, r5
 8005800:	428b      	cmp	r3, r1
 8005802:	bf01      	itttt	eq
 8005804:	6819      	ldreq	r1, [r3, #0]
 8005806:	685b      	ldreq	r3, [r3, #4]
 8005808:	1949      	addeq	r1, r1, r5
 800580a:	6021      	streq	r1, [r4, #0]
 800580c:	e7ed      	b.n	80057ea <_free_r+0x22>
 800580e:	461a      	mov	r2, r3
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	b10b      	cbz	r3, 8005818 <_free_r+0x50>
 8005814:	42a3      	cmp	r3, r4
 8005816:	d9fa      	bls.n	800580e <_free_r+0x46>
 8005818:	6811      	ldr	r1, [r2, #0]
 800581a:	1855      	adds	r5, r2, r1
 800581c:	42a5      	cmp	r5, r4
 800581e:	d10b      	bne.n	8005838 <_free_r+0x70>
 8005820:	6824      	ldr	r4, [r4, #0]
 8005822:	4421      	add	r1, r4
 8005824:	1854      	adds	r4, r2, r1
 8005826:	42a3      	cmp	r3, r4
 8005828:	6011      	str	r1, [r2, #0]
 800582a:	d1e0      	bne.n	80057ee <_free_r+0x26>
 800582c:	681c      	ldr	r4, [r3, #0]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	6053      	str	r3, [r2, #4]
 8005832:	4421      	add	r1, r4
 8005834:	6011      	str	r1, [r2, #0]
 8005836:	e7da      	b.n	80057ee <_free_r+0x26>
 8005838:	d902      	bls.n	8005840 <_free_r+0x78>
 800583a:	230c      	movs	r3, #12
 800583c:	6003      	str	r3, [r0, #0]
 800583e:	e7d6      	b.n	80057ee <_free_r+0x26>
 8005840:	6825      	ldr	r5, [r4, #0]
 8005842:	1961      	adds	r1, r4, r5
 8005844:	428b      	cmp	r3, r1
 8005846:	bf04      	itt	eq
 8005848:	6819      	ldreq	r1, [r3, #0]
 800584a:	685b      	ldreq	r3, [r3, #4]
 800584c:	6063      	str	r3, [r4, #4]
 800584e:	bf04      	itt	eq
 8005850:	1949      	addeq	r1, r1, r5
 8005852:	6021      	streq	r1, [r4, #0]
 8005854:	6054      	str	r4, [r2, #4]
 8005856:	e7ca      	b.n	80057ee <_free_r+0x26>
 8005858:	b003      	add	sp, #12
 800585a:	bd30      	pop	{r4, r5, pc}
 800585c:	20000250 	.word	0x20000250

08005860 <sbrk_aligned>:
 8005860:	b570      	push	{r4, r5, r6, lr}
 8005862:	4e0e      	ldr	r6, [pc, #56]	; (800589c <sbrk_aligned+0x3c>)
 8005864:	460c      	mov	r4, r1
 8005866:	6831      	ldr	r1, [r6, #0]
 8005868:	4605      	mov	r5, r0
 800586a:	b911      	cbnz	r1, 8005872 <sbrk_aligned+0x12>
 800586c:	f000 f8bc 	bl	80059e8 <_sbrk_r>
 8005870:	6030      	str	r0, [r6, #0]
 8005872:	4621      	mov	r1, r4
 8005874:	4628      	mov	r0, r5
 8005876:	f000 f8b7 	bl	80059e8 <_sbrk_r>
 800587a:	1c43      	adds	r3, r0, #1
 800587c:	d00a      	beq.n	8005894 <sbrk_aligned+0x34>
 800587e:	1cc4      	adds	r4, r0, #3
 8005880:	f024 0403 	bic.w	r4, r4, #3
 8005884:	42a0      	cmp	r0, r4
 8005886:	d007      	beq.n	8005898 <sbrk_aligned+0x38>
 8005888:	1a21      	subs	r1, r4, r0
 800588a:	4628      	mov	r0, r5
 800588c:	f000 f8ac 	bl	80059e8 <_sbrk_r>
 8005890:	3001      	adds	r0, #1
 8005892:	d101      	bne.n	8005898 <sbrk_aligned+0x38>
 8005894:	f04f 34ff 	mov.w	r4, #4294967295
 8005898:	4620      	mov	r0, r4
 800589a:	bd70      	pop	{r4, r5, r6, pc}
 800589c:	20000254 	.word	0x20000254

080058a0 <_malloc_r>:
 80058a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058a4:	1ccd      	adds	r5, r1, #3
 80058a6:	f025 0503 	bic.w	r5, r5, #3
 80058aa:	3508      	adds	r5, #8
 80058ac:	2d0c      	cmp	r5, #12
 80058ae:	bf38      	it	cc
 80058b0:	250c      	movcc	r5, #12
 80058b2:	2d00      	cmp	r5, #0
 80058b4:	4607      	mov	r7, r0
 80058b6:	db01      	blt.n	80058bc <_malloc_r+0x1c>
 80058b8:	42a9      	cmp	r1, r5
 80058ba:	d905      	bls.n	80058c8 <_malloc_r+0x28>
 80058bc:	230c      	movs	r3, #12
 80058be:	603b      	str	r3, [r7, #0]
 80058c0:	2600      	movs	r6, #0
 80058c2:	4630      	mov	r0, r6
 80058c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058c8:	4e2e      	ldr	r6, [pc, #184]	; (8005984 <_malloc_r+0xe4>)
 80058ca:	f000 f89d 	bl	8005a08 <__malloc_lock>
 80058ce:	6833      	ldr	r3, [r6, #0]
 80058d0:	461c      	mov	r4, r3
 80058d2:	bb34      	cbnz	r4, 8005922 <_malloc_r+0x82>
 80058d4:	4629      	mov	r1, r5
 80058d6:	4638      	mov	r0, r7
 80058d8:	f7ff ffc2 	bl	8005860 <sbrk_aligned>
 80058dc:	1c43      	adds	r3, r0, #1
 80058de:	4604      	mov	r4, r0
 80058e0:	d14d      	bne.n	800597e <_malloc_r+0xde>
 80058e2:	6834      	ldr	r4, [r6, #0]
 80058e4:	4626      	mov	r6, r4
 80058e6:	2e00      	cmp	r6, #0
 80058e8:	d140      	bne.n	800596c <_malloc_r+0xcc>
 80058ea:	6823      	ldr	r3, [r4, #0]
 80058ec:	4631      	mov	r1, r6
 80058ee:	4638      	mov	r0, r7
 80058f0:	eb04 0803 	add.w	r8, r4, r3
 80058f4:	f000 f878 	bl	80059e8 <_sbrk_r>
 80058f8:	4580      	cmp	r8, r0
 80058fa:	d13a      	bne.n	8005972 <_malloc_r+0xd2>
 80058fc:	6821      	ldr	r1, [r4, #0]
 80058fe:	3503      	adds	r5, #3
 8005900:	1a6d      	subs	r5, r5, r1
 8005902:	f025 0503 	bic.w	r5, r5, #3
 8005906:	3508      	adds	r5, #8
 8005908:	2d0c      	cmp	r5, #12
 800590a:	bf38      	it	cc
 800590c:	250c      	movcc	r5, #12
 800590e:	4629      	mov	r1, r5
 8005910:	4638      	mov	r0, r7
 8005912:	f7ff ffa5 	bl	8005860 <sbrk_aligned>
 8005916:	3001      	adds	r0, #1
 8005918:	d02b      	beq.n	8005972 <_malloc_r+0xd2>
 800591a:	6823      	ldr	r3, [r4, #0]
 800591c:	442b      	add	r3, r5
 800591e:	6023      	str	r3, [r4, #0]
 8005920:	e00e      	b.n	8005940 <_malloc_r+0xa0>
 8005922:	6822      	ldr	r2, [r4, #0]
 8005924:	1b52      	subs	r2, r2, r5
 8005926:	d41e      	bmi.n	8005966 <_malloc_r+0xc6>
 8005928:	2a0b      	cmp	r2, #11
 800592a:	d916      	bls.n	800595a <_malloc_r+0xba>
 800592c:	1961      	adds	r1, r4, r5
 800592e:	42a3      	cmp	r3, r4
 8005930:	6025      	str	r5, [r4, #0]
 8005932:	bf18      	it	ne
 8005934:	6059      	strne	r1, [r3, #4]
 8005936:	6863      	ldr	r3, [r4, #4]
 8005938:	bf08      	it	eq
 800593a:	6031      	streq	r1, [r6, #0]
 800593c:	5162      	str	r2, [r4, r5]
 800593e:	604b      	str	r3, [r1, #4]
 8005940:	4638      	mov	r0, r7
 8005942:	f104 060b 	add.w	r6, r4, #11
 8005946:	f000 f865 	bl	8005a14 <__malloc_unlock>
 800594a:	f026 0607 	bic.w	r6, r6, #7
 800594e:	1d23      	adds	r3, r4, #4
 8005950:	1af2      	subs	r2, r6, r3
 8005952:	d0b6      	beq.n	80058c2 <_malloc_r+0x22>
 8005954:	1b9b      	subs	r3, r3, r6
 8005956:	50a3      	str	r3, [r4, r2]
 8005958:	e7b3      	b.n	80058c2 <_malloc_r+0x22>
 800595a:	6862      	ldr	r2, [r4, #4]
 800595c:	42a3      	cmp	r3, r4
 800595e:	bf0c      	ite	eq
 8005960:	6032      	streq	r2, [r6, #0]
 8005962:	605a      	strne	r2, [r3, #4]
 8005964:	e7ec      	b.n	8005940 <_malloc_r+0xa0>
 8005966:	4623      	mov	r3, r4
 8005968:	6864      	ldr	r4, [r4, #4]
 800596a:	e7b2      	b.n	80058d2 <_malloc_r+0x32>
 800596c:	4634      	mov	r4, r6
 800596e:	6876      	ldr	r6, [r6, #4]
 8005970:	e7b9      	b.n	80058e6 <_malloc_r+0x46>
 8005972:	230c      	movs	r3, #12
 8005974:	603b      	str	r3, [r7, #0]
 8005976:	4638      	mov	r0, r7
 8005978:	f000 f84c 	bl	8005a14 <__malloc_unlock>
 800597c:	e7a1      	b.n	80058c2 <_malloc_r+0x22>
 800597e:	6025      	str	r5, [r4, #0]
 8005980:	e7de      	b.n	8005940 <_malloc_r+0xa0>
 8005982:	bf00      	nop
 8005984:	20000250 	.word	0x20000250

08005988 <_realloc_r>:
 8005988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800598c:	4680      	mov	r8, r0
 800598e:	4614      	mov	r4, r2
 8005990:	460e      	mov	r6, r1
 8005992:	b921      	cbnz	r1, 800599e <_realloc_r+0x16>
 8005994:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005998:	4611      	mov	r1, r2
 800599a:	f7ff bf81 	b.w	80058a0 <_malloc_r>
 800599e:	b92a      	cbnz	r2, 80059ac <_realloc_r+0x24>
 80059a0:	f7ff ff12 	bl	80057c8 <_free_r>
 80059a4:	4625      	mov	r5, r4
 80059a6:	4628      	mov	r0, r5
 80059a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059ac:	f000 f838 	bl	8005a20 <_malloc_usable_size_r>
 80059b0:	4284      	cmp	r4, r0
 80059b2:	4607      	mov	r7, r0
 80059b4:	d802      	bhi.n	80059bc <_realloc_r+0x34>
 80059b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80059ba:	d812      	bhi.n	80059e2 <_realloc_r+0x5a>
 80059bc:	4621      	mov	r1, r4
 80059be:	4640      	mov	r0, r8
 80059c0:	f7ff ff6e 	bl	80058a0 <_malloc_r>
 80059c4:	4605      	mov	r5, r0
 80059c6:	2800      	cmp	r0, #0
 80059c8:	d0ed      	beq.n	80059a6 <_realloc_r+0x1e>
 80059ca:	42bc      	cmp	r4, r7
 80059cc:	4622      	mov	r2, r4
 80059ce:	4631      	mov	r1, r6
 80059d0:	bf28      	it	cs
 80059d2:	463a      	movcs	r2, r7
 80059d4:	f7ff fed0 	bl	8005778 <memcpy>
 80059d8:	4631      	mov	r1, r6
 80059da:	4640      	mov	r0, r8
 80059dc:	f7ff fef4 	bl	80057c8 <_free_r>
 80059e0:	e7e1      	b.n	80059a6 <_realloc_r+0x1e>
 80059e2:	4635      	mov	r5, r6
 80059e4:	e7df      	b.n	80059a6 <_realloc_r+0x1e>
	...

080059e8 <_sbrk_r>:
 80059e8:	b538      	push	{r3, r4, r5, lr}
 80059ea:	4d06      	ldr	r5, [pc, #24]	; (8005a04 <_sbrk_r+0x1c>)
 80059ec:	2300      	movs	r3, #0
 80059ee:	4604      	mov	r4, r0
 80059f0:	4608      	mov	r0, r1
 80059f2:	602b      	str	r3, [r5, #0]
 80059f4:	f7fb f904 	bl	8000c00 <_sbrk>
 80059f8:	1c43      	adds	r3, r0, #1
 80059fa:	d102      	bne.n	8005a02 <_sbrk_r+0x1a>
 80059fc:	682b      	ldr	r3, [r5, #0]
 80059fe:	b103      	cbz	r3, 8005a02 <_sbrk_r+0x1a>
 8005a00:	6023      	str	r3, [r4, #0]
 8005a02:	bd38      	pop	{r3, r4, r5, pc}
 8005a04:	20000258 	.word	0x20000258

08005a08 <__malloc_lock>:
 8005a08:	4801      	ldr	r0, [pc, #4]	; (8005a10 <__malloc_lock+0x8>)
 8005a0a:	f000 b811 	b.w	8005a30 <__retarget_lock_acquire_recursive>
 8005a0e:	bf00      	nop
 8005a10:	2000025c 	.word	0x2000025c

08005a14 <__malloc_unlock>:
 8005a14:	4801      	ldr	r0, [pc, #4]	; (8005a1c <__malloc_unlock+0x8>)
 8005a16:	f000 b80c 	b.w	8005a32 <__retarget_lock_release_recursive>
 8005a1a:	bf00      	nop
 8005a1c:	2000025c 	.word	0x2000025c

08005a20 <_malloc_usable_size_r>:
 8005a20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a24:	1f18      	subs	r0, r3, #4
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	bfbc      	itt	lt
 8005a2a:	580b      	ldrlt	r3, [r1, r0]
 8005a2c:	18c0      	addlt	r0, r0, r3
 8005a2e:	4770      	bx	lr

08005a30 <__retarget_lock_acquire_recursive>:
 8005a30:	4770      	bx	lr

08005a32 <__retarget_lock_release_recursive>:
 8005a32:	4770      	bx	lr

08005a34 <_init>:
 8005a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a36:	bf00      	nop
 8005a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a3a:	bc08      	pop	{r3}
 8005a3c:	469e      	mov	lr, r3
 8005a3e:	4770      	bx	lr

08005a40 <_fini>:
 8005a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a42:	bf00      	nop
 8005a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a46:	bc08      	pop	{r3}
 8005a48:	469e      	mov	lr, r3
 8005a4a:	4770      	bx	lr
