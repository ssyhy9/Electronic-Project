
Project_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d98  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08005f28  08005f28  00015f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006024  08006024  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006024  08006024  00016024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800602c  0800602c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800602c  0800602c  0001602c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006030  08006030  00016030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006034  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000070  080060a4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  080060a4  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a29  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a49  00000000  00000000  00032ac9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f50  00000000  00000000  00035518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e18  00000000  00000000  00036468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a113  00000000  00000000  00037280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000145ec  00000000  00000000  00061393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001046b2  00000000  00000000  0007597f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017a031  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004628  00000000  00000000  0017a084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005f10 	.word	0x08005f10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005f10 	.word	0x08005f10

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08a      	sub	sp, #40	; 0x28
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800057a:	f107 031c 	add.w	r3, r7, #28
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]
 8000594:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000596:	4b30      	ldr	r3, [pc, #192]	; (8000658 <MX_ADC1_Init+0xe4>)
 8000598:	4a30      	ldr	r2, [pc, #192]	; (800065c <MX_ADC1_Init+0xe8>)
 800059a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 800059c:	4b2e      	ldr	r3, [pc, #184]	; (8000658 <MX_ADC1_Init+0xe4>)
 800059e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80005a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005a4:	4b2c      	ldr	r3, [pc, #176]	; (8000658 <MX_ADC1_Init+0xe4>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005aa:	4b2b      	ldr	r3, [pc, #172]	; (8000658 <MX_ADC1_Init+0xe4>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005b0:	4b29      	ldr	r3, [pc, #164]	; (8000658 <MX_ADC1_Init+0xe4>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005b6:	4b28      	ldr	r3, [pc, #160]	; (8000658 <MX_ADC1_Init+0xe4>)
 80005b8:	2204      	movs	r2, #4
 80005ba:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005bc:	4b26      	ldr	r3, [pc, #152]	; (8000658 <MX_ADC1_Init+0xe4>)
 80005be:	2200      	movs	r2, #0
 80005c0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005c2:	4b25      	ldr	r3, [pc, #148]	; (8000658 <MX_ADC1_Init+0xe4>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005c8:	4b23      	ldr	r3, [pc, #140]	; (8000658 <MX_ADC1_Init+0xe4>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ce:	4b22      	ldr	r3, [pc, #136]	; (8000658 <MX_ADC1_Init+0xe4>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005d6:	4b20      	ldr	r3, [pc, #128]	; (8000658 <MX_ADC1_Init+0xe4>)
 80005d8:	2200      	movs	r2, #0
 80005da:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005dc:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <MX_ADC1_Init+0xe4>)
 80005de:	2200      	movs	r2, #0
 80005e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005e2:	4b1d      	ldr	r3, [pc, #116]	; (8000658 <MX_ADC1_Init+0xe4>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005ea:	4b1b      	ldr	r3, [pc, #108]	; (8000658 <MX_ADC1_Init+0xe4>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005f0:	4b19      	ldr	r3, [pc, #100]	; (8000658 <MX_ADC1_Init+0xe4>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005f8:	4817      	ldr	r0, [pc, #92]	; (8000658 <MX_ADC1_Init+0xe4>)
 80005fa:	f000 fe57 	bl	80012ac <HAL_ADC_Init>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000604:	f000 f9dd 	bl	80009c2 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000608:	2300      	movs	r3, #0
 800060a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800060c:	f107 031c 	add.w	r3, r7, #28
 8000610:	4619      	mov	r1, r3
 8000612:	4811      	ldr	r0, [pc, #68]	; (8000658 <MX_ADC1_Init+0xe4>)
 8000614:	f001 fdaa 	bl	800216c <HAL_ADCEx_MultiModeConfigChannel>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800061e:	f000 f9d0 	bl	80009c2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000622:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <MX_ADC1_Init+0xec>)
 8000624:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000626:	2306      	movs	r3, #6
 8000628:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800062a:	2304      	movs	r3, #4
 800062c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800062e:	237f      	movs	r3, #127	; 0x7f
 8000630:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000632:	2304      	movs	r3, #4
 8000634:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	4619      	mov	r1, r3
 800063e:	4806      	ldr	r0, [pc, #24]	; (8000658 <MX_ADC1_Init+0xe4>)
 8000640:	f001 f864 	bl	800170c <HAL_ADC_ConfigChannel>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800064a:	f000 f9ba 	bl	80009c2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800064e:	bf00      	nop
 8000650:	3728      	adds	r7, #40	; 0x28
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	2000008c 	.word	0x2000008c
 800065c:	50040000 	.word	0x50040000
 8000660:	32601000 	.word	0x32601000

08000664 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b0ac      	sub	sp, #176	; 0xb0
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	2288      	movs	r2, #136	; 0x88
 8000682:	2100      	movs	r1, #0
 8000684:	4618      	mov	r0, r3
 8000686:	f004 fcad 	bl	8004fe4 <memset>
  if(adcHandle->Instance==ADC1)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a3d      	ldr	r2, [pc, #244]	; (8000784 <HAL_ADC_MspInit+0x120>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d172      	bne.n	800077a <HAL_ADC_MspInit+0x116>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000694:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000698:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800069a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800069e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80006a2:	2302      	movs	r3, #2
 80006a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006a6:	2301      	movs	r3, #1
 80006a8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80006aa:	2308      	movs	r3, #8
 80006ac:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80006ae:	2307      	movs	r3, #7
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006b2:	2302      	movs	r3, #2
 80006b4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80006ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80006be:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	4618      	mov	r0, r3
 80006c6:	f003 f94b 	bl	8003960 <HAL_RCCEx_PeriphCLKConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80006d0:	f000 f977 	bl	80009c2 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80006d4:	4b2c      	ldr	r3, [pc, #176]	; (8000788 <HAL_ADC_MspInit+0x124>)
 80006d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d8:	4a2b      	ldr	r2, [pc, #172]	; (8000788 <HAL_ADC_MspInit+0x124>)
 80006da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e0:	4b29      	ldr	r3, [pc, #164]	; (8000788 <HAL_ADC_MspInit+0x124>)
 80006e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006e8:	613b      	str	r3, [r7, #16]
 80006ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ec:	4b26      	ldr	r3, [pc, #152]	; (8000788 <HAL_ADC_MspInit+0x124>)
 80006ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f0:	4a25      	ldr	r2, [pc, #148]	; (8000788 <HAL_ADC_MspInit+0x124>)
 80006f2:	f043 0301 	orr.w	r3, r3, #1
 80006f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f8:	4b23      	ldr	r3, [pc, #140]	; (8000788 <HAL_ADC_MspInit+0x124>)
 80006fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fc:	f003 0301 	and.w	r3, r3, #1
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000704:	2380      	movs	r3, #128	; 0x80
 8000706:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800070a:	230b      	movs	r3, #11
 800070c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000716:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800071a:	4619      	mov	r1, r3
 800071c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000720:	f002 f8de 	bl	80028e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000724:	4b19      	ldr	r3, [pc, #100]	; (800078c <HAL_ADC_MspInit+0x128>)
 8000726:	4a1a      	ldr	r2, [pc, #104]	; (8000790 <HAL_ADC_MspInit+0x12c>)
 8000728:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800072a:	4b18      	ldr	r3, [pc, #96]	; (800078c <HAL_ADC_MspInit+0x128>)
 800072c:	2200      	movs	r2, #0
 800072e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000730:	4b16      	ldr	r3, [pc, #88]	; (800078c <HAL_ADC_MspInit+0x128>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000736:	4b15      	ldr	r3, [pc, #84]	; (800078c <HAL_ADC_MspInit+0x128>)
 8000738:	2200      	movs	r2, #0
 800073a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800073c:	4b13      	ldr	r3, [pc, #76]	; (800078c <HAL_ADC_MspInit+0x128>)
 800073e:	2280      	movs	r2, #128	; 0x80
 8000740:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000742:	4b12      	ldr	r3, [pc, #72]	; (800078c <HAL_ADC_MspInit+0x128>)
 8000744:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000748:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <HAL_ADC_MspInit+0x128>)
 800074c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000750:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <HAL_ADC_MspInit+0x128>)
 8000754:	2220      	movs	r2, #32
 8000756:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <HAL_ADC_MspInit+0x128>)
 800075a:	2200      	movs	r2, #0
 800075c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800075e:	480b      	ldr	r0, [pc, #44]	; (800078c <HAL_ADC_MspInit+0x128>)
 8000760:	f001 fec6 	bl	80024f0 <HAL_DMA_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 800076a:	f000 f92a 	bl	80009c2 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4a06      	ldr	r2, [pc, #24]	; (800078c <HAL_ADC_MspInit+0x128>)
 8000772:	64da      	str	r2, [r3, #76]	; 0x4c
 8000774:	4a05      	ldr	r2, [pc, #20]	; (800078c <HAL_ADC_MspInit+0x128>)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800077a:	bf00      	nop
 800077c:	37b0      	adds	r7, #176	; 0xb0
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	50040000 	.word	0x50040000
 8000788:	40021000 	.word	0x40021000
 800078c:	200000f0 	.word	0x200000f0
 8000790:	40020008 	.word	0x40020008

08000794 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_DMA_Init+0x38>)
 800079c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800079e:	4a0b      	ldr	r2, [pc, #44]	; (80007cc <MX_DMA_Init+0x38>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6493      	str	r3, [r2, #72]	; 0x48
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_DMA_Init+0x38>)
 80007a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2100      	movs	r1, #0
 80007b6:	200b      	movs	r0, #11
 80007b8:	f001 fe63 	bl	8002482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007bc:	200b      	movs	r0, #11
 80007be:	f001 fe7c 	bl	80024ba <HAL_NVIC_EnableIRQ>

}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40021000 	.word	0x40021000

080007d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	; 0x28
 80007d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	4b2b      	ldr	r3, [pc, #172]	; (8000894 <MX_GPIO_Init+0xc4>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	4a2a      	ldr	r2, [pc, #168]	; (8000894 <MX_GPIO_Init+0xc4>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f2:	4b28      	ldr	r3, [pc, #160]	; (8000894 <MX_GPIO_Init+0xc4>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fe:	4b25      	ldr	r3, [pc, #148]	; (8000894 <MX_GPIO_Init+0xc4>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	4a24      	ldr	r2, [pc, #144]	; (8000894 <MX_GPIO_Init+0xc4>)
 8000804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080a:	4b22      	ldr	r3, [pc, #136]	; (8000894 <MX_GPIO_Init+0xc4>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	4b1f      	ldr	r3, [pc, #124]	; (8000894 <MX_GPIO_Init+0xc4>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	4a1e      	ldr	r2, [pc, #120]	; (8000894 <MX_GPIO_Init+0xc4>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000822:	4b1c      	ldr	r3, [pc, #112]	; (8000894 <MX_GPIO_Init+0xc4>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	4b19      	ldr	r3, [pc, #100]	; (8000894 <MX_GPIO_Init+0xc4>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	4a18      	ldr	r2, [pc, #96]	; (8000894 <MX_GPIO_Init+0xc4>)
 8000834:	f043 0302 	orr.w	r3, r3, #2
 8000838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083a:	4b16      	ldr	r3, [pc, #88]	; (8000894 <MX_GPIO_Init+0xc4>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	f003 0302 	and.w	r3, r3, #2
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2120      	movs	r1, #32
 800084a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084e:	f002 f9f1 	bl	8002c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000852:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000858:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800085c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	4619      	mov	r1, r3
 8000868:	480b      	ldr	r0, [pc, #44]	; (8000898 <MX_GPIO_Init+0xc8>)
 800086a:	f002 f839 	bl	80028e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800086e:	2320      	movs	r3, #32
 8000870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	4619      	mov	r1, r3
 8000884:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000888:	f002 f82a 	bl	80028e0 <HAL_GPIO_Init>

}
 800088c:	bf00      	nop
 800088e:	3728      	adds	r7, #40	; 0x28
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40021000 	.word	0x40021000
 8000898:	48000800 	.word	0x48000800

0800089c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80008a4:	1d39      	adds	r1, r7, #4
 80008a6:	f04f 33ff 	mov.w	r3, #4294967295
 80008aa:	2201      	movs	r2, #1
 80008ac:	4803      	ldr	r0, [pc, #12]	; (80008bc <__io_putchar+0x20>)
 80008ae:	f003 fe73 	bl	8004598 <HAL_UART_Transmit>
  return ch;
 80008b2:	687b      	ldr	r3, [r7, #4]
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000168 	.word	0x20000168

080008c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c4:	f000 faa0 	bl	8000e08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c8:	f000 f828 	bl	800091c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008cc:	f7ff ff80 	bl	80007d0 <MX_GPIO_Init>
  MX_DMA_Init();
 80008d0:	f7ff ff60 	bl	8000794 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80008d4:	f000 f9e2 	bl	8000c9c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80008d8:	f7ff fe4c 	bl	8000574 <MX_ADC1_Init>
  MX_RTC_Init();
 80008dc:	f000 f876 	bl	80009cc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  //HAL_ADCEx_Calibration_Start(&hdac1);
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC_Value, 1);
 80008e0:	2201      	movs	r2, #1
 80008e2:	490a      	ldr	r1, [pc, #40]	; (800090c <main+0x4c>)
 80008e4:	480a      	ldr	r0, [pc, #40]	; (8000910 <main+0x50>)
 80008e6:	f000 fe37 	bl	8001558 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80008ea:	2120      	movs	r1, #32
 80008ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f0:	f002 f9b8 	bl	8002c64 <HAL_GPIO_TogglePin>
	  cnt ++;
 80008f4:	4b07      	ldr	r3, [pc, #28]	; (8000914 <main+0x54>)
 80008f6:	881b      	ldrh	r3, [r3, #0]
 80008f8:	3301      	adds	r3, #1
 80008fa:	b29a      	uxth	r2, r3
 80008fc:	4b05      	ldr	r3, [pc, #20]	; (8000914 <main+0x54>)
 80008fe:	801a      	strh	r2, [r3, #0]
//	  ADC_Value = Get_Adc();
	  printf("Digital Value of sine = %d\n", ADC_Value);
 8000900:	4902      	ldr	r1, [pc, #8]	; (800090c <main+0x4c>)
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <main+0x58>)
 8000904:	f004 fb76 	bl	8004ff4 <iprintf>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000908:	e7ef      	b.n	80008ea <main+0x2a>
 800090a:	bf00      	nop
 800090c:	2000013c 	.word	0x2000013c
 8000910:	2000008c 	.word	0x2000008c
 8000914:	20000138 	.word	0x20000138
 8000918:	08005f28 	.word	0x08005f28

0800091c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b096      	sub	sp, #88	; 0x58
 8000920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	2244      	movs	r2, #68	; 0x44
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f004 fb5a 	bl	8004fe4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000930:	463b      	mov	r3, r7
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800093e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000942:	f002 f9b7 	bl	8002cb4 <HAL_PWREx_ControlVoltageScaling>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800094c:	f000 f839 	bl	80009c2 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000950:	230a      	movs	r3, #10
 8000952:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000954:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000958:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800095a:	2310      	movs	r3, #16
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800095e:	2301      	movs	r3, #1
 8000960:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000962:	2302      	movs	r3, #2
 8000964:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000966:	2302      	movs	r3, #2
 8000968:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800096a:	2301      	movs	r3, #1
 800096c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800096e:	230a      	movs	r3, #10
 8000970:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000972:	2307      	movs	r3, #7
 8000974:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000976:	2302      	movs	r3, #2
 8000978:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800097a:	2302      	movs	r3, #2
 800097c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	4618      	mov	r0, r3
 8000984:	f002 f9ec 	bl	8002d60 <HAL_RCC_OscConfig>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <SystemClock_Config+0x76>
  {
    Error_Handler();
 800098e:	f000 f818 	bl	80009c2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000992:	230f      	movs	r3, #15
 8000994:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000996:	2303      	movs	r3, #3
 8000998:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800099a:	2300      	movs	r3, #0
 800099c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009a6:	463b      	mov	r3, r7
 80009a8:	2104      	movs	r1, #4
 80009aa:	4618      	mov	r0, r3
 80009ac:	f002 fdb4 	bl	8003518 <HAL_RCC_ClockConfig>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80009b6:	f000 f804 	bl	80009c2 <Error_Handler>
  }
}
 80009ba:	bf00      	nop
 80009bc:	3758      	adds	r7, #88	; 0x58
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c6:	b672      	cpsid	i
}
 80009c8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ca:	e7fe      	b.n	80009ca <Error_Handler+0x8>

080009cc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009d0:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <MX_RTC_Init+0x48>)
 80009d2:	4a11      	ldr	r2, [pc, #68]	; (8000a18 <MX_RTC_Init+0x4c>)
 80009d4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009d6:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <MX_RTC_Init+0x48>)
 80009d8:	2200      	movs	r2, #0
 80009da:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009dc:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <MX_RTC_Init+0x48>)
 80009de:	227f      	movs	r2, #127	; 0x7f
 80009e0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <MX_RTC_Init+0x48>)
 80009e4:	22ff      	movs	r2, #255	; 0xff
 80009e6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009e8:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <MX_RTC_Init+0x48>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <MX_RTC_Init+0x48>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009f4:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <MX_RTC_Init+0x48>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <MX_RTC_Init+0x48>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a00:	4804      	ldr	r0, [pc, #16]	; (8000a14 <MX_RTC_Init+0x48>)
 8000a02:	f003 fc69 	bl	80042d8 <HAL_RTC_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000a0c:	f7ff ffd9 	bl	80009c2 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000140 	.word	0x20000140
 8000a18:	40002800 	.word	0x40002800

08000a1c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b0a4      	sub	sp, #144	; 0x90
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a24:	f107 0308 	add.w	r3, r7, #8
 8000a28:	2288      	movs	r2, #136	; 0x88
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f004 fad9 	bl	8004fe4 <memset>
  if(rtcHandle->Instance==RTC)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a10      	ldr	r2, [pc, #64]	; (8000a78 <HAL_RTC_MspInit+0x5c>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d118      	bne.n	8000a6e <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a40:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000a42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a4a:	f107 0308 	add.w	r3, r7, #8
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f002 ff86 	bl	8003960 <HAL_RCCEx_PeriphCLKConfig>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000a5a:	f7ff ffb2 	bl	80009c2 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a5e:	4b07      	ldr	r3, [pc, #28]	; (8000a7c <HAL_RTC_MspInit+0x60>)
 8000a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a64:	4a05      	ldr	r2, [pc, #20]	; (8000a7c <HAL_RTC_MspInit+0x60>)
 8000a66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000a6e:	bf00      	nop
 8000a70:	3790      	adds	r7, #144	; 0x90
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40002800 	.word	0x40002800
 8000a7c:	40021000 	.word	0x40021000

08000a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a86:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <HAL_MspInit+0x44>)
 8000a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a8a:	4a0e      	ldr	r2, [pc, #56]	; (8000ac4 <HAL_MspInit+0x44>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6613      	str	r3, [r2, #96]	; 0x60
 8000a92:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <HAL_MspInit+0x44>)
 8000a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9e:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <HAL_MspInit+0x44>)
 8000aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa2:	4a08      	ldr	r2, [pc, #32]	; (8000ac4 <HAL_MspInit+0x44>)
 8000aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa8:	6593      	str	r3, [r2, #88]	; 0x58
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <HAL_MspInit+0x44>)
 8000aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	40021000 	.word	0x40021000

08000ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <NMI_Handler+0x4>

08000ace <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <HardFault_Handler+0x4>

08000ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <MemManage_Handler+0x4>

08000ada <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <BusFault_Handler+0x4>

08000ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <UsageFault_Handler+0x4>

08000ae6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b14:	f000 f9d4 	bl	8000ec0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000b20:	4802      	ldr	r0, [pc, #8]	; (8000b2c <DMA1_Channel1_IRQHandler+0x10>)
 8000b22:	f001 fdfd 	bl	8002720 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	200000f0 	.word	0x200000f0

08000b30 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	e00a      	b.n	8000b58 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b42:	f3af 8000 	nop.w
 8000b46:	4601      	mov	r1, r0
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	1c5a      	adds	r2, r3, #1
 8000b4c:	60ba      	str	r2, [r7, #8]
 8000b4e:	b2ca      	uxtb	r2, r1
 8000b50:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	3301      	adds	r3, #1
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	697a      	ldr	r2, [r7, #20]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	dbf0      	blt.n	8000b42 <_read+0x12>
	}

return len;
 8000b60:	687b      	ldr	r3, [r7, #4]
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3718      	adds	r7, #24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b086      	sub	sp, #24
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	60f8      	str	r0, [r7, #12]
 8000b72:	60b9      	str	r1, [r7, #8]
 8000b74:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]
 8000b7a:	e009      	b.n	8000b90 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	1c5a      	adds	r2, r3, #1
 8000b80:	60ba      	str	r2, [r7, #8]
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fe89 	bl	800089c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	697a      	ldr	r2, [r7, #20]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	dbf1      	blt.n	8000b7c <_write+0x12>
	}
	return len;
 8000b98:	687b      	ldr	r3, [r7, #4]
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3718      	adds	r7, #24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <_close>:

int _close(int file)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	b083      	sub	sp, #12
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
	return -1;
 8000baa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	b083      	sub	sp, #12
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
 8000bc2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bca:	605a      	str	r2, [r3, #4]
	return 0;
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <_isatty>:

int _isatty(int file)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	b083      	sub	sp, #12
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
	return 1;
 8000be2:	2301      	movs	r3, #1
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
	return 0;
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3714      	adds	r7, #20
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
	...

08000c0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c14:	4a14      	ldr	r2, [pc, #80]	; (8000c68 <_sbrk+0x5c>)
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <_sbrk+0x60>)
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c20:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <_sbrk+0x64>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d102      	bne.n	8000c2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c28:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <_sbrk+0x64>)
 8000c2a:	4a12      	ldr	r2, [pc, #72]	; (8000c74 <_sbrk+0x68>)
 8000c2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c2e:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <_sbrk+0x64>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4413      	add	r3, r2
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d207      	bcs.n	8000c4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c3c:	f004 f9a8 	bl	8004f90 <__errno>
 8000c40:	4603      	mov	r3, r0
 8000c42:	220c      	movs	r2, #12
 8000c44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c46:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4a:	e009      	b.n	8000c60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c4c:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <_sbrk+0x64>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c52:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <_sbrk+0x64>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	4a05      	ldr	r2, [pc, #20]	; (8000c70 <_sbrk+0x64>)
 8000c5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3718      	adds	r7, #24
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20018000 	.word	0x20018000
 8000c6c:	00000400 	.word	0x00000400
 8000c70:	20000164 	.word	0x20000164
 8000c74:	20000200 	.word	0x20000200

08000c78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <SystemInit+0x20>)
 8000c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c82:	4a05      	ldr	r2, [pc, #20]	; (8000c98 <SystemInit+0x20>)
 8000c84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ca0:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <MX_USART2_UART_Init+0x58>)
 8000ca2:	4a15      	ldr	r2, [pc, #84]	; (8000cf8 <MX_USART2_UART_Init+0x5c>)
 8000ca4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ca6:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <MX_USART2_UART_Init+0x58>)
 8000ca8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cae:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <MX_USART2_UART_Init+0x58>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <MX_USART2_UART_Init+0x58>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <MX_USART2_UART_Init+0x58>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <MX_USART2_UART_Init+0x58>)
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <MX_USART2_UART_Init+0x58>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <MX_USART2_UART_Init+0x58>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <MX_USART2_UART_Init+0x58>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <MX_USART2_UART_Init+0x58>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cde:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <MX_USART2_UART_Init+0x58>)
 8000ce0:	f003 fc0c 	bl	80044fc <HAL_UART_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000cea:	f7ff fe6a 	bl	80009c2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000168 	.word	0x20000168
 8000cf8:	40004400 	.word	0x40004400

08000cfc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b0ac      	sub	sp, #176	; 0xb0
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	2288      	movs	r2, #136	; 0x88
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f004 f961 	bl	8004fe4 <memset>
  if(uartHandle->Instance==USART2)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a21      	ldr	r2, [pc, #132]	; (8000dac <HAL_UART_MspInit+0xb0>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d13b      	bne.n	8000da4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d30:	2300      	movs	r3, #0
 8000d32:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f002 fe11 	bl	8003960 <HAL_RCCEx_PeriphCLKConfig>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d44:	f7ff fe3d 	bl	80009c2 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d48:	4b19      	ldr	r3, [pc, #100]	; (8000db0 <HAL_UART_MspInit+0xb4>)
 8000d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d4c:	4a18      	ldr	r2, [pc, #96]	; (8000db0 <HAL_UART_MspInit+0xb4>)
 8000d4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d52:	6593      	str	r3, [r2, #88]	; 0x58
 8000d54:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <HAL_UART_MspInit+0xb4>)
 8000d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d5c:	613b      	str	r3, [r7, #16]
 8000d5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d60:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <HAL_UART_MspInit+0xb4>)
 8000d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d64:	4a12      	ldr	r2, [pc, #72]	; (8000db0 <HAL_UART_MspInit+0xb4>)
 8000d66:	f043 0301 	orr.w	r3, r3, #1
 8000d6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d6c:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <HAL_UART_MspInit+0xb4>)
 8000d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d70:	f003 0301 	and.w	r3, r3, #1
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d78:	230c      	movs	r3, #12
 8000d7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d90:	2307      	movs	r3, #7
 8000d92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d96:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da0:	f001 fd9e 	bl	80028e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000da4:	bf00      	nop
 8000da6:	37b0      	adds	r7, #176	; 0xb0
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40004400 	.word	0x40004400
 8000db0:	40021000 	.word	0x40021000

08000db4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000db4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000db8:	f7ff ff5e 	bl	8000c78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dbc:	480c      	ldr	r0, [pc, #48]	; (8000df0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dbe:	490d      	ldr	r1, [pc, #52]	; (8000df4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dc0:	4a0d      	ldr	r2, [pc, #52]	; (8000df8 <LoopForever+0xe>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc4:	e002      	b.n	8000dcc <LoopCopyDataInit>

08000dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dca:	3304      	adds	r3, #4

08000dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd0:	d3f9      	bcc.n	8000dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dd4:	4c0a      	ldr	r4, [pc, #40]	; (8000e00 <LoopForever+0x16>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd8:	e001      	b.n	8000dde <LoopFillZerobss>

08000dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ddc:	3204      	adds	r2, #4

08000dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de0:	d3fb      	bcc.n	8000dda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000de2:	f004 f8db 	bl	8004f9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000de6:	f7ff fd6b 	bl	80008c0 <main>

08000dea <LoopForever>:

LoopForever:
    b LoopForever
 8000dea:	e7fe      	b.n	8000dea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000dec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000df0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000df8:	08006034 	.word	0x08006034
  ldr r2, =_sbss
 8000dfc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e00:	20000200 	.word	0x20000200

08000e04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e04:	e7fe      	b.n	8000e04 <ADC1_2_IRQHandler>
	...

08000e08 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e12:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <HAL_Init+0x3c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a0b      	ldr	r2, [pc, #44]	; (8000e44 <HAL_Init+0x3c>)
 8000e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e1c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e1e:	2003      	movs	r0, #3
 8000e20:	f001 fb24 	bl	800246c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e24:	2000      	movs	r0, #0
 8000e26:	f000 f80f 	bl	8000e48 <HAL_InitTick>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d002      	beq.n	8000e36 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	71fb      	strb	r3, [r7, #7]
 8000e34:	e001      	b.n	8000e3a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e36:	f7ff fe23 	bl	8000a80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40022000 	.word	0x40022000

08000e48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e50:	2300      	movs	r3, #0
 8000e52:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e54:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <HAL_InitTick+0x6c>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d023      	beq.n	8000ea4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e5c:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <HAL_InitTick+0x70>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	4b14      	ldr	r3, [pc, #80]	; (8000eb4 <HAL_InitTick+0x6c>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	4619      	mov	r1, r3
 8000e66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e72:	4618      	mov	r0, r3
 8000e74:	f001 fb2f 	bl	80024d6 <HAL_SYSTICK_Config>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d10f      	bne.n	8000e9e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2b0f      	cmp	r3, #15
 8000e82:	d809      	bhi.n	8000e98 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e84:	2200      	movs	r2, #0
 8000e86:	6879      	ldr	r1, [r7, #4]
 8000e88:	f04f 30ff 	mov.w	r0, #4294967295
 8000e8c:	f001 faf9 	bl	8002482 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e90:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <HAL_InitTick+0x74>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6013      	str	r3, [r2, #0]
 8000e96:	e007      	b.n	8000ea8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	73fb      	strb	r3, [r7, #15]
 8000e9c:	e004      	b.n	8000ea8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	73fb      	strb	r3, [r7, #15]
 8000ea2:	e001      	b.n	8000ea8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000008 	.word	0x20000008
 8000eb8:	20000000 	.word	0x20000000
 8000ebc:	20000004 	.word	0x20000004

08000ec0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <HAL_IncTick+0x20>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <HAL_IncTick+0x24>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4413      	add	r3, r2
 8000ed0:	4a04      	ldr	r2, [pc, #16]	; (8000ee4 <HAL_IncTick+0x24>)
 8000ed2:	6013      	str	r3, [r2, #0]
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000008 	.word	0x20000008
 8000ee4:	200001ec 	.word	0x200001ec

08000ee8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return uwTick;
 8000eec:	4b03      	ldr	r3, [pc, #12]	; (8000efc <HAL_GetTick+0x14>)
 8000eee:	681b      	ldr	r3, [r3, #0]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	200001ec 	.word	0x200001ec

08000f00 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	431a      	orrs	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	609a      	str	r2, [r3, #8]
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f26:	b480      	push	{r7}
 8000f28:	b083      	sub	sp, #12
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
 8000f2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	431a      	orrs	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b087      	sub	sp, #28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
 8000f74:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	3360      	adds	r3, #96	; 0x60
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	4413      	add	r3, r2
 8000f82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <LL_ADC_SetOffset+0x44>)
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000f92:	683a      	ldr	r2, [r7, #0]
 8000f94:	430a      	orrs	r2, r1
 8000f96:	4313      	orrs	r3, r2
 8000f98:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000fa0:	bf00      	nop
 8000fa2:	371c      	adds	r7, #28
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	03fff000 	.word	0x03fff000

08000fb0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	3360      	adds	r3, #96	; 0x60
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	4413      	add	r3, r2
 8000fc6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b087      	sub	sp, #28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	3360      	adds	r3, #96	; 0x60
 8000fec:	461a      	mov	r2, r3
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	4413      	add	r3, r2
 8000ff4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	431a      	orrs	r2, r3
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001006:	bf00      	nop
 8001008:	371c      	adds	r7, #28
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001022:	2b00      	cmp	r3, #0
 8001024:	d101      	bne.n	800102a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001026:	2301      	movs	r3, #1
 8001028:	e000      	b.n	800102c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800102a:	2300      	movs	r3, #0
}
 800102c:	4618      	mov	r0, r3
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001038:	b480      	push	{r7}
 800103a:	b087      	sub	sp, #28
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	3330      	adds	r3, #48	; 0x30
 8001048:	461a      	mov	r2, r3
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	0a1b      	lsrs	r3, r3, #8
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	f003 030c 	and.w	r3, r3, #12
 8001054:	4413      	add	r3, r2
 8001056:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	f003 031f 	and.w	r3, r3, #31
 8001062:	211f      	movs	r1, #31
 8001064:	fa01 f303 	lsl.w	r3, r1, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	401a      	ands	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	0e9b      	lsrs	r3, r3, #26
 8001070:	f003 011f 	and.w	r1, r3, #31
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	f003 031f 	and.w	r3, r3, #31
 800107a:	fa01 f303 	lsl.w	r3, r1, r3
 800107e:	431a      	orrs	r2, r3
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001084:	bf00      	nop
 8001086:	371c      	adds	r7, #28
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001090:	b480      	push	{r7}
 8001092:	b087      	sub	sp, #28
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	3314      	adds	r3, #20
 80010a0:	461a      	mov	r2, r3
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	0e5b      	lsrs	r3, r3, #25
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	f003 0304 	and.w	r3, r3, #4
 80010ac:	4413      	add	r3, r2
 80010ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	0d1b      	lsrs	r3, r3, #20
 80010b8:	f003 031f 	and.w	r3, r3, #31
 80010bc:	2107      	movs	r1, #7
 80010be:	fa01 f303 	lsl.w	r3, r1, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	401a      	ands	r2, r3
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	0d1b      	lsrs	r3, r3, #20
 80010ca:	f003 031f 	and.w	r3, r3, #31
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	fa01 f303 	lsl.w	r3, r1, r3
 80010d4:	431a      	orrs	r2, r3
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80010da:	bf00      	nop
 80010dc:	371c      	adds	r7, #28
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001100:	43db      	mvns	r3, r3
 8001102:	401a      	ands	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f003 0318 	and.w	r3, r3, #24
 800110a:	4908      	ldr	r1, [pc, #32]	; (800112c <LL_ADC_SetChannelSingleDiff+0x44>)
 800110c:	40d9      	lsrs	r1, r3
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	400b      	ands	r3, r1
 8001112:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001116:	431a      	orrs	r2, r3
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800111e:	bf00      	nop
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	0007ffff 	.word	0x0007ffff

08001130 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	f003 031f 	and.w	r3, r3, #31
}
 8001140:	4618      	mov	r0, r3
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800115c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	6093      	str	r3, [r2, #8]
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001180:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001184:	d101      	bne.n	800118a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001186:	2301      	movs	r3, #1
 8001188:	e000      	b.n	800118c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800118a:	2300      	movs	r3, #0
}
 800118c:	4618      	mov	r0, r3
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80011a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80011d4:	d101      	bne.n	80011da <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80011d6:	2301      	movs	r3, #1
 80011d8:	e000      	b.n	80011dc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80011da:	2300      	movs	r3, #0
}
 80011dc:	4618      	mov	r0, r3
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011fc:	f043 0201 	orr.w	r2, r3, #1
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	2b01      	cmp	r3, #1
 8001222:	d101      	bne.n	8001228 <LL_ADC_IsEnabled+0x18>
 8001224:	2301      	movs	r3, #1
 8001226:	e000      	b.n	800122a <LL_ADC_IsEnabled+0x1a>
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001236:	b480      	push	{r7}
 8001238:	b083      	sub	sp, #12
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001246:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800124a:	f043 0204 	orr.w	r2, r3, #4
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800125e:	b480      	push	{r7}
 8001260:	b083      	sub	sp, #12
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f003 0304 	and.w	r3, r3, #4
 800126e:	2b04      	cmp	r3, #4
 8001270:	d101      	bne.n	8001276 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001272:	2301      	movs	r3, #1
 8001274:	e000      	b.n	8001278 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001276:	2300      	movs	r3, #0
}
 8001278:	4618      	mov	r0, r3
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f003 0308 	and.w	r3, r3, #8
 8001294:	2b08      	cmp	r3, #8
 8001296:	d101      	bne.n	800129c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001298:	2301      	movs	r3, #1
 800129a:	e000      	b.n	800129e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b089      	sub	sp, #36	; 0x24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012b4:	2300      	movs	r3, #0
 80012b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d101      	bne.n	80012c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e136      	b.n	8001534 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	691b      	ldr	r3, [r3, #16]
 80012ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d109      	bne.n	80012e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff f9c5 	bl	8000664 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2200      	movs	r2, #0
 80012e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ff3f 	bl	8001170 <LL_ADC_IsDeepPowerDownEnabled>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d004      	beq.n	8001302 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff25 	bl	800114c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff ff5a 	bl	80011c0 <LL_ADC_IsInternalRegulatorEnabled>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d115      	bne.n	800133e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff ff3e 	bl	8001198 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800131c:	4b87      	ldr	r3, [pc, #540]	; (800153c <HAL_ADC_Init+0x290>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	099b      	lsrs	r3, r3, #6
 8001322:	4a87      	ldr	r2, [pc, #540]	; (8001540 <HAL_ADC_Init+0x294>)
 8001324:	fba2 2303 	umull	r2, r3, r2, r3
 8001328:	099b      	lsrs	r3, r3, #6
 800132a:	3301      	adds	r3, #1
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001330:	e002      	b.n	8001338 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	3b01      	subs	r3, #1
 8001336:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f9      	bne.n	8001332 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff ff3c 	bl	80011c0 <LL_ADC_IsInternalRegulatorEnabled>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d10d      	bne.n	800136a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001352:	f043 0210 	orr.w	r2, r3, #16
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135e:	f043 0201 	orr.w	r2, r3, #1
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff ff75 	bl	800125e <LL_ADC_REG_IsConversionOngoing>
 8001374:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800137a:	f003 0310 	and.w	r3, r3, #16
 800137e:	2b00      	cmp	r3, #0
 8001380:	f040 80cf 	bne.w	8001522 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	2b00      	cmp	r3, #0
 8001388:	f040 80cb 	bne.w	8001522 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001390:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001394:	f043 0202 	orr.w	r2, r3, #2
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff ff35 	bl	8001210 <LL_ADC_IsEnabled>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d115      	bne.n	80013d8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80013ac:	4865      	ldr	r0, [pc, #404]	; (8001544 <HAL_ADC_Init+0x298>)
 80013ae:	f7ff ff2f 	bl	8001210 <LL_ADC_IsEnabled>
 80013b2:	4604      	mov	r4, r0
 80013b4:	4864      	ldr	r0, [pc, #400]	; (8001548 <HAL_ADC_Init+0x29c>)
 80013b6:	f7ff ff2b 	bl	8001210 <LL_ADC_IsEnabled>
 80013ba:	4603      	mov	r3, r0
 80013bc:	431c      	orrs	r4, r3
 80013be:	4863      	ldr	r0, [pc, #396]	; (800154c <HAL_ADC_Init+0x2a0>)
 80013c0:	f7ff ff26 	bl	8001210 <LL_ADC_IsEnabled>
 80013c4:	4603      	mov	r3, r0
 80013c6:	4323      	orrs	r3, r4
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d105      	bne.n	80013d8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	4619      	mov	r1, r3
 80013d2:	485f      	ldr	r0, [pc, #380]	; (8001550 <HAL_ADC_Init+0x2a4>)
 80013d4:	f7ff fd94 	bl	8000f00 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	7e5b      	ldrb	r3, [r3, #25]
 80013dc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013e2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80013e8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80013ee:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013f6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013f8:	4313      	orrs	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d106      	bne.n	8001414 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140a:	3b01      	subs	r3, #1
 800140c:	045b      	lsls	r3, r3, #17
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001418:	2b00      	cmp	r3, #0
 800141a:	d009      	beq.n	8001430 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001420:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001428:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4313      	orrs	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	68da      	ldr	r2, [r3, #12]
 8001436:	4b47      	ldr	r3, [pc, #284]	; (8001554 <HAL_ADC_Init+0x2a8>)
 8001438:	4013      	ands	r3, r2
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	6812      	ldr	r2, [r2, #0]
 800143e:	69b9      	ldr	r1, [r7, #24]
 8001440:	430b      	orrs	r3, r1
 8001442:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff ff08 	bl	800125e <LL_ADC_REG_IsConversionOngoing>
 800144e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff15 	bl	8001284 <LL_ADC_INJ_IsConversionOngoing>
 800145a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d13d      	bne.n	80014de <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d13a      	bne.n	80014de <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800146c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001474:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001484:	f023 0302 	bic.w	r3, r3, #2
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	6812      	ldr	r2, [r2, #0]
 800148c:	69b9      	ldr	r1, [r7, #24]
 800148e:	430b      	orrs	r3, r1
 8001490:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001498:	2b01      	cmp	r3, #1
 800149a:	d118      	bne.n	80014ce <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	691b      	ldr	r3, [r3, #16]
 80014a2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80014a6:	f023 0304 	bic.w	r3, r3, #4
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80014b2:	4311      	orrs	r1, r2
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80014b8:	4311      	orrs	r1, r2
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80014be:	430a      	orrs	r2, r1
 80014c0:	431a      	orrs	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f042 0201 	orr.w	r2, r2, #1
 80014ca:	611a      	str	r2, [r3, #16]
 80014cc:	e007      	b.n	80014de <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	691a      	ldr	r2, [r3, #16]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f022 0201 	bic.w	r2, r2, #1
 80014dc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d10c      	bne.n	8001500 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ec:	f023 010f 	bic.w	r1, r3, #15
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	69db      	ldr	r3, [r3, #28]
 80014f4:	1e5a      	subs	r2, r3, #1
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	631a      	str	r2, [r3, #48]	; 0x30
 80014fe:	e007      	b.n	8001510 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f022 020f 	bic.w	r2, r2, #15
 800150e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001514:	f023 0303 	bic.w	r3, r3, #3
 8001518:	f043 0201 	orr.w	r2, r3, #1
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	655a      	str	r2, [r3, #84]	; 0x54
 8001520:	e007      	b.n	8001532 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001526:	f043 0210 	orr.w	r2, r3, #16
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001532:	7ffb      	ldrb	r3, [r7, #31]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3724      	adds	r7, #36	; 0x24
 8001538:	46bd      	mov	sp, r7
 800153a:	bd90      	pop	{r4, r7, pc}
 800153c:	20000000 	.word	0x20000000
 8001540:	053e2d63 	.word	0x053e2d63
 8001544:	50040000 	.word	0x50040000
 8001548:	50040100 	.word	0x50040100
 800154c:	50040200 	.word	0x50040200
 8001550:	50040300 	.word	0x50040300
 8001554:	fff0c007 	.word	0xfff0c007

08001558 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001564:	4853      	ldr	r0, [pc, #332]	; (80016b4 <HAL_ADC_Start_DMA+0x15c>)
 8001566:	f7ff fde3 	bl	8001130 <LL_ADC_GetMultimode>
 800156a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fe74 	bl	800125e <LL_ADC_REG_IsConversionOngoing>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	f040 8093 	bne.w	80016a4 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001584:	2b01      	cmp	r3, #1
 8001586:	d101      	bne.n	800158c <HAL_ADC_Start_DMA+0x34>
 8001588:	2302      	movs	r3, #2
 800158a:	e08e      	b.n	80016aa <HAL_ADC_Start_DMA+0x152>
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a47      	ldr	r2, [pc, #284]	; (80016b8 <HAL_ADC_Start_DMA+0x160>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d008      	beq.n	80015b0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d005      	beq.n	80015b0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	2b05      	cmp	r3, #5
 80015a8:	d002      	beq.n	80015b0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	2b09      	cmp	r3, #9
 80015ae:	d172      	bne.n	8001696 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80015b0:	68f8      	ldr	r0, [r7, #12]
 80015b2:	f000 fc9b 	bl	8001eec <ADC_Enable>
 80015b6:	4603      	mov	r3, r0
 80015b8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80015ba:	7dfb      	ldrb	r3, [r7, #23]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d165      	bne.n	800168c <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015c4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80015c8:	f023 0301 	bic.w	r3, r3, #1
 80015cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a38      	ldr	r2, [pc, #224]	; (80016bc <HAL_ADC_Start_DMA+0x164>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d002      	beq.n	80015e4 <HAL_ADC_Start_DMA+0x8c>
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	e000      	b.n	80015e6 <HAL_ADC_Start_DMA+0x8e>
 80015e4:	4b36      	ldr	r3, [pc, #216]	; (80016c0 <HAL_ADC_Start_DMA+0x168>)
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	6812      	ldr	r2, [r2, #0]
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d002      	beq.n	80015f4 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d105      	bne.n	8001600 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015f8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001604:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d006      	beq.n	800161a <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001610:	f023 0206 	bic.w	r2, r3, #6
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	659a      	str	r2, [r3, #88]	; 0x58
 8001618:	e002      	b.n	8001620 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2200      	movs	r2, #0
 800161e:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001624:	4a27      	ldr	r2, [pc, #156]	; (80016c4 <HAL_ADC_Start_DMA+0x16c>)
 8001626:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162c:	4a26      	ldr	r2, [pc, #152]	; (80016c8 <HAL_ADC_Start_DMA+0x170>)
 800162e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001634:	4a25      	ldr	r2, [pc, #148]	; (80016cc <HAL_ADC_Start_DMA+0x174>)
 8001636:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	221c      	movs	r2, #28
 800163e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2200      	movs	r2, #0
 8001644:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	685a      	ldr	r2, [r3, #4]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f042 0210 	orr.w	r2, r2, #16
 8001656:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68da      	ldr	r2, [r3, #12]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f042 0201 	orr.w	r2, r2, #1
 8001666:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	3340      	adds	r3, #64	; 0x40
 8001672:	4619      	mov	r1, r3
 8001674:	68ba      	ldr	r2, [r7, #8]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f000 fff2 	bl	8002660 <HAL_DMA_Start_IT>
 800167c:	4603      	mov	r3, r0
 800167e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff fdd6 	bl	8001236 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800168a:	e00d      	b.n	80016a8 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2200      	movs	r2, #0
 8001690:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001694:	e008      	b.n	80016a8 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80016a2:	e001      	b.n	80016a8 <HAL_ADC_Start_DMA+0x150>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80016a4:	2302      	movs	r3, #2
 80016a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80016a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3718      	adds	r7, #24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	50040300 	.word	0x50040300
 80016b8:	50040200 	.word	0x50040200
 80016bc:	50040100 	.word	0x50040100
 80016c0:	50040000 	.word	0x50040000
 80016c4:	08001ff9 	.word	0x08001ff9
 80016c8:	080020d1 	.word	0x080020d1
 80016cc:	080020ed 	.word	0x080020ed

080016d0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b0b6      	sub	sp, #216	; 0xd8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001716:	2300      	movs	r3, #0
 8001718:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800171c:	2300      	movs	r3, #0
 800171e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001726:	2b01      	cmp	r3, #1
 8001728:	d101      	bne.n	800172e <HAL_ADC_ConfigChannel+0x22>
 800172a:	2302      	movs	r3, #2
 800172c:	e3c7      	b.n	8001ebe <HAL_ADC_ConfigChannel+0x7b2>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2201      	movs	r2, #1
 8001732:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff fd8f 	bl	800125e <LL_ADC_REG_IsConversionOngoing>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	f040 83a8 	bne.w	8001e98 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2b05      	cmp	r3, #5
 800174e:	d824      	bhi.n	800179a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	3b02      	subs	r3, #2
 8001756:	2b03      	cmp	r3, #3
 8001758:	d81b      	bhi.n	8001792 <HAL_ADC_ConfigChannel+0x86>
 800175a:	a201      	add	r2, pc, #4	; (adr r2, 8001760 <HAL_ADC_ConfigChannel+0x54>)
 800175c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001760:	08001771 	.word	0x08001771
 8001764:	08001779 	.word	0x08001779
 8001768:	08001781 	.word	0x08001781
 800176c:	08001789 	.word	0x08001789
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	220c      	movs	r2, #12
 8001774:	605a      	str	r2, [r3, #4]
          break;
 8001776:	e011      	b.n	800179c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	2212      	movs	r2, #18
 800177c:	605a      	str	r2, [r3, #4]
          break;
 800177e:	e00d      	b.n	800179c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	2218      	movs	r2, #24
 8001784:	605a      	str	r2, [r3, #4]
          break;
 8001786:	e009      	b.n	800179c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800178e:	605a      	str	r2, [r3, #4]
          break;
 8001790:	e004      	b.n	800179c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	2206      	movs	r2, #6
 8001796:	605a      	str	r2, [r3, #4]
          break;
 8001798:	e000      	b.n	800179c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800179a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6818      	ldr	r0, [r3, #0]
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	6859      	ldr	r1, [r3, #4]
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	461a      	mov	r2, r3
 80017aa:	f7ff fc45 	bl	8001038 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff fd53 	bl	800125e <LL_ADC_REG_IsConversionOngoing>
 80017b8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff fd5f 	bl	8001284 <LL_ADC_INJ_IsConversionOngoing>
 80017c6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f040 81a6 	bne.w	8001b20 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f040 81a1 	bne.w	8001b20 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6818      	ldr	r0, [r3, #0]
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	6819      	ldr	r1, [r3, #0]
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	461a      	mov	r2, r3
 80017ec:	f7ff fc50 	bl	8001090 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	695a      	ldr	r2, [r3, #20]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	08db      	lsrs	r3, r3, #3
 80017fc:	f003 0303 	and.w	r3, r3, #3
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	2b04      	cmp	r3, #4
 8001810:	d00a      	beq.n	8001828 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6818      	ldr	r0, [r3, #0]
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	6919      	ldr	r1, [r3, #16]
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001822:	f7ff fba1 	bl	8000f68 <LL_ADC_SetOffset>
 8001826:	e17b      	b.n	8001b20 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2100      	movs	r1, #0
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fbbe 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 8001834:	4603      	mov	r3, r0
 8001836:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800183a:	2b00      	cmp	r3, #0
 800183c:	d10a      	bne.n	8001854 <HAL_ADC_ConfigChannel+0x148>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2100      	movs	r1, #0
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fbb3 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 800184a:	4603      	mov	r3, r0
 800184c:	0e9b      	lsrs	r3, r3, #26
 800184e:	f003 021f 	and.w	r2, r3, #31
 8001852:	e01e      	b.n	8001892 <HAL_ADC_ConfigChannel+0x186>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2100      	movs	r1, #0
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff fba8 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 8001860:	4603      	mov	r3, r0
 8001862:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001866:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800186a:	fa93 f3a3 	rbit	r3, r3
 800186e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001872:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001876:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800187a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001882:	2320      	movs	r3, #32
 8001884:	e004      	b.n	8001890 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001886:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800188a:	fab3 f383 	clz	r3, r3
 800188e:	b2db      	uxtb	r3, r3
 8001890:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800189a:	2b00      	cmp	r3, #0
 800189c:	d105      	bne.n	80018aa <HAL_ADC_ConfigChannel+0x19e>
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	0e9b      	lsrs	r3, r3, #26
 80018a4:	f003 031f 	and.w	r3, r3, #31
 80018a8:	e018      	b.n	80018dc <HAL_ADC_ConfigChannel+0x1d0>
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80018b6:	fa93 f3a3 	rbit	r3, r3
 80018ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80018be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80018c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80018ce:	2320      	movs	r3, #32
 80018d0:	e004      	b.n	80018dc <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80018d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80018d6:	fab3 f383 	clz	r3, r3
 80018da:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80018dc:	429a      	cmp	r2, r3
 80018de:	d106      	bne.n	80018ee <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2200      	movs	r2, #0
 80018e6:	2100      	movs	r1, #0
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff fb77 	bl	8000fdc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2101      	movs	r1, #1
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff fb5b 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 80018fa:	4603      	mov	r3, r0
 80018fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001900:	2b00      	cmp	r3, #0
 8001902:	d10a      	bne.n	800191a <HAL_ADC_ConfigChannel+0x20e>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2101      	movs	r1, #1
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff fb50 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 8001910:	4603      	mov	r3, r0
 8001912:	0e9b      	lsrs	r3, r3, #26
 8001914:	f003 021f 	and.w	r2, r3, #31
 8001918:	e01e      	b.n	8001958 <HAL_ADC_ConfigChannel+0x24c>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2101      	movs	r1, #1
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff fb45 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 8001926:	4603      	mov	r3, r0
 8001928:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001930:	fa93 f3a3 	rbit	r3, r3
 8001934:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001938:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800193c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001940:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001944:	2b00      	cmp	r3, #0
 8001946:	d101      	bne.n	800194c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001948:	2320      	movs	r3, #32
 800194a:	e004      	b.n	8001956 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800194c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001950:	fab3 f383 	clz	r3, r3
 8001954:	b2db      	uxtb	r3, r3
 8001956:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001960:	2b00      	cmp	r3, #0
 8001962:	d105      	bne.n	8001970 <HAL_ADC_ConfigChannel+0x264>
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	0e9b      	lsrs	r3, r3, #26
 800196a:	f003 031f 	and.w	r3, r3, #31
 800196e:	e018      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x296>
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001978:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800197c:	fa93 f3a3 	rbit	r3, r3
 8001980:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001984:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001988:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800198c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001994:	2320      	movs	r3, #32
 8001996:	e004      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001998:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800199c:	fab3 f383 	clz	r3, r3
 80019a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d106      	bne.n	80019b4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2200      	movs	r2, #0
 80019ac:	2101      	movs	r1, #1
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff fb14 	bl	8000fdc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2102      	movs	r1, #2
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff faf8 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 80019c0:	4603      	mov	r3, r0
 80019c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d10a      	bne.n	80019e0 <HAL_ADC_ConfigChannel+0x2d4>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2102      	movs	r1, #2
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff faed 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 80019d6:	4603      	mov	r3, r0
 80019d8:	0e9b      	lsrs	r3, r3, #26
 80019da:	f003 021f 	and.w	r2, r3, #31
 80019de:	e01e      	b.n	8001a1e <HAL_ADC_ConfigChannel+0x312>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2102      	movs	r1, #2
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fae2 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 80019ec:	4603      	mov	r3, r0
 80019ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019f6:	fa93 f3a3 	rbit	r3, r3
 80019fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80019fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001a06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001a0e:	2320      	movs	r3, #32
 8001a10:	e004      	b.n	8001a1c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001a12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a16:	fab3 f383 	clz	r3, r3
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d105      	bne.n	8001a36 <HAL_ADC_ConfigChannel+0x32a>
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	0e9b      	lsrs	r3, r3, #26
 8001a30:	f003 031f 	and.w	r3, r3, #31
 8001a34:	e016      	b.n	8001a64 <HAL_ADC_ConfigChannel+0x358>
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a42:	fa93 f3a3 	rbit	r3, r3
 8001a46:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001a48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001a4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001a56:	2320      	movs	r3, #32
 8001a58:	e004      	b.n	8001a64 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001a5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a5e:	fab3 f383 	clz	r3, r3
 8001a62:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d106      	bne.n	8001a76 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	2102      	movs	r1, #2
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff fab3 	bl	8000fdc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2103      	movs	r1, #3
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fa97 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 8001a82:	4603      	mov	r3, r0
 8001a84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d10a      	bne.n	8001aa2 <HAL_ADC_ConfigChannel+0x396>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2103      	movs	r1, #3
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fa8c 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	0e9b      	lsrs	r3, r3, #26
 8001a9c:	f003 021f 	and.w	r2, r3, #31
 8001aa0:	e017      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x3c6>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2103      	movs	r1, #3
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff fa81 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ab4:	fa93 f3a3 	rbit	r3, r3
 8001ab8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001aba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001abc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001abe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001ac4:	2320      	movs	r3, #32
 8001ac6:	e003      	b.n	8001ad0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001ac8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001aca:	fab3 f383 	clz	r3, r3
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d105      	bne.n	8001aea <HAL_ADC_ConfigChannel+0x3de>
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	0e9b      	lsrs	r3, r3, #26
 8001ae4:	f003 031f 	and.w	r3, r3, #31
 8001ae8:	e011      	b.n	8001b0e <HAL_ADC_ConfigChannel+0x402>
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001af2:	fa93 f3a3 	rbit	r3, r3
 8001af6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001af8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001afa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001b02:	2320      	movs	r3, #32
 8001b04:	e003      	b.n	8001b0e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b08:	fab3 f383 	clz	r3, r3
 8001b0c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d106      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2200      	movs	r2, #0
 8001b18:	2103      	movs	r1, #3
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff fa5e 	bl	8000fdc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff fb73 	bl	8001210 <LL_ADC_IsEnabled>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f040 813f 	bne.w	8001db0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6818      	ldr	r0, [r3, #0]
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	6819      	ldr	r1, [r3, #0]
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	f7ff fad2 	bl	80010e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	4a8e      	ldr	r2, [pc, #568]	; (8001d84 <HAL_ADC_ConfigChannel+0x678>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	f040 8130 	bne.w	8001db0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d10b      	bne.n	8001b78 <HAL_ADC_ConfigChannel+0x46c>
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	0e9b      	lsrs	r3, r3, #26
 8001b66:	3301      	adds	r3, #1
 8001b68:	f003 031f 	and.w	r3, r3, #31
 8001b6c:	2b09      	cmp	r3, #9
 8001b6e:	bf94      	ite	ls
 8001b70:	2301      	movls	r3, #1
 8001b72:	2300      	movhi	r3, #0
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	e019      	b.n	8001bac <HAL_ADC_ConfigChannel+0x4a0>
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b80:	fa93 f3a3 	rbit	r3, r3
 8001b84:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001b86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b88:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001b8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d101      	bne.n	8001b94 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001b90:	2320      	movs	r3, #32
 8001b92:	e003      	b.n	8001b9c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001b94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b96:	fab3 f383 	clz	r3, r3
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	f003 031f 	and.w	r3, r3, #31
 8001ba2:	2b09      	cmp	r3, #9
 8001ba4:	bf94      	ite	ls
 8001ba6:	2301      	movls	r3, #1
 8001ba8:	2300      	movhi	r3, #0
 8001baa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d079      	beq.n	8001ca4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d107      	bne.n	8001bcc <HAL_ADC_ConfigChannel+0x4c0>
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	0e9b      	lsrs	r3, r3, #26
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	069b      	lsls	r3, r3, #26
 8001bc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bca:	e015      	b.n	8001bf8 <HAL_ADC_ConfigChannel+0x4ec>
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bd4:	fa93 f3a3 	rbit	r3, r3
 8001bd8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bdc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001bde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d101      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001be4:	2320      	movs	r3, #32
 8001be6:	e003      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001be8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bea:	fab3 f383 	clz	r3, r3
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	069b      	lsls	r3, r3, #26
 8001bf4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d109      	bne.n	8001c18 <HAL_ADC_ConfigChannel+0x50c>
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	0e9b      	lsrs	r3, r3, #26
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	f003 031f 	and.w	r3, r3, #31
 8001c10:	2101      	movs	r1, #1
 8001c12:	fa01 f303 	lsl.w	r3, r1, r3
 8001c16:	e017      	b.n	8001c48 <HAL_ADC_ConfigChannel+0x53c>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c20:	fa93 f3a3 	rbit	r3, r3
 8001c24:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001c26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c28:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001c2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d101      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001c30:	2320      	movs	r3, #32
 8001c32:	e003      	b.n	8001c3c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001c34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c36:	fab3 f383 	clz	r3, r3
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	f003 031f 	and.w	r3, r3, #31
 8001c42:	2101      	movs	r1, #1
 8001c44:	fa01 f303 	lsl.w	r3, r1, r3
 8001c48:	ea42 0103 	orr.w	r1, r2, r3
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d10a      	bne.n	8001c6e <HAL_ADC_ConfigChannel+0x562>
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	0e9b      	lsrs	r3, r3, #26
 8001c5e:	3301      	adds	r3, #1
 8001c60:	f003 021f 	and.w	r2, r3, #31
 8001c64:	4613      	mov	r3, r2
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	4413      	add	r3, r2
 8001c6a:	051b      	lsls	r3, r3, #20
 8001c6c:	e018      	b.n	8001ca0 <HAL_ADC_ConfigChannel+0x594>
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c76:	fa93 f3a3 	rbit	r3, r3
 8001c7a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001c86:	2320      	movs	r3, #32
 8001c88:	e003      	b.n	8001c92 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c8c:	fab3 f383 	clz	r3, r3
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	3301      	adds	r3, #1
 8001c94:	f003 021f 	and.w	r2, r3, #31
 8001c98:	4613      	mov	r3, r2
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	4413      	add	r3, r2
 8001c9e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ca0:	430b      	orrs	r3, r1
 8001ca2:	e080      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d107      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x5b4>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	0e9b      	lsrs	r3, r3, #26
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	069b      	lsls	r3, r3, #26
 8001cba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cbe:	e015      	b.n	8001cec <HAL_ADC_ConfigChannel+0x5e0>
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc8:	fa93 f3a3 	rbit	r3, r3
 8001ccc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001cd8:	2320      	movs	r3, #32
 8001cda:	e003      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cde:	fab3 f383 	clz	r3, r3
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	069b      	lsls	r3, r3, #26
 8001ce8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d109      	bne.n	8001d0c <HAL_ADC_ConfigChannel+0x600>
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	0e9b      	lsrs	r3, r3, #26
 8001cfe:	3301      	adds	r3, #1
 8001d00:	f003 031f 	and.w	r3, r3, #31
 8001d04:	2101      	movs	r1, #1
 8001d06:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0a:	e017      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x630>
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d12:	6a3b      	ldr	r3, [r7, #32]
 8001d14:	fa93 f3a3 	rbit	r3, r3
 8001d18:	61fb      	str	r3, [r7, #28]
  return result;
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001d24:	2320      	movs	r3, #32
 8001d26:	e003      	b.n	8001d30 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	fab3 f383 	clz	r3, r3
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	3301      	adds	r3, #1
 8001d32:	f003 031f 	and.w	r3, r3, #31
 8001d36:	2101      	movs	r1, #1
 8001d38:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3c:	ea42 0103 	orr.w	r1, r2, r3
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d10d      	bne.n	8001d68 <HAL_ADC_ConfigChannel+0x65c>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	0e9b      	lsrs	r3, r3, #26
 8001d52:	3301      	adds	r3, #1
 8001d54:	f003 021f 	and.w	r2, r3, #31
 8001d58:	4613      	mov	r3, r2
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	4413      	add	r3, r2
 8001d5e:	3b1e      	subs	r3, #30
 8001d60:	051b      	lsls	r3, r3, #20
 8001d62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d66:	e01d      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x698>
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	fa93 f3a3 	rbit	r3, r3
 8001d74:	613b      	str	r3, [r7, #16]
  return result;
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d103      	bne.n	8001d88 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001d80:	2320      	movs	r3, #32
 8001d82:	e005      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x684>
 8001d84:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	fab3 f383 	clz	r3, r3
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	3301      	adds	r3, #1
 8001d92:	f003 021f 	and.w	r2, r3, #31
 8001d96:	4613      	mov	r3, r2
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	4413      	add	r3, r2
 8001d9c:	3b1e      	subs	r3, #30
 8001d9e:	051b      	lsls	r3, r3, #20
 8001da0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001da4:	430b      	orrs	r3, r1
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	6892      	ldr	r2, [r2, #8]
 8001daa:	4619      	mov	r1, r3
 8001dac:	f7ff f970 	bl	8001090 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	4b44      	ldr	r3, [pc, #272]	; (8001ec8 <HAL_ADC_ConfigChannel+0x7bc>)
 8001db6:	4013      	ands	r3, r2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d07a      	beq.n	8001eb2 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001dbc:	4843      	ldr	r0, [pc, #268]	; (8001ecc <HAL_ADC_ConfigChannel+0x7c0>)
 8001dbe:	f7ff f8c5 	bl	8000f4c <LL_ADC_GetCommonPathInternalCh>
 8001dc2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a41      	ldr	r2, [pc, #260]	; (8001ed0 <HAL_ADC_ConfigChannel+0x7c4>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d12c      	bne.n	8001e2a <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001dd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001dd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d126      	bne.n	8001e2a <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a3c      	ldr	r2, [pc, #240]	; (8001ed4 <HAL_ADC_ConfigChannel+0x7c8>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d004      	beq.n	8001df0 <HAL_ADC_ConfigChannel+0x6e4>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a3b      	ldr	r2, [pc, #236]	; (8001ed8 <HAL_ADC_ConfigChannel+0x7cc>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d15d      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001df0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001df4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4834      	ldr	r0, [pc, #208]	; (8001ecc <HAL_ADC_ConfigChannel+0x7c0>)
 8001dfc:	f7ff f893 	bl	8000f26 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e00:	4b36      	ldr	r3, [pc, #216]	; (8001edc <HAL_ADC_ConfigChannel+0x7d0>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	099b      	lsrs	r3, r3, #6
 8001e06:	4a36      	ldr	r2, [pc, #216]	; (8001ee0 <HAL_ADC_ConfigChannel+0x7d4>)
 8001e08:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0c:	099b      	lsrs	r3, r3, #6
 8001e0e:	1c5a      	adds	r2, r3, #1
 8001e10:	4613      	mov	r3, r2
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	4413      	add	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e1a:	e002      	b.n	8001e22 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1f9      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e28:	e040      	b.n	8001eac <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a2d      	ldr	r2, [pc, #180]	; (8001ee4 <HAL_ADC_ConfigChannel+0x7d8>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d118      	bne.n	8001e66 <HAL_ADC_ConfigChannel+0x75a>
 8001e34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d112      	bne.n	8001e66 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a23      	ldr	r2, [pc, #140]	; (8001ed4 <HAL_ADC_ConfigChannel+0x7c8>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d004      	beq.n	8001e54 <HAL_ADC_ConfigChannel+0x748>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a22      	ldr	r2, [pc, #136]	; (8001ed8 <HAL_ADC_ConfigChannel+0x7cc>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d12d      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	481b      	ldr	r0, [pc, #108]	; (8001ecc <HAL_ADC_ConfigChannel+0x7c0>)
 8001e60:	f7ff f861 	bl	8000f26 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e64:	e024      	b.n	8001eb0 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a1f      	ldr	r2, [pc, #124]	; (8001ee8 <HAL_ADC_ConfigChannel+0x7dc>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d120      	bne.n	8001eb2 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d11a      	bne.n	8001eb2 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a14      	ldr	r2, [pc, #80]	; (8001ed4 <HAL_ADC_ConfigChannel+0x7c8>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d115      	bne.n	8001eb2 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e8e:	4619      	mov	r1, r3
 8001e90:	480e      	ldr	r0, [pc, #56]	; (8001ecc <HAL_ADC_ConfigChannel+0x7c0>)
 8001e92:	f7ff f848 	bl	8000f26 <LL_ADC_SetCommonPathInternalCh>
 8001e96:	e00c      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9c:	f043 0220 	orr.w	r2, r3, #32
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001eaa:	e002      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001eac:	bf00      	nop
 8001eae:	e000      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001eb0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001eba:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	37d8      	adds	r7, #216	; 0xd8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	80080000 	.word	0x80080000
 8001ecc:	50040300 	.word	0x50040300
 8001ed0:	c7520000 	.word	0xc7520000
 8001ed4:	50040000 	.word	0x50040000
 8001ed8:	50040200 	.word	0x50040200
 8001edc:	20000000 	.word	0x20000000
 8001ee0:	053e2d63 	.word	0x053e2d63
 8001ee4:	cb840000 	.word	0xcb840000
 8001ee8:	80000001 	.word	0x80000001

08001eec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff f987 	bl	8001210 <LL_ADC_IsEnabled>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d169      	bne.n	8001fdc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	4b36      	ldr	r3, [pc, #216]	; (8001fe8 <ADC_Enable+0xfc>)
 8001f10:	4013      	ands	r3, r2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00d      	beq.n	8001f32 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f1a:	f043 0210 	orr.w	r2, r3, #16
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f26:	f043 0201 	orr.w	r2, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e055      	b.n	8001fde <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff f956 	bl	80011e8 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001f3c:	482b      	ldr	r0, [pc, #172]	; (8001fec <ADC_Enable+0x100>)
 8001f3e:	f7ff f805 	bl	8000f4c <LL_ADC_GetCommonPathInternalCh>
 8001f42:	4603      	mov	r3, r0
 8001f44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d013      	beq.n	8001f74 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f4c:	4b28      	ldr	r3, [pc, #160]	; (8001ff0 <ADC_Enable+0x104>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	099b      	lsrs	r3, r3, #6
 8001f52:	4a28      	ldr	r2, [pc, #160]	; (8001ff4 <ADC_Enable+0x108>)
 8001f54:	fba2 2303 	umull	r2, r3, r2, r3
 8001f58:	099b      	lsrs	r3, r3, #6
 8001f5a:	1c5a      	adds	r2, r3, #1
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	4413      	add	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001f66:	e002      	b.n	8001f6e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1f9      	bne.n	8001f68 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001f74:	f7fe ffb8 	bl	8000ee8 <HAL_GetTick>
 8001f78:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f7a:	e028      	b.n	8001fce <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff f945 	bl	8001210 <LL_ADC_IsEnabled>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d104      	bne.n	8001f96 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff f929 	bl	80011e8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f96:	f7fe ffa7 	bl	8000ee8 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d914      	bls.n	8001fce <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d00d      	beq.n	8001fce <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb6:	f043 0210 	orr.w	r2, r3, #16
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc2:	f043 0201 	orr.w	r2, r3, #1
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e007      	b.n	8001fde <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d1cf      	bne.n	8001f7c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	8000003f 	.word	0x8000003f
 8001fec:	50040300 	.word	0x50040300
 8001ff0:	20000000 	.word	0x20000000
 8001ff4:	053e2d63 	.word	0x053e2d63

08001ff8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002004:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800200e:	2b00      	cmp	r3, #0
 8002010:	d14b      	bne.n	80020aa <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002016:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	2b00      	cmp	r3, #0
 800202a:	d021      	beq.n	8002070 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f7fe ffee 	bl	8001012 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d032      	beq.n	80020a2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d12b      	bne.n	80020a2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800205a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d11f      	bne.n	80020a2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002066:	f043 0201 	orr.w	r2, r3, #1
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	655a      	str	r2, [r3, #84]	; 0x54
 800206e:	e018      	b.n	80020a2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d111      	bne.n	80020a2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002082:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800208e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d105      	bne.n	80020a2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800209a:	f043 0201 	orr.w	r2, r3, #1
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f7ff fb14 	bl	80016d0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80020a8:	e00e      	b.n	80020c8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ae:	f003 0310 	and.w	r3, r3, #16
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f7ff fb1e 	bl	80016f8 <HAL_ADC_ErrorCallback>
}
 80020bc:	e004      	b.n	80020c8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	4798      	blx	r3
}
 80020c8:	bf00      	nop
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020dc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f7ff fb00 	bl	80016e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020e4:	bf00      	nop
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210a:	f043 0204 	orr.w	r2, r3, #4
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f7ff faf0 	bl	80016f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002118:	bf00      	nop
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <LL_ADC_IsEnabled>:
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	2b01      	cmp	r3, #1
 8002132:	d101      	bne.n	8002138 <LL_ADC_IsEnabled+0x18>
 8002134:	2301      	movs	r3, #1
 8002136:	e000      	b.n	800213a <LL_ADC_IsEnabled+0x1a>
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <LL_ADC_REG_IsConversionOngoing>:
{
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 0304 	and.w	r3, r3, #4
 8002156:	2b04      	cmp	r3, #4
 8002158:	d101      	bne.n	800215e <LL_ADC_REG_IsConversionOngoing+0x18>
 800215a:	2301      	movs	r3, #1
 800215c:	e000      	b.n	8002160 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800216c:	b590      	push	{r4, r7, lr}
 800216e:	b09f      	sub	sp, #124	; 0x7c
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002176:	2300      	movs	r3, #0
 8002178:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002182:	2b01      	cmp	r3, #1
 8002184:	d101      	bne.n	800218a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002186:	2302      	movs	r3, #2
 8002188:	e093      	b.n	80022b2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002192:	2300      	movs	r3, #0
 8002194:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002196:	2300      	movs	r3, #0
 8002198:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a47      	ldr	r2, [pc, #284]	; (80022bc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d102      	bne.n	80021aa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80021a4:	4b46      	ldr	r3, [pc, #280]	; (80022c0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80021a6:	60bb      	str	r3, [r7, #8]
 80021a8:	e001      	b.n	80021ae <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80021aa:	2300      	movs	r3, #0
 80021ac:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10b      	bne.n	80021cc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b8:	f043 0220 	orr.w	r2, r3, #32
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e072      	b.n	80022b2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff ffb9 	bl	8002146 <LL_ADC_REG_IsConversionOngoing>
 80021d4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff ffb3 	bl	8002146 <LL_ADC_REG_IsConversionOngoing>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d154      	bne.n	8002290 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80021e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d151      	bne.n	8002290 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80021ec:	4b35      	ldr	r3, [pc, #212]	; (80022c4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80021ee:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d02c      	beq.n	8002252 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80021f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	6859      	ldr	r1, [r3, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800220a:	035b      	lsls	r3, r3, #13
 800220c:	430b      	orrs	r3, r1
 800220e:	431a      	orrs	r2, r3
 8002210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002212:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002214:	4829      	ldr	r0, [pc, #164]	; (80022bc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002216:	f7ff ff83 	bl	8002120 <LL_ADC_IsEnabled>
 800221a:	4604      	mov	r4, r0
 800221c:	4828      	ldr	r0, [pc, #160]	; (80022c0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800221e:	f7ff ff7f 	bl	8002120 <LL_ADC_IsEnabled>
 8002222:	4603      	mov	r3, r0
 8002224:	431c      	orrs	r4, r3
 8002226:	4828      	ldr	r0, [pc, #160]	; (80022c8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002228:	f7ff ff7a 	bl	8002120 <LL_ADC_IsEnabled>
 800222c:	4603      	mov	r3, r0
 800222e:	4323      	orrs	r3, r4
 8002230:	2b00      	cmp	r3, #0
 8002232:	d137      	bne.n	80022a4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800223c:	f023 030f 	bic.w	r3, r3, #15
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	6811      	ldr	r1, [r2, #0]
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	6892      	ldr	r2, [r2, #8]
 8002248:	430a      	orrs	r2, r1
 800224a:	431a      	orrs	r2, r3
 800224c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800224e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002250:	e028      	b.n	80022a4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800225a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800225c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800225e:	4817      	ldr	r0, [pc, #92]	; (80022bc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002260:	f7ff ff5e 	bl	8002120 <LL_ADC_IsEnabled>
 8002264:	4604      	mov	r4, r0
 8002266:	4816      	ldr	r0, [pc, #88]	; (80022c0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002268:	f7ff ff5a 	bl	8002120 <LL_ADC_IsEnabled>
 800226c:	4603      	mov	r3, r0
 800226e:	431c      	orrs	r4, r3
 8002270:	4815      	ldr	r0, [pc, #84]	; (80022c8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002272:	f7ff ff55 	bl	8002120 <LL_ADC_IsEnabled>
 8002276:	4603      	mov	r3, r0
 8002278:	4323      	orrs	r3, r4
 800227a:	2b00      	cmp	r3, #0
 800227c:	d112      	bne.n	80022a4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800227e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002286:	f023 030f 	bic.w	r3, r3, #15
 800228a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800228c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800228e:	e009      	b.n	80022a4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002294:	f043 0220 	orr.w	r2, r3, #32
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80022a2:	e000      	b.n	80022a6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80022a4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80022ae:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	377c      	adds	r7, #124	; 0x7c
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd90      	pop	{r4, r7, pc}
 80022ba:	bf00      	nop
 80022bc:	50040000 	.word	0x50040000
 80022c0:	50040100 	.word	0x50040100
 80022c4:	50040300 	.word	0x50040300
 80022c8:	50040200 	.word	0x50040200

080022cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022dc:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <__NVIC_SetPriorityGrouping+0x44>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022e8:	4013      	ands	r3, r2
 80022ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022fe:	4a04      	ldr	r2, [pc, #16]	; (8002310 <__NVIC_SetPriorityGrouping+0x44>)
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	60d3      	str	r3, [r2, #12]
}
 8002304:	bf00      	nop
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002318:	4b04      	ldr	r3, [pc, #16]	; (800232c <__NVIC_GetPriorityGrouping+0x18>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	0a1b      	lsrs	r3, r3, #8
 800231e:	f003 0307 	and.w	r3, r3, #7
}
 8002322:	4618      	mov	r0, r3
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	e000ed00 	.word	0xe000ed00

08002330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800233a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233e:	2b00      	cmp	r3, #0
 8002340:	db0b      	blt.n	800235a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	f003 021f 	and.w	r2, r3, #31
 8002348:	4907      	ldr	r1, [pc, #28]	; (8002368 <__NVIC_EnableIRQ+0x38>)
 800234a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234e:	095b      	lsrs	r3, r3, #5
 8002350:	2001      	movs	r0, #1
 8002352:	fa00 f202 	lsl.w	r2, r0, r2
 8002356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	e000e100 	.word	0xe000e100

0800236c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	6039      	str	r1, [r7, #0]
 8002376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237c:	2b00      	cmp	r3, #0
 800237e:	db0a      	blt.n	8002396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	b2da      	uxtb	r2, r3
 8002384:	490c      	ldr	r1, [pc, #48]	; (80023b8 <__NVIC_SetPriority+0x4c>)
 8002386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238a:	0112      	lsls	r2, r2, #4
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	440b      	add	r3, r1
 8002390:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002394:	e00a      	b.n	80023ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	b2da      	uxtb	r2, r3
 800239a:	4908      	ldr	r1, [pc, #32]	; (80023bc <__NVIC_SetPriority+0x50>)
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	3b04      	subs	r3, #4
 80023a4:	0112      	lsls	r2, r2, #4
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	440b      	add	r3, r1
 80023aa:	761a      	strb	r2, [r3, #24]
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	e000e100 	.word	0xe000e100
 80023bc:	e000ed00 	.word	0xe000ed00

080023c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b089      	sub	sp, #36	; 0x24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f1c3 0307 	rsb	r3, r3, #7
 80023da:	2b04      	cmp	r3, #4
 80023dc:	bf28      	it	cs
 80023de:	2304      	movcs	r3, #4
 80023e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	3304      	adds	r3, #4
 80023e6:	2b06      	cmp	r3, #6
 80023e8:	d902      	bls.n	80023f0 <NVIC_EncodePriority+0x30>
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	3b03      	subs	r3, #3
 80023ee:	e000      	b.n	80023f2 <NVIC_EncodePriority+0x32>
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f4:	f04f 32ff 	mov.w	r2, #4294967295
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	43da      	mvns	r2, r3
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	401a      	ands	r2, r3
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002408:	f04f 31ff 	mov.w	r1, #4294967295
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	fa01 f303 	lsl.w	r3, r1, r3
 8002412:	43d9      	mvns	r1, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002418:	4313      	orrs	r3, r2
         );
}
 800241a:	4618      	mov	r0, r3
 800241c:	3724      	adds	r7, #36	; 0x24
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
	...

08002428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3b01      	subs	r3, #1
 8002434:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002438:	d301      	bcc.n	800243e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800243a:	2301      	movs	r3, #1
 800243c:	e00f      	b.n	800245e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800243e:	4a0a      	ldr	r2, [pc, #40]	; (8002468 <SysTick_Config+0x40>)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3b01      	subs	r3, #1
 8002444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002446:	210f      	movs	r1, #15
 8002448:	f04f 30ff 	mov.w	r0, #4294967295
 800244c:	f7ff ff8e 	bl	800236c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002450:	4b05      	ldr	r3, [pc, #20]	; (8002468 <SysTick_Config+0x40>)
 8002452:	2200      	movs	r2, #0
 8002454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002456:	4b04      	ldr	r3, [pc, #16]	; (8002468 <SysTick_Config+0x40>)
 8002458:	2207      	movs	r2, #7
 800245a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	e000e010 	.word	0xe000e010

0800246c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7ff ff29 	bl	80022cc <__NVIC_SetPriorityGrouping>
}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b086      	sub	sp, #24
 8002486:	af00      	add	r7, sp, #0
 8002488:	4603      	mov	r3, r0
 800248a:	60b9      	str	r1, [r7, #8]
 800248c:	607a      	str	r2, [r7, #4]
 800248e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002494:	f7ff ff3e 	bl	8002314 <__NVIC_GetPriorityGrouping>
 8002498:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	68b9      	ldr	r1, [r7, #8]
 800249e:	6978      	ldr	r0, [r7, #20]
 80024a0:	f7ff ff8e 	bl	80023c0 <NVIC_EncodePriority>
 80024a4:	4602      	mov	r2, r0
 80024a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024aa:	4611      	mov	r1, r2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff ff5d 	bl	800236c <__NVIC_SetPriority>
}
 80024b2:	bf00      	nop
 80024b4:	3718      	adds	r7, #24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b082      	sub	sp, #8
 80024be:	af00      	add	r7, sp, #0
 80024c0:	4603      	mov	r3, r0
 80024c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff ff31 	bl	8002330 <__NVIC_EnableIRQ>
}
 80024ce:	bf00      	nop
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b082      	sub	sp, #8
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7ff ffa2 	bl	8002428 <SysTick_Config>
 80024e4:	4603      	mov	r3, r0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e098      	b.n	8002634 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	461a      	mov	r2, r3
 8002508:	4b4d      	ldr	r3, [pc, #308]	; (8002640 <HAL_DMA_Init+0x150>)
 800250a:	429a      	cmp	r2, r3
 800250c:	d80f      	bhi.n	800252e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	4b4b      	ldr	r3, [pc, #300]	; (8002644 <HAL_DMA_Init+0x154>)
 8002516:	4413      	add	r3, r2
 8002518:	4a4b      	ldr	r2, [pc, #300]	; (8002648 <HAL_DMA_Init+0x158>)
 800251a:	fba2 2303 	umull	r2, r3, r2, r3
 800251e:	091b      	lsrs	r3, r3, #4
 8002520:	009a      	lsls	r2, r3, #2
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a48      	ldr	r2, [pc, #288]	; (800264c <HAL_DMA_Init+0x15c>)
 800252a:	641a      	str	r2, [r3, #64]	; 0x40
 800252c:	e00e      	b.n	800254c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	461a      	mov	r2, r3
 8002534:	4b46      	ldr	r3, [pc, #280]	; (8002650 <HAL_DMA_Init+0x160>)
 8002536:	4413      	add	r3, r2
 8002538:	4a43      	ldr	r2, [pc, #268]	; (8002648 <HAL_DMA_Init+0x158>)
 800253a:	fba2 2303 	umull	r2, r3, r2, r3
 800253e:	091b      	lsrs	r3, r3, #4
 8002540:	009a      	lsls	r2, r3, #2
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a42      	ldr	r2, [pc, #264]	; (8002654 <HAL_DMA_Init+0x164>)
 800254a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2202      	movs	r2, #2
 8002550:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002566:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002570:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800257c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002588:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	4313      	orrs	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025a6:	d039      	beq.n	800261c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ac:	4a27      	ldr	r2, [pc, #156]	; (800264c <HAL_DMA_Init+0x15c>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d11a      	bne.n	80025e8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80025b2:	4b29      	ldr	r3, [pc, #164]	; (8002658 <HAL_DMA_Init+0x168>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ba:	f003 031c 	and.w	r3, r3, #28
 80025be:	210f      	movs	r1, #15
 80025c0:	fa01 f303 	lsl.w	r3, r1, r3
 80025c4:	43db      	mvns	r3, r3
 80025c6:	4924      	ldr	r1, [pc, #144]	; (8002658 <HAL_DMA_Init+0x168>)
 80025c8:	4013      	ands	r3, r2
 80025ca:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80025cc:	4b22      	ldr	r3, [pc, #136]	; (8002658 <HAL_DMA_Init+0x168>)
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6859      	ldr	r1, [r3, #4]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d8:	f003 031c 	and.w	r3, r3, #28
 80025dc:	fa01 f303 	lsl.w	r3, r1, r3
 80025e0:	491d      	ldr	r1, [pc, #116]	; (8002658 <HAL_DMA_Init+0x168>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	600b      	str	r3, [r1, #0]
 80025e6:	e019      	b.n	800261c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80025e8:	4b1c      	ldr	r3, [pc, #112]	; (800265c <HAL_DMA_Init+0x16c>)
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f0:	f003 031c 	and.w	r3, r3, #28
 80025f4:	210f      	movs	r1, #15
 80025f6:	fa01 f303 	lsl.w	r3, r1, r3
 80025fa:	43db      	mvns	r3, r3
 80025fc:	4917      	ldr	r1, [pc, #92]	; (800265c <HAL_DMA_Init+0x16c>)
 80025fe:	4013      	ands	r3, r2
 8002600:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002602:	4b16      	ldr	r3, [pc, #88]	; (800265c <HAL_DMA_Init+0x16c>)
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6859      	ldr	r1, [r3, #4]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260e:	f003 031c 	and.w	r3, r3, #28
 8002612:	fa01 f303 	lsl.w	r3, r1, r3
 8002616:	4911      	ldr	r1, [pc, #68]	; (800265c <HAL_DMA_Init+0x16c>)
 8002618:	4313      	orrs	r3, r2
 800261a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	40020407 	.word	0x40020407
 8002644:	bffdfff8 	.word	0xbffdfff8
 8002648:	cccccccd 	.word	0xcccccccd
 800264c:	40020000 	.word	0x40020000
 8002650:	bffdfbf8 	.word	0xbffdfbf8
 8002654:	40020400 	.word	0x40020400
 8002658:	400200a8 	.word	0x400200a8
 800265c:	400204a8 	.word	0x400204a8

08002660 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
 800266c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800266e:	2300      	movs	r3, #0
 8002670:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002678:	2b01      	cmp	r3, #1
 800267a:	d101      	bne.n	8002680 <HAL_DMA_Start_IT+0x20>
 800267c:	2302      	movs	r3, #2
 800267e:	e04b      	b.n	8002718 <HAL_DMA_Start_IT+0xb8>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b01      	cmp	r3, #1
 8002692:	d13a      	bne.n	800270a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2202      	movs	r2, #2
 8002698:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 0201 	bic.w	r2, r2, #1
 80026b0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	68b9      	ldr	r1, [r7, #8]
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f000 f8e0 	bl	800287e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d008      	beq.n	80026d8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f042 020e 	orr.w	r2, r2, #14
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	e00f      	b.n	80026f8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 0204 	bic.w	r2, r2, #4
 80026e6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f042 020a 	orr.w	r2, r2, #10
 80026f6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f042 0201 	orr.w	r2, r2, #1
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	e005      	b.n	8002716 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002712:	2302      	movs	r3, #2
 8002714:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002716:	7dfb      	ldrb	r3, [r7, #23]
}
 8002718:	4618      	mov	r0, r3
 800271a:	3718      	adds	r7, #24
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273c:	f003 031c 	and.w	r3, r3, #28
 8002740:	2204      	movs	r2, #4
 8002742:	409a      	lsls	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	4013      	ands	r3, r2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d026      	beq.n	800279a <HAL_DMA_IRQHandler+0x7a>
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	f003 0304 	and.w	r3, r3, #4
 8002752:	2b00      	cmp	r3, #0
 8002754:	d021      	beq.n	800279a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0320 	and.w	r3, r3, #32
 8002760:	2b00      	cmp	r3, #0
 8002762:	d107      	bne.n	8002774 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0204 	bic.w	r2, r2, #4
 8002772:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002778:	f003 021c 	and.w	r2, r3, #28
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	2104      	movs	r1, #4
 8002782:	fa01 f202 	lsl.w	r2, r1, r2
 8002786:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278c:	2b00      	cmp	r3, #0
 800278e:	d071      	beq.n	8002874 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002798:	e06c      	b.n	8002874 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279e:	f003 031c 	and.w	r3, r3, #28
 80027a2:	2202      	movs	r2, #2
 80027a4:	409a      	lsls	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	4013      	ands	r3, r2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d02e      	beq.n	800280c <HAL_DMA_IRQHandler+0xec>
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d029      	beq.n	800280c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0320 	and.w	r3, r3, #32
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10b      	bne.n	80027de <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 020a 	bic.w	r2, r2, #10
 80027d4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e2:	f003 021c 	and.w	r2, r3, #28
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	2102      	movs	r1, #2
 80027ec:	fa01 f202 	lsl.w	r2, r1, r2
 80027f0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d038      	beq.n	8002874 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800280a:	e033      	b.n	8002874 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002810:	f003 031c 	and.w	r3, r3, #28
 8002814:	2208      	movs	r2, #8
 8002816:	409a      	lsls	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	4013      	ands	r3, r2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d02a      	beq.n	8002876 <HAL_DMA_IRQHandler+0x156>
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	f003 0308 	and.w	r3, r3, #8
 8002826:	2b00      	cmp	r3, #0
 8002828:	d025      	beq.n	8002876 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 020e 	bic.w	r2, r2, #14
 8002838:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283e:	f003 021c 	and.w	r2, r3, #28
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	2101      	movs	r1, #1
 8002848:	fa01 f202 	lsl.w	r2, r1, r2
 800284c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002868:	2b00      	cmp	r3, #0
 800286a:	d004      	beq.n	8002876 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002874:	bf00      	nop
 8002876:	bf00      	nop
}
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800287e:	b480      	push	{r7}
 8002880:	b085      	sub	sp, #20
 8002882:	af00      	add	r7, sp, #0
 8002884:	60f8      	str	r0, [r7, #12]
 8002886:	60b9      	str	r1, [r7, #8]
 8002888:	607a      	str	r2, [r7, #4]
 800288a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002890:	f003 021c 	and.w	r2, r3, #28
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	2101      	movs	r1, #1
 800289a:	fa01 f202 	lsl.w	r2, r1, r2
 800289e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	2b10      	cmp	r3, #16
 80028ae:	d108      	bne.n	80028c2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68ba      	ldr	r2, [r7, #8]
 80028be:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80028c0:	e007      	b.n	80028d2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	60da      	str	r2, [r3, #12]
}
 80028d2:	bf00      	nop
 80028d4:	3714      	adds	r7, #20
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
	...

080028e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b087      	sub	sp, #28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028ea:	2300      	movs	r3, #0
 80028ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028ee:	e17f      	b.n	8002bf0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	2101      	movs	r1, #1
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	fa01 f303 	lsl.w	r3, r1, r3
 80028fc:	4013      	ands	r3, r2
 80028fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2b00      	cmp	r3, #0
 8002904:	f000 8171 	beq.w	8002bea <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f003 0303 	and.w	r3, r3, #3
 8002910:	2b01      	cmp	r3, #1
 8002912:	d005      	beq.n	8002920 <HAL_GPIO_Init+0x40>
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f003 0303 	and.w	r3, r3, #3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d130      	bne.n	8002982 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	2203      	movs	r2, #3
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	43db      	mvns	r3, r3
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	4013      	ands	r3, r2
 8002936:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	68da      	ldr	r2, [r3, #12]
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	4313      	orrs	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002956:	2201      	movs	r2, #1
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	43db      	mvns	r3, r3
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	4013      	ands	r3, r2
 8002964:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	091b      	lsrs	r3, r3, #4
 800296c:	f003 0201 	and.w	r2, r3, #1
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	4313      	orrs	r3, r2
 800297a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	2b03      	cmp	r3, #3
 800298c:	d118      	bne.n	80029c0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002992:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002994:	2201      	movs	r2, #1
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	43db      	mvns	r3, r3
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	4013      	ands	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	08db      	lsrs	r3, r3, #3
 80029aa:	f003 0201 	and.w	r2, r3, #1
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 0303 	and.w	r3, r3, #3
 80029c8:	2b03      	cmp	r3, #3
 80029ca:	d017      	beq.n	80029fc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	2203      	movs	r2, #3
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	4013      	ands	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f003 0303 	and.w	r3, r3, #3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d123      	bne.n	8002a50 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	08da      	lsrs	r2, r3, #3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3208      	adds	r2, #8
 8002a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a14:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	220f      	movs	r2, #15
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	43db      	mvns	r3, r3
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	691a      	ldr	r2, [r3, #16]
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	08da      	lsrs	r2, r3, #3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	3208      	adds	r2, #8
 8002a4a:	6939      	ldr	r1, [r7, #16]
 8002a4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	2203      	movs	r2, #3
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	43db      	mvns	r3, r3
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	4013      	ands	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f003 0203 	and.w	r2, r3, #3
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 80ac 	beq.w	8002bea <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a92:	4b5f      	ldr	r3, [pc, #380]	; (8002c10 <HAL_GPIO_Init+0x330>)
 8002a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a96:	4a5e      	ldr	r2, [pc, #376]	; (8002c10 <HAL_GPIO_Init+0x330>)
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	6613      	str	r3, [r2, #96]	; 0x60
 8002a9e:	4b5c      	ldr	r3, [pc, #368]	; (8002c10 <HAL_GPIO_Init+0x330>)
 8002aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	60bb      	str	r3, [r7, #8]
 8002aa8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002aaa:	4a5a      	ldr	r2, [pc, #360]	; (8002c14 <HAL_GPIO_Init+0x334>)
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	089b      	lsrs	r3, r3, #2
 8002ab0:	3302      	adds	r3, #2
 8002ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	220f      	movs	r2, #15
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	4013      	ands	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ad4:	d025      	beq.n	8002b22 <HAL_GPIO_Init+0x242>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a4f      	ldr	r2, [pc, #316]	; (8002c18 <HAL_GPIO_Init+0x338>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d01f      	beq.n	8002b1e <HAL_GPIO_Init+0x23e>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a4e      	ldr	r2, [pc, #312]	; (8002c1c <HAL_GPIO_Init+0x33c>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d019      	beq.n	8002b1a <HAL_GPIO_Init+0x23a>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a4d      	ldr	r2, [pc, #308]	; (8002c20 <HAL_GPIO_Init+0x340>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d013      	beq.n	8002b16 <HAL_GPIO_Init+0x236>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a4c      	ldr	r2, [pc, #304]	; (8002c24 <HAL_GPIO_Init+0x344>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d00d      	beq.n	8002b12 <HAL_GPIO_Init+0x232>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a4b      	ldr	r2, [pc, #300]	; (8002c28 <HAL_GPIO_Init+0x348>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d007      	beq.n	8002b0e <HAL_GPIO_Init+0x22e>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a4a      	ldr	r2, [pc, #296]	; (8002c2c <HAL_GPIO_Init+0x34c>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d101      	bne.n	8002b0a <HAL_GPIO_Init+0x22a>
 8002b06:	2306      	movs	r3, #6
 8002b08:	e00c      	b.n	8002b24 <HAL_GPIO_Init+0x244>
 8002b0a:	2307      	movs	r3, #7
 8002b0c:	e00a      	b.n	8002b24 <HAL_GPIO_Init+0x244>
 8002b0e:	2305      	movs	r3, #5
 8002b10:	e008      	b.n	8002b24 <HAL_GPIO_Init+0x244>
 8002b12:	2304      	movs	r3, #4
 8002b14:	e006      	b.n	8002b24 <HAL_GPIO_Init+0x244>
 8002b16:	2303      	movs	r3, #3
 8002b18:	e004      	b.n	8002b24 <HAL_GPIO_Init+0x244>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	e002      	b.n	8002b24 <HAL_GPIO_Init+0x244>
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e000      	b.n	8002b24 <HAL_GPIO_Init+0x244>
 8002b22:	2300      	movs	r3, #0
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	f002 0203 	and.w	r2, r2, #3
 8002b2a:	0092      	lsls	r2, r2, #2
 8002b2c:	4093      	lsls	r3, r2
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b34:	4937      	ldr	r1, [pc, #220]	; (8002c14 <HAL_GPIO_Init+0x334>)
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	089b      	lsrs	r3, r3, #2
 8002b3a:	3302      	adds	r3, #2
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b42:	4b3b      	ldr	r3, [pc, #236]	; (8002c30 <HAL_GPIO_Init+0x350>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b66:	4a32      	ldr	r2, [pc, #200]	; (8002c30 <HAL_GPIO_Init+0x350>)
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b6c:	4b30      	ldr	r3, [pc, #192]	; (8002c30 <HAL_GPIO_Init+0x350>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	43db      	mvns	r3, r3
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d003      	beq.n	8002b90 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b90:	4a27      	ldr	r2, [pc, #156]	; (8002c30 <HAL_GPIO_Init+0x350>)
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002b96:	4b26      	ldr	r3, [pc, #152]	; (8002c30 <HAL_GPIO_Init+0x350>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	43db      	mvns	r3, r3
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002bba:	4a1d      	ldr	r2, [pc, #116]	; (8002c30 <HAL_GPIO_Init+0x350>)
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002bc0:	4b1b      	ldr	r3, [pc, #108]	; (8002c30 <HAL_GPIO_Init+0x350>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d003      	beq.n	8002be4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002be4:	4a12      	ldr	r2, [pc, #72]	; (8002c30 <HAL_GPIO_Init+0x350>)
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	3301      	adds	r3, #1
 8002bee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f47f ae78 	bne.w	80028f0 <HAL_GPIO_Init+0x10>
  }
}
 8002c00:	bf00      	nop
 8002c02:	bf00      	nop
 8002c04:	371c      	adds	r7, #28
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	40021000 	.word	0x40021000
 8002c14:	40010000 	.word	0x40010000
 8002c18:	48000400 	.word	0x48000400
 8002c1c:	48000800 	.word	0x48000800
 8002c20:	48000c00 	.word	0x48000c00
 8002c24:	48001000 	.word	0x48001000
 8002c28:	48001400 	.word	0x48001400
 8002c2c:	48001800 	.word	0x48001800
 8002c30:	40010400 	.word	0x40010400

08002c34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	807b      	strh	r3, [r7, #2]
 8002c40:	4613      	mov	r3, r2
 8002c42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c44:	787b      	ldrb	r3, [r7, #1]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c4a:	887a      	ldrh	r2, [r7, #2]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c50:	e002      	b.n	8002c58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c52:	887a      	ldrh	r2, [r7, #2]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c76:	887a      	ldrh	r2, [r7, #2]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	041a      	lsls	r2, r3, #16
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	43d9      	mvns	r1, r3
 8002c82:	887b      	ldrh	r3, [r7, #2]
 8002c84:	400b      	ands	r3, r1
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	619a      	str	r2, [r3, #24]
}
 8002c8c:	bf00      	nop
 8002c8e:	3714      	adds	r7, #20
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c9c:	4b04      	ldr	r3, [pc, #16]	; (8002cb0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	40007000 	.word	0x40007000

08002cb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cc2:	d130      	bne.n	8002d26 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cc4:	4b23      	ldr	r3, [pc, #140]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cd0:	d038      	beq.n	8002d44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cd2:	4b20      	ldr	r3, [pc, #128]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cda:	4a1e      	ldr	r2, [pc, #120]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ce0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ce2:	4b1d      	ldr	r3, [pc, #116]	; (8002d58 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2232      	movs	r2, #50	; 0x32
 8002ce8:	fb02 f303 	mul.w	r3, r2, r3
 8002cec:	4a1b      	ldr	r2, [pc, #108]	; (8002d5c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002cee:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf2:	0c9b      	lsrs	r3, r3, #18
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cf8:	e002      	b.n	8002d00 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d00:	4b14      	ldr	r3, [pc, #80]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d0c:	d102      	bne.n	8002d14 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1f2      	bne.n	8002cfa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d14:	4b0f      	ldr	r3, [pc, #60]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d16:	695b      	ldr	r3, [r3, #20]
 8002d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d20:	d110      	bne.n	8002d44 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e00f      	b.n	8002d46 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d26:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d32:	d007      	beq.n	8002d44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d34:	4b07      	ldr	r3, [pc, #28]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d3c:	4a05      	ldr	r2, [pc, #20]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d42:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3714      	adds	r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	40007000 	.word	0x40007000
 8002d58:	20000000 	.word	0x20000000
 8002d5c:	431bde83 	.word	0x431bde83

08002d60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b088      	sub	sp, #32
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e3ca      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d72:	4b97      	ldr	r3, [pc, #604]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 030c 	and.w	r3, r3, #12
 8002d7a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d7c:	4b94      	ldr	r3, [pc, #592]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	f003 0303 	and.w	r3, r3, #3
 8002d84:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0310 	and.w	r3, r3, #16
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 80e4 	beq.w	8002f5c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d007      	beq.n	8002daa <HAL_RCC_OscConfig+0x4a>
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	2b0c      	cmp	r3, #12
 8002d9e:	f040 808b 	bne.w	8002eb8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	f040 8087 	bne.w	8002eb8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002daa:	4b89      	ldr	r3, [pc, #548]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d005      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x62>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e3a2      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a1a      	ldr	r2, [r3, #32]
 8002dc6:	4b82      	ldr	r3, [pc, #520]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d004      	beq.n	8002ddc <HAL_RCC_OscConfig+0x7c>
 8002dd2:	4b7f      	ldr	r3, [pc, #508]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dda:	e005      	b.n	8002de8 <HAL_RCC_OscConfig+0x88>
 8002ddc:	4b7c      	ldr	r3, [pc, #496]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002de2:	091b      	lsrs	r3, r3, #4
 8002de4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d223      	bcs.n	8002e34 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f000 fd55 	bl	80038a0 <RCC_SetFlashLatencyFromMSIRange>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e383      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e00:	4b73      	ldr	r3, [pc, #460]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a72      	ldr	r2, [pc, #456]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e06:	f043 0308 	orr.w	r3, r3, #8
 8002e0a:	6013      	str	r3, [r2, #0]
 8002e0c:	4b70      	ldr	r3, [pc, #448]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	496d      	ldr	r1, [pc, #436]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e1e:	4b6c      	ldr	r3, [pc, #432]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	021b      	lsls	r3, r3, #8
 8002e2c:	4968      	ldr	r1, [pc, #416]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	604b      	str	r3, [r1, #4]
 8002e32:	e025      	b.n	8002e80 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e34:	4b66      	ldr	r3, [pc, #408]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a65      	ldr	r2, [pc, #404]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e3a:	f043 0308 	orr.w	r3, r3, #8
 8002e3e:	6013      	str	r3, [r2, #0]
 8002e40:	4b63      	ldr	r3, [pc, #396]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	4960      	ldr	r1, [pc, #384]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e52:	4b5f      	ldr	r3, [pc, #380]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	021b      	lsls	r3, r3, #8
 8002e60:	495b      	ldr	r1, [pc, #364]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d109      	bne.n	8002e80 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f000 fd15 	bl	80038a0 <RCC_SetFlashLatencyFromMSIRange>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e343      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e80:	f000 fc4a 	bl	8003718 <HAL_RCC_GetSysClockFreq>
 8002e84:	4602      	mov	r2, r0
 8002e86:	4b52      	ldr	r3, [pc, #328]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	091b      	lsrs	r3, r3, #4
 8002e8c:	f003 030f 	and.w	r3, r3, #15
 8002e90:	4950      	ldr	r1, [pc, #320]	; (8002fd4 <HAL_RCC_OscConfig+0x274>)
 8002e92:	5ccb      	ldrb	r3, [r1, r3]
 8002e94:	f003 031f 	and.w	r3, r3, #31
 8002e98:	fa22 f303 	lsr.w	r3, r2, r3
 8002e9c:	4a4e      	ldr	r2, [pc, #312]	; (8002fd8 <HAL_RCC_OscConfig+0x278>)
 8002e9e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ea0:	4b4e      	ldr	r3, [pc, #312]	; (8002fdc <HAL_RCC_OscConfig+0x27c>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fd ffcf 	bl	8000e48 <HAL_InitTick>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002eae:	7bfb      	ldrb	r3, [r7, #15]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d052      	beq.n	8002f5a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002eb4:	7bfb      	ldrb	r3, [r7, #15]
 8002eb6:	e327      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d032      	beq.n	8002f26 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ec0:	4b43      	ldr	r3, [pc, #268]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a42      	ldr	r2, [pc, #264]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002ec6:	f043 0301 	orr.w	r3, r3, #1
 8002eca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ecc:	f7fe f80c 	bl	8000ee8 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ed4:	f7fe f808 	bl	8000ee8 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e310      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ee6:	4b3a      	ldr	r3, [pc, #232]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0f0      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ef2:	4b37      	ldr	r3, [pc, #220]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a36      	ldr	r2, [pc, #216]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002ef8:	f043 0308 	orr.w	r3, r3, #8
 8002efc:	6013      	str	r3, [r2, #0]
 8002efe:	4b34      	ldr	r3, [pc, #208]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	4931      	ldr	r1, [pc, #196]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f10:	4b2f      	ldr	r3, [pc, #188]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	021b      	lsls	r3, r3, #8
 8002f1e:	492c      	ldr	r1, [pc, #176]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	604b      	str	r3, [r1, #4]
 8002f24:	e01a      	b.n	8002f5c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f26:	4b2a      	ldr	r3, [pc, #168]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a29      	ldr	r2, [pc, #164]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002f2c:	f023 0301 	bic.w	r3, r3, #1
 8002f30:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f32:	f7fd ffd9 	bl	8000ee8 <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f3a:	f7fd ffd5 	bl	8000ee8 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e2dd      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f4c:	4b20      	ldr	r3, [pc, #128]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1f0      	bne.n	8002f3a <HAL_RCC_OscConfig+0x1da>
 8002f58:	e000      	b.n	8002f5c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f5a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d074      	beq.n	8003052 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	2b08      	cmp	r3, #8
 8002f6c:	d005      	beq.n	8002f7a <HAL_RCC_OscConfig+0x21a>
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	2b0c      	cmp	r3, #12
 8002f72:	d10e      	bne.n	8002f92 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	2b03      	cmp	r3, #3
 8002f78:	d10b      	bne.n	8002f92 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f7a:	4b15      	ldr	r3, [pc, #84]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d064      	beq.n	8003050 <HAL_RCC_OscConfig+0x2f0>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d160      	bne.n	8003050 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e2ba      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f9a:	d106      	bne.n	8002faa <HAL_RCC_OscConfig+0x24a>
 8002f9c:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a0b      	ldr	r2, [pc, #44]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002fa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa6:	6013      	str	r3, [r2, #0]
 8002fa8:	e026      	b.n	8002ff8 <HAL_RCC_OscConfig+0x298>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fb2:	d115      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x280>
 8002fb4:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a05      	ldr	r2, [pc, #20]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002fba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fbe:	6013      	str	r3, [r2, #0]
 8002fc0:	4b03      	ldr	r3, [pc, #12]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a02      	ldr	r2, [pc, #8]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fca:	6013      	str	r3, [r2, #0]
 8002fcc:	e014      	b.n	8002ff8 <HAL_RCC_OscConfig+0x298>
 8002fce:	bf00      	nop
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	08005f44 	.word	0x08005f44
 8002fd8:	20000000 	.word	0x20000000
 8002fdc:	20000004 	.word	0x20000004
 8002fe0:	4ba0      	ldr	r3, [pc, #640]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a9f      	ldr	r2, [pc, #636]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8002fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fea:	6013      	str	r3, [r2, #0]
 8002fec:	4b9d      	ldr	r3, [pc, #628]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a9c      	ldr	r2, [pc, #624]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8002ff2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ff6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d013      	beq.n	8003028 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003000:	f7fd ff72 	bl	8000ee8 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003008:	f7fd ff6e 	bl	8000ee8 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b64      	cmp	r3, #100	; 0x64
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e276      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800301a:	4b92      	ldr	r3, [pc, #584]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0f0      	beq.n	8003008 <HAL_RCC_OscConfig+0x2a8>
 8003026:	e014      	b.n	8003052 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003028:	f7fd ff5e 	bl	8000ee8 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003030:	f7fd ff5a 	bl	8000ee8 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b64      	cmp	r3, #100	; 0x64
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e262      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003042:	4b88      	ldr	r3, [pc, #544]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f0      	bne.n	8003030 <HAL_RCC_OscConfig+0x2d0>
 800304e:	e000      	b.n	8003052 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003050:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d060      	beq.n	8003120 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	2b04      	cmp	r3, #4
 8003062:	d005      	beq.n	8003070 <HAL_RCC_OscConfig+0x310>
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	2b0c      	cmp	r3, #12
 8003068:	d119      	bne.n	800309e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	2b02      	cmp	r3, #2
 800306e:	d116      	bne.n	800309e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003070:	4b7c      	ldr	r3, [pc, #496]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003078:	2b00      	cmp	r3, #0
 800307a:	d005      	beq.n	8003088 <HAL_RCC_OscConfig+0x328>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e23f      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003088:	4b76      	ldr	r3, [pc, #472]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	061b      	lsls	r3, r3, #24
 8003096:	4973      	ldr	r1, [pc, #460]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003098:	4313      	orrs	r3, r2
 800309a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800309c:	e040      	b.n	8003120 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d023      	beq.n	80030ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030a6:	4b6f      	ldr	r3, [pc, #444]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a6e      	ldr	r2, [pc, #440]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 80030ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b2:	f7fd ff19 	bl	8000ee8 <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030ba:	f7fd ff15 	bl	8000ee8 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e21d      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030cc:	4b65      	ldr	r3, [pc, #404]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0f0      	beq.n	80030ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d8:	4b62      	ldr	r3, [pc, #392]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	061b      	lsls	r3, r3, #24
 80030e6:	495f      	ldr	r1, [pc, #380]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	604b      	str	r3, [r1, #4]
 80030ec:	e018      	b.n	8003120 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ee:	4b5d      	ldr	r3, [pc, #372]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a5c      	ldr	r2, [pc, #368]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 80030f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fa:	f7fd fef5 	bl	8000ee8 <HAL_GetTick>
 80030fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003100:	e008      	b.n	8003114 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003102:	f7fd fef1 	bl	8000ee8 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e1f9      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003114:	4b53      	ldr	r3, [pc, #332]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1f0      	bne.n	8003102 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0308 	and.w	r3, r3, #8
 8003128:	2b00      	cmp	r3, #0
 800312a:	d03c      	beq.n	80031a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d01c      	beq.n	800316e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003134:	4b4b      	ldr	r3, [pc, #300]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003136:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800313a:	4a4a      	ldr	r2, [pc, #296]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 800313c:	f043 0301 	orr.w	r3, r3, #1
 8003140:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003144:	f7fd fed0 	bl	8000ee8 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800314c:	f7fd fecc 	bl	8000ee8 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e1d4      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800315e:	4b41      	ldr	r3, [pc, #260]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003160:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0ef      	beq.n	800314c <HAL_RCC_OscConfig+0x3ec>
 800316c:	e01b      	b.n	80031a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800316e:	4b3d      	ldr	r3, [pc, #244]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003170:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003174:	4a3b      	ldr	r2, [pc, #236]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003176:	f023 0301 	bic.w	r3, r3, #1
 800317a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800317e:	f7fd feb3 	bl	8000ee8 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003186:	f7fd feaf 	bl	8000ee8 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e1b7      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003198:	4b32      	ldr	r3, [pc, #200]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 800319a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1ef      	bne.n	8003186 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0304 	and.w	r3, r3, #4
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f000 80a6 	beq.w	8003300 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031b4:	2300      	movs	r3, #0
 80031b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80031b8:	4b2a      	ldr	r3, [pc, #168]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 80031ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10d      	bne.n	80031e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031c4:	4b27      	ldr	r3, [pc, #156]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 80031c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c8:	4a26      	ldr	r2, [pc, #152]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 80031ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ce:	6593      	str	r3, [r2, #88]	; 0x58
 80031d0:	4b24      	ldr	r3, [pc, #144]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 80031d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d8:	60bb      	str	r3, [r7, #8]
 80031da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031dc:	2301      	movs	r3, #1
 80031de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031e0:	4b21      	ldr	r3, [pc, #132]	; (8003268 <HAL_RCC_OscConfig+0x508>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d118      	bne.n	800321e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031ec:	4b1e      	ldr	r3, [pc, #120]	; (8003268 <HAL_RCC_OscConfig+0x508>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a1d      	ldr	r2, [pc, #116]	; (8003268 <HAL_RCC_OscConfig+0x508>)
 80031f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031f8:	f7fd fe76 	bl	8000ee8 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003200:	f7fd fe72 	bl	8000ee8 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e17a      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003212:	4b15      	ldr	r3, [pc, #84]	; (8003268 <HAL_RCC_OscConfig+0x508>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0f0      	beq.n	8003200 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d108      	bne.n	8003238 <HAL_RCC_OscConfig+0x4d8>
 8003226:	4b0f      	ldr	r3, [pc, #60]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322c:	4a0d      	ldr	r2, [pc, #52]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 800322e:	f043 0301 	orr.w	r3, r3, #1
 8003232:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003236:	e029      	b.n	800328c <HAL_RCC_OscConfig+0x52c>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	2b05      	cmp	r3, #5
 800323e:	d115      	bne.n	800326c <HAL_RCC_OscConfig+0x50c>
 8003240:	4b08      	ldr	r3, [pc, #32]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003246:	4a07      	ldr	r2, [pc, #28]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003248:	f043 0304 	orr.w	r3, r3, #4
 800324c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003250:	4b04      	ldr	r3, [pc, #16]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003256:	4a03      	ldr	r2, [pc, #12]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003258:	f043 0301 	orr.w	r3, r3, #1
 800325c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003260:	e014      	b.n	800328c <HAL_RCC_OscConfig+0x52c>
 8003262:	bf00      	nop
 8003264:	40021000 	.word	0x40021000
 8003268:	40007000 	.word	0x40007000
 800326c:	4b9c      	ldr	r3, [pc, #624]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 800326e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003272:	4a9b      	ldr	r2, [pc, #620]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 8003274:	f023 0301 	bic.w	r3, r3, #1
 8003278:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800327c:	4b98      	ldr	r3, [pc, #608]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 800327e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003282:	4a97      	ldr	r2, [pc, #604]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 8003284:	f023 0304 	bic.w	r3, r3, #4
 8003288:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d016      	beq.n	80032c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003294:	f7fd fe28 	bl	8000ee8 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800329a:	e00a      	b.n	80032b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800329c:	f7fd fe24 	bl	8000ee8 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e12a      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032b2:	4b8b      	ldr	r3, [pc, #556]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 80032b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d0ed      	beq.n	800329c <HAL_RCC_OscConfig+0x53c>
 80032c0:	e015      	b.n	80032ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c2:	f7fd fe11 	bl	8000ee8 <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032c8:	e00a      	b.n	80032e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ca:	f7fd fe0d 	bl	8000ee8 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d8:	4293      	cmp	r3, r2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e113      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032e0:	4b7f      	ldr	r3, [pc, #508]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 80032e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1ed      	bne.n	80032ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032ee:	7ffb      	ldrb	r3, [r7, #31]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d105      	bne.n	8003300 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032f4:	4b7a      	ldr	r3, [pc, #488]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 80032f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f8:	4a79      	ldr	r2, [pc, #484]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 80032fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032fe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 80fe 	beq.w	8003506 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330e:	2b02      	cmp	r3, #2
 8003310:	f040 80d0 	bne.w	80034b4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003314:	4b72      	ldr	r3, [pc, #456]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f003 0203 	and.w	r2, r3, #3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003324:	429a      	cmp	r2, r3
 8003326:	d130      	bne.n	800338a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003332:	3b01      	subs	r3, #1
 8003334:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003336:	429a      	cmp	r2, r3
 8003338:	d127      	bne.n	800338a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003344:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003346:	429a      	cmp	r2, r3
 8003348:	d11f      	bne.n	800338a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003354:	2a07      	cmp	r2, #7
 8003356:	bf14      	ite	ne
 8003358:	2201      	movne	r2, #1
 800335a:	2200      	moveq	r2, #0
 800335c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800335e:	4293      	cmp	r3, r2
 8003360:	d113      	bne.n	800338a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800336c:	085b      	lsrs	r3, r3, #1
 800336e:	3b01      	subs	r3, #1
 8003370:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003372:	429a      	cmp	r2, r3
 8003374:	d109      	bne.n	800338a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003380:	085b      	lsrs	r3, r3, #1
 8003382:	3b01      	subs	r3, #1
 8003384:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003386:	429a      	cmp	r2, r3
 8003388:	d06e      	beq.n	8003468 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	2b0c      	cmp	r3, #12
 800338e:	d069      	beq.n	8003464 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003390:	4b53      	ldr	r3, [pc, #332]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d105      	bne.n	80033a8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800339c:	4b50      	ldr	r3, [pc, #320]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e0ad      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80033ac:	4b4c      	ldr	r3, [pc, #304]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a4b      	ldr	r2, [pc, #300]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 80033b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033b6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033b8:	f7fd fd96 	bl	8000ee8 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c0:	f7fd fd92 	bl	8000ee8 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e09a      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033d2:	4b43      	ldr	r3, [pc, #268]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1f0      	bne.n	80033c0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033de:	4b40      	ldr	r3, [pc, #256]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	4b40      	ldr	r3, [pc, #256]	; (80034e4 <HAL_RCC_OscConfig+0x784>)
 80033e4:	4013      	ands	r3, r2
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80033ee:	3a01      	subs	r2, #1
 80033f0:	0112      	lsls	r2, r2, #4
 80033f2:	4311      	orrs	r1, r2
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033f8:	0212      	lsls	r2, r2, #8
 80033fa:	4311      	orrs	r1, r2
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003400:	0852      	lsrs	r2, r2, #1
 8003402:	3a01      	subs	r2, #1
 8003404:	0552      	lsls	r2, r2, #21
 8003406:	4311      	orrs	r1, r2
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800340c:	0852      	lsrs	r2, r2, #1
 800340e:	3a01      	subs	r2, #1
 8003410:	0652      	lsls	r2, r2, #25
 8003412:	4311      	orrs	r1, r2
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003418:	0912      	lsrs	r2, r2, #4
 800341a:	0452      	lsls	r2, r2, #17
 800341c:	430a      	orrs	r2, r1
 800341e:	4930      	ldr	r1, [pc, #192]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 8003420:	4313      	orrs	r3, r2
 8003422:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003424:	4b2e      	ldr	r3, [pc, #184]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a2d      	ldr	r2, [pc, #180]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 800342a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800342e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003430:	4b2b      	ldr	r3, [pc, #172]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	4a2a      	ldr	r2, [pc, #168]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 8003436:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800343a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800343c:	f7fd fd54 	bl	8000ee8 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003444:	f7fd fd50 	bl	8000ee8 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e058      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003456:	4b22      	ldr	r3, [pc, #136]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d0f0      	beq.n	8003444 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003462:	e050      	b.n	8003506 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e04f      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003468:	4b1d      	ldr	r3, [pc, #116]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d148      	bne.n	8003506 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003474:	4b1a      	ldr	r3, [pc, #104]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a19      	ldr	r2, [pc, #100]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 800347a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800347e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003480:	4b17      	ldr	r3, [pc, #92]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	4a16      	ldr	r2, [pc, #88]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 8003486:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800348a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800348c:	f7fd fd2c 	bl	8000ee8 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003494:	f7fd fd28 	bl	8000ee8 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e030      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034a6:	4b0e      	ldr	r3, [pc, #56]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0f0      	beq.n	8003494 <HAL_RCC_OscConfig+0x734>
 80034b2:	e028      	b.n	8003506 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	2b0c      	cmp	r3, #12
 80034b8:	d023      	beq.n	8003502 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ba:	4b09      	ldr	r3, [pc, #36]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a08      	ldr	r2, [pc, #32]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 80034c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c6:	f7fd fd0f 	bl	8000ee8 <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034cc:	e00c      	b.n	80034e8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ce:	f7fd fd0b 	bl	8000ee8 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d905      	bls.n	80034e8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e013      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
 80034e0:	40021000 	.word	0x40021000
 80034e4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034e8:	4b09      	ldr	r3, [pc, #36]	; (8003510 <HAL_RCC_OscConfig+0x7b0>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1ec      	bne.n	80034ce <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80034f4:	4b06      	ldr	r3, [pc, #24]	; (8003510 <HAL_RCC_OscConfig+0x7b0>)
 80034f6:	68da      	ldr	r2, [r3, #12]
 80034f8:	4905      	ldr	r1, [pc, #20]	; (8003510 <HAL_RCC_OscConfig+0x7b0>)
 80034fa:	4b06      	ldr	r3, [pc, #24]	; (8003514 <HAL_RCC_OscConfig+0x7b4>)
 80034fc:	4013      	ands	r3, r2
 80034fe:	60cb      	str	r3, [r1, #12]
 8003500:	e001      	b.n	8003506 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e000      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3720      	adds	r7, #32
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	40021000 	.word	0x40021000
 8003514:	feeefffc 	.word	0xfeeefffc

08003518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e0e7      	b.n	80036fc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800352c:	4b75      	ldr	r3, [pc, #468]	; (8003704 <HAL_RCC_ClockConfig+0x1ec>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	429a      	cmp	r2, r3
 8003538:	d910      	bls.n	800355c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800353a:	4b72      	ldr	r3, [pc, #456]	; (8003704 <HAL_RCC_ClockConfig+0x1ec>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f023 0207 	bic.w	r2, r3, #7
 8003542:	4970      	ldr	r1, [pc, #448]	; (8003704 <HAL_RCC_ClockConfig+0x1ec>)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	4313      	orrs	r3, r2
 8003548:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800354a:	4b6e      	ldr	r3, [pc, #440]	; (8003704 <HAL_RCC_ClockConfig+0x1ec>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0307 	and.w	r3, r3, #7
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	429a      	cmp	r2, r3
 8003556:	d001      	beq.n	800355c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e0cf      	b.n	80036fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d010      	beq.n	800358a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	4b66      	ldr	r3, [pc, #408]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003574:	429a      	cmp	r2, r3
 8003576:	d908      	bls.n	800358a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003578:	4b63      	ldr	r3, [pc, #396]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	4960      	ldr	r1, [pc, #384]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 8003586:	4313      	orrs	r3, r2
 8003588:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d04c      	beq.n	8003630 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2b03      	cmp	r3, #3
 800359c:	d107      	bne.n	80035ae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800359e:	4b5a      	ldr	r3, [pc, #360]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d121      	bne.n	80035ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e0a6      	b.n	80036fc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d107      	bne.n	80035c6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035b6:	4b54      	ldr	r3, [pc, #336]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d115      	bne.n	80035ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e09a      	b.n	80036fc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d107      	bne.n	80035de <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035ce:	4b4e      	ldr	r3, [pc, #312]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d109      	bne.n	80035ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e08e      	b.n	80036fc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035de:	4b4a      	ldr	r3, [pc, #296]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e086      	b.n	80036fc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035ee:	4b46      	ldr	r3, [pc, #280]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f023 0203 	bic.w	r2, r3, #3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	4943      	ldr	r1, [pc, #268]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003600:	f7fd fc72 	bl	8000ee8 <HAL_GetTick>
 8003604:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003606:	e00a      	b.n	800361e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003608:	f7fd fc6e 	bl	8000ee8 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	f241 3288 	movw	r2, #5000	; 0x1388
 8003616:	4293      	cmp	r3, r2
 8003618:	d901      	bls.n	800361e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e06e      	b.n	80036fc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800361e:	4b3a      	ldr	r3, [pc, #232]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 020c 	and.w	r2, r3, #12
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	429a      	cmp	r2, r3
 800362e:	d1eb      	bne.n	8003608 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d010      	beq.n	800365e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	4b31      	ldr	r3, [pc, #196]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003648:	429a      	cmp	r2, r3
 800364a:	d208      	bcs.n	800365e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800364c:	4b2e      	ldr	r3, [pc, #184]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	492b      	ldr	r1, [pc, #172]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 800365a:	4313      	orrs	r3, r2
 800365c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800365e:	4b29      	ldr	r3, [pc, #164]	; (8003704 <HAL_RCC_ClockConfig+0x1ec>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0307 	and.w	r3, r3, #7
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	429a      	cmp	r2, r3
 800366a:	d210      	bcs.n	800368e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800366c:	4b25      	ldr	r3, [pc, #148]	; (8003704 <HAL_RCC_ClockConfig+0x1ec>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f023 0207 	bic.w	r2, r3, #7
 8003674:	4923      	ldr	r1, [pc, #140]	; (8003704 <HAL_RCC_ClockConfig+0x1ec>)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	4313      	orrs	r3, r2
 800367a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800367c:	4b21      	ldr	r3, [pc, #132]	; (8003704 <HAL_RCC_ClockConfig+0x1ec>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	429a      	cmp	r2, r3
 8003688:	d001      	beq.n	800368e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e036      	b.n	80036fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0304 	and.w	r3, r3, #4
 8003696:	2b00      	cmp	r3, #0
 8003698:	d008      	beq.n	80036ac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800369a:	4b1b      	ldr	r3, [pc, #108]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	4918      	ldr	r1, [pc, #96]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0308 	and.w	r3, r3, #8
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d009      	beq.n	80036cc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036b8:	4b13      	ldr	r3, [pc, #76]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	4910      	ldr	r1, [pc, #64]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036cc:	f000 f824 	bl	8003718 <HAL_RCC_GetSysClockFreq>
 80036d0:	4602      	mov	r2, r0
 80036d2:	4b0d      	ldr	r3, [pc, #52]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	091b      	lsrs	r3, r3, #4
 80036d8:	f003 030f 	and.w	r3, r3, #15
 80036dc:	490b      	ldr	r1, [pc, #44]	; (800370c <HAL_RCC_ClockConfig+0x1f4>)
 80036de:	5ccb      	ldrb	r3, [r1, r3]
 80036e0:	f003 031f 	and.w	r3, r3, #31
 80036e4:	fa22 f303 	lsr.w	r3, r2, r3
 80036e8:	4a09      	ldr	r2, [pc, #36]	; (8003710 <HAL_RCC_ClockConfig+0x1f8>)
 80036ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80036ec:	4b09      	ldr	r3, [pc, #36]	; (8003714 <HAL_RCC_ClockConfig+0x1fc>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7fd fba9 	bl	8000e48 <HAL_InitTick>
 80036f6:	4603      	mov	r3, r0
 80036f8:	72fb      	strb	r3, [r7, #11]

  return status;
 80036fa:	7afb      	ldrb	r3, [r7, #11]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40022000 	.word	0x40022000
 8003708:	40021000 	.word	0x40021000
 800370c:	08005f44 	.word	0x08005f44
 8003710:	20000000 	.word	0x20000000
 8003714:	20000004 	.word	0x20000004

08003718 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003718:	b480      	push	{r7}
 800371a:	b089      	sub	sp, #36	; 0x24
 800371c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800371e:	2300      	movs	r3, #0
 8003720:	61fb      	str	r3, [r7, #28]
 8003722:	2300      	movs	r3, #0
 8003724:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003726:	4b3e      	ldr	r3, [pc, #248]	; (8003820 <HAL_RCC_GetSysClockFreq+0x108>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 030c 	and.w	r3, r3, #12
 800372e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003730:	4b3b      	ldr	r3, [pc, #236]	; (8003820 <HAL_RCC_GetSysClockFreq+0x108>)
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	f003 0303 	and.w	r3, r3, #3
 8003738:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d005      	beq.n	800374c <HAL_RCC_GetSysClockFreq+0x34>
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	2b0c      	cmp	r3, #12
 8003744:	d121      	bne.n	800378a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d11e      	bne.n	800378a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800374c:	4b34      	ldr	r3, [pc, #208]	; (8003820 <HAL_RCC_GetSysClockFreq+0x108>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0308 	and.w	r3, r3, #8
 8003754:	2b00      	cmp	r3, #0
 8003756:	d107      	bne.n	8003768 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003758:	4b31      	ldr	r3, [pc, #196]	; (8003820 <HAL_RCC_GetSysClockFreq+0x108>)
 800375a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800375e:	0a1b      	lsrs	r3, r3, #8
 8003760:	f003 030f 	and.w	r3, r3, #15
 8003764:	61fb      	str	r3, [r7, #28]
 8003766:	e005      	b.n	8003774 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003768:	4b2d      	ldr	r3, [pc, #180]	; (8003820 <HAL_RCC_GetSysClockFreq+0x108>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	091b      	lsrs	r3, r3, #4
 800376e:	f003 030f 	and.w	r3, r3, #15
 8003772:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003774:	4a2b      	ldr	r2, [pc, #172]	; (8003824 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800377c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10d      	bne.n	80037a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003788:	e00a      	b.n	80037a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	2b04      	cmp	r3, #4
 800378e:	d102      	bne.n	8003796 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003790:	4b25      	ldr	r3, [pc, #148]	; (8003828 <HAL_RCC_GetSysClockFreq+0x110>)
 8003792:	61bb      	str	r3, [r7, #24]
 8003794:	e004      	b.n	80037a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	2b08      	cmp	r3, #8
 800379a:	d101      	bne.n	80037a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800379c:	4b23      	ldr	r3, [pc, #140]	; (800382c <HAL_RCC_GetSysClockFreq+0x114>)
 800379e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	2b0c      	cmp	r3, #12
 80037a4:	d134      	bne.n	8003810 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037a6:	4b1e      	ldr	r3, [pc, #120]	; (8003820 <HAL_RCC_GetSysClockFreq+0x108>)
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f003 0303 	and.w	r3, r3, #3
 80037ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d003      	beq.n	80037be <HAL_RCC_GetSysClockFreq+0xa6>
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	2b03      	cmp	r3, #3
 80037ba:	d003      	beq.n	80037c4 <HAL_RCC_GetSysClockFreq+0xac>
 80037bc:	e005      	b.n	80037ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80037be:	4b1a      	ldr	r3, [pc, #104]	; (8003828 <HAL_RCC_GetSysClockFreq+0x110>)
 80037c0:	617b      	str	r3, [r7, #20]
      break;
 80037c2:	e005      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80037c4:	4b19      	ldr	r3, [pc, #100]	; (800382c <HAL_RCC_GetSysClockFreq+0x114>)
 80037c6:	617b      	str	r3, [r7, #20]
      break;
 80037c8:	e002      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	617b      	str	r3, [r7, #20]
      break;
 80037ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037d0:	4b13      	ldr	r3, [pc, #76]	; (8003820 <HAL_RCC_GetSysClockFreq+0x108>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	091b      	lsrs	r3, r3, #4
 80037d6:	f003 0307 	and.w	r3, r3, #7
 80037da:	3301      	adds	r3, #1
 80037dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80037de:	4b10      	ldr	r3, [pc, #64]	; (8003820 <HAL_RCC_GetSysClockFreq+0x108>)
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	0a1b      	lsrs	r3, r3, #8
 80037e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	fb03 f202 	mul.w	r2, r3, r2
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037f6:	4b0a      	ldr	r3, [pc, #40]	; (8003820 <HAL_RCC_GetSysClockFreq+0x108>)
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	0e5b      	lsrs	r3, r3, #25
 80037fc:	f003 0303 	and.w	r3, r3, #3
 8003800:	3301      	adds	r3, #1
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	fbb2 f3f3 	udiv	r3, r2, r3
 800380e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003810:	69bb      	ldr	r3, [r7, #24]
}
 8003812:	4618      	mov	r0, r3
 8003814:	3724      	adds	r7, #36	; 0x24
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	40021000 	.word	0x40021000
 8003824:	08005f5c 	.word	0x08005f5c
 8003828:	00f42400 	.word	0x00f42400
 800382c:	007a1200 	.word	0x007a1200

08003830 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003834:	4b03      	ldr	r3, [pc, #12]	; (8003844 <HAL_RCC_GetHCLKFreq+0x14>)
 8003836:	681b      	ldr	r3, [r3, #0]
}
 8003838:	4618      	mov	r0, r3
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	20000000 	.word	0x20000000

08003848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800384c:	f7ff fff0 	bl	8003830 <HAL_RCC_GetHCLKFreq>
 8003850:	4602      	mov	r2, r0
 8003852:	4b06      	ldr	r3, [pc, #24]	; (800386c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	0a1b      	lsrs	r3, r3, #8
 8003858:	f003 0307 	and.w	r3, r3, #7
 800385c:	4904      	ldr	r1, [pc, #16]	; (8003870 <HAL_RCC_GetPCLK1Freq+0x28>)
 800385e:	5ccb      	ldrb	r3, [r1, r3]
 8003860:	f003 031f 	and.w	r3, r3, #31
 8003864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003868:	4618      	mov	r0, r3
 800386a:	bd80      	pop	{r7, pc}
 800386c:	40021000 	.word	0x40021000
 8003870:	08005f54 	.word	0x08005f54

08003874 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003878:	f7ff ffda 	bl	8003830 <HAL_RCC_GetHCLKFreq>
 800387c:	4602      	mov	r2, r0
 800387e:	4b06      	ldr	r3, [pc, #24]	; (8003898 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	0adb      	lsrs	r3, r3, #11
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	4904      	ldr	r1, [pc, #16]	; (800389c <HAL_RCC_GetPCLK2Freq+0x28>)
 800388a:	5ccb      	ldrb	r3, [r1, r3]
 800388c:	f003 031f 	and.w	r3, r3, #31
 8003890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003894:	4618      	mov	r0, r3
 8003896:	bd80      	pop	{r7, pc}
 8003898:	40021000 	.word	0x40021000
 800389c:	08005f54 	.word	0x08005f54

080038a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80038a8:	2300      	movs	r3, #0
 80038aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80038ac:	4b2a      	ldr	r3, [pc, #168]	; (8003958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80038b8:	f7ff f9ee 	bl	8002c98 <HAL_PWREx_GetVoltageRange>
 80038bc:	6178      	str	r0, [r7, #20]
 80038be:	e014      	b.n	80038ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80038c0:	4b25      	ldr	r3, [pc, #148]	; (8003958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c4:	4a24      	ldr	r2, [pc, #144]	; (8003958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ca:	6593      	str	r3, [r2, #88]	; 0x58
 80038cc:	4b22      	ldr	r3, [pc, #136]	; (8003958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80038d8:	f7ff f9de 	bl	8002c98 <HAL_PWREx_GetVoltageRange>
 80038dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80038de:	4b1e      	ldr	r3, [pc, #120]	; (8003958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e2:	4a1d      	ldr	r2, [pc, #116]	; (8003958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038e8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038f0:	d10b      	bne.n	800390a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2b80      	cmp	r3, #128	; 0x80
 80038f6:	d919      	bls.n	800392c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2ba0      	cmp	r3, #160	; 0xa0
 80038fc:	d902      	bls.n	8003904 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038fe:	2302      	movs	r3, #2
 8003900:	613b      	str	r3, [r7, #16]
 8003902:	e013      	b.n	800392c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003904:	2301      	movs	r3, #1
 8003906:	613b      	str	r3, [r7, #16]
 8003908:	e010      	b.n	800392c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2b80      	cmp	r3, #128	; 0x80
 800390e:	d902      	bls.n	8003916 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003910:	2303      	movs	r3, #3
 8003912:	613b      	str	r3, [r7, #16]
 8003914:	e00a      	b.n	800392c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b80      	cmp	r3, #128	; 0x80
 800391a:	d102      	bne.n	8003922 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800391c:	2302      	movs	r3, #2
 800391e:	613b      	str	r3, [r7, #16]
 8003920:	e004      	b.n	800392c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b70      	cmp	r3, #112	; 0x70
 8003926:	d101      	bne.n	800392c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003928:	2301      	movs	r3, #1
 800392a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800392c:	4b0b      	ldr	r3, [pc, #44]	; (800395c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f023 0207 	bic.w	r2, r3, #7
 8003934:	4909      	ldr	r1, [pc, #36]	; (800395c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	4313      	orrs	r3, r2
 800393a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800393c:	4b07      	ldr	r3, [pc, #28]	; (800395c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	429a      	cmp	r2, r3
 8003948:	d001      	beq.n	800394e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e000      	b.n	8003950 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3718      	adds	r7, #24
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40021000 	.word	0x40021000
 800395c:	40022000 	.word	0x40022000

08003960 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003968:	2300      	movs	r3, #0
 800396a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800396c:	2300      	movs	r3, #0
 800396e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003978:	2b00      	cmp	r3, #0
 800397a:	d041      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003980:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003984:	d02a      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003986:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800398a:	d824      	bhi.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800398c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003990:	d008      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003992:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003996:	d81e      	bhi.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00a      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800399c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039a0:	d010      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039a2:	e018      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039a4:	4b86      	ldr	r3, [pc, #536]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	4a85      	ldr	r2, [pc, #532]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039b0:	e015      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	3304      	adds	r3, #4
 80039b6:	2100      	movs	r1, #0
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 fabb 	bl	8003f34 <RCCEx_PLLSAI1_Config>
 80039be:	4603      	mov	r3, r0
 80039c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039c2:	e00c      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	3320      	adds	r3, #32
 80039c8:	2100      	movs	r1, #0
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 fba6 	bl	800411c <RCCEx_PLLSAI2_Config>
 80039d0:	4603      	mov	r3, r0
 80039d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039d4:	e003      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	74fb      	strb	r3, [r7, #19]
      break;
 80039da:	e000      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80039dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039de:	7cfb      	ldrb	r3, [r7, #19]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10b      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039e4:	4b76      	ldr	r3, [pc, #472]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039f2:	4973      	ldr	r1, [pc, #460]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80039fa:	e001      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039fc:	7cfb      	ldrb	r3, [r7, #19]
 80039fe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d041      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a10:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a14:	d02a      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003a16:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a1a:	d824      	bhi.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a20:	d008      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a26:	d81e      	bhi.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00a      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003a2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a30:	d010      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a32:	e018      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a34:	4b62      	ldr	r3, [pc, #392]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	4a61      	ldr	r2, [pc, #388]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a3e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a40:	e015      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	3304      	adds	r3, #4
 8003a46:	2100      	movs	r1, #0
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f000 fa73 	bl	8003f34 <RCCEx_PLLSAI1_Config>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a52:	e00c      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3320      	adds	r3, #32
 8003a58:	2100      	movs	r1, #0
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 fb5e 	bl	800411c <RCCEx_PLLSAI2_Config>
 8003a60:	4603      	mov	r3, r0
 8003a62:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a64:	e003      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	74fb      	strb	r3, [r7, #19]
      break;
 8003a6a:	e000      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003a6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a6e:	7cfb      	ldrb	r3, [r7, #19]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10b      	bne.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a74:	4b52      	ldr	r3, [pc, #328]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a82:	494f      	ldr	r1, [pc, #316]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a8a:	e001      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a8c:	7cfb      	ldrb	r3, [r7, #19]
 8003a8e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 80a0 	beq.w	8003bde <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003aa2:	4b47      	ldr	r3, [pc, #284]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e000      	b.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00d      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ab8:	4b41      	ldr	r3, [pc, #260]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003abc:	4a40      	ldr	r2, [pc, #256]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ac4:	4b3e      	ldr	r3, [pc, #248]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003acc:	60bb      	str	r3, [r7, #8]
 8003ace:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ad4:	4b3b      	ldr	r3, [pc, #236]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a3a      	ldr	r2, [pc, #232]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ade:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ae0:	f7fd fa02 	bl	8000ee8 <HAL_GetTick>
 8003ae4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ae6:	e009      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ae8:	f7fd f9fe 	bl	8000ee8 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d902      	bls.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	74fb      	strb	r3, [r7, #19]
        break;
 8003afa:	e005      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003afc:	4b31      	ldr	r3, [pc, #196]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d0ef      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003b08:	7cfb      	ldrb	r3, [r7, #19]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d15c      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b0e:	4b2c      	ldr	r3, [pc, #176]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b18:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d01f      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d019      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b2c:	4b24      	ldr	r3, [pc, #144]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b36:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b38:	4b21      	ldr	r3, [pc, #132]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3e:	4a20      	ldr	r2, [pc, #128]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b48:	4b1d      	ldr	r3, [pc, #116]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4e:	4a1c      	ldr	r2, [pc, #112]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b58:	4a19      	ldr	r2, [pc, #100]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d016      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6a:	f7fd f9bd 	bl	8000ee8 <HAL_GetTick>
 8003b6e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b70:	e00b      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b72:	f7fd f9b9 	bl	8000ee8 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d902      	bls.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	74fb      	strb	r3, [r7, #19]
            break;
 8003b88:	e006      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b8a:	4b0d      	ldr	r3, [pc, #52]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0ec      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003b98:	7cfb      	ldrb	r3, [r7, #19]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10c      	bne.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b9e:	4b08      	ldr	r3, [pc, #32]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bae:	4904      	ldr	r1, [pc, #16]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003bb6:	e009      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bb8:	7cfb      	ldrb	r3, [r7, #19]
 8003bba:	74bb      	strb	r3, [r7, #18]
 8003bbc:	e006      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003bbe:	bf00      	nop
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc8:	7cfb      	ldrb	r3, [r7, #19]
 8003bca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bcc:	7c7b      	ldrb	r3, [r7, #17]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d105      	bne.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bd2:	4b9e      	ldr	r3, [pc, #632]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd6:	4a9d      	ldr	r2, [pc, #628]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bdc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00a      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bea:	4b98      	ldr	r3, [pc, #608]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf0:	f023 0203 	bic.w	r2, r3, #3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf8:	4994      	ldr	r1, [pc, #592]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00a      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c0c:	4b8f      	ldr	r3, [pc, #572]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c12:	f023 020c 	bic.w	r2, r3, #12
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c1a:	498c      	ldr	r1, [pc, #560]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0304 	and.w	r3, r3, #4
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00a      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c2e:	4b87      	ldr	r3, [pc, #540]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c34:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3c:	4983      	ldr	r1, [pc, #524]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0308 	and.w	r3, r3, #8
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00a      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c50:	4b7e      	ldr	r3, [pc, #504]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c56:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5e:	497b      	ldr	r1, [pc, #492]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0310 	and.w	r3, r3, #16
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00a      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c72:	4b76      	ldr	r3, [pc, #472]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c80:	4972      	ldr	r1, [pc, #456]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0320 	and.w	r3, r3, #32
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00a      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c94:	4b6d      	ldr	r3, [pc, #436]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ca2:	496a      	ldr	r1, [pc, #424]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00a      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cb6:	4b65      	ldr	r3, [pc, #404]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cbc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc4:	4961      	ldr	r1, [pc, #388]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00a      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003cd8:	4b5c      	ldr	r3, [pc, #368]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cde:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ce6:	4959      	ldr	r1, [pc, #356]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00a      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cfa:	4b54      	ldr	r3, [pc, #336]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d00:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d08:	4950      	ldr	r1, [pc, #320]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00a      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d1c:	4b4b      	ldr	r3, [pc, #300]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d22:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2a:	4948      	ldr	r1, [pc, #288]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00a      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d3e:	4b43      	ldr	r3, [pc, #268]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4c:	493f      	ldr	r1, [pc, #252]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d028      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d60:	4b3a      	ldr	r3, [pc, #232]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d6e:	4937      	ldr	r1, [pc, #220]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d7e:	d106      	bne.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d80:	4b32      	ldr	r3, [pc, #200]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	4a31      	ldr	r2, [pc, #196]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d8a:	60d3      	str	r3, [r2, #12]
 8003d8c:	e011      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d96:	d10c      	bne.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	3304      	adds	r3, #4
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 f8c8 	bl	8003f34 <RCCEx_PLLSAI1_Config>
 8003da4:	4603      	mov	r3, r0
 8003da6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003da8:	7cfb      	ldrb	r3, [r7, #19]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003dae:	7cfb      	ldrb	r3, [r7, #19]
 8003db0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d028      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003dbe:	4b23      	ldr	r3, [pc, #140]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dcc:	491f      	ldr	r1, [pc, #124]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ddc:	d106      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dde:	4b1b      	ldr	r3, [pc, #108]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	4a1a      	ldr	r2, [pc, #104]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003de8:	60d3      	str	r3, [r2, #12]
 8003dea:	e011      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003df4:	d10c      	bne.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	3304      	adds	r3, #4
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 f899 	bl	8003f34 <RCCEx_PLLSAI1_Config>
 8003e02:	4603      	mov	r3, r0
 8003e04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e06:	7cfb      	ldrb	r3, [r7, #19]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003e0c:	7cfb      	ldrb	r3, [r7, #19]
 8003e0e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d02b      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e1c:	4b0b      	ldr	r3, [pc, #44]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e2a:	4908      	ldr	r1, [pc, #32]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e3a:	d109      	bne.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e3c:	4b03      	ldr	r3, [pc, #12]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	4a02      	ldr	r2, [pc, #8]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e46:	60d3      	str	r3, [r2, #12]
 8003e48:	e014      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003e4a:	bf00      	nop
 8003e4c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e58:	d10c      	bne.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	2101      	movs	r1, #1
 8003e60:	4618      	mov	r0, r3
 8003e62:	f000 f867 	bl	8003f34 <RCCEx_PLLSAI1_Config>
 8003e66:	4603      	mov	r3, r0
 8003e68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e6a:	7cfb      	ldrb	r3, [r7, #19]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003e70:	7cfb      	ldrb	r3, [r7, #19]
 8003e72:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d02f      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e80:	4b2b      	ldr	r3, [pc, #172]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e8e:	4928      	ldr	r1, [pc, #160]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e9e:	d10d      	bne.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	3304      	adds	r3, #4
 8003ea4:	2102      	movs	r1, #2
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 f844 	bl	8003f34 <RCCEx_PLLSAI1_Config>
 8003eac:	4603      	mov	r3, r0
 8003eae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003eb0:	7cfb      	ldrb	r3, [r7, #19]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d014      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003eb6:	7cfb      	ldrb	r3, [r7, #19]
 8003eb8:	74bb      	strb	r3, [r7, #18]
 8003eba:	e011      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ec0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ec4:	d10c      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	3320      	adds	r3, #32
 8003eca:	2102      	movs	r1, #2
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f000 f925 	bl	800411c <RCCEx_PLLSAI2_Config>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ed6:	7cfb      	ldrb	r3, [r7, #19]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003edc:	7cfb      	ldrb	r3, [r7, #19]
 8003ede:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00a      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003eec:	4b10      	ldr	r3, [pc, #64]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003efa:	490d      	ldr	r1, [pc, #52]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00b      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f0e:	4b08      	ldr	r3, [pc, #32]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f14:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f1e:	4904      	ldr	r1, [pc, #16]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f26:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3718      	adds	r7, #24
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	40021000 	.word	0x40021000

08003f34 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f42:	4b75      	ldr	r3, [pc, #468]	; (8004118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	f003 0303 	and.w	r3, r3, #3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d018      	beq.n	8003f80 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f4e:	4b72      	ldr	r3, [pc, #456]	; (8004118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f003 0203 	and.w	r2, r3, #3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d10d      	bne.n	8003f7a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
       ||
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d009      	beq.n	8003f7a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003f66:	4b6c      	ldr	r3, [pc, #432]	; (8004118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	091b      	lsrs	r3, r3, #4
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	1c5a      	adds	r2, r3, #1
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
       ||
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d047      	beq.n	800400a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	73fb      	strb	r3, [r7, #15]
 8003f7e:	e044      	b.n	800400a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2b03      	cmp	r3, #3
 8003f86:	d018      	beq.n	8003fba <RCCEx_PLLSAI1_Config+0x86>
 8003f88:	2b03      	cmp	r3, #3
 8003f8a:	d825      	bhi.n	8003fd8 <RCCEx_PLLSAI1_Config+0xa4>
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d002      	beq.n	8003f96 <RCCEx_PLLSAI1_Config+0x62>
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d009      	beq.n	8003fa8 <RCCEx_PLLSAI1_Config+0x74>
 8003f94:	e020      	b.n	8003fd8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f96:	4b60      	ldr	r3, [pc, #384]	; (8004118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d11d      	bne.n	8003fde <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fa6:	e01a      	b.n	8003fde <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fa8:	4b5b      	ldr	r3, [pc, #364]	; (8004118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d116      	bne.n	8003fe2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fb8:	e013      	b.n	8003fe2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003fba:	4b57      	ldr	r3, [pc, #348]	; (8004118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10f      	bne.n	8003fe6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003fc6:	4b54      	ldr	r3, [pc, #336]	; (8004118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d109      	bne.n	8003fe6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003fd6:	e006      	b.n	8003fe6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	73fb      	strb	r3, [r7, #15]
      break;
 8003fdc:	e004      	b.n	8003fe8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fde:	bf00      	nop
 8003fe0:	e002      	b.n	8003fe8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fe2:	bf00      	nop
 8003fe4:	e000      	b.n	8003fe8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fe6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003fe8:	7bfb      	ldrb	r3, [r7, #15]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10d      	bne.n	800400a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003fee:	4b4a      	ldr	r3, [pc, #296]	; (8004118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6819      	ldr	r1, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	3b01      	subs	r3, #1
 8004000:	011b      	lsls	r3, r3, #4
 8004002:	430b      	orrs	r3, r1
 8004004:	4944      	ldr	r1, [pc, #272]	; (8004118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004006:	4313      	orrs	r3, r2
 8004008:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800400a:	7bfb      	ldrb	r3, [r7, #15]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d17d      	bne.n	800410c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004010:	4b41      	ldr	r3, [pc, #260]	; (8004118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a40      	ldr	r2, [pc, #256]	; (8004118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004016:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800401a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800401c:	f7fc ff64 	bl	8000ee8 <HAL_GetTick>
 8004020:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004022:	e009      	b.n	8004038 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004024:	f7fc ff60 	bl	8000ee8 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d902      	bls.n	8004038 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	73fb      	strb	r3, [r7, #15]
        break;
 8004036:	e005      	b.n	8004044 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004038:	4b37      	ldr	r3, [pc, #220]	; (8004118 <RCCEx_PLLSAI1_Config+0x1e4>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1ef      	bne.n	8004024 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004044:	7bfb      	ldrb	r3, [r7, #15]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d160      	bne.n	800410c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d111      	bne.n	8004074 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004050:	4b31      	ldr	r3, [pc, #196]	; (8004118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	6892      	ldr	r2, [r2, #8]
 8004060:	0211      	lsls	r1, r2, #8
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	68d2      	ldr	r2, [r2, #12]
 8004066:	0912      	lsrs	r2, r2, #4
 8004068:	0452      	lsls	r2, r2, #17
 800406a:	430a      	orrs	r2, r1
 800406c:	492a      	ldr	r1, [pc, #168]	; (8004118 <RCCEx_PLLSAI1_Config+0x1e4>)
 800406e:	4313      	orrs	r3, r2
 8004070:	610b      	str	r3, [r1, #16]
 8004072:	e027      	b.n	80040c4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d112      	bne.n	80040a0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800407a:	4b27      	ldr	r3, [pc, #156]	; (8004118 <RCCEx_PLLSAI1_Config+0x1e4>)
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004082:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	6892      	ldr	r2, [r2, #8]
 800408a:	0211      	lsls	r1, r2, #8
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	6912      	ldr	r2, [r2, #16]
 8004090:	0852      	lsrs	r2, r2, #1
 8004092:	3a01      	subs	r2, #1
 8004094:	0552      	lsls	r2, r2, #21
 8004096:	430a      	orrs	r2, r1
 8004098:	491f      	ldr	r1, [pc, #124]	; (8004118 <RCCEx_PLLSAI1_Config+0x1e4>)
 800409a:	4313      	orrs	r3, r2
 800409c:	610b      	str	r3, [r1, #16]
 800409e:	e011      	b.n	80040c4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040a0:	4b1d      	ldr	r3, [pc, #116]	; (8004118 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80040a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	6892      	ldr	r2, [r2, #8]
 80040b0:	0211      	lsls	r1, r2, #8
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	6952      	ldr	r2, [r2, #20]
 80040b6:	0852      	lsrs	r2, r2, #1
 80040b8:	3a01      	subs	r2, #1
 80040ba:	0652      	lsls	r2, r2, #25
 80040bc:	430a      	orrs	r2, r1
 80040be:	4916      	ldr	r1, [pc, #88]	; (8004118 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80040c4:	4b14      	ldr	r3, [pc, #80]	; (8004118 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a13      	ldr	r2, [pc, #76]	; (8004118 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d0:	f7fc ff0a 	bl	8000ee8 <HAL_GetTick>
 80040d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040d6:	e009      	b.n	80040ec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040d8:	f7fc ff06 	bl	8000ee8 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d902      	bls.n	80040ec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	73fb      	strb	r3, [r7, #15]
          break;
 80040ea:	e005      	b.n	80040f8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040ec:	4b0a      	ldr	r3, [pc, #40]	; (8004118 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0ef      	beq.n	80040d8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80040f8:	7bfb      	ldrb	r3, [r7, #15]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d106      	bne.n	800410c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80040fe:	4b06      	ldr	r3, [pc, #24]	; (8004118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004100:	691a      	ldr	r2, [r3, #16]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	4904      	ldr	r1, [pc, #16]	; (8004118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004108:	4313      	orrs	r3, r2
 800410a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800410c:	7bfb      	ldrb	r3, [r7, #15]
}
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	40021000 	.word	0x40021000

0800411c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004126:	2300      	movs	r3, #0
 8004128:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800412a:	4b6a      	ldr	r3, [pc, #424]	; (80042d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	f003 0303 	and.w	r3, r3, #3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d018      	beq.n	8004168 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004136:	4b67      	ldr	r3, [pc, #412]	; (80042d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	f003 0203 	and.w	r2, r3, #3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	429a      	cmp	r2, r3
 8004144:	d10d      	bne.n	8004162 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
       ||
 800414a:	2b00      	cmp	r3, #0
 800414c:	d009      	beq.n	8004162 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800414e:	4b61      	ldr	r3, [pc, #388]	; (80042d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	091b      	lsrs	r3, r3, #4
 8004154:	f003 0307 	and.w	r3, r3, #7
 8004158:	1c5a      	adds	r2, r3, #1
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
       ||
 800415e:	429a      	cmp	r2, r3
 8004160:	d047      	beq.n	80041f2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	73fb      	strb	r3, [r7, #15]
 8004166:	e044      	b.n	80041f2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2b03      	cmp	r3, #3
 800416e:	d018      	beq.n	80041a2 <RCCEx_PLLSAI2_Config+0x86>
 8004170:	2b03      	cmp	r3, #3
 8004172:	d825      	bhi.n	80041c0 <RCCEx_PLLSAI2_Config+0xa4>
 8004174:	2b01      	cmp	r3, #1
 8004176:	d002      	beq.n	800417e <RCCEx_PLLSAI2_Config+0x62>
 8004178:	2b02      	cmp	r3, #2
 800417a:	d009      	beq.n	8004190 <RCCEx_PLLSAI2_Config+0x74>
 800417c:	e020      	b.n	80041c0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800417e:	4b55      	ldr	r3, [pc, #340]	; (80042d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d11d      	bne.n	80041c6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800418e:	e01a      	b.n	80041c6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004190:	4b50      	ldr	r3, [pc, #320]	; (80042d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004198:	2b00      	cmp	r3, #0
 800419a:	d116      	bne.n	80041ca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041a0:	e013      	b.n	80041ca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041a2:	4b4c      	ldr	r3, [pc, #304]	; (80042d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10f      	bne.n	80041ce <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041ae:	4b49      	ldr	r3, [pc, #292]	; (80042d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d109      	bne.n	80041ce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041be:	e006      	b.n	80041ce <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	73fb      	strb	r3, [r7, #15]
      break;
 80041c4:	e004      	b.n	80041d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041c6:	bf00      	nop
 80041c8:	e002      	b.n	80041d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041ca:	bf00      	nop
 80041cc:	e000      	b.n	80041d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80041d0:	7bfb      	ldrb	r3, [r7, #15]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10d      	bne.n	80041f2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041d6:	4b3f      	ldr	r3, [pc, #252]	; (80042d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6819      	ldr	r1, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	3b01      	subs	r3, #1
 80041e8:	011b      	lsls	r3, r3, #4
 80041ea:	430b      	orrs	r3, r1
 80041ec:	4939      	ldr	r1, [pc, #228]	; (80042d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041f2:	7bfb      	ldrb	r3, [r7, #15]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d167      	bne.n	80042c8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80041f8:	4b36      	ldr	r3, [pc, #216]	; (80042d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a35      	ldr	r2, [pc, #212]	; (80042d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004202:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004204:	f7fc fe70 	bl	8000ee8 <HAL_GetTick>
 8004208:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800420a:	e009      	b.n	8004220 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800420c:	f7fc fe6c 	bl	8000ee8 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b02      	cmp	r3, #2
 8004218:	d902      	bls.n	8004220 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	73fb      	strb	r3, [r7, #15]
        break;
 800421e:	e005      	b.n	800422c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004220:	4b2c      	ldr	r3, [pc, #176]	; (80042d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1ef      	bne.n	800420c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800422c:	7bfb      	ldrb	r3, [r7, #15]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d14a      	bne.n	80042c8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d111      	bne.n	800425c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004238:	4b26      	ldr	r3, [pc, #152]	; (80042d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004240:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	6892      	ldr	r2, [r2, #8]
 8004248:	0211      	lsls	r1, r2, #8
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	68d2      	ldr	r2, [r2, #12]
 800424e:	0912      	lsrs	r2, r2, #4
 8004250:	0452      	lsls	r2, r2, #17
 8004252:	430a      	orrs	r2, r1
 8004254:	491f      	ldr	r1, [pc, #124]	; (80042d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004256:	4313      	orrs	r3, r2
 8004258:	614b      	str	r3, [r1, #20]
 800425a:	e011      	b.n	8004280 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800425c:	4b1d      	ldr	r3, [pc, #116]	; (80042d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004264:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6892      	ldr	r2, [r2, #8]
 800426c:	0211      	lsls	r1, r2, #8
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	6912      	ldr	r2, [r2, #16]
 8004272:	0852      	lsrs	r2, r2, #1
 8004274:	3a01      	subs	r2, #1
 8004276:	0652      	lsls	r2, r2, #25
 8004278:	430a      	orrs	r2, r1
 800427a:	4916      	ldr	r1, [pc, #88]	; (80042d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800427c:	4313      	orrs	r3, r2
 800427e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004280:	4b14      	ldr	r3, [pc, #80]	; (80042d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a13      	ldr	r2, [pc, #76]	; (80042d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800428a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800428c:	f7fc fe2c 	bl	8000ee8 <HAL_GetTick>
 8004290:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004292:	e009      	b.n	80042a8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004294:	f7fc fe28 	bl	8000ee8 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d902      	bls.n	80042a8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	73fb      	strb	r3, [r7, #15]
          break;
 80042a6:	e005      	b.n	80042b4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042a8:	4b0a      	ldr	r3, [pc, #40]	; (80042d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d0ef      	beq.n	8004294 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80042b4:	7bfb      	ldrb	r3, [r7, #15]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d106      	bne.n	80042c8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80042ba:	4b06      	ldr	r3, [pc, #24]	; (80042d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042bc:	695a      	ldr	r2, [r3, #20]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	4904      	ldr	r1, [pc, #16]	; (80042d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80042c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	40021000 	.word	0x40021000

080042d8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d06c      	beq.n	80043c4 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d106      	bne.n	8004304 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7fc fb8c 	bl	8000a1c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2202      	movs	r2, #2
 8004308:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	22ca      	movs	r2, #202	; 0xca
 8004312:	625a      	str	r2, [r3, #36]	; 0x24
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2253      	movs	r2, #83	; 0x53
 800431a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 f87c 	bl	800441a <RTC_EnterInitMode>
 8004322:	4603      	mov	r3, r0
 8004324:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004326:	7bfb      	ldrb	r3, [r7, #15]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d14b      	bne.n	80043c4 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	6812      	ldr	r2, [r2, #0]
 8004336:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800433a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800433e:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6899      	ldr	r1, [r3, #8]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	431a      	orrs	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	431a      	orrs	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	430a      	orrs	r2, r1
 800435c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	68d2      	ldr	r2, [r2, #12]
 8004366:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6919      	ldr	r1, [r3, #16]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	041a      	lsls	r2, r3, #16
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	430a      	orrs	r2, r1
 800437a:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 f87f 	bl	8004480 <RTC_ExitInitMode>
 8004382:	4603      	mov	r3, r0
 8004384:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004386:	7bfb      	ldrb	r3, [r7, #15]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d11b      	bne.n	80043c4 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 0203 	bic.w	r2, r2, #3
 800439a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	69da      	ldr	r2, [r3, #28]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	431a      	orrs	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	430a      	orrs	r2, r1
 80043b2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	22ff      	movs	r2, #255	; 0xff
 80043ba:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80043c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b084      	sub	sp, #16
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68da      	ldr	r2, [r3, #12]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043e4:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80043e6:	f7fc fd7f 	bl	8000ee8 <HAL_GetTick>
 80043ea:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80043ec:	e009      	b.n	8004402 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80043ee:	f7fc fd7b 	bl	8000ee8 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043fc:	d901      	bls.n	8004402 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e007      	b.n	8004412 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f003 0320 	and.w	r3, r3, #32
 800440c:	2b00      	cmp	r3, #0
 800440e:	d0ee      	beq.n	80043ee <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b084      	sub	sp, #16
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004422:	2300      	movs	r3, #0
 8004424:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004430:	2b00      	cmp	r3, #0
 8004432:	d120      	bne.n	8004476 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f04f 32ff 	mov.w	r2, #4294967295
 800443c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800443e:	f7fc fd53 	bl	8000ee8 <HAL_GetTick>
 8004442:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004444:	e00d      	b.n	8004462 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004446:	f7fc fd4f 	bl	8000ee8 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004454:	d905      	bls.n	8004462 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2203      	movs	r2, #3
 800445e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800446c:	2b00      	cmp	r3, #0
 800446e:	d102      	bne.n	8004476 <RTC_EnterInitMode+0x5c>
 8004470:	7bfb      	ldrb	r3, [r7, #15]
 8004472:	2b03      	cmp	r3, #3
 8004474:	d1e7      	bne.n	8004446 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8004476:	7bfb      	ldrb	r3, [r7, #15]
}
 8004478:	4618      	mov	r0, r3
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004488:	2300      	movs	r3, #0
 800448a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800448c:	4b1a      	ldr	r3, [pc, #104]	; (80044f8 <RTC_ExitInitMode+0x78>)
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	4a19      	ldr	r2, [pc, #100]	; (80044f8 <RTC_ExitInitMode+0x78>)
 8004492:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004496:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004498:	4b17      	ldr	r3, [pc, #92]	; (80044f8 <RTC_ExitInitMode+0x78>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f003 0320 	and.w	r3, r3, #32
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10c      	bne.n	80044be <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f7ff ff92 	bl	80043ce <HAL_RTC_WaitForSynchro>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d01e      	beq.n	80044ee <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2203      	movs	r2, #3
 80044b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	73fb      	strb	r3, [r7, #15]
 80044bc:	e017      	b.n	80044ee <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80044be:	4b0e      	ldr	r3, [pc, #56]	; (80044f8 <RTC_ExitInitMode+0x78>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	4a0d      	ldr	r2, [pc, #52]	; (80044f8 <RTC_ExitInitMode+0x78>)
 80044c4:	f023 0320 	bic.w	r3, r3, #32
 80044c8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7ff ff7f 	bl	80043ce <HAL_RTC_WaitForSynchro>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d005      	beq.n	80044e2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2203      	movs	r2, #3
 80044da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80044e2:	4b05      	ldr	r3, [pc, #20]	; (80044f8 <RTC_ExitInitMode+0x78>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	4a04      	ldr	r2, [pc, #16]	; (80044f8 <RTC_ExitInitMode+0x78>)
 80044e8:	f043 0320 	orr.w	r3, r3, #32
 80044ec:	6093      	str	r3, [r2, #8]
  }

  return status;
 80044ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	40002800 	.word	0x40002800

080044fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e040      	b.n	8004590 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004512:	2b00      	cmp	r3, #0
 8004514:	d106      	bne.n	8004524 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7fc fbec 	bl	8000cfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2224      	movs	r2, #36	; 0x24
 8004528:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 0201 	bic.w	r2, r2, #1
 8004538:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f8c0 	bl	80046c0 <UART_SetConfig>
 8004540:	4603      	mov	r3, r0
 8004542:	2b01      	cmp	r3, #1
 8004544:	d101      	bne.n	800454a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e022      	b.n	8004590 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	2b00      	cmp	r3, #0
 8004550:	d002      	beq.n	8004558 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 fb6c 	bl	8004c30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	685a      	ldr	r2, [r3, #4]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004566:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	689a      	ldr	r2, [r3, #8]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004576:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f042 0201 	orr.w	r2, r2, #1
 8004586:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 fbf3 	bl	8004d74 <UART_CheckIdleState>
 800458e:	4603      	mov	r3, r0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3708      	adds	r7, #8
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b08a      	sub	sp, #40	; 0x28
 800459c:	af02      	add	r7, sp, #8
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	603b      	str	r3, [r7, #0]
 80045a4:	4613      	mov	r3, r2
 80045a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045ac:	2b20      	cmp	r3, #32
 80045ae:	f040 8082 	bne.w	80046b6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d002      	beq.n	80045be <HAL_UART_Transmit+0x26>
 80045b8:	88fb      	ldrh	r3, [r7, #6]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e07a      	b.n	80046b8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d101      	bne.n	80045d0 <HAL_UART_Transmit+0x38>
 80045cc:	2302      	movs	r3, #2
 80045ce:	e073      	b.n	80046b8 <HAL_UART_Transmit+0x120>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2221      	movs	r2, #33	; 0x21
 80045e4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045e6:	f7fc fc7f 	bl	8000ee8 <HAL_GetTick>
 80045ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	88fa      	ldrh	r2, [r7, #6]
 80045f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	88fa      	ldrh	r2, [r7, #6]
 80045f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004604:	d108      	bne.n	8004618 <HAL_UART_Transmit+0x80>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d104      	bne.n	8004618 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800460e:	2300      	movs	r3, #0
 8004610:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	61bb      	str	r3, [r7, #24]
 8004616:	e003      	b.n	8004620 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800461c:	2300      	movs	r3, #0
 800461e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004628:	e02d      	b.n	8004686 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	9300      	str	r3, [sp, #0]
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	2200      	movs	r2, #0
 8004632:	2180      	movs	r1, #128	; 0x80
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f000 fbe6 	bl	8004e06 <UART_WaitOnFlagUntilTimeout>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e039      	b.n	80046b8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10b      	bne.n	8004662 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	881a      	ldrh	r2, [r3, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004656:	b292      	uxth	r2, r2
 8004658:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	3302      	adds	r3, #2
 800465e:	61bb      	str	r3, [r7, #24]
 8004660:	e008      	b.n	8004674 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	781a      	ldrb	r2, [r3, #0]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	b292      	uxth	r2, r2
 800466c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	3301      	adds	r3, #1
 8004672:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800467a:	b29b      	uxth	r3, r3
 800467c:	3b01      	subs	r3, #1
 800467e:	b29a      	uxth	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800468c:	b29b      	uxth	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1cb      	bne.n	800462a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	9300      	str	r3, [sp, #0]
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	2200      	movs	r2, #0
 800469a:	2140      	movs	r1, #64	; 0x40
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f000 fbb2 	bl	8004e06 <UART_WaitOnFlagUntilTimeout>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d001      	beq.n	80046ac <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e005      	b.n	80046b8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2220      	movs	r2, #32
 80046b0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80046b2:	2300      	movs	r3, #0
 80046b4:	e000      	b.n	80046b8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80046b6:	2302      	movs	r3, #2
  }
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3720      	adds	r7, #32
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046c4:	b08a      	sub	sp, #40	; 0x28
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046ca:	2300      	movs	r3, #0
 80046cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	689a      	ldr	r2, [r3, #8]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	431a      	orrs	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	431a      	orrs	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	69db      	ldr	r3, [r3, #28]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	4ba4      	ldr	r3, [pc, #656]	; (8004980 <UART_SetConfig+0x2c0>)
 80046f0:	4013      	ands	r3, r2
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	6812      	ldr	r2, [r2, #0]
 80046f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046f8:	430b      	orrs	r3, r1
 80046fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a99      	ldr	r2, [pc, #612]	; (8004984 <UART_SetConfig+0x2c4>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d004      	beq.n	800472c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004728:	4313      	orrs	r3, r2
 800472a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800473c:	430a      	orrs	r2, r1
 800473e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a90      	ldr	r2, [pc, #576]	; (8004988 <UART_SetConfig+0x2c8>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d126      	bne.n	8004798 <UART_SetConfig+0xd8>
 800474a:	4b90      	ldr	r3, [pc, #576]	; (800498c <UART_SetConfig+0x2cc>)
 800474c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004750:	f003 0303 	and.w	r3, r3, #3
 8004754:	2b03      	cmp	r3, #3
 8004756:	d81b      	bhi.n	8004790 <UART_SetConfig+0xd0>
 8004758:	a201      	add	r2, pc, #4	; (adr r2, 8004760 <UART_SetConfig+0xa0>)
 800475a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475e:	bf00      	nop
 8004760:	08004771 	.word	0x08004771
 8004764:	08004781 	.word	0x08004781
 8004768:	08004779 	.word	0x08004779
 800476c:	08004789 	.word	0x08004789
 8004770:	2301      	movs	r3, #1
 8004772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004776:	e116      	b.n	80049a6 <UART_SetConfig+0x2e6>
 8004778:	2302      	movs	r3, #2
 800477a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800477e:	e112      	b.n	80049a6 <UART_SetConfig+0x2e6>
 8004780:	2304      	movs	r3, #4
 8004782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004786:	e10e      	b.n	80049a6 <UART_SetConfig+0x2e6>
 8004788:	2308      	movs	r3, #8
 800478a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800478e:	e10a      	b.n	80049a6 <UART_SetConfig+0x2e6>
 8004790:	2310      	movs	r3, #16
 8004792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004796:	e106      	b.n	80049a6 <UART_SetConfig+0x2e6>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a7c      	ldr	r2, [pc, #496]	; (8004990 <UART_SetConfig+0x2d0>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d138      	bne.n	8004814 <UART_SetConfig+0x154>
 80047a2:	4b7a      	ldr	r3, [pc, #488]	; (800498c <UART_SetConfig+0x2cc>)
 80047a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a8:	f003 030c 	and.w	r3, r3, #12
 80047ac:	2b0c      	cmp	r3, #12
 80047ae:	d82d      	bhi.n	800480c <UART_SetConfig+0x14c>
 80047b0:	a201      	add	r2, pc, #4	; (adr r2, 80047b8 <UART_SetConfig+0xf8>)
 80047b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b6:	bf00      	nop
 80047b8:	080047ed 	.word	0x080047ed
 80047bc:	0800480d 	.word	0x0800480d
 80047c0:	0800480d 	.word	0x0800480d
 80047c4:	0800480d 	.word	0x0800480d
 80047c8:	080047fd 	.word	0x080047fd
 80047cc:	0800480d 	.word	0x0800480d
 80047d0:	0800480d 	.word	0x0800480d
 80047d4:	0800480d 	.word	0x0800480d
 80047d8:	080047f5 	.word	0x080047f5
 80047dc:	0800480d 	.word	0x0800480d
 80047e0:	0800480d 	.word	0x0800480d
 80047e4:	0800480d 	.word	0x0800480d
 80047e8:	08004805 	.word	0x08004805
 80047ec:	2300      	movs	r3, #0
 80047ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047f2:	e0d8      	b.n	80049a6 <UART_SetConfig+0x2e6>
 80047f4:	2302      	movs	r3, #2
 80047f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047fa:	e0d4      	b.n	80049a6 <UART_SetConfig+0x2e6>
 80047fc:	2304      	movs	r3, #4
 80047fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004802:	e0d0      	b.n	80049a6 <UART_SetConfig+0x2e6>
 8004804:	2308      	movs	r3, #8
 8004806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800480a:	e0cc      	b.n	80049a6 <UART_SetConfig+0x2e6>
 800480c:	2310      	movs	r3, #16
 800480e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004812:	e0c8      	b.n	80049a6 <UART_SetConfig+0x2e6>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a5e      	ldr	r2, [pc, #376]	; (8004994 <UART_SetConfig+0x2d4>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d125      	bne.n	800486a <UART_SetConfig+0x1aa>
 800481e:	4b5b      	ldr	r3, [pc, #364]	; (800498c <UART_SetConfig+0x2cc>)
 8004820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004824:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004828:	2b30      	cmp	r3, #48	; 0x30
 800482a:	d016      	beq.n	800485a <UART_SetConfig+0x19a>
 800482c:	2b30      	cmp	r3, #48	; 0x30
 800482e:	d818      	bhi.n	8004862 <UART_SetConfig+0x1a2>
 8004830:	2b20      	cmp	r3, #32
 8004832:	d00a      	beq.n	800484a <UART_SetConfig+0x18a>
 8004834:	2b20      	cmp	r3, #32
 8004836:	d814      	bhi.n	8004862 <UART_SetConfig+0x1a2>
 8004838:	2b00      	cmp	r3, #0
 800483a:	d002      	beq.n	8004842 <UART_SetConfig+0x182>
 800483c:	2b10      	cmp	r3, #16
 800483e:	d008      	beq.n	8004852 <UART_SetConfig+0x192>
 8004840:	e00f      	b.n	8004862 <UART_SetConfig+0x1a2>
 8004842:	2300      	movs	r3, #0
 8004844:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004848:	e0ad      	b.n	80049a6 <UART_SetConfig+0x2e6>
 800484a:	2302      	movs	r3, #2
 800484c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004850:	e0a9      	b.n	80049a6 <UART_SetConfig+0x2e6>
 8004852:	2304      	movs	r3, #4
 8004854:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004858:	e0a5      	b.n	80049a6 <UART_SetConfig+0x2e6>
 800485a:	2308      	movs	r3, #8
 800485c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004860:	e0a1      	b.n	80049a6 <UART_SetConfig+0x2e6>
 8004862:	2310      	movs	r3, #16
 8004864:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004868:	e09d      	b.n	80049a6 <UART_SetConfig+0x2e6>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a4a      	ldr	r2, [pc, #296]	; (8004998 <UART_SetConfig+0x2d8>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d125      	bne.n	80048c0 <UART_SetConfig+0x200>
 8004874:	4b45      	ldr	r3, [pc, #276]	; (800498c <UART_SetConfig+0x2cc>)
 8004876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800487a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800487e:	2bc0      	cmp	r3, #192	; 0xc0
 8004880:	d016      	beq.n	80048b0 <UART_SetConfig+0x1f0>
 8004882:	2bc0      	cmp	r3, #192	; 0xc0
 8004884:	d818      	bhi.n	80048b8 <UART_SetConfig+0x1f8>
 8004886:	2b80      	cmp	r3, #128	; 0x80
 8004888:	d00a      	beq.n	80048a0 <UART_SetConfig+0x1e0>
 800488a:	2b80      	cmp	r3, #128	; 0x80
 800488c:	d814      	bhi.n	80048b8 <UART_SetConfig+0x1f8>
 800488e:	2b00      	cmp	r3, #0
 8004890:	d002      	beq.n	8004898 <UART_SetConfig+0x1d8>
 8004892:	2b40      	cmp	r3, #64	; 0x40
 8004894:	d008      	beq.n	80048a8 <UART_SetConfig+0x1e8>
 8004896:	e00f      	b.n	80048b8 <UART_SetConfig+0x1f8>
 8004898:	2300      	movs	r3, #0
 800489a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800489e:	e082      	b.n	80049a6 <UART_SetConfig+0x2e6>
 80048a0:	2302      	movs	r3, #2
 80048a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048a6:	e07e      	b.n	80049a6 <UART_SetConfig+0x2e6>
 80048a8:	2304      	movs	r3, #4
 80048aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ae:	e07a      	b.n	80049a6 <UART_SetConfig+0x2e6>
 80048b0:	2308      	movs	r3, #8
 80048b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048b6:	e076      	b.n	80049a6 <UART_SetConfig+0x2e6>
 80048b8:	2310      	movs	r3, #16
 80048ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048be:	e072      	b.n	80049a6 <UART_SetConfig+0x2e6>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a35      	ldr	r2, [pc, #212]	; (800499c <UART_SetConfig+0x2dc>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d12a      	bne.n	8004920 <UART_SetConfig+0x260>
 80048ca:	4b30      	ldr	r3, [pc, #192]	; (800498c <UART_SetConfig+0x2cc>)
 80048cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048d8:	d01a      	beq.n	8004910 <UART_SetConfig+0x250>
 80048da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048de:	d81b      	bhi.n	8004918 <UART_SetConfig+0x258>
 80048e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048e4:	d00c      	beq.n	8004900 <UART_SetConfig+0x240>
 80048e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048ea:	d815      	bhi.n	8004918 <UART_SetConfig+0x258>
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d003      	beq.n	80048f8 <UART_SetConfig+0x238>
 80048f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048f4:	d008      	beq.n	8004908 <UART_SetConfig+0x248>
 80048f6:	e00f      	b.n	8004918 <UART_SetConfig+0x258>
 80048f8:	2300      	movs	r3, #0
 80048fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048fe:	e052      	b.n	80049a6 <UART_SetConfig+0x2e6>
 8004900:	2302      	movs	r3, #2
 8004902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004906:	e04e      	b.n	80049a6 <UART_SetConfig+0x2e6>
 8004908:	2304      	movs	r3, #4
 800490a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800490e:	e04a      	b.n	80049a6 <UART_SetConfig+0x2e6>
 8004910:	2308      	movs	r3, #8
 8004912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004916:	e046      	b.n	80049a6 <UART_SetConfig+0x2e6>
 8004918:	2310      	movs	r3, #16
 800491a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800491e:	e042      	b.n	80049a6 <UART_SetConfig+0x2e6>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a17      	ldr	r2, [pc, #92]	; (8004984 <UART_SetConfig+0x2c4>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d13a      	bne.n	80049a0 <UART_SetConfig+0x2e0>
 800492a:	4b18      	ldr	r3, [pc, #96]	; (800498c <UART_SetConfig+0x2cc>)
 800492c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004930:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004934:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004938:	d01a      	beq.n	8004970 <UART_SetConfig+0x2b0>
 800493a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800493e:	d81b      	bhi.n	8004978 <UART_SetConfig+0x2b8>
 8004940:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004944:	d00c      	beq.n	8004960 <UART_SetConfig+0x2a0>
 8004946:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800494a:	d815      	bhi.n	8004978 <UART_SetConfig+0x2b8>
 800494c:	2b00      	cmp	r3, #0
 800494e:	d003      	beq.n	8004958 <UART_SetConfig+0x298>
 8004950:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004954:	d008      	beq.n	8004968 <UART_SetConfig+0x2a8>
 8004956:	e00f      	b.n	8004978 <UART_SetConfig+0x2b8>
 8004958:	2300      	movs	r3, #0
 800495a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800495e:	e022      	b.n	80049a6 <UART_SetConfig+0x2e6>
 8004960:	2302      	movs	r3, #2
 8004962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004966:	e01e      	b.n	80049a6 <UART_SetConfig+0x2e6>
 8004968:	2304      	movs	r3, #4
 800496a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800496e:	e01a      	b.n	80049a6 <UART_SetConfig+0x2e6>
 8004970:	2308      	movs	r3, #8
 8004972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004976:	e016      	b.n	80049a6 <UART_SetConfig+0x2e6>
 8004978:	2310      	movs	r3, #16
 800497a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800497e:	e012      	b.n	80049a6 <UART_SetConfig+0x2e6>
 8004980:	efff69f3 	.word	0xefff69f3
 8004984:	40008000 	.word	0x40008000
 8004988:	40013800 	.word	0x40013800
 800498c:	40021000 	.word	0x40021000
 8004990:	40004400 	.word	0x40004400
 8004994:	40004800 	.word	0x40004800
 8004998:	40004c00 	.word	0x40004c00
 800499c:	40005000 	.word	0x40005000
 80049a0:	2310      	movs	r3, #16
 80049a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a9f      	ldr	r2, [pc, #636]	; (8004c28 <UART_SetConfig+0x568>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d17a      	bne.n	8004aa6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80049b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049b4:	2b08      	cmp	r3, #8
 80049b6:	d824      	bhi.n	8004a02 <UART_SetConfig+0x342>
 80049b8:	a201      	add	r2, pc, #4	; (adr r2, 80049c0 <UART_SetConfig+0x300>)
 80049ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049be:	bf00      	nop
 80049c0:	080049e5 	.word	0x080049e5
 80049c4:	08004a03 	.word	0x08004a03
 80049c8:	080049ed 	.word	0x080049ed
 80049cc:	08004a03 	.word	0x08004a03
 80049d0:	080049f3 	.word	0x080049f3
 80049d4:	08004a03 	.word	0x08004a03
 80049d8:	08004a03 	.word	0x08004a03
 80049dc:	08004a03 	.word	0x08004a03
 80049e0:	080049fb 	.word	0x080049fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049e4:	f7fe ff30 	bl	8003848 <HAL_RCC_GetPCLK1Freq>
 80049e8:	61f8      	str	r0, [r7, #28]
        break;
 80049ea:	e010      	b.n	8004a0e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049ec:	4b8f      	ldr	r3, [pc, #572]	; (8004c2c <UART_SetConfig+0x56c>)
 80049ee:	61fb      	str	r3, [r7, #28]
        break;
 80049f0:	e00d      	b.n	8004a0e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049f2:	f7fe fe91 	bl	8003718 <HAL_RCC_GetSysClockFreq>
 80049f6:	61f8      	str	r0, [r7, #28]
        break;
 80049f8:	e009      	b.n	8004a0e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049fe:	61fb      	str	r3, [r7, #28]
        break;
 8004a00:	e005      	b.n	8004a0e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004a02:	2300      	movs	r3, #0
 8004a04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a0c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 80fb 	beq.w	8004c0c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	685a      	ldr	r2, [r3, #4]
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	005b      	lsls	r3, r3, #1
 8004a1e:	4413      	add	r3, r2
 8004a20:	69fa      	ldr	r2, [r7, #28]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d305      	bcc.n	8004a32 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a2c:	69fa      	ldr	r2, [r7, #28]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d903      	bls.n	8004a3a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a38:	e0e8      	b.n	8004c0c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	461c      	mov	r4, r3
 8004a40:	4615      	mov	r5, r2
 8004a42:	f04f 0200 	mov.w	r2, #0
 8004a46:	f04f 0300 	mov.w	r3, #0
 8004a4a:	022b      	lsls	r3, r5, #8
 8004a4c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004a50:	0222      	lsls	r2, r4, #8
 8004a52:	68f9      	ldr	r1, [r7, #12]
 8004a54:	6849      	ldr	r1, [r1, #4]
 8004a56:	0849      	lsrs	r1, r1, #1
 8004a58:	2000      	movs	r0, #0
 8004a5a:	4688      	mov	r8, r1
 8004a5c:	4681      	mov	r9, r0
 8004a5e:	eb12 0a08 	adds.w	sl, r2, r8
 8004a62:	eb43 0b09 	adc.w	fp, r3, r9
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	603b      	str	r3, [r7, #0]
 8004a6e:	607a      	str	r2, [r7, #4]
 8004a70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a74:	4650      	mov	r0, sl
 8004a76:	4659      	mov	r1, fp
 8004a78:	f7fb fbfa 	bl	8000270 <__aeabi_uldivmod>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	460b      	mov	r3, r1
 8004a80:	4613      	mov	r3, r2
 8004a82:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a8a:	d308      	bcc.n	8004a9e <UART_SetConfig+0x3de>
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a92:	d204      	bcs.n	8004a9e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	69ba      	ldr	r2, [r7, #24]
 8004a9a:	60da      	str	r2, [r3, #12]
 8004a9c:	e0b6      	b.n	8004c0c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004aa4:	e0b2      	b.n	8004c0c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	69db      	ldr	r3, [r3, #28]
 8004aaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aae:	d15e      	bne.n	8004b6e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004ab0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ab4:	2b08      	cmp	r3, #8
 8004ab6:	d828      	bhi.n	8004b0a <UART_SetConfig+0x44a>
 8004ab8:	a201      	add	r2, pc, #4	; (adr r2, 8004ac0 <UART_SetConfig+0x400>)
 8004aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004abe:	bf00      	nop
 8004ac0:	08004ae5 	.word	0x08004ae5
 8004ac4:	08004aed 	.word	0x08004aed
 8004ac8:	08004af5 	.word	0x08004af5
 8004acc:	08004b0b 	.word	0x08004b0b
 8004ad0:	08004afb 	.word	0x08004afb
 8004ad4:	08004b0b 	.word	0x08004b0b
 8004ad8:	08004b0b 	.word	0x08004b0b
 8004adc:	08004b0b 	.word	0x08004b0b
 8004ae0:	08004b03 	.word	0x08004b03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ae4:	f7fe feb0 	bl	8003848 <HAL_RCC_GetPCLK1Freq>
 8004ae8:	61f8      	str	r0, [r7, #28]
        break;
 8004aea:	e014      	b.n	8004b16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004aec:	f7fe fec2 	bl	8003874 <HAL_RCC_GetPCLK2Freq>
 8004af0:	61f8      	str	r0, [r7, #28]
        break;
 8004af2:	e010      	b.n	8004b16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004af4:	4b4d      	ldr	r3, [pc, #308]	; (8004c2c <UART_SetConfig+0x56c>)
 8004af6:	61fb      	str	r3, [r7, #28]
        break;
 8004af8:	e00d      	b.n	8004b16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004afa:	f7fe fe0d 	bl	8003718 <HAL_RCC_GetSysClockFreq>
 8004afe:	61f8      	str	r0, [r7, #28]
        break;
 8004b00:	e009      	b.n	8004b16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b06:	61fb      	str	r3, [r7, #28]
        break;
 8004b08:	e005      	b.n	8004b16 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004b14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d077      	beq.n	8004c0c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	005a      	lsls	r2, r3, #1
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	085b      	lsrs	r3, r3, #1
 8004b26:	441a      	add	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b30:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	2b0f      	cmp	r3, #15
 8004b36:	d916      	bls.n	8004b66 <UART_SetConfig+0x4a6>
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b3e:	d212      	bcs.n	8004b66 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	f023 030f 	bic.w	r3, r3, #15
 8004b48:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	085b      	lsrs	r3, r3, #1
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	f003 0307 	and.w	r3, r3, #7
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	8afb      	ldrh	r3, [r7, #22]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	8afa      	ldrh	r2, [r7, #22]
 8004b62:	60da      	str	r2, [r3, #12]
 8004b64:	e052      	b.n	8004c0c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004b6c:	e04e      	b.n	8004c0c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b72:	2b08      	cmp	r3, #8
 8004b74:	d827      	bhi.n	8004bc6 <UART_SetConfig+0x506>
 8004b76:	a201      	add	r2, pc, #4	; (adr r2, 8004b7c <UART_SetConfig+0x4bc>)
 8004b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7c:	08004ba1 	.word	0x08004ba1
 8004b80:	08004ba9 	.word	0x08004ba9
 8004b84:	08004bb1 	.word	0x08004bb1
 8004b88:	08004bc7 	.word	0x08004bc7
 8004b8c:	08004bb7 	.word	0x08004bb7
 8004b90:	08004bc7 	.word	0x08004bc7
 8004b94:	08004bc7 	.word	0x08004bc7
 8004b98:	08004bc7 	.word	0x08004bc7
 8004b9c:	08004bbf 	.word	0x08004bbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ba0:	f7fe fe52 	bl	8003848 <HAL_RCC_GetPCLK1Freq>
 8004ba4:	61f8      	str	r0, [r7, #28]
        break;
 8004ba6:	e014      	b.n	8004bd2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ba8:	f7fe fe64 	bl	8003874 <HAL_RCC_GetPCLK2Freq>
 8004bac:	61f8      	str	r0, [r7, #28]
        break;
 8004bae:	e010      	b.n	8004bd2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bb0:	4b1e      	ldr	r3, [pc, #120]	; (8004c2c <UART_SetConfig+0x56c>)
 8004bb2:	61fb      	str	r3, [r7, #28]
        break;
 8004bb4:	e00d      	b.n	8004bd2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bb6:	f7fe fdaf 	bl	8003718 <HAL_RCC_GetSysClockFreq>
 8004bba:	61f8      	str	r0, [r7, #28]
        break;
 8004bbc:	e009      	b.n	8004bd2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bc2:	61fb      	str	r3, [r7, #28]
        break;
 8004bc4:	e005      	b.n	8004bd2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004bd0:	bf00      	nop
    }

    if (pclk != 0U)
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d019      	beq.n	8004c0c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	085a      	lsrs	r2, r3, #1
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	441a      	add	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	2b0f      	cmp	r3, #15
 8004bf0:	d909      	bls.n	8004c06 <UART_SetConfig+0x546>
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bf8:	d205      	bcs.n	8004c06 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	60da      	str	r2, [r3, #12]
 8004c04:	e002      	b.n	8004c0c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004c18:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3728      	adds	r7, #40	; 0x28
 8004c20:	46bd      	mov	sp, r7
 8004c22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c26:	bf00      	nop
 8004c28:	40008000 	.word	0x40008000
 8004c2c:	00f42400 	.word	0x00f42400

08004c30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3c:	f003 0301 	and.w	r3, r3, #1
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00a      	beq.n	8004c5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	430a      	orrs	r2, r1
 8004c58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00a      	beq.n	8004c7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c80:	f003 0304 	and.w	r3, r3, #4
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00a      	beq.n	8004c9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	f003 0308 	and.w	r3, r3, #8
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00a      	beq.n	8004cc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc4:	f003 0310 	and.w	r3, r3, #16
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00a      	beq.n	8004ce2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	f003 0320 	and.w	r3, r3, #32
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00a      	beq.n	8004d04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d01a      	beq.n	8004d46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	430a      	orrs	r2, r1
 8004d24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d2e:	d10a      	bne.n	8004d46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00a      	beq.n	8004d68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	430a      	orrs	r2, r1
 8004d66:	605a      	str	r2, [r3, #4]
  }
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af02      	add	r7, sp, #8
 8004d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d84:	f7fc f8b0 	bl	8000ee8 <HAL_GetTick>
 8004d88:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0308 	and.w	r3, r3, #8
 8004d94:	2b08      	cmp	r3, #8
 8004d96:	d10e      	bne.n	8004db6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d9c:	9300      	str	r3, [sp, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f82d 	bl	8004e06 <UART_WaitOnFlagUntilTimeout>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e023      	b.n	8004dfe <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0304 	and.w	r3, r3, #4
 8004dc0:	2b04      	cmp	r3, #4
 8004dc2:	d10e      	bne.n	8004de2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f817 	bl	8004e06 <UART_WaitOnFlagUntilTimeout>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d001      	beq.n	8004de2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e00d      	b.n	8004dfe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2220      	movs	r2, #32
 8004de6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2220      	movs	r2, #32
 8004dec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b09c      	sub	sp, #112	; 0x70
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	60f8      	str	r0, [r7, #12]
 8004e0e:	60b9      	str	r1, [r7, #8]
 8004e10:	603b      	str	r3, [r7, #0]
 8004e12:	4613      	mov	r3, r2
 8004e14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e16:	e0a5      	b.n	8004f64 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e1e:	f000 80a1 	beq.w	8004f64 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e22:	f7fc f861 	bl	8000ee8 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d302      	bcc.n	8004e38 <UART_WaitOnFlagUntilTimeout+0x32>
 8004e32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d13e      	bne.n	8004eb6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e40:	e853 3f00 	ldrex	r3, [r3]
 8004e44:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e4c:	667b      	str	r3, [r7, #100]	; 0x64
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	461a      	mov	r2, r3
 8004e54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e58:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004e5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e5e:	e841 2300 	strex	r3, r2, [r1]
 8004e62:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004e64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1e6      	bne.n	8004e38 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	3308      	adds	r3, #8
 8004e70:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e74:	e853 3f00 	ldrex	r3, [r3]
 8004e78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7c:	f023 0301 	bic.w	r3, r3, #1
 8004e80:	663b      	str	r3, [r7, #96]	; 0x60
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	3308      	adds	r3, #8
 8004e88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e8a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004e8c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e92:	e841 2300 	strex	r3, r2, [r1]
 8004e96:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004e98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1e5      	bne.n	8004e6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2220      	movs	r2, #32
 8004ea2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e067      	b.n	8004f86 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0304 	and.w	r3, r3, #4
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d04f      	beq.n	8004f64 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ece:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ed2:	d147      	bne.n	8004f64 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004edc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee6:	e853 3f00 	ldrex	r3, [r3]
 8004eea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ef2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	461a      	mov	r2, r3
 8004efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004efc:	637b      	str	r3, [r7, #52]	; 0x34
 8004efe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f04:	e841 2300 	strex	r3, r2, [r1]
 8004f08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1e6      	bne.n	8004ede <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	3308      	adds	r3, #8
 8004f16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	e853 3f00 	ldrex	r3, [r3]
 8004f1e:	613b      	str	r3, [r7, #16]
   return(result);
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	f023 0301 	bic.w	r3, r3, #1
 8004f26:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	3308      	adds	r3, #8
 8004f2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f30:	623a      	str	r2, [r7, #32]
 8004f32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f34:	69f9      	ldr	r1, [r7, #28]
 8004f36:	6a3a      	ldr	r2, [r7, #32]
 8004f38:	e841 2300 	strex	r3, r2, [r1]
 8004f3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1e5      	bne.n	8004f10 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2220      	movs	r2, #32
 8004f48:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2220      	movs	r2, #32
 8004f4e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2220      	movs	r2, #32
 8004f54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e010      	b.n	8004f86 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	69da      	ldr	r2, [r3, #28]
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	bf0c      	ite	eq
 8004f74:	2301      	moveq	r3, #1
 8004f76:	2300      	movne	r3, #0
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	79fb      	ldrb	r3, [r7, #7]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	f43f af4a 	beq.w	8004e18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3770      	adds	r7, #112	; 0x70
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
	...

08004f90 <__errno>:
 8004f90:	4b01      	ldr	r3, [pc, #4]	; (8004f98 <__errno+0x8>)
 8004f92:	6818      	ldr	r0, [r3, #0]
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	2000000c 	.word	0x2000000c

08004f9c <__libc_init_array>:
 8004f9c:	b570      	push	{r4, r5, r6, lr}
 8004f9e:	4d0d      	ldr	r5, [pc, #52]	; (8004fd4 <__libc_init_array+0x38>)
 8004fa0:	4c0d      	ldr	r4, [pc, #52]	; (8004fd8 <__libc_init_array+0x3c>)
 8004fa2:	1b64      	subs	r4, r4, r5
 8004fa4:	10a4      	asrs	r4, r4, #2
 8004fa6:	2600      	movs	r6, #0
 8004fa8:	42a6      	cmp	r6, r4
 8004faa:	d109      	bne.n	8004fc0 <__libc_init_array+0x24>
 8004fac:	4d0b      	ldr	r5, [pc, #44]	; (8004fdc <__libc_init_array+0x40>)
 8004fae:	4c0c      	ldr	r4, [pc, #48]	; (8004fe0 <__libc_init_array+0x44>)
 8004fb0:	f000 ffae 	bl	8005f10 <_init>
 8004fb4:	1b64      	subs	r4, r4, r5
 8004fb6:	10a4      	asrs	r4, r4, #2
 8004fb8:	2600      	movs	r6, #0
 8004fba:	42a6      	cmp	r6, r4
 8004fbc:	d105      	bne.n	8004fca <__libc_init_array+0x2e>
 8004fbe:	bd70      	pop	{r4, r5, r6, pc}
 8004fc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fc4:	4798      	blx	r3
 8004fc6:	3601      	adds	r6, #1
 8004fc8:	e7ee      	b.n	8004fa8 <__libc_init_array+0xc>
 8004fca:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fce:	4798      	blx	r3
 8004fd0:	3601      	adds	r6, #1
 8004fd2:	e7f2      	b.n	8004fba <__libc_init_array+0x1e>
 8004fd4:	0800602c 	.word	0x0800602c
 8004fd8:	0800602c 	.word	0x0800602c
 8004fdc:	0800602c 	.word	0x0800602c
 8004fe0:	08006030 	.word	0x08006030

08004fe4 <memset>:
 8004fe4:	4402      	add	r2, r0
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d100      	bne.n	8004fee <memset+0xa>
 8004fec:	4770      	bx	lr
 8004fee:	f803 1b01 	strb.w	r1, [r3], #1
 8004ff2:	e7f9      	b.n	8004fe8 <memset+0x4>

08004ff4 <iprintf>:
 8004ff4:	b40f      	push	{r0, r1, r2, r3}
 8004ff6:	4b0a      	ldr	r3, [pc, #40]	; (8005020 <iprintf+0x2c>)
 8004ff8:	b513      	push	{r0, r1, r4, lr}
 8004ffa:	681c      	ldr	r4, [r3, #0]
 8004ffc:	b124      	cbz	r4, 8005008 <iprintf+0x14>
 8004ffe:	69a3      	ldr	r3, [r4, #24]
 8005000:	b913      	cbnz	r3, 8005008 <iprintf+0x14>
 8005002:	4620      	mov	r0, r4
 8005004:	f000 f866 	bl	80050d4 <__sinit>
 8005008:	ab05      	add	r3, sp, #20
 800500a:	9a04      	ldr	r2, [sp, #16]
 800500c:	68a1      	ldr	r1, [r4, #8]
 800500e:	9301      	str	r3, [sp, #4]
 8005010:	4620      	mov	r0, r4
 8005012:	f000 f9bd 	bl	8005390 <_vfiprintf_r>
 8005016:	b002      	add	sp, #8
 8005018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800501c:	b004      	add	sp, #16
 800501e:	4770      	bx	lr
 8005020:	2000000c 	.word	0x2000000c

08005024 <std>:
 8005024:	2300      	movs	r3, #0
 8005026:	b510      	push	{r4, lr}
 8005028:	4604      	mov	r4, r0
 800502a:	e9c0 3300 	strd	r3, r3, [r0]
 800502e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005032:	6083      	str	r3, [r0, #8]
 8005034:	8181      	strh	r1, [r0, #12]
 8005036:	6643      	str	r3, [r0, #100]	; 0x64
 8005038:	81c2      	strh	r2, [r0, #14]
 800503a:	6183      	str	r3, [r0, #24]
 800503c:	4619      	mov	r1, r3
 800503e:	2208      	movs	r2, #8
 8005040:	305c      	adds	r0, #92	; 0x5c
 8005042:	f7ff ffcf 	bl	8004fe4 <memset>
 8005046:	4b05      	ldr	r3, [pc, #20]	; (800505c <std+0x38>)
 8005048:	6263      	str	r3, [r4, #36]	; 0x24
 800504a:	4b05      	ldr	r3, [pc, #20]	; (8005060 <std+0x3c>)
 800504c:	62a3      	str	r3, [r4, #40]	; 0x28
 800504e:	4b05      	ldr	r3, [pc, #20]	; (8005064 <std+0x40>)
 8005050:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005052:	4b05      	ldr	r3, [pc, #20]	; (8005068 <std+0x44>)
 8005054:	6224      	str	r4, [r4, #32]
 8005056:	6323      	str	r3, [r4, #48]	; 0x30
 8005058:	bd10      	pop	{r4, pc}
 800505a:	bf00      	nop
 800505c:	08005939 	.word	0x08005939
 8005060:	0800595b 	.word	0x0800595b
 8005064:	08005993 	.word	0x08005993
 8005068:	080059b7 	.word	0x080059b7

0800506c <_cleanup_r>:
 800506c:	4901      	ldr	r1, [pc, #4]	; (8005074 <_cleanup_r+0x8>)
 800506e:	f000 b8af 	b.w	80051d0 <_fwalk_reent>
 8005072:	bf00      	nop
 8005074:	08005c91 	.word	0x08005c91

08005078 <__sfmoreglue>:
 8005078:	b570      	push	{r4, r5, r6, lr}
 800507a:	2268      	movs	r2, #104	; 0x68
 800507c:	1e4d      	subs	r5, r1, #1
 800507e:	4355      	muls	r5, r2
 8005080:	460e      	mov	r6, r1
 8005082:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005086:	f000 f8e5 	bl	8005254 <_malloc_r>
 800508a:	4604      	mov	r4, r0
 800508c:	b140      	cbz	r0, 80050a0 <__sfmoreglue+0x28>
 800508e:	2100      	movs	r1, #0
 8005090:	e9c0 1600 	strd	r1, r6, [r0]
 8005094:	300c      	adds	r0, #12
 8005096:	60a0      	str	r0, [r4, #8]
 8005098:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800509c:	f7ff ffa2 	bl	8004fe4 <memset>
 80050a0:	4620      	mov	r0, r4
 80050a2:	bd70      	pop	{r4, r5, r6, pc}

080050a4 <__sfp_lock_acquire>:
 80050a4:	4801      	ldr	r0, [pc, #4]	; (80050ac <__sfp_lock_acquire+0x8>)
 80050a6:	f000 b8b3 	b.w	8005210 <__retarget_lock_acquire_recursive>
 80050aa:	bf00      	nop
 80050ac:	200001f1 	.word	0x200001f1

080050b0 <__sfp_lock_release>:
 80050b0:	4801      	ldr	r0, [pc, #4]	; (80050b8 <__sfp_lock_release+0x8>)
 80050b2:	f000 b8ae 	b.w	8005212 <__retarget_lock_release_recursive>
 80050b6:	bf00      	nop
 80050b8:	200001f1 	.word	0x200001f1

080050bc <__sinit_lock_acquire>:
 80050bc:	4801      	ldr	r0, [pc, #4]	; (80050c4 <__sinit_lock_acquire+0x8>)
 80050be:	f000 b8a7 	b.w	8005210 <__retarget_lock_acquire_recursive>
 80050c2:	bf00      	nop
 80050c4:	200001f2 	.word	0x200001f2

080050c8 <__sinit_lock_release>:
 80050c8:	4801      	ldr	r0, [pc, #4]	; (80050d0 <__sinit_lock_release+0x8>)
 80050ca:	f000 b8a2 	b.w	8005212 <__retarget_lock_release_recursive>
 80050ce:	bf00      	nop
 80050d0:	200001f2 	.word	0x200001f2

080050d4 <__sinit>:
 80050d4:	b510      	push	{r4, lr}
 80050d6:	4604      	mov	r4, r0
 80050d8:	f7ff fff0 	bl	80050bc <__sinit_lock_acquire>
 80050dc:	69a3      	ldr	r3, [r4, #24]
 80050de:	b11b      	cbz	r3, 80050e8 <__sinit+0x14>
 80050e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050e4:	f7ff bff0 	b.w	80050c8 <__sinit_lock_release>
 80050e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80050ec:	6523      	str	r3, [r4, #80]	; 0x50
 80050ee:	4b13      	ldr	r3, [pc, #76]	; (800513c <__sinit+0x68>)
 80050f0:	4a13      	ldr	r2, [pc, #76]	; (8005140 <__sinit+0x6c>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80050f6:	42a3      	cmp	r3, r4
 80050f8:	bf04      	itt	eq
 80050fa:	2301      	moveq	r3, #1
 80050fc:	61a3      	streq	r3, [r4, #24]
 80050fe:	4620      	mov	r0, r4
 8005100:	f000 f820 	bl	8005144 <__sfp>
 8005104:	6060      	str	r0, [r4, #4]
 8005106:	4620      	mov	r0, r4
 8005108:	f000 f81c 	bl	8005144 <__sfp>
 800510c:	60a0      	str	r0, [r4, #8]
 800510e:	4620      	mov	r0, r4
 8005110:	f000 f818 	bl	8005144 <__sfp>
 8005114:	2200      	movs	r2, #0
 8005116:	60e0      	str	r0, [r4, #12]
 8005118:	2104      	movs	r1, #4
 800511a:	6860      	ldr	r0, [r4, #4]
 800511c:	f7ff ff82 	bl	8005024 <std>
 8005120:	68a0      	ldr	r0, [r4, #8]
 8005122:	2201      	movs	r2, #1
 8005124:	2109      	movs	r1, #9
 8005126:	f7ff ff7d 	bl	8005024 <std>
 800512a:	68e0      	ldr	r0, [r4, #12]
 800512c:	2202      	movs	r2, #2
 800512e:	2112      	movs	r1, #18
 8005130:	f7ff ff78 	bl	8005024 <std>
 8005134:	2301      	movs	r3, #1
 8005136:	61a3      	str	r3, [r4, #24]
 8005138:	e7d2      	b.n	80050e0 <__sinit+0xc>
 800513a:	bf00      	nop
 800513c:	08005f8c 	.word	0x08005f8c
 8005140:	0800506d 	.word	0x0800506d

08005144 <__sfp>:
 8005144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005146:	4607      	mov	r7, r0
 8005148:	f7ff ffac 	bl	80050a4 <__sfp_lock_acquire>
 800514c:	4b1e      	ldr	r3, [pc, #120]	; (80051c8 <__sfp+0x84>)
 800514e:	681e      	ldr	r6, [r3, #0]
 8005150:	69b3      	ldr	r3, [r6, #24]
 8005152:	b913      	cbnz	r3, 800515a <__sfp+0x16>
 8005154:	4630      	mov	r0, r6
 8005156:	f7ff ffbd 	bl	80050d4 <__sinit>
 800515a:	3648      	adds	r6, #72	; 0x48
 800515c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005160:	3b01      	subs	r3, #1
 8005162:	d503      	bpl.n	800516c <__sfp+0x28>
 8005164:	6833      	ldr	r3, [r6, #0]
 8005166:	b30b      	cbz	r3, 80051ac <__sfp+0x68>
 8005168:	6836      	ldr	r6, [r6, #0]
 800516a:	e7f7      	b.n	800515c <__sfp+0x18>
 800516c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005170:	b9d5      	cbnz	r5, 80051a8 <__sfp+0x64>
 8005172:	4b16      	ldr	r3, [pc, #88]	; (80051cc <__sfp+0x88>)
 8005174:	60e3      	str	r3, [r4, #12]
 8005176:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800517a:	6665      	str	r5, [r4, #100]	; 0x64
 800517c:	f000 f847 	bl	800520e <__retarget_lock_init_recursive>
 8005180:	f7ff ff96 	bl	80050b0 <__sfp_lock_release>
 8005184:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005188:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800518c:	6025      	str	r5, [r4, #0]
 800518e:	61a5      	str	r5, [r4, #24]
 8005190:	2208      	movs	r2, #8
 8005192:	4629      	mov	r1, r5
 8005194:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005198:	f7ff ff24 	bl	8004fe4 <memset>
 800519c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80051a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80051a4:	4620      	mov	r0, r4
 80051a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051a8:	3468      	adds	r4, #104	; 0x68
 80051aa:	e7d9      	b.n	8005160 <__sfp+0x1c>
 80051ac:	2104      	movs	r1, #4
 80051ae:	4638      	mov	r0, r7
 80051b0:	f7ff ff62 	bl	8005078 <__sfmoreglue>
 80051b4:	4604      	mov	r4, r0
 80051b6:	6030      	str	r0, [r6, #0]
 80051b8:	2800      	cmp	r0, #0
 80051ba:	d1d5      	bne.n	8005168 <__sfp+0x24>
 80051bc:	f7ff ff78 	bl	80050b0 <__sfp_lock_release>
 80051c0:	230c      	movs	r3, #12
 80051c2:	603b      	str	r3, [r7, #0]
 80051c4:	e7ee      	b.n	80051a4 <__sfp+0x60>
 80051c6:	bf00      	nop
 80051c8:	08005f8c 	.word	0x08005f8c
 80051cc:	ffff0001 	.word	0xffff0001

080051d0 <_fwalk_reent>:
 80051d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051d4:	4606      	mov	r6, r0
 80051d6:	4688      	mov	r8, r1
 80051d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80051dc:	2700      	movs	r7, #0
 80051de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051e2:	f1b9 0901 	subs.w	r9, r9, #1
 80051e6:	d505      	bpl.n	80051f4 <_fwalk_reent+0x24>
 80051e8:	6824      	ldr	r4, [r4, #0]
 80051ea:	2c00      	cmp	r4, #0
 80051ec:	d1f7      	bne.n	80051de <_fwalk_reent+0xe>
 80051ee:	4638      	mov	r0, r7
 80051f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051f4:	89ab      	ldrh	r3, [r5, #12]
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d907      	bls.n	800520a <_fwalk_reent+0x3a>
 80051fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051fe:	3301      	adds	r3, #1
 8005200:	d003      	beq.n	800520a <_fwalk_reent+0x3a>
 8005202:	4629      	mov	r1, r5
 8005204:	4630      	mov	r0, r6
 8005206:	47c0      	blx	r8
 8005208:	4307      	orrs	r7, r0
 800520a:	3568      	adds	r5, #104	; 0x68
 800520c:	e7e9      	b.n	80051e2 <_fwalk_reent+0x12>

0800520e <__retarget_lock_init_recursive>:
 800520e:	4770      	bx	lr

08005210 <__retarget_lock_acquire_recursive>:
 8005210:	4770      	bx	lr

08005212 <__retarget_lock_release_recursive>:
 8005212:	4770      	bx	lr

08005214 <sbrk_aligned>:
 8005214:	b570      	push	{r4, r5, r6, lr}
 8005216:	4e0e      	ldr	r6, [pc, #56]	; (8005250 <sbrk_aligned+0x3c>)
 8005218:	460c      	mov	r4, r1
 800521a:	6831      	ldr	r1, [r6, #0]
 800521c:	4605      	mov	r5, r0
 800521e:	b911      	cbnz	r1, 8005226 <sbrk_aligned+0x12>
 8005220:	f000 fb7a 	bl	8005918 <_sbrk_r>
 8005224:	6030      	str	r0, [r6, #0]
 8005226:	4621      	mov	r1, r4
 8005228:	4628      	mov	r0, r5
 800522a:	f000 fb75 	bl	8005918 <_sbrk_r>
 800522e:	1c43      	adds	r3, r0, #1
 8005230:	d00a      	beq.n	8005248 <sbrk_aligned+0x34>
 8005232:	1cc4      	adds	r4, r0, #3
 8005234:	f024 0403 	bic.w	r4, r4, #3
 8005238:	42a0      	cmp	r0, r4
 800523a:	d007      	beq.n	800524c <sbrk_aligned+0x38>
 800523c:	1a21      	subs	r1, r4, r0
 800523e:	4628      	mov	r0, r5
 8005240:	f000 fb6a 	bl	8005918 <_sbrk_r>
 8005244:	3001      	adds	r0, #1
 8005246:	d101      	bne.n	800524c <sbrk_aligned+0x38>
 8005248:	f04f 34ff 	mov.w	r4, #4294967295
 800524c:	4620      	mov	r0, r4
 800524e:	bd70      	pop	{r4, r5, r6, pc}
 8005250:	200001f8 	.word	0x200001f8

08005254 <_malloc_r>:
 8005254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005258:	1ccd      	adds	r5, r1, #3
 800525a:	f025 0503 	bic.w	r5, r5, #3
 800525e:	3508      	adds	r5, #8
 8005260:	2d0c      	cmp	r5, #12
 8005262:	bf38      	it	cc
 8005264:	250c      	movcc	r5, #12
 8005266:	2d00      	cmp	r5, #0
 8005268:	4607      	mov	r7, r0
 800526a:	db01      	blt.n	8005270 <_malloc_r+0x1c>
 800526c:	42a9      	cmp	r1, r5
 800526e:	d905      	bls.n	800527c <_malloc_r+0x28>
 8005270:	230c      	movs	r3, #12
 8005272:	603b      	str	r3, [r7, #0]
 8005274:	2600      	movs	r6, #0
 8005276:	4630      	mov	r0, r6
 8005278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800527c:	4e2e      	ldr	r6, [pc, #184]	; (8005338 <_malloc_r+0xe4>)
 800527e:	f000 fdbb 	bl	8005df8 <__malloc_lock>
 8005282:	6833      	ldr	r3, [r6, #0]
 8005284:	461c      	mov	r4, r3
 8005286:	bb34      	cbnz	r4, 80052d6 <_malloc_r+0x82>
 8005288:	4629      	mov	r1, r5
 800528a:	4638      	mov	r0, r7
 800528c:	f7ff ffc2 	bl	8005214 <sbrk_aligned>
 8005290:	1c43      	adds	r3, r0, #1
 8005292:	4604      	mov	r4, r0
 8005294:	d14d      	bne.n	8005332 <_malloc_r+0xde>
 8005296:	6834      	ldr	r4, [r6, #0]
 8005298:	4626      	mov	r6, r4
 800529a:	2e00      	cmp	r6, #0
 800529c:	d140      	bne.n	8005320 <_malloc_r+0xcc>
 800529e:	6823      	ldr	r3, [r4, #0]
 80052a0:	4631      	mov	r1, r6
 80052a2:	4638      	mov	r0, r7
 80052a4:	eb04 0803 	add.w	r8, r4, r3
 80052a8:	f000 fb36 	bl	8005918 <_sbrk_r>
 80052ac:	4580      	cmp	r8, r0
 80052ae:	d13a      	bne.n	8005326 <_malloc_r+0xd2>
 80052b0:	6821      	ldr	r1, [r4, #0]
 80052b2:	3503      	adds	r5, #3
 80052b4:	1a6d      	subs	r5, r5, r1
 80052b6:	f025 0503 	bic.w	r5, r5, #3
 80052ba:	3508      	adds	r5, #8
 80052bc:	2d0c      	cmp	r5, #12
 80052be:	bf38      	it	cc
 80052c0:	250c      	movcc	r5, #12
 80052c2:	4629      	mov	r1, r5
 80052c4:	4638      	mov	r0, r7
 80052c6:	f7ff ffa5 	bl	8005214 <sbrk_aligned>
 80052ca:	3001      	adds	r0, #1
 80052cc:	d02b      	beq.n	8005326 <_malloc_r+0xd2>
 80052ce:	6823      	ldr	r3, [r4, #0]
 80052d0:	442b      	add	r3, r5
 80052d2:	6023      	str	r3, [r4, #0]
 80052d4:	e00e      	b.n	80052f4 <_malloc_r+0xa0>
 80052d6:	6822      	ldr	r2, [r4, #0]
 80052d8:	1b52      	subs	r2, r2, r5
 80052da:	d41e      	bmi.n	800531a <_malloc_r+0xc6>
 80052dc:	2a0b      	cmp	r2, #11
 80052de:	d916      	bls.n	800530e <_malloc_r+0xba>
 80052e0:	1961      	adds	r1, r4, r5
 80052e2:	42a3      	cmp	r3, r4
 80052e4:	6025      	str	r5, [r4, #0]
 80052e6:	bf18      	it	ne
 80052e8:	6059      	strne	r1, [r3, #4]
 80052ea:	6863      	ldr	r3, [r4, #4]
 80052ec:	bf08      	it	eq
 80052ee:	6031      	streq	r1, [r6, #0]
 80052f0:	5162      	str	r2, [r4, r5]
 80052f2:	604b      	str	r3, [r1, #4]
 80052f4:	4638      	mov	r0, r7
 80052f6:	f104 060b 	add.w	r6, r4, #11
 80052fa:	f000 fd83 	bl	8005e04 <__malloc_unlock>
 80052fe:	f026 0607 	bic.w	r6, r6, #7
 8005302:	1d23      	adds	r3, r4, #4
 8005304:	1af2      	subs	r2, r6, r3
 8005306:	d0b6      	beq.n	8005276 <_malloc_r+0x22>
 8005308:	1b9b      	subs	r3, r3, r6
 800530a:	50a3      	str	r3, [r4, r2]
 800530c:	e7b3      	b.n	8005276 <_malloc_r+0x22>
 800530e:	6862      	ldr	r2, [r4, #4]
 8005310:	42a3      	cmp	r3, r4
 8005312:	bf0c      	ite	eq
 8005314:	6032      	streq	r2, [r6, #0]
 8005316:	605a      	strne	r2, [r3, #4]
 8005318:	e7ec      	b.n	80052f4 <_malloc_r+0xa0>
 800531a:	4623      	mov	r3, r4
 800531c:	6864      	ldr	r4, [r4, #4]
 800531e:	e7b2      	b.n	8005286 <_malloc_r+0x32>
 8005320:	4634      	mov	r4, r6
 8005322:	6876      	ldr	r6, [r6, #4]
 8005324:	e7b9      	b.n	800529a <_malloc_r+0x46>
 8005326:	230c      	movs	r3, #12
 8005328:	603b      	str	r3, [r7, #0]
 800532a:	4638      	mov	r0, r7
 800532c:	f000 fd6a 	bl	8005e04 <__malloc_unlock>
 8005330:	e7a1      	b.n	8005276 <_malloc_r+0x22>
 8005332:	6025      	str	r5, [r4, #0]
 8005334:	e7de      	b.n	80052f4 <_malloc_r+0xa0>
 8005336:	bf00      	nop
 8005338:	200001f4 	.word	0x200001f4

0800533c <__sfputc_r>:
 800533c:	6893      	ldr	r3, [r2, #8]
 800533e:	3b01      	subs	r3, #1
 8005340:	2b00      	cmp	r3, #0
 8005342:	b410      	push	{r4}
 8005344:	6093      	str	r3, [r2, #8]
 8005346:	da08      	bge.n	800535a <__sfputc_r+0x1e>
 8005348:	6994      	ldr	r4, [r2, #24]
 800534a:	42a3      	cmp	r3, r4
 800534c:	db01      	blt.n	8005352 <__sfputc_r+0x16>
 800534e:	290a      	cmp	r1, #10
 8005350:	d103      	bne.n	800535a <__sfputc_r+0x1e>
 8005352:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005356:	f000 bb33 	b.w	80059c0 <__swbuf_r>
 800535a:	6813      	ldr	r3, [r2, #0]
 800535c:	1c58      	adds	r0, r3, #1
 800535e:	6010      	str	r0, [r2, #0]
 8005360:	7019      	strb	r1, [r3, #0]
 8005362:	4608      	mov	r0, r1
 8005364:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005368:	4770      	bx	lr

0800536a <__sfputs_r>:
 800536a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800536c:	4606      	mov	r6, r0
 800536e:	460f      	mov	r7, r1
 8005370:	4614      	mov	r4, r2
 8005372:	18d5      	adds	r5, r2, r3
 8005374:	42ac      	cmp	r4, r5
 8005376:	d101      	bne.n	800537c <__sfputs_r+0x12>
 8005378:	2000      	movs	r0, #0
 800537a:	e007      	b.n	800538c <__sfputs_r+0x22>
 800537c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005380:	463a      	mov	r2, r7
 8005382:	4630      	mov	r0, r6
 8005384:	f7ff ffda 	bl	800533c <__sfputc_r>
 8005388:	1c43      	adds	r3, r0, #1
 800538a:	d1f3      	bne.n	8005374 <__sfputs_r+0xa>
 800538c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005390 <_vfiprintf_r>:
 8005390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005394:	460d      	mov	r5, r1
 8005396:	b09d      	sub	sp, #116	; 0x74
 8005398:	4614      	mov	r4, r2
 800539a:	4698      	mov	r8, r3
 800539c:	4606      	mov	r6, r0
 800539e:	b118      	cbz	r0, 80053a8 <_vfiprintf_r+0x18>
 80053a0:	6983      	ldr	r3, [r0, #24]
 80053a2:	b90b      	cbnz	r3, 80053a8 <_vfiprintf_r+0x18>
 80053a4:	f7ff fe96 	bl	80050d4 <__sinit>
 80053a8:	4b89      	ldr	r3, [pc, #548]	; (80055d0 <_vfiprintf_r+0x240>)
 80053aa:	429d      	cmp	r5, r3
 80053ac:	d11b      	bne.n	80053e6 <_vfiprintf_r+0x56>
 80053ae:	6875      	ldr	r5, [r6, #4]
 80053b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053b2:	07d9      	lsls	r1, r3, #31
 80053b4:	d405      	bmi.n	80053c2 <_vfiprintf_r+0x32>
 80053b6:	89ab      	ldrh	r3, [r5, #12]
 80053b8:	059a      	lsls	r2, r3, #22
 80053ba:	d402      	bmi.n	80053c2 <_vfiprintf_r+0x32>
 80053bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053be:	f7ff ff27 	bl	8005210 <__retarget_lock_acquire_recursive>
 80053c2:	89ab      	ldrh	r3, [r5, #12]
 80053c4:	071b      	lsls	r3, r3, #28
 80053c6:	d501      	bpl.n	80053cc <_vfiprintf_r+0x3c>
 80053c8:	692b      	ldr	r3, [r5, #16]
 80053ca:	b9eb      	cbnz	r3, 8005408 <_vfiprintf_r+0x78>
 80053cc:	4629      	mov	r1, r5
 80053ce:	4630      	mov	r0, r6
 80053d0:	f000 fb5a 	bl	8005a88 <__swsetup_r>
 80053d4:	b1c0      	cbz	r0, 8005408 <_vfiprintf_r+0x78>
 80053d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053d8:	07dc      	lsls	r4, r3, #31
 80053da:	d50e      	bpl.n	80053fa <_vfiprintf_r+0x6a>
 80053dc:	f04f 30ff 	mov.w	r0, #4294967295
 80053e0:	b01d      	add	sp, #116	; 0x74
 80053e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053e6:	4b7b      	ldr	r3, [pc, #492]	; (80055d4 <_vfiprintf_r+0x244>)
 80053e8:	429d      	cmp	r5, r3
 80053ea:	d101      	bne.n	80053f0 <_vfiprintf_r+0x60>
 80053ec:	68b5      	ldr	r5, [r6, #8]
 80053ee:	e7df      	b.n	80053b0 <_vfiprintf_r+0x20>
 80053f0:	4b79      	ldr	r3, [pc, #484]	; (80055d8 <_vfiprintf_r+0x248>)
 80053f2:	429d      	cmp	r5, r3
 80053f4:	bf08      	it	eq
 80053f6:	68f5      	ldreq	r5, [r6, #12]
 80053f8:	e7da      	b.n	80053b0 <_vfiprintf_r+0x20>
 80053fa:	89ab      	ldrh	r3, [r5, #12]
 80053fc:	0598      	lsls	r0, r3, #22
 80053fe:	d4ed      	bmi.n	80053dc <_vfiprintf_r+0x4c>
 8005400:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005402:	f7ff ff06 	bl	8005212 <__retarget_lock_release_recursive>
 8005406:	e7e9      	b.n	80053dc <_vfiprintf_r+0x4c>
 8005408:	2300      	movs	r3, #0
 800540a:	9309      	str	r3, [sp, #36]	; 0x24
 800540c:	2320      	movs	r3, #32
 800540e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005412:	f8cd 800c 	str.w	r8, [sp, #12]
 8005416:	2330      	movs	r3, #48	; 0x30
 8005418:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80055dc <_vfiprintf_r+0x24c>
 800541c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005420:	f04f 0901 	mov.w	r9, #1
 8005424:	4623      	mov	r3, r4
 8005426:	469a      	mov	sl, r3
 8005428:	f813 2b01 	ldrb.w	r2, [r3], #1
 800542c:	b10a      	cbz	r2, 8005432 <_vfiprintf_r+0xa2>
 800542e:	2a25      	cmp	r2, #37	; 0x25
 8005430:	d1f9      	bne.n	8005426 <_vfiprintf_r+0x96>
 8005432:	ebba 0b04 	subs.w	fp, sl, r4
 8005436:	d00b      	beq.n	8005450 <_vfiprintf_r+0xc0>
 8005438:	465b      	mov	r3, fp
 800543a:	4622      	mov	r2, r4
 800543c:	4629      	mov	r1, r5
 800543e:	4630      	mov	r0, r6
 8005440:	f7ff ff93 	bl	800536a <__sfputs_r>
 8005444:	3001      	adds	r0, #1
 8005446:	f000 80aa 	beq.w	800559e <_vfiprintf_r+0x20e>
 800544a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800544c:	445a      	add	r2, fp
 800544e:	9209      	str	r2, [sp, #36]	; 0x24
 8005450:	f89a 3000 	ldrb.w	r3, [sl]
 8005454:	2b00      	cmp	r3, #0
 8005456:	f000 80a2 	beq.w	800559e <_vfiprintf_r+0x20e>
 800545a:	2300      	movs	r3, #0
 800545c:	f04f 32ff 	mov.w	r2, #4294967295
 8005460:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005464:	f10a 0a01 	add.w	sl, sl, #1
 8005468:	9304      	str	r3, [sp, #16]
 800546a:	9307      	str	r3, [sp, #28]
 800546c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005470:	931a      	str	r3, [sp, #104]	; 0x68
 8005472:	4654      	mov	r4, sl
 8005474:	2205      	movs	r2, #5
 8005476:	f814 1b01 	ldrb.w	r1, [r4], #1
 800547a:	4858      	ldr	r0, [pc, #352]	; (80055dc <_vfiprintf_r+0x24c>)
 800547c:	f7fa fea8 	bl	80001d0 <memchr>
 8005480:	9a04      	ldr	r2, [sp, #16]
 8005482:	b9d8      	cbnz	r0, 80054bc <_vfiprintf_r+0x12c>
 8005484:	06d1      	lsls	r1, r2, #27
 8005486:	bf44      	itt	mi
 8005488:	2320      	movmi	r3, #32
 800548a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800548e:	0713      	lsls	r3, r2, #28
 8005490:	bf44      	itt	mi
 8005492:	232b      	movmi	r3, #43	; 0x2b
 8005494:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005498:	f89a 3000 	ldrb.w	r3, [sl]
 800549c:	2b2a      	cmp	r3, #42	; 0x2a
 800549e:	d015      	beq.n	80054cc <_vfiprintf_r+0x13c>
 80054a0:	9a07      	ldr	r2, [sp, #28]
 80054a2:	4654      	mov	r4, sl
 80054a4:	2000      	movs	r0, #0
 80054a6:	f04f 0c0a 	mov.w	ip, #10
 80054aa:	4621      	mov	r1, r4
 80054ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054b0:	3b30      	subs	r3, #48	; 0x30
 80054b2:	2b09      	cmp	r3, #9
 80054b4:	d94e      	bls.n	8005554 <_vfiprintf_r+0x1c4>
 80054b6:	b1b0      	cbz	r0, 80054e6 <_vfiprintf_r+0x156>
 80054b8:	9207      	str	r2, [sp, #28]
 80054ba:	e014      	b.n	80054e6 <_vfiprintf_r+0x156>
 80054bc:	eba0 0308 	sub.w	r3, r0, r8
 80054c0:	fa09 f303 	lsl.w	r3, r9, r3
 80054c4:	4313      	orrs	r3, r2
 80054c6:	9304      	str	r3, [sp, #16]
 80054c8:	46a2      	mov	sl, r4
 80054ca:	e7d2      	b.n	8005472 <_vfiprintf_r+0xe2>
 80054cc:	9b03      	ldr	r3, [sp, #12]
 80054ce:	1d19      	adds	r1, r3, #4
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	9103      	str	r1, [sp, #12]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	bfbb      	ittet	lt
 80054d8:	425b      	neglt	r3, r3
 80054da:	f042 0202 	orrlt.w	r2, r2, #2
 80054de:	9307      	strge	r3, [sp, #28]
 80054e0:	9307      	strlt	r3, [sp, #28]
 80054e2:	bfb8      	it	lt
 80054e4:	9204      	strlt	r2, [sp, #16]
 80054e6:	7823      	ldrb	r3, [r4, #0]
 80054e8:	2b2e      	cmp	r3, #46	; 0x2e
 80054ea:	d10c      	bne.n	8005506 <_vfiprintf_r+0x176>
 80054ec:	7863      	ldrb	r3, [r4, #1]
 80054ee:	2b2a      	cmp	r3, #42	; 0x2a
 80054f0:	d135      	bne.n	800555e <_vfiprintf_r+0x1ce>
 80054f2:	9b03      	ldr	r3, [sp, #12]
 80054f4:	1d1a      	adds	r2, r3, #4
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	9203      	str	r2, [sp, #12]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	bfb8      	it	lt
 80054fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8005502:	3402      	adds	r4, #2
 8005504:	9305      	str	r3, [sp, #20]
 8005506:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80055ec <_vfiprintf_r+0x25c>
 800550a:	7821      	ldrb	r1, [r4, #0]
 800550c:	2203      	movs	r2, #3
 800550e:	4650      	mov	r0, sl
 8005510:	f7fa fe5e 	bl	80001d0 <memchr>
 8005514:	b140      	cbz	r0, 8005528 <_vfiprintf_r+0x198>
 8005516:	2340      	movs	r3, #64	; 0x40
 8005518:	eba0 000a 	sub.w	r0, r0, sl
 800551c:	fa03 f000 	lsl.w	r0, r3, r0
 8005520:	9b04      	ldr	r3, [sp, #16]
 8005522:	4303      	orrs	r3, r0
 8005524:	3401      	adds	r4, #1
 8005526:	9304      	str	r3, [sp, #16]
 8005528:	f814 1b01 	ldrb.w	r1, [r4], #1
 800552c:	482c      	ldr	r0, [pc, #176]	; (80055e0 <_vfiprintf_r+0x250>)
 800552e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005532:	2206      	movs	r2, #6
 8005534:	f7fa fe4c 	bl	80001d0 <memchr>
 8005538:	2800      	cmp	r0, #0
 800553a:	d03f      	beq.n	80055bc <_vfiprintf_r+0x22c>
 800553c:	4b29      	ldr	r3, [pc, #164]	; (80055e4 <_vfiprintf_r+0x254>)
 800553e:	bb1b      	cbnz	r3, 8005588 <_vfiprintf_r+0x1f8>
 8005540:	9b03      	ldr	r3, [sp, #12]
 8005542:	3307      	adds	r3, #7
 8005544:	f023 0307 	bic.w	r3, r3, #7
 8005548:	3308      	adds	r3, #8
 800554a:	9303      	str	r3, [sp, #12]
 800554c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800554e:	443b      	add	r3, r7
 8005550:	9309      	str	r3, [sp, #36]	; 0x24
 8005552:	e767      	b.n	8005424 <_vfiprintf_r+0x94>
 8005554:	fb0c 3202 	mla	r2, ip, r2, r3
 8005558:	460c      	mov	r4, r1
 800555a:	2001      	movs	r0, #1
 800555c:	e7a5      	b.n	80054aa <_vfiprintf_r+0x11a>
 800555e:	2300      	movs	r3, #0
 8005560:	3401      	adds	r4, #1
 8005562:	9305      	str	r3, [sp, #20]
 8005564:	4619      	mov	r1, r3
 8005566:	f04f 0c0a 	mov.w	ip, #10
 800556a:	4620      	mov	r0, r4
 800556c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005570:	3a30      	subs	r2, #48	; 0x30
 8005572:	2a09      	cmp	r2, #9
 8005574:	d903      	bls.n	800557e <_vfiprintf_r+0x1ee>
 8005576:	2b00      	cmp	r3, #0
 8005578:	d0c5      	beq.n	8005506 <_vfiprintf_r+0x176>
 800557a:	9105      	str	r1, [sp, #20]
 800557c:	e7c3      	b.n	8005506 <_vfiprintf_r+0x176>
 800557e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005582:	4604      	mov	r4, r0
 8005584:	2301      	movs	r3, #1
 8005586:	e7f0      	b.n	800556a <_vfiprintf_r+0x1da>
 8005588:	ab03      	add	r3, sp, #12
 800558a:	9300      	str	r3, [sp, #0]
 800558c:	462a      	mov	r2, r5
 800558e:	4b16      	ldr	r3, [pc, #88]	; (80055e8 <_vfiprintf_r+0x258>)
 8005590:	a904      	add	r1, sp, #16
 8005592:	4630      	mov	r0, r6
 8005594:	f3af 8000 	nop.w
 8005598:	4607      	mov	r7, r0
 800559a:	1c78      	adds	r0, r7, #1
 800559c:	d1d6      	bne.n	800554c <_vfiprintf_r+0x1bc>
 800559e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055a0:	07d9      	lsls	r1, r3, #31
 80055a2:	d405      	bmi.n	80055b0 <_vfiprintf_r+0x220>
 80055a4:	89ab      	ldrh	r3, [r5, #12]
 80055a6:	059a      	lsls	r2, r3, #22
 80055a8:	d402      	bmi.n	80055b0 <_vfiprintf_r+0x220>
 80055aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055ac:	f7ff fe31 	bl	8005212 <__retarget_lock_release_recursive>
 80055b0:	89ab      	ldrh	r3, [r5, #12]
 80055b2:	065b      	lsls	r3, r3, #25
 80055b4:	f53f af12 	bmi.w	80053dc <_vfiprintf_r+0x4c>
 80055b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055ba:	e711      	b.n	80053e0 <_vfiprintf_r+0x50>
 80055bc:	ab03      	add	r3, sp, #12
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	462a      	mov	r2, r5
 80055c2:	4b09      	ldr	r3, [pc, #36]	; (80055e8 <_vfiprintf_r+0x258>)
 80055c4:	a904      	add	r1, sp, #16
 80055c6:	4630      	mov	r0, r6
 80055c8:	f000 f880 	bl	80056cc <_printf_i>
 80055cc:	e7e4      	b.n	8005598 <_vfiprintf_r+0x208>
 80055ce:	bf00      	nop
 80055d0:	08005fb0 	.word	0x08005fb0
 80055d4:	08005fd0 	.word	0x08005fd0
 80055d8:	08005f90 	.word	0x08005f90
 80055dc:	08005ff0 	.word	0x08005ff0
 80055e0:	08005ffa 	.word	0x08005ffa
 80055e4:	00000000 	.word	0x00000000
 80055e8:	0800536b 	.word	0x0800536b
 80055ec:	08005ff6 	.word	0x08005ff6

080055f0 <_printf_common>:
 80055f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055f4:	4616      	mov	r6, r2
 80055f6:	4699      	mov	r9, r3
 80055f8:	688a      	ldr	r2, [r1, #8]
 80055fa:	690b      	ldr	r3, [r1, #16]
 80055fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005600:	4293      	cmp	r3, r2
 8005602:	bfb8      	it	lt
 8005604:	4613      	movlt	r3, r2
 8005606:	6033      	str	r3, [r6, #0]
 8005608:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800560c:	4607      	mov	r7, r0
 800560e:	460c      	mov	r4, r1
 8005610:	b10a      	cbz	r2, 8005616 <_printf_common+0x26>
 8005612:	3301      	adds	r3, #1
 8005614:	6033      	str	r3, [r6, #0]
 8005616:	6823      	ldr	r3, [r4, #0]
 8005618:	0699      	lsls	r1, r3, #26
 800561a:	bf42      	ittt	mi
 800561c:	6833      	ldrmi	r3, [r6, #0]
 800561e:	3302      	addmi	r3, #2
 8005620:	6033      	strmi	r3, [r6, #0]
 8005622:	6825      	ldr	r5, [r4, #0]
 8005624:	f015 0506 	ands.w	r5, r5, #6
 8005628:	d106      	bne.n	8005638 <_printf_common+0x48>
 800562a:	f104 0a19 	add.w	sl, r4, #25
 800562e:	68e3      	ldr	r3, [r4, #12]
 8005630:	6832      	ldr	r2, [r6, #0]
 8005632:	1a9b      	subs	r3, r3, r2
 8005634:	42ab      	cmp	r3, r5
 8005636:	dc26      	bgt.n	8005686 <_printf_common+0x96>
 8005638:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800563c:	1e13      	subs	r3, r2, #0
 800563e:	6822      	ldr	r2, [r4, #0]
 8005640:	bf18      	it	ne
 8005642:	2301      	movne	r3, #1
 8005644:	0692      	lsls	r2, r2, #26
 8005646:	d42b      	bmi.n	80056a0 <_printf_common+0xb0>
 8005648:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800564c:	4649      	mov	r1, r9
 800564e:	4638      	mov	r0, r7
 8005650:	47c0      	blx	r8
 8005652:	3001      	adds	r0, #1
 8005654:	d01e      	beq.n	8005694 <_printf_common+0xa4>
 8005656:	6823      	ldr	r3, [r4, #0]
 8005658:	68e5      	ldr	r5, [r4, #12]
 800565a:	6832      	ldr	r2, [r6, #0]
 800565c:	f003 0306 	and.w	r3, r3, #6
 8005660:	2b04      	cmp	r3, #4
 8005662:	bf08      	it	eq
 8005664:	1aad      	subeq	r5, r5, r2
 8005666:	68a3      	ldr	r3, [r4, #8]
 8005668:	6922      	ldr	r2, [r4, #16]
 800566a:	bf0c      	ite	eq
 800566c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005670:	2500      	movne	r5, #0
 8005672:	4293      	cmp	r3, r2
 8005674:	bfc4      	itt	gt
 8005676:	1a9b      	subgt	r3, r3, r2
 8005678:	18ed      	addgt	r5, r5, r3
 800567a:	2600      	movs	r6, #0
 800567c:	341a      	adds	r4, #26
 800567e:	42b5      	cmp	r5, r6
 8005680:	d11a      	bne.n	80056b8 <_printf_common+0xc8>
 8005682:	2000      	movs	r0, #0
 8005684:	e008      	b.n	8005698 <_printf_common+0xa8>
 8005686:	2301      	movs	r3, #1
 8005688:	4652      	mov	r2, sl
 800568a:	4649      	mov	r1, r9
 800568c:	4638      	mov	r0, r7
 800568e:	47c0      	blx	r8
 8005690:	3001      	adds	r0, #1
 8005692:	d103      	bne.n	800569c <_printf_common+0xac>
 8005694:	f04f 30ff 	mov.w	r0, #4294967295
 8005698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800569c:	3501      	adds	r5, #1
 800569e:	e7c6      	b.n	800562e <_printf_common+0x3e>
 80056a0:	18e1      	adds	r1, r4, r3
 80056a2:	1c5a      	adds	r2, r3, #1
 80056a4:	2030      	movs	r0, #48	; 0x30
 80056a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056aa:	4422      	add	r2, r4
 80056ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056b4:	3302      	adds	r3, #2
 80056b6:	e7c7      	b.n	8005648 <_printf_common+0x58>
 80056b8:	2301      	movs	r3, #1
 80056ba:	4622      	mov	r2, r4
 80056bc:	4649      	mov	r1, r9
 80056be:	4638      	mov	r0, r7
 80056c0:	47c0      	blx	r8
 80056c2:	3001      	adds	r0, #1
 80056c4:	d0e6      	beq.n	8005694 <_printf_common+0xa4>
 80056c6:	3601      	adds	r6, #1
 80056c8:	e7d9      	b.n	800567e <_printf_common+0x8e>
	...

080056cc <_printf_i>:
 80056cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056d0:	7e0f      	ldrb	r7, [r1, #24]
 80056d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80056d4:	2f78      	cmp	r7, #120	; 0x78
 80056d6:	4691      	mov	r9, r2
 80056d8:	4680      	mov	r8, r0
 80056da:	460c      	mov	r4, r1
 80056dc:	469a      	mov	sl, r3
 80056de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80056e2:	d807      	bhi.n	80056f4 <_printf_i+0x28>
 80056e4:	2f62      	cmp	r7, #98	; 0x62
 80056e6:	d80a      	bhi.n	80056fe <_printf_i+0x32>
 80056e8:	2f00      	cmp	r7, #0
 80056ea:	f000 80d8 	beq.w	800589e <_printf_i+0x1d2>
 80056ee:	2f58      	cmp	r7, #88	; 0x58
 80056f0:	f000 80a3 	beq.w	800583a <_printf_i+0x16e>
 80056f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056fc:	e03a      	b.n	8005774 <_printf_i+0xa8>
 80056fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005702:	2b15      	cmp	r3, #21
 8005704:	d8f6      	bhi.n	80056f4 <_printf_i+0x28>
 8005706:	a101      	add	r1, pc, #4	; (adr r1, 800570c <_printf_i+0x40>)
 8005708:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800570c:	08005765 	.word	0x08005765
 8005710:	08005779 	.word	0x08005779
 8005714:	080056f5 	.word	0x080056f5
 8005718:	080056f5 	.word	0x080056f5
 800571c:	080056f5 	.word	0x080056f5
 8005720:	080056f5 	.word	0x080056f5
 8005724:	08005779 	.word	0x08005779
 8005728:	080056f5 	.word	0x080056f5
 800572c:	080056f5 	.word	0x080056f5
 8005730:	080056f5 	.word	0x080056f5
 8005734:	080056f5 	.word	0x080056f5
 8005738:	08005885 	.word	0x08005885
 800573c:	080057a9 	.word	0x080057a9
 8005740:	08005867 	.word	0x08005867
 8005744:	080056f5 	.word	0x080056f5
 8005748:	080056f5 	.word	0x080056f5
 800574c:	080058a7 	.word	0x080058a7
 8005750:	080056f5 	.word	0x080056f5
 8005754:	080057a9 	.word	0x080057a9
 8005758:	080056f5 	.word	0x080056f5
 800575c:	080056f5 	.word	0x080056f5
 8005760:	0800586f 	.word	0x0800586f
 8005764:	682b      	ldr	r3, [r5, #0]
 8005766:	1d1a      	adds	r2, r3, #4
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	602a      	str	r2, [r5, #0]
 800576c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005770:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005774:	2301      	movs	r3, #1
 8005776:	e0a3      	b.n	80058c0 <_printf_i+0x1f4>
 8005778:	6820      	ldr	r0, [r4, #0]
 800577a:	6829      	ldr	r1, [r5, #0]
 800577c:	0606      	lsls	r6, r0, #24
 800577e:	f101 0304 	add.w	r3, r1, #4
 8005782:	d50a      	bpl.n	800579a <_printf_i+0xce>
 8005784:	680e      	ldr	r6, [r1, #0]
 8005786:	602b      	str	r3, [r5, #0]
 8005788:	2e00      	cmp	r6, #0
 800578a:	da03      	bge.n	8005794 <_printf_i+0xc8>
 800578c:	232d      	movs	r3, #45	; 0x2d
 800578e:	4276      	negs	r6, r6
 8005790:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005794:	485e      	ldr	r0, [pc, #376]	; (8005910 <_printf_i+0x244>)
 8005796:	230a      	movs	r3, #10
 8005798:	e019      	b.n	80057ce <_printf_i+0x102>
 800579a:	680e      	ldr	r6, [r1, #0]
 800579c:	602b      	str	r3, [r5, #0]
 800579e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80057a2:	bf18      	it	ne
 80057a4:	b236      	sxthne	r6, r6
 80057a6:	e7ef      	b.n	8005788 <_printf_i+0xbc>
 80057a8:	682b      	ldr	r3, [r5, #0]
 80057aa:	6820      	ldr	r0, [r4, #0]
 80057ac:	1d19      	adds	r1, r3, #4
 80057ae:	6029      	str	r1, [r5, #0]
 80057b0:	0601      	lsls	r1, r0, #24
 80057b2:	d501      	bpl.n	80057b8 <_printf_i+0xec>
 80057b4:	681e      	ldr	r6, [r3, #0]
 80057b6:	e002      	b.n	80057be <_printf_i+0xf2>
 80057b8:	0646      	lsls	r6, r0, #25
 80057ba:	d5fb      	bpl.n	80057b4 <_printf_i+0xe8>
 80057bc:	881e      	ldrh	r6, [r3, #0]
 80057be:	4854      	ldr	r0, [pc, #336]	; (8005910 <_printf_i+0x244>)
 80057c0:	2f6f      	cmp	r7, #111	; 0x6f
 80057c2:	bf0c      	ite	eq
 80057c4:	2308      	moveq	r3, #8
 80057c6:	230a      	movne	r3, #10
 80057c8:	2100      	movs	r1, #0
 80057ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057ce:	6865      	ldr	r5, [r4, #4]
 80057d0:	60a5      	str	r5, [r4, #8]
 80057d2:	2d00      	cmp	r5, #0
 80057d4:	bfa2      	ittt	ge
 80057d6:	6821      	ldrge	r1, [r4, #0]
 80057d8:	f021 0104 	bicge.w	r1, r1, #4
 80057dc:	6021      	strge	r1, [r4, #0]
 80057de:	b90e      	cbnz	r6, 80057e4 <_printf_i+0x118>
 80057e0:	2d00      	cmp	r5, #0
 80057e2:	d04d      	beq.n	8005880 <_printf_i+0x1b4>
 80057e4:	4615      	mov	r5, r2
 80057e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80057ea:	fb03 6711 	mls	r7, r3, r1, r6
 80057ee:	5dc7      	ldrb	r7, [r0, r7]
 80057f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80057f4:	4637      	mov	r7, r6
 80057f6:	42bb      	cmp	r3, r7
 80057f8:	460e      	mov	r6, r1
 80057fa:	d9f4      	bls.n	80057e6 <_printf_i+0x11a>
 80057fc:	2b08      	cmp	r3, #8
 80057fe:	d10b      	bne.n	8005818 <_printf_i+0x14c>
 8005800:	6823      	ldr	r3, [r4, #0]
 8005802:	07de      	lsls	r6, r3, #31
 8005804:	d508      	bpl.n	8005818 <_printf_i+0x14c>
 8005806:	6923      	ldr	r3, [r4, #16]
 8005808:	6861      	ldr	r1, [r4, #4]
 800580a:	4299      	cmp	r1, r3
 800580c:	bfde      	ittt	le
 800580e:	2330      	movle	r3, #48	; 0x30
 8005810:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005814:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005818:	1b52      	subs	r2, r2, r5
 800581a:	6122      	str	r2, [r4, #16]
 800581c:	f8cd a000 	str.w	sl, [sp]
 8005820:	464b      	mov	r3, r9
 8005822:	aa03      	add	r2, sp, #12
 8005824:	4621      	mov	r1, r4
 8005826:	4640      	mov	r0, r8
 8005828:	f7ff fee2 	bl	80055f0 <_printf_common>
 800582c:	3001      	adds	r0, #1
 800582e:	d14c      	bne.n	80058ca <_printf_i+0x1fe>
 8005830:	f04f 30ff 	mov.w	r0, #4294967295
 8005834:	b004      	add	sp, #16
 8005836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800583a:	4835      	ldr	r0, [pc, #212]	; (8005910 <_printf_i+0x244>)
 800583c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005840:	6829      	ldr	r1, [r5, #0]
 8005842:	6823      	ldr	r3, [r4, #0]
 8005844:	f851 6b04 	ldr.w	r6, [r1], #4
 8005848:	6029      	str	r1, [r5, #0]
 800584a:	061d      	lsls	r5, r3, #24
 800584c:	d514      	bpl.n	8005878 <_printf_i+0x1ac>
 800584e:	07df      	lsls	r7, r3, #31
 8005850:	bf44      	itt	mi
 8005852:	f043 0320 	orrmi.w	r3, r3, #32
 8005856:	6023      	strmi	r3, [r4, #0]
 8005858:	b91e      	cbnz	r6, 8005862 <_printf_i+0x196>
 800585a:	6823      	ldr	r3, [r4, #0]
 800585c:	f023 0320 	bic.w	r3, r3, #32
 8005860:	6023      	str	r3, [r4, #0]
 8005862:	2310      	movs	r3, #16
 8005864:	e7b0      	b.n	80057c8 <_printf_i+0xfc>
 8005866:	6823      	ldr	r3, [r4, #0]
 8005868:	f043 0320 	orr.w	r3, r3, #32
 800586c:	6023      	str	r3, [r4, #0]
 800586e:	2378      	movs	r3, #120	; 0x78
 8005870:	4828      	ldr	r0, [pc, #160]	; (8005914 <_printf_i+0x248>)
 8005872:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005876:	e7e3      	b.n	8005840 <_printf_i+0x174>
 8005878:	0659      	lsls	r1, r3, #25
 800587a:	bf48      	it	mi
 800587c:	b2b6      	uxthmi	r6, r6
 800587e:	e7e6      	b.n	800584e <_printf_i+0x182>
 8005880:	4615      	mov	r5, r2
 8005882:	e7bb      	b.n	80057fc <_printf_i+0x130>
 8005884:	682b      	ldr	r3, [r5, #0]
 8005886:	6826      	ldr	r6, [r4, #0]
 8005888:	6961      	ldr	r1, [r4, #20]
 800588a:	1d18      	adds	r0, r3, #4
 800588c:	6028      	str	r0, [r5, #0]
 800588e:	0635      	lsls	r5, r6, #24
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	d501      	bpl.n	8005898 <_printf_i+0x1cc>
 8005894:	6019      	str	r1, [r3, #0]
 8005896:	e002      	b.n	800589e <_printf_i+0x1d2>
 8005898:	0670      	lsls	r0, r6, #25
 800589a:	d5fb      	bpl.n	8005894 <_printf_i+0x1c8>
 800589c:	8019      	strh	r1, [r3, #0]
 800589e:	2300      	movs	r3, #0
 80058a0:	6123      	str	r3, [r4, #16]
 80058a2:	4615      	mov	r5, r2
 80058a4:	e7ba      	b.n	800581c <_printf_i+0x150>
 80058a6:	682b      	ldr	r3, [r5, #0]
 80058a8:	1d1a      	adds	r2, r3, #4
 80058aa:	602a      	str	r2, [r5, #0]
 80058ac:	681d      	ldr	r5, [r3, #0]
 80058ae:	6862      	ldr	r2, [r4, #4]
 80058b0:	2100      	movs	r1, #0
 80058b2:	4628      	mov	r0, r5
 80058b4:	f7fa fc8c 	bl	80001d0 <memchr>
 80058b8:	b108      	cbz	r0, 80058be <_printf_i+0x1f2>
 80058ba:	1b40      	subs	r0, r0, r5
 80058bc:	6060      	str	r0, [r4, #4]
 80058be:	6863      	ldr	r3, [r4, #4]
 80058c0:	6123      	str	r3, [r4, #16]
 80058c2:	2300      	movs	r3, #0
 80058c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058c8:	e7a8      	b.n	800581c <_printf_i+0x150>
 80058ca:	6923      	ldr	r3, [r4, #16]
 80058cc:	462a      	mov	r2, r5
 80058ce:	4649      	mov	r1, r9
 80058d0:	4640      	mov	r0, r8
 80058d2:	47d0      	blx	sl
 80058d4:	3001      	adds	r0, #1
 80058d6:	d0ab      	beq.n	8005830 <_printf_i+0x164>
 80058d8:	6823      	ldr	r3, [r4, #0]
 80058da:	079b      	lsls	r3, r3, #30
 80058dc:	d413      	bmi.n	8005906 <_printf_i+0x23a>
 80058de:	68e0      	ldr	r0, [r4, #12]
 80058e0:	9b03      	ldr	r3, [sp, #12]
 80058e2:	4298      	cmp	r0, r3
 80058e4:	bfb8      	it	lt
 80058e6:	4618      	movlt	r0, r3
 80058e8:	e7a4      	b.n	8005834 <_printf_i+0x168>
 80058ea:	2301      	movs	r3, #1
 80058ec:	4632      	mov	r2, r6
 80058ee:	4649      	mov	r1, r9
 80058f0:	4640      	mov	r0, r8
 80058f2:	47d0      	blx	sl
 80058f4:	3001      	adds	r0, #1
 80058f6:	d09b      	beq.n	8005830 <_printf_i+0x164>
 80058f8:	3501      	adds	r5, #1
 80058fa:	68e3      	ldr	r3, [r4, #12]
 80058fc:	9903      	ldr	r1, [sp, #12]
 80058fe:	1a5b      	subs	r3, r3, r1
 8005900:	42ab      	cmp	r3, r5
 8005902:	dcf2      	bgt.n	80058ea <_printf_i+0x21e>
 8005904:	e7eb      	b.n	80058de <_printf_i+0x212>
 8005906:	2500      	movs	r5, #0
 8005908:	f104 0619 	add.w	r6, r4, #25
 800590c:	e7f5      	b.n	80058fa <_printf_i+0x22e>
 800590e:	bf00      	nop
 8005910:	08006001 	.word	0x08006001
 8005914:	08006012 	.word	0x08006012

08005918 <_sbrk_r>:
 8005918:	b538      	push	{r3, r4, r5, lr}
 800591a:	4d06      	ldr	r5, [pc, #24]	; (8005934 <_sbrk_r+0x1c>)
 800591c:	2300      	movs	r3, #0
 800591e:	4604      	mov	r4, r0
 8005920:	4608      	mov	r0, r1
 8005922:	602b      	str	r3, [r5, #0]
 8005924:	f7fb f972 	bl	8000c0c <_sbrk>
 8005928:	1c43      	adds	r3, r0, #1
 800592a:	d102      	bne.n	8005932 <_sbrk_r+0x1a>
 800592c:	682b      	ldr	r3, [r5, #0]
 800592e:	b103      	cbz	r3, 8005932 <_sbrk_r+0x1a>
 8005930:	6023      	str	r3, [r4, #0]
 8005932:	bd38      	pop	{r3, r4, r5, pc}
 8005934:	200001fc 	.word	0x200001fc

08005938 <__sread>:
 8005938:	b510      	push	{r4, lr}
 800593a:	460c      	mov	r4, r1
 800593c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005940:	f000 fab2 	bl	8005ea8 <_read_r>
 8005944:	2800      	cmp	r0, #0
 8005946:	bfab      	itete	ge
 8005948:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800594a:	89a3      	ldrhlt	r3, [r4, #12]
 800594c:	181b      	addge	r3, r3, r0
 800594e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005952:	bfac      	ite	ge
 8005954:	6563      	strge	r3, [r4, #84]	; 0x54
 8005956:	81a3      	strhlt	r3, [r4, #12]
 8005958:	bd10      	pop	{r4, pc}

0800595a <__swrite>:
 800595a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800595e:	461f      	mov	r7, r3
 8005960:	898b      	ldrh	r3, [r1, #12]
 8005962:	05db      	lsls	r3, r3, #23
 8005964:	4605      	mov	r5, r0
 8005966:	460c      	mov	r4, r1
 8005968:	4616      	mov	r6, r2
 800596a:	d505      	bpl.n	8005978 <__swrite+0x1e>
 800596c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005970:	2302      	movs	r3, #2
 8005972:	2200      	movs	r2, #0
 8005974:	f000 f9c8 	bl	8005d08 <_lseek_r>
 8005978:	89a3      	ldrh	r3, [r4, #12]
 800597a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800597e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005982:	81a3      	strh	r3, [r4, #12]
 8005984:	4632      	mov	r2, r6
 8005986:	463b      	mov	r3, r7
 8005988:	4628      	mov	r0, r5
 800598a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800598e:	f000 b869 	b.w	8005a64 <_write_r>

08005992 <__sseek>:
 8005992:	b510      	push	{r4, lr}
 8005994:	460c      	mov	r4, r1
 8005996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800599a:	f000 f9b5 	bl	8005d08 <_lseek_r>
 800599e:	1c43      	adds	r3, r0, #1
 80059a0:	89a3      	ldrh	r3, [r4, #12]
 80059a2:	bf15      	itete	ne
 80059a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80059a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80059aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80059ae:	81a3      	strheq	r3, [r4, #12]
 80059b0:	bf18      	it	ne
 80059b2:	81a3      	strhne	r3, [r4, #12]
 80059b4:	bd10      	pop	{r4, pc}

080059b6 <__sclose>:
 80059b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059ba:	f000 b8d3 	b.w	8005b64 <_close_r>
	...

080059c0 <__swbuf_r>:
 80059c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059c2:	460e      	mov	r6, r1
 80059c4:	4614      	mov	r4, r2
 80059c6:	4605      	mov	r5, r0
 80059c8:	b118      	cbz	r0, 80059d2 <__swbuf_r+0x12>
 80059ca:	6983      	ldr	r3, [r0, #24]
 80059cc:	b90b      	cbnz	r3, 80059d2 <__swbuf_r+0x12>
 80059ce:	f7ff fb81 	bl	80050d4 <__sinit>
 80059d2:	4b21      	ldr	r3, [pc, #132]	; (8005a58 <__swbuf_r+0x98>)
 80059d4:	429c      	cmp	r4, r3
 80059d6:	d12b      	bne.n	8005a30 <__swbuf_r+0x70>
 80059d8:	686c      	ldr	r4, [r5, #4]
 80059da:	69a3      	ldr	r3, [r4, #24]
 80059dc:	60a3      	str	r3, [r4, #8]
 80059de:	89a3      	ldrh	r3, [r4, #12]
 80059e0:	071a      	lsls	r2, r3, #28
 80059e2:	d52f      	bpl.n	8005a44 <__swbuf_r+0x84>
 80059e4:	6923      	ldr	r3, [r4, #16]
 80059e6:	b36b      	cbz	r3, 8005a44 <__swbuf_r+0x84>
 80059e8:	6923      	ldr	r3, [r4, #16]
 80059ea:	6820      	ldr	r0, [r4, #0]
 80059ec:	1ac0      	subs	r0, r0, r3
 80059ee:	6963      	ldr	r3, [r4, #20]
 80059f0:	b2f6      	uxtb	r6, r6
 80059f2:	4283      	cmp	r3, r0
 80059f4:	4637      	mov	r7, r6
 80059f6:	dc04      	bgt.n	8005a02 <__swbuf_r+0x42>
 80059f8:	4621      	mov	r1, r4
 80059fa:	4628      	mov	r0, r5
 80059fc:	f000 f948 	bl	8005c90 <_fflush_r>
 8005a00:	bb30      	cbnz	r0, 8005a50 <__swbuf_r+0x90>
 8005a02:	68a3      	ldr	r3, [r4, #8]
 8005a04:	3b01      	subs	r3, #1
 8005a06:	60a3      	str	r3, [r4, #8]
 8005a08:	6823      	ldr	r3, [r4, #0]
 8005a0a:	1c5a      	adds	r2, r3, #1
 8005a0c:	6022      	str	r2, [r4, #0]
 8005a0e:	701e      	strb	r6, [r3, #0]
 8005a10:	6963      	ldr	r3, [r4, #20]
 8005a12:	3001      	adds	r0, #1
 8005a14:	4283      	cmp	r3, r0
 8005a16:	d004      	beq.n	8005a22 <__swbuf_r+0x62>
 8005a18:	89a3      	ldrh	r3, [r4, #12]
 8005a1a:	07db      	lsls	r3, r3, #31
 8005a1c:	d506      	bpl.n	8005a2c <__swbuf_r+0x6c>
 8005a1e:	2e0a      	cmp	r6, #10
 8005a20:	d104      	bne.n	8005a2c <__swbuf_r+0x6c>
 8005a22:	4621      	mov	r1, r4
 8005a24:	4628      	mov	r0, r5
 8005a26:	f000 f933 	bl	8005c90 <_fflush_r>
 8005a2a:	b988      	cbnz	r0, 8005a50 <__swbuf_r+0x90>
 8005a2c:	4638      	mov	r0, r7
 8005a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a30:	4b0a      	ldr	r3, [pc, #40]	; (8005a5c <__swbuf_r+0x9c>)
 8005a32:	429c      	cmp	r4, r3
 8005a34:	d101      	bne.n	8005a3a <__swbuf_r+0x7a>
 8005a36:	68ac      	ldr	r4, [r5, #8]
 8005a38:	e7cf      	b.n	80059da <__swbuf_r+0x1a>
 8005a3a:	4b09      	ldr	r3, [pc, #36]	; (8005a60 <__swbuf_r+0xa0>)
 8005a3c:	429c      	cmp	r4, r3
 8005a3e:	bf08      	it	eq
 8005a40:	68ec      	ldreq	r4, [r5, #12]
 8005a42:	e7ca      	b.n	80059da <__swbuf_r+0x1a>
 8005a44:	4621      	mov	r1, r4
 8005a46:	4628      	mov	r0, r5
 8005a48:	f000 f81e 	bl	8005a88 <__swsetup_r>
 8005a4c:	2800      	cmp	r0, #0
 8005a4e:	d0cb      	beq.n	80059e8 <__swbuf_r+0x28>
 8005a50:	f04f 37ff 	mov.w	r7, #4294967295
 8005a54:	e7ea      	b.n	8005a2c <__swbuf_r+0x6c>
 8005a56:	bf00      	nop
 8005a58:	08005fb0 	.word	0x08005fb0
 8005a5c:	08005fd0 	.word	0x08005fd0
 8005a60:	08005f90 	.word	0x08005f90

08005a64 <_write_r>:
 8005a64:	b538      	push	{r3, r4, r5, lr}
 8005a66:	4d07      	ldr	r5, [pc, #28]	; (8005a84 <_write_r+0x20>)
 8005a68:	4604      	mov	r4, r0
 8005a6a:	4608      	mov	r0, r1
 8005a6c:	4611      	mov	r1, r2
 8005a6e:	2200      	movs	r2, #0
 8005a70:	602a      	str	r2, [r5, #0]
 8005a72:	461a      	mov	r2, r3
 8005a74:	f7fb f879 	bl	8000b6a <_write>
 8005a78:	1c43      	adds	r3, r0, #1
 8005a7a:	d102      	bne.n	8005a82 <_write_r+0x1e>
 8005a7c:	682b      	ldr	r3, [r5, #0]
 8005a7e:	b103      	cbz	r3, 8005a82 <_write_r+0x1e>
 8005a80:	6023      	str	r3, [r4, #0]
 8005a82:	bd38      	pop	{r3, r4, r5, pc}
 8005a84:	200001fc 	.word	0x200001fc

08005a88 <__swsetup_r>:
 8005a88:	4b32      	ldr	r3, [pc, #200]	; (8005b54 <__swsetup_r+0xcc>)
 8005a8a:	b570      	push	{r4, r5, r6, lr}
 8005a8c:	681d      	ldr	r5, [r3, #0]
 8005a8e:	4606      	mov	r6, r0
 8005a90:	460c      	mov	r4, r1
 8005a92:	b125      	cbz	r5, 8005a9e <__swsetup_r+0x16>
 8005a94:	69ab      	ldr	r3, [r5, #24]
 8005a96:	b913      	cbnz	r3, 8005a9e <__swsetup_r+0x16>
 8005a98:	4628      	mov	r0, r5
 8005a9a:	f7ff fb1b 	bl	80050d4 <__sinit>
 8005a9e:	4b2e      	ldr	r3, [pc, #184]	; (8005b58 <__swsetup_r+0xd0>)
 8005aa0:	429c      	cmp	r4, r3
 8005aa2:	d10f      	bne.n	8005ac4 <__swsetup_r+0x3c>
 8005aa4:	686c      	ldr	r4, [r5, #4]
 8005aa6:	89a3      	ldrh	r3, [r4, #12]
 8005aa8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005aac:	0719      	lsls	r1, r3, #28
 8005aae:	d42c      	bmi.n	8005b0a <__swsetup_r+0x82>
 8005ab0:	06dd      	lsls	r5, r3, #27
 8005ab2:	d411      	bmi.n	8005ad8 <__swsetup_r+0x50>
 8005ab4:	2309      	movs	r3, #9
 8005ab6:	6033      	str	r3, [r6, #0]
 8005ab8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005abc:	81a3      	strh	r3, [r4, #12]
 8005abe:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac2:	e03e      	b.n	8005b42 <__swsetup_r+0xba>
 8005ac4:	4b25      	ldr	r3, [pc, #148]	; (8005b5c <__swsetup_r+0xd4>)
 8005ac6:	429c      	cmp	r4, r3
 8005ac8:	d101      	bne.n	8005ace <__swsetup_r+0x46>
 8005aca:	68ac      	ldr	r4, [r5, #8]
 8005acc:	e7eb      	b.n	8005aa6 <__swsetup_r+0x1e>
 8005ace:	4b24      	ldr	r3, [pc, #144]	; (8005b60 <__swsetup_r+0xd8>)
 8005ad0:	429c      	cmp	r4, r3
 8005ad2:	bf08      	it	eq
 8005ad4:	68ec      	ldreq	r4, [r5, #12]
 8005ad6:	e7e6      	b.n	8005aa6 <__swsetup_r+0x1e>
 8005ad8:	0758      	lsls	r0, r3, #29
 8005ada:	d512      	bpl.n	8005b02 <__swsetup_r+0x7a>
 8005adc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ade:	b141      	cbz	r1, 8005af2 <__swsetup_r+0x6a>
 8005ae0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ae4:	4299      	cmp	r1, r3
 8005ae6:	d002      	beq.n	8005aee <__swsetup_r+0x66>
 8005ae8:	4630      	mov	r0, r6
 8005aea:	f000 f991 	bl	8005e10 <_free_r>
 8005aee:	2300      	movs	r3, #0
 8005af0:	6363      	str	r3, [r4, #52]	; 0x34
 8005af2:	89a3      	ldrh	r3, [r4, #12]
 8005af4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005af8:	81a3      	strh	r3, [r4, #12]
 8005afa:	2300      	movs	r3, #0
 8005afc:	6063      	str	r3, [r4, #4]
 8005afe:	6923      	ldr	r3, [r4, #16]
 8005b00:	6023      	str	r3, [r4, #0]
 8005b02:	89a3      	ldrh	r3, [r4, #12]
 8005b04:	f043 0308 	orr.w	r3, r3, #8
 8005b08:	81a3      	strh	r3, [r4, #12]
 8005b0a:	6923      	ldr	r3, [r4, #16]
 8005b0c:	b94b      	cbnz	r3, 8005b22 <__swsetup_r+0x9a>
 8005b0e:	89a3      	ldrh	r3, [r4, #12]
 8005b10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b18:	d003      	beq.n	8005b22 <__swsetup_r+0x9a>
 8005b1a:	4621      	mov	r1, r4
 8005b1c:	4630      	mov	r0, r6
 8005b1e:	f000 f92b 	bl	8005d78 <__smakebuf_r>
 8005b22:	89a0      	ldrh	r0, [r4, #12]
 8005b24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b28:	f010 0301 	ands.w	r3, r0, #1
 8005b2c:	d00a      	beq.n	8005b44 <__swsetup_r+0xbc>
 8005b2e:	2300      	movs	r3, #0
 8005b30:	60a3      	str	r3, [r4, #8]
 8005b32:	6963      	ldr	r3, [r4, #20]
 8005b34:	425b      	negs	r3, r3
 8005b36:	61a3      	str	r3, [r4, #24]
 8005b38:	6923      	ldr	r3, [r4, #16]
 8005b3a:	b943      	cbnz	r3, 8005b4e <__swsetup_r+0xc6>
 8005b3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005b40:	d1ba      	bne.n	8005ab8 <__swsetup_r+0x30>
 8005b42:	bd70      	pop	{r4, r5, r6, pc}
 8005b44:	0781      	lsls	r1, r0, #30
 8005b46:	bf58      	it	pl
 8005b48:	6963      	ldrpl	r3, [r4, #20]
 8005b4a:	60a3      	str	r3, [r4, #8]
 8005b4c:	e7f4      	b.n	8005b38 <__swsetup_r+0xb0>
 8005b4e:	2000      	movs	r0, #0
 8005b50:	e7f7      	b.n	8005b42 <__swsetup_r+0xba>
 8005b52:	bf00      	nop
 8005b54:	2000000c 	.word	0x2000000c
 8005b58:	08005fb0 	.word	0x08005fb0
 8005b5c:	08005fd0 	.word	0x08005fd0
 8005b60:	08005f90 	.word	0x08005f90

08005b64 <_close_r>:
 8005b64:	b538      	push	{r3, r4, r5, lr}
 8005b66:	4d06      	ldr	r5, [pc, #24]	; (8005b80 <_close_r+0x1c>)
 8005b68:	2300      	movs	r3, #0
 8005b6a:	4604      	mov	r4, r0
 8005b6c:	4608      	mov	r0, r1
 8005b6e:	602b      	str	r3, [r5, #0]
 8005b70:	f7fb f817 	bl	8000ba2 <_close>
 8005b74:	1c43      	adds	r3, r0, #1
 8005b76:	d102      	bne.n	8005b7e <_close_r+0x1a>
 8005b78:	682b      	ldr	r3, [r5, #0]
 8005b7a:	b103      	cbz	r3, 8005b7e <_close_r+0x1a>
 8005b7c:	6023      	str	r3, [r4, #0]
 8005b7e:	bd38      	pop	{r3, r4, r5, pc}
 8005b80:	200001fc 	.word	0x200001fc

08005b84 <__sflush_r>:
 8005b84:	898a      	ldrh	r2, [r1, #12]
 8005b86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b8a:	4605      	mov	r5, r0
 8005b8c:	0710      	lsls	r0, r2, #28
 8005b8e:	460c      	mov	r4, r1
 8005b90:	d458      	bmi.n	8005c44 <__sflush_r+0xc0>
 8005b92:	684b      	ldr	r3, [r1, #4]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	dc05      	bgt.n	8005ba4 <__sflush_r+0x20>
 8005b98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	dc02      	bgt.n	8005ba4 <__sflush_r+0x20>
 8005b9e:	2000      	movs	r0, #0
 8005ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ba4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ba6:	2e00      	cmp	r6, #0
 8005ba8:	d0f9      	beq.n	8005b9e <__sflush_r+0x1a>
 8005baa:	2300      	movs	r3, #0
 8005bac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005bb0:	682f      	ldr	r7, [r5, #0]
 8005bb2:	602b      	str	r3, [r5, #0]
 8005bb4:	d032      	beq.n	8005c1c <__sflush_r+0x98>
 8005bb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005bb8:	89a3      	ldrh	r3, [r4, #12]
 8005bba:	075a      	lsls	r2, r3, #29
 8005bbc:	d505      	bpl.n	8005bca <__sflush_r+0x46>
 8005bbe:	6863      	ldr	r3, [r4, #4]
 8005bc0:	1ac0      	subs	r0, r0, r3
 8005bc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005bc4:	b10b      	cbz	r3, 8005bca <__sflush_r+0x46>
 8005bc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005bc8:	1ac0      	subs	r0, r0, r3
 8005bca:	2300      	movs	r3, #0
 8005bcc:	4602      	mov	r2, r0
 8005bce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005bd0:	6a21      	ldr	r1, [r4, #32]
 8005bd2:	4628      	mov	r0, r5
 8005bd4:	47b0      	blx	r6
 8005bd6:	1c43      	adds	r3, r0, #1
 8005bd8:	89a3      	ldrh	r3, [r4, #12]
 8005bda:	d106      	bne.n	8005bea <__sflush_r+0x66>
 8005bdc:	6829      	ldr	r1, [r5, #0]
 8005bde:	291d      	cmp	r1, #29
 8005be0:	d82c      	bhi.n	8005c3c <__sflush_r+0xb8>
 8005be2:	4a2a      	ldr	r2, [pc, #168]	; (8005c8c <__sflush_r+0x108>)
 8005be4:	40ca      	lsrs	r2, r1
 8005be6:	07d6      	lsls	r6, r2, #31
 8005be8:	d528      	bpl.n	8005c3c <__sflush_r+0xb8>
 8005bea:	2200      	movs	r2, #0
 8005bec:	6062      	str	r2, [r4, #4]
 8005bee:	04d9      	lsls	r1, r3, #19
 8005bf0:	6922      	ldr	r2, [r4, #16]
 8005bf2:	6022      	str	r2, [r4, #0]
 8005bf4:	d504      	bpl.n	8005c00 <__sflush_r+0x7c>
 8005bf6:	1c42      	adds	r2, r0, #1
 8005bf8:	d101      	bne.n	8005bfe <__sflush_r+0x7a>
 8005bfa:	682b      	ldr	r3, [r5, #0]
 8005bfc:	b903      	cbnz	r3, 8005c00 <__sflush_r+0x7c>
 8005bfe:	6560      	str	r0, [r4, #84]	; 0x54
 8005c00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c02:	602f      	str	r7, [r5, #0]
 8005c04:	2900      	cmp	r1, #0
 8005c06:	d0ca      	beq.n	8005b9e <__sflush_r+0x1a>
 8005c08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c0c:	4299      	cmp	r1, r3
 8005c0e:	d002      	beq.n	8005c16 <__sflush_r+0x92>
 8005c10:	4628      	mov	r0, r5
 8005c12:	f000 f8fd 	bl	8005e10 <_free_r>
 8005c16:	2000      	movs	r0, #0
 8005c18:	6360      	str	r0, [r4, #52]	; 0x34
 8005c1a:	e7c1      	b.n	8005ba0 <__sflush_r+0x1c>
 8005c1c:	6a21      	ldr	r1, [r4, #32]
 8005c1e:	2301      	movs	r3, #1
 8005c20:	4628      	mov	r0, r5
 8005c22:	47b0      	blx	r6
 8005c24:	1c41      	adds	r1, r0, #1
 8005c26:	d1c7      	bne.n	8005bb8 <__sflush_r+0x34>
 8005c28:	682b      	ldr	r3, [r5, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d0c4      	beq.n	8005bb8 <__sflush_r+0x34>
 8005c2e:	2b1d      	cmp	r3, #29
 8005c30:	d001      	beq.n	8005c36 <__sflush_r+0xb2>
 8005c32:	2b16      	cmp	r3, #22
 8005c34:	d101      	bne.n	8005c3a <__sflush_r+0xb6>
 8005c36:	602f      	str	r7, [r5, #0]
 8005c38:	e7b1      	b.n	8005b9e <__sflush_r+0x1a>
 8005c3a:	89a3      	ldrh	r3, [r4, #12]
 8005c3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c40:	81a3      	strh	r3, [r4, #12]
 8005c42:	e7ad      	b.n	8005ba0 <__sflush_r+0x1c>
 8005c44:	690f      	ldr	r7, [r1, #16]
 8005c46:	2f00      	cmp	r7, #0
 8005c48:	d0a9      	beq.n	8005b9e <__sflush_r+0x1a>
 8005c4a:	0793      	lsls	r3, r2, #30
 8005c4c:	680e      	ldr	r6, [r1, #0]
 8005c4e:	bf08      	it	eq
 8005c50:	694b      	ldreq	r3, [r1, #20]
 8005c52:	600f      	str	r7, [r1, #0]
 8005c54:	bf18      	it	ne
 8005c56:	2300      	movne	r3, #0
 8005c58:	eba6 0807 	sub.w	r8, r6, r7
 8005c5c:	608b      	str	r3, [r1, #8]
 8005c5e:	f1b8 0f00 	cmp.w	r8, #0
 8005c62:	dd9c      	ble.n	8005b9e <__sflush_r+0x1a>
 8005c64:	6a21      	ldr	r1, [r4, #32]
 8005c66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c68:	4643      	mov	r3, r8
 8005c6a:	463a      	mov	r2, r7
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	47b0      	blx	r6
 8005c70:	2800      	cmp	r0, #0
 8005c72:	dc06      	bgt.n	8005c82 <__sflush_r+0xfe>
 8005c74:	89a3      	ldrh	r3, [r4, #12]
 8005c76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c7a:	81a3      	strh	r3, [r4, #12]
 8005c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c80:	e78e      	b.n	8005ba0 <__sflush_r+0x1c>
 8005c82:	4407      	add	r7, r0
 8005c84:	eba8 0800 	sub.w	r8, r8, r0
 8005c88:	e7e9      	b.n	8005c5e <__sflush_r+0xda>
 8005c8a:	bf00      	nop
 8005c8c:	20400001 	.word	0x20400001

08005c90 <_fflush_r>:
 8005c90:	b538      	push	{r3, r4, r5, lr}
 8005c92:	690b      	ldr	r3, [r1, #16]
 8005c94:	4605      	mov	r5, r0
 8005c96:	460c      	mov	r4, r1
 8005c98:	b913      	cbnz	r3, 8005ca0 <_fflush_r+0x10>
 8005c9a:	2500      	movs	r5, #0
 8005c9c:	4628      	mov	r0, r5
 8005c9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ca0:	b118      	cbz	r0, 8005caa <_fflush_r+0x1a>
 8005ca2:	6983      	ldr	r3, [r0, #24]
 8005ca4:	b90b      	cbnz	r3, 8005caa <_fflush_r+0x1a>
 8005ca6:	f7ff fa15 	bl	80050d4 <__sinit>
 8005caa:	4b14      	ldr	r3, [pc, #80]	; (8005cfc <_fflush_r+0x6c>)
 8005cac:	429c      	cmp	r4, r3
 8005cae:	d11b      	bne.n	8005ce8 <_fflush_r+0x58>
 8005cb0:	686c      	ldr	r4, [r5, #4]
 8005cb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d0ef      	beq.n	8005c9a <_fflush_r+0xa>
 8005cba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005cbc:	07d0      	lsls	r0, r2, #31
 8005cbe:	d404      	bmi.n	8005cca <_fflush_r+0x3a>
 8005cc0:	0599      	lsls	r1, r3, #22
 8005cc2:	d402      	bmi.n	8005cca <_fflush_r+0x3a>
 8005cc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cc6:	f7ff faa3 	bl	8005210 <__retarget_lock_acquire_recursive>
 8005cca:	4628      	mov	r0, r5
 8005ccc:	4621      	mov	r1, r4
 8005cce:	f7ff ff59 	bl	8005b84 <__sflush_r>
 8005cd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005cd4:	07da      	lsls	r2, r3, #31
 8005cd6:	4605      	mov	r5, r0
 8005cd8:	d4e0      	bmi.n	8005c9c <_fflush_r+0xc>
 8005cda:	89a3      	ldrh	r3, [r4, #12]
 8005cdc:	059b      	lsls	r3, r3, #22
 8005cde:	d4dd      	bmi.n	8005c9c <_fflush_r+0xc>
 8005ce0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ce2:	f7ff fa96 	bl	8005212 <__retarget_lock_release_recursive>
 8005ce6:	e7d9      	b.n	8005c9c <_fflush_r+0xc>
 8005ce8:	4b05      	ldr	r3, [pc, #20]	; (8005d00 <_fflush_r+0x70>)
 8005cea:	429c      	cmp	r4, r3
 8005cec:	d101      	bne.n	8005cf2 <_fflush_r+0x62>
 8005cee:	68ac      	ldr	r4, [r5, #8]
 8005cf0:	e7df      	b.n	8005cb2 <_fflush_r+0x22>
 8005cf2:	4b04      	ldr	r3, [pc, #16]	; (8005d04 <_fflush_r+0x74>)
 8005cf4:	429c      	cmp	r4, r3
 8005cf6:	bf08      	it	eq
 8005cf8:	68ec      	ldreq	r4, [r5, #12]
 8005cfa:	e7da      	b.n	8005cb2 <_fflush_r+0x22>
 8005cfc:	08005fb0 	.word	0x08005fb0
 8005d00:	08005fd0 	.word	0x08005fd0
 8005d04:	08005f90 	.word	0x08005f90

08005d08 <_lseek_r>:
 8005d08:	b538      	push	{r3, r4, r5, lr}
 8005d0a:	4d07      	ldr	r5, [pc, #28]	; (8005d28 <_lseek_r+0x20>)
 8005d0c:	4604      	mov	r4, r0
 8005d0e:	4608      	mov	r0, r1
 8005d10:	4611      	mov	r1, r2
 8005d12:	2200      	movs	r2, #0
 8005d14:	602a      	str	r2, [r5, #0]
 8005d16:	461a      	mov	r2, r3
 8005d18:	f7fa ff6a 	bl	8000bf0 <_lseek>
 8005d1c:	1c43      	adds	r3, r0, #1
 8005d1e:	d102      	bne.n	8005d26 <_lseek_r+0x1e>
 8005d20:	682b      	ldr	r3, [r5, #0]
 8005d22:	b103      	cbz	r3, 8005d26 <_lseek_r+0x1e>
 8005d24:	6023      	str	r3, [r4, #0]
 8005d26:	bd38      	pop	{r3, r4, r5, pc}
 8005d28:	200001fc 	.word	0x200001fc

08005d2c <__swhatbuf_r>:
 8005d2c:	b570      	push	{r4, r5, r6, lr}
 8005d2e:	460e      	mov	r6, r1
 8005d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d34:	2900      	cmp	r1, #0
 8005d36:	b096      	sub	sp, #88	; 0x58
 8005d38:	4614      	mov	r4, r2
 8005d3a:	461d      	mov	r5, r3
 8005d3c:	da08      	bge.n	8005d50 <__swhatbuf_r+0x24>
 8005d3e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005d42:	2200      	movs	r2, #0
 8005d44:	602a      	str	r2, [r5, #0]
 8005d46:	061a      	lsls	r2, r3, #24
 8005d48:	d410      	bmi.n	8005d6c <__swhatbuf_r+0x40>
 8005d4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d4e:	e00e      	b.n	8005d6e <__swhatbuf_r+0x42>
 8005d50:	466a      	mov	r2, sp
 8005d52:	f000 f8bb 	bl	8005ecc <_fstat_r>
 8005d56:	2800      	cmp	r0, #0
 8005d58:	dbf1      	blt.n	8005d3e <__swhatbuf_r+0x12>
 8005d5a:	9a01      	ldr	r2, [sp, #4]
 8005d5c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005d60:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005d64:	425a      	negs	r2, r3
 8005d66:	415a      	adcs	r2, r3
 8005d68:	602a      	str	r2, [r5, #0]
 8005d6a:	e7ee      	b.n	8005d4a <__swhatbuf_r+0x1e>
 8005d6c:	2340      	movs	r3, #64	; 0x40
 8005d6e:	2000      	movs	r0, #0
 8005d70:	6023      	str	r3, [r4, #0]
 8005d72:	b016      	add	sp, #88	; 0x58
 8005d74:	bd70      	pop	{r4, r5, r6, pc}
	...

08005d78 <__smakebuf_r>:
 8005d78:	898b      	ldrh	r3, [r1, #12]
 8005d7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d7c:	079d      	lsls	r5, r3, #30
 8005d7e:	4606      	mov	r6, r0
 8005d80:	460c      	mov	r4, r1
 8005d82:	d507      	bpl.n	8005d94 <__smakebuf_r+0x1c>
 8005d84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005d88:	6023      	str	r3, [r4, #0]
 8005d8a:	6123      	str	r3, [r4, #16]
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	6163      	str	r3, [r4, #20]
 8005d90:	b002      	add	sp, #8
 8005d92:	bd70      	pop	{r4, r5, r6, pc}
 8005d94:	ab01      	add	r3, sp, #4
 8005d96:	466a      	mov	r2, sp
 8005d98:	f7ff ffc8 	bl	8005d2c <__swhatbuf_r>
 8005d9c:	9900      	ldr	r1, [sp, #0]
 8005d9e:	4605      	mov	r5, r0
 8005da0:	4630      	mov	r0, r6
 8005da2:	f7ff fa57 	bl	8005254 <_malloc_r>
 8005da6:	b948      	cbnz	r0, 8005dbc <__smakebuf_r+0x44>
 8005da8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dac:	059a      	lsls	r2, r3, #22
 8005dae:	d4ef      	bmi.n	8005d90 <__smakebuf_r+0x18>
 8005db0:	f023 0303 	bic.w	r3, r3, #3
 8005db4:	f043 0302 	orr.w	r3, r3, #2
 8005db8:	81a3      	strh	r3, [r4, #12]
 8005dba:	e7e3      	b.n	8005d84 <__smakebuf_r+0xc>
 8005dbc:	4b0d      	ldr	r3, [pc, #52]	; (8005df4 <__smakebuf_r+0x7c>)
 8005dbe:	62b3      	str	r3, [r6, #40]	; 0x28
 8005dc0:	89a3      	ldrh	r3, [r4, #12]
 8005dc2:	6020      	str	r0, [r4, #0]
 8005dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dc8:	81a3      	strh	r3, [r4, #12]
 8005dca:	9b00      	ldr	r3, [sp, #0]
 8005dcc:	6163      	str	r3, [r4, #20]
 8005dce:	9b01      	ldr	r3, [sp, #4]
 8005dd0:	6120      	str	r0, [r4, #16]
 8005dd2:	b15b      	cbz	r3, 8005dec <__smakebuf_r+0x74>
 8005dd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dd8:	4630      	mov	r0, r6
 8005dda:	f000 f889 	bl	8005ef0 <_isatty_r>
 8005dde:	b128      	cbz	r0, 8005dec <__smakebuf_r+0x74>
 8005de0:	89a3      	ldrh	r3, [r4, #12]
 8005de2:	f023 0303 	bic.w	r3, r3, #3
 8005de6:	f043 0301 	orr.w	r3, r3, #1
 8005dea:	81a3      	strh	r3, [r4, #12]
 8005dec:	89a0      	ldrh	r0, [r4, #12]
 8005dee:	4305      	orrs	r5, r0
 8005df0:	81a5      	strh	r5, [r4, #12]
 8005df2:	e7cd      	b.n	8005d90 <__smakebuf_r+0x18>
 8005df4:	0800506d 	.word	0x0800506d

08005df8 <__malloc_lock>:
 8005df8:	4801      	ldr	r0, [pc, #4]	; (8005e00 <__malloc_lock+0x8>)
 8005dfa:	f7ff ba09 	b.w	8005210 <__retarget_lock_acquire_recursive>
 8005dfe:	bf00      	nop
 8005e00:	200001f0 	.word	0x200001f0

08005e04 <__malloc_unlock>:
 8005e04:	4801      	ldr	r0, [pc, #4]	; (8005e0c <__malloc_unlock+0x8>)
 8005e06:	f7ff ba04 	b.w	8005212 <__retarget_lock_release_recursive>
 8005e0a:	bf00      	nop
 8005e0c:	200001f0 	.word	0x200001f0

08005e10 <_free_r>:
 8005e10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e12:	2900      	cmp	r1, #0
 8005e14:	d044      	beq.n	8005ea0 <_free_r+0x90>
 8005e16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e1a:	9001      	str	r0, [sp, #4]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f1a1 0404 	sub.w	r4, r1, #4
 8005e22:	bfb8      	it	lt
 8005e24:	18e4      	addlt	r4, r4, r3
 8005e26:	f7ff ffe7 	bl	8005df8 <__malloc_lock>
 8005e2a:	4a1e      	ldr	r2, [pc, #120]	; (8005ea4 <_free_r+0x94>)
 8005e2c:	9801      	ldr	r0, [sp, #4]
 8005e2e:	6813      	ldr	r3, [r2, #0]
 8005e30:	b933      	cbnz	r3, 8005e40 <_free_r+0x30>
 8005e32:	6063      	str	r3, [r4, #4]
 8005e34:	6014      	str	r4, [r2, #0]
 8005e36:	b003      	add	sp, #12
 8005e38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e3c:	f7ff bfe2 	b.w	8005e04 <__malloc_unlock>
 8005e40:	42a3      	cmp	r3, r4
 8005e42:	d908      	bls.n	8005e56 <_free_r+0x46>
 8005e44:	6825      	ldr	r5, [r4, #0]
 8005e46:	1961      	adds	r1, r4, r5
 8005e48:	428b      	cmp	r3, r1
 8005e4a:	bf01      	itttt	eq
 8005e4c:	6819      	ldreq	r1, [r3, #0]
 8005e4e:	685b      	ldreq	r3, [r3, #4]
 8005e50:	1949      	addeq	r1, r1, r5
 8005e52:	6021      	streq	r1, [r4, #0]
 8005e54:	e7ed      	b.n	8005e32 <_free_r+0x22>
 8005e56:	461a      	mov	r2, r3
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	b10b      	cbz	r3, 8005e60 <_free_r+0x50>
 8005e5c:	42a3      	cmp	r3, r4
 8005e5e:	d9fa      	bls.n	8005e56 <_free_r+0x46>
 8005e60:	6811      	ldr	r1, [r2, #0]
 8005e62:	1855      	adds	r5, r2, r1
 8005e64:	42a5      	cmp	r5, r4
 8005e66:	d10b      	bne.n	8005e80 <_free_r+0x70>
 8005e68:	6824      	ldr	r4, [r4, #0]
 8005e6a:	4421      	add	r1, r4
 8005e6c:	1854      	adds	r4, r2, r1
 8005e6e:	42a3      	cmp	r3, r4
 8005e70:	6011      	str	r1, [r2, #0]
 8005e72:	d1e0      	bne.n	8005e36 <_free_r+0x26>
 8005e74:	681c      	ldr	r4, [r3, #0]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	6053      	str	r3, [r2, #4]
 8005e7a:	4421      	add	r1, r4
 8005e7c:	6011      	str	r1, [r2, #0]
 8005e7e:	e7da      	b.n	8005e36 <_free_r+0x26>
 8005e80:	d902      	bls.n	8005e88 <_free_r+0x78>
 8005e82:	230c      	movs	r3, #12
 8005e84:	6003      	str	r3, [r0, #0]
 8005e86:	e7d6      	b.n	8005e36 <_free_r+0x26>
 8005e88:	6825      	ldr	r5, [r4, #0]
 8005e8a:	1961      	adds	r1, r4, r5
 8005e8c:	428b      	cmp	r3, r1
 8005e8e:	bf04      	itt	eq
 8005e90:	6819      	ldreq	r1, [r3, #0]
 8005e92:	685b      	ldreq	r3, [r3, #4]
 8005e94:	6063      	str	r3, [r4, #4]
 8005e96:	bf04      	itt	eq
 8005e98:	1949      	addeq	r1, r1, r5
 8005e9a:	6021      	streq	r1, [r4, #0]
 8005e9c:	6054      	str	r4, [r2, #4]
 8005e9e:	e7ca      	b.n	8005e36 <_free_r+0x26>
 8005ea0:	b003      	add	sp, #12
 8005ea2:	bd30      	pop	{r4, r5, pc}
 8005ea4:	200001f4 	.word	0x200001f4

08005ea8 <_read_r>:
 8005ea8:	b538      	push	{r3, r4, r5, lr}
 8005eaa:	4d07      	ldr	r5, [pc, #28]	; (8005ec8 <_read_r+0x20>)
 8005eac:	4604      	mov	r4, r0
 8005eae:	4608      	mov	r0, r1
 8005eb0:	4611      	mov	r1, r2
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	602a      	str	r2, [r5, #0]
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	f7fa fe3a 	bl	8000b30 <_read>
 8005ebc:	1c43      	adds	r3, r0, #1
 8005ebe:	d102      	bne.n	8005ec6 <_read_r+0x1e>
 8005ec0:	682b      	ldr	r3, [r5, #0]
 8005ec2:	b103      	cbz	r3, 8005ec6 <_read_r+0x1e>
 8005ec4:	6023      	str	r3, [r4, #0]
 8005ec6:	bd38      	pop	{r3, r4, r5, pc}
 8005ec8:	200001fc 	.word	0x200001fc

08005ecc <_fstat_r>:
 8005ecc:	b538      	push	{r3, r4, r5, lr}
 8005ece:	4d07      	ldr	r5, [pc, #28]	; (8005eec <_fstat_r+0x20>)
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	4604      	mov	r4, r0
 8005ed4:	4608      	mov	r0, r1
 8005ed6:	4611      	mov	r1, r2
 8005ed8:	602b      	str	r3, [r5, #0]
 8005eda:	f7fa fe6e 	bl	8000bba <_fstat>
 8005ede:	1c43      	adds	r3, r0, #1
 8005ee0:	d102      	bne.n	8005ee8 <_fstat_r+0x1c>
 8005ee2:	682b      	ldr	r3, [r5, #0]
 8005ee4:	b103      	cbz	r3, 8005ee8 <_fstat_r+0x1c>
 8005ee6:	6023      	str	r3, [r4, #0]
 8005ee8:	bd38      	pop	{r3, r4, r5, pc}
 8005eea:	bf00      	nop
 8005eec:	200001fc 	.word	0x200001fc

08005ef0 <_isatty_r>:
 8005ef0:	b538      	push	{r3, r4, r5, lr}
 8005ef2:	4d06      	ldr	r5, [pc, #24]	; (8005f0c <_isatty_r+0x1c>)
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	4604      	mov	r4, r0
 8005ef8:	4608      	mov	r0, r1
 8005efa:	602b      	str	r3, [r5, #0]
 8005efc:	f7fa fe6d 	bl	8000bda <_isatty>
 8005f00:	1c43      	adds	r3, r0, #1
 8005f02:	d102      	bne.n	8005f0a <_isatty_r+0x1a>
 8005f04:	682b      	ldr	r3, [r5, #0]
 8005f06:	b103      	cbz	r3, 8005f0a <_isatty_r+0x1a>
 8005f08:	6023      	str	r3, [r4, #0]
 8005f0a:	bd38      	pop	{r3, r4, r5, pc}
 8005f0c:	200001fc 	.word	0x200001fc

08005f10 <_init>:
 8005f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f12:	bf00      	nop
 8005f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f16:	bc08      	pop	{r3}
 8005f18:	469e      	mov	lr, r3
 8005f1a:	4770      	bx	lr

08005f1c <_fini>:
 8005f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f1e:	bf00      	nop
 8005f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f22:	bc08      	pop	{r3}
 8005f24:	469e      	mov	lr, r3
 8005f26:	4770      	bx	lr
