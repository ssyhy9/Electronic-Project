
Project_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a478  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000504  0800a608  0800a608  0001a608  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab0c  0800ab0c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab0c  0800ab0c  0001ab0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab14  0800ab14  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab14  0800ab14  0001ab14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab18  0800ab18  0001ab18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800ab1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000198c  200001e0  0800acfc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b6c  0800acfc  00021b6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000132a4  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c59  00000000  00000000  000334b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  00036110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e78  00000000  00000000  000370d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ab48  00000000  00000000  00037f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000152c7  00000000  00000000  00062a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105d4d  00000000  00000000  00077d57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017daa4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055c8  00000000  00000000  0017daf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a5f0 	.word	0x0800a5f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800a5f0 	.word	0x0800a5f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ffe:	f107 031c 	add.w	r3, r7, #28
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
 8001018:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800101a:	4b2f      	ldr	r3, [pc, #188]	; (80010d8 <MX_ADC1_Init+0xe0>)
 800101c:	4a2f      	ldr	r2, [pc, #188]	; (80010dc <MX_ADC1_Init+0xe4>)
 800101e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001020:	4b2d      	ldr	r3, [pc, #180]	; (80010d8 <MX_ADC1_Init+0xe0>)
 8001022:	2200      	movs	r2, #0
 8001024:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001026:	4b2c      	ldr	r3, [pc, #176]	; (80010d8 <MX_ADC1_Init+0xe0>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800102c:	4b2a      	ldr	r3, [pc, #168]	; (80010d8 <MX_ADC1_Init+0xe0>)
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001032:	4b29      	ldr	r3, [pc, #164]	; (80010d8 <MX_ADC1_Init+0xe0>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001038:	4b27      	ldr	r3, [pc, #156]	; (80010d8 <MX_ADC1_Init+0xe0>)
 800103a:	2204      	movs	r2, #4
 800103c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800103e:	4b26      	ldr	r3, [pc, #152]	; (80010d8 <MX_ADC1_Init+0xe0>)
 8001040:	2200      	movs	r2, #0
 8001042:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001044:	4b24      	ldr	r3, [pc, #144]	; (80010d8 <MX_ADC1_Init+0xe0>)
 8001046:	2201      	movs	r2, #1
 8001048:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800104a:	4b23      	ldr	r3, [pc, #140]	; (80010d8 <MX_ADC1_Init+0xe0>)
 800104c:	2201      	movs	r2, #1
 800104e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001050:	4b21      	ldr	r3, [pc, #132]	; (80010d8 <MX_ADC1_Init+0xe0>)
 8001052:	2200      	movs	r2, #0
 8001054:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001058:	4b1f      	ldr	r3, [pc, #124]	; (80010d8 <MX_ADC1_Init+0xe0>)
 800105a:	2200      	movs	r2, #0
 800105c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800105e:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <MX_ADC1_Init+0xe0>)
 8001060:	2200      	movs	r2, #0
 8001062:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001064:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <MX_ADC1_Init+0xe0>)
 8001066:	2201      	movs	r2, #1
 8001068:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800106c:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <MX_ADC1_Init+0xe0>)
 800106e:	2200      	movs	r2, #0
 8001070:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001072:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <MX_ADC1_Init+0xe0>)
 8001074:	2200      	movs	r2, #0
 8001076:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800107a:	4817      	ldr	r0, [pc, #92]	; (80010d8 <MX_ADC1_Init+0xe0>)
 800107c:	f000 fefa 	bl	8001e74 <HAL_ADC_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001086:	f000 fa3a 	bl	80014fe <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800108e:	f107 031c 	add.w	r3, r7, #28
 8001092:	4619      	mov	r1, r3
 8001094:	4810      	ldr	r0, [pc, #64]	; (80010d8 <MX_ADC1_Init+0xe0>)
 8001096:	f001 fe4d 	bl	8002d34 <HAL_ADCEx_MultiModeConfigChannel>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80010a0:	f000 fa2d 	bl	80014fe <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80010a4:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <MX_ADC1_Init+0xe8>)
 80010a6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010a8:	2306      	movs	r3, #6
 80010aa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010b0:	237f      	movs	r3, #127	; 0x7f
 80010b2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010b4:	2304      	movs	r3, #4
 80010b6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	4619      	mov	r1, r3
 80010c0:	4805      	ldr	r0, [pc, #20]	; (80010d8 <MX_ADC1_Init+0xe0>)
 80010c2:	f001 f907 	bl	80022d4 <HAL_ADC_ConfigChannel>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80010cc:	f000 fa17 	bl	80014fe <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010d0:	bf00      	nop
 80010d2:	3728      	adds	r7, #40	; 0x28
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200001fc 	.word	0x200001fc
 80010dc:	50040000 	.word	0x50040000
 80010e0:	32601000 	.word	0x32601000

080010e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b0ac      	sub	sp, #176	; 0xb0
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	2288      	movs	r2, #136	; 0x88
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f004 fdf9 	bl	8005cfc <memset>
  if(adcHandle->Instance==ADC1)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a3d      	ldr	r2, [pc, #244]	; (8001204 <HAL_ADC_MspInit+0x120>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d172      	bne.n	80011fa <HAL_ADC_MspInit+0x116>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001114:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001118:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800111a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800111e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001122:	2302      	movs	r3, #2
 8001124:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001126:	2301      	movs	r3, #1
 8001128:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800112a:	2308      	movs	r3, #8
 800112c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800112e:	2307      	movs	r3, #7
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001132:	2302      	movs	r3, #2
 8001134:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001136:	2302      	movs	r3, #2
 8001138:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800113a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800113e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	4618      	mov	r0, r3
 8001146:	f003 f9d5 	bl	80044f4 <HAL_RCCEx_PeriphCLKConfig>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001150:	f000 f9d5 	bl	80014fe <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001154:	4b2c      	ldr	r3, [pc, #176]	; (8001208 <HAL_ADC_MspInit+0x124>)
 8001156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001158:	4a2b      	ldr	r2, [pc, #172]	; (8001208 <HAL_ADC_MspInit+0x124>)
 800115a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800115e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001160:	4b29      	ldr	r3, [pc, #164]	; (8001208 <HAL_ADC_MspInit+0x124>)
 8001162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001164:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116c:	4b26      	ldr	r3, [pc, #152]	; (8001208 <HAL_ADC_MspInit+0x124>)
 800116e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001170:	4a25      	ldr	r2, [pc, #148]	; (8001208 <HAL_ADC_MspInit+0x124>)
 8001172:	f043 0301 	orr.w	r3, r3, #1
 8001176:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001178:	4b23      	ldr	r3, [pc, #140]	; (8001208 <HAL_ADC_MspInit+0x124>)
 800117a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117c:	f003 0301 	and.w	r3, r3, #1
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001184:	2380      	movs	r3, #128	; 0x80
 8001186:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800118a:	230b      	movs	r3, #11
 800118c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001196:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800119a:	4619      	mov	r1, r3
 800119c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a0:	f002 f982 	bl	80034a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80011a4:	4b19      	ldr	r3, [pc, #100]	; (800120c <HAL_ADC_MspInit+0x128>)
 80011a6:	4a1a      	ldr	r2, [pc, #104]	; (8001210 <HAL_ADC_MspInit+0x12c>)
 80011a8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80011aa:	4b18      	ldr	r3, [pc, #96]	; (800120c <HAL_ADC_MspInit+0x128>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011b0:	4b16      	ldr	r3, [pc, #88]	; (800120c <HAL_ADC_MspInit+0x128>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <HAL_ADC_MspInit+0x128>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011bc:	4b13      	ldr	r3, [pc, #76]	; (800120c <HAL_ADC_MspInit+0x128>)
 80011be:	2280      	movs	r2, #128	; 0x80
 80011c0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011c2:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_ADC_MspInit+0x128>)
 80011c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011c8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <HAL_ADC_MspInit+0x128>)
 80011cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011d0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <HAL_ADC_MspInit+0x128>)
 80011d4:	2220      	movs	r2, #32
 80011d6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <HAL_ADC_MspInit+0x128>)
 80011da:	2200      	movs	r2, #0
 80011dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011de:	480b      	ldr	r0, [pc, #44]	; (800120c <HAL_ADC_MspInit+0x128>)
 80011e0:	f001 ff6a 	bl	80030b8 <HAL_DMA_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 80011ea:	f000 f988 	bl	80014fe <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a06      	ldr	r2, [pc, #24]	; (800120c <HAL_ADC_MspInit+0x128>)
 80011f2:	64da      	str	r2, [r3, #76]	; 0x4c
 80011f4:	4a05      	ldr	r2, [pc, #20]	; (800120c <HAL_ADC_MspInit+0x128>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011fa:	bf00      	nop
 80011fc:	37b0      	adds	r7, #176	; 0xb0
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	50040000 	.word	0x50040000
 8001208:	40021000 	.word	0x40021000
 800120c:	20000260 	.word	0x20000260
 8001210:	40020008 	.word	0x40020008

08001214 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800121a:	4b0c      	ldr	r3, [pc, #48]	; (800124c <MX_DMA_Init+0x38>)
 800121c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800121e:	4a0b      	ldr	r2, [pc, #44]	; (800124c <MX_DMA_Init+0x38>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	6493      	str	r3, [r2, #72]	; 0x48
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <MX_DMA_Init+0x38>)
 8001228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	200b      	movs	r0, #11
 8001238:	f001 ff07 	bl	800304a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800123c:	200b      	movs	r0, #11
 800123e:	f001 ff20 	bl	8003082 <HAL_NVIC_EnableIRQ>

}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40021000 	.word	0x40021000

08001250 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08a      	sub	sp, #40	; 0x28
 8001254:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001266:	4b3f      	ldr	r3, [pc, #252]	; (8001364 <MX_GPIO_Init+0x114>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126a:	4a3e      	ldr	r2, [pc, #248]	; (8001364 <MX_GPIO_Init+0x114>)
 800126c:	f043 0304 	orr.w	r3, r3, #4
 8001270:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001272:	4b3c      	ldr	r3, [pc, #240]	; (8001364 <MX_GPIO_Init+0x114>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001276:	f003 0304 	and.w	r3, r3, #4
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800127e:	4b39      	ldr	r3, [pc, #228]	; (8001364 <MX_GPIO_Init+0x114>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001282:	4a38      	ldr	r2, [pc, #224]	; (8001364 <MX_GPIO_Init+0x114>)
 8001284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001288:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128a:	4b36      	ldr	r3, [pc, #216]	; (8001364 <MX_GPIO_Init+0x114>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	4b33      	ldr	r3, [pc, #204]	; (8001364 <MX_GPIO_Init+0x114>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129a:	4a32      	ldr	r2, [pc, #200]	; (8001364 <MX_GPIO_Init+0x114>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a2:	4b30      	ldr	r3, [pc, #192]	; (8001364 <MX_GPIO_Init+0x114>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ae:	4b2d      	ldr	r3, [pc, #180]	; (8001364 <MX_GPIO_Init+0x114>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b2:	4a2c      	ldr	r2, [pc, #176]	; (8001364 <MX_GPIO_Init+0x114>)
 80012b4:	f043 0302 	orr.w	r3, r3, #2
 80012b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ba:	4b2a      	ldr	r3, [pc, #168]	; (8001364 <MX_GPIO_Init+0x114>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_9, GPIO_PIN_RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	f44f 7118 	mov.w	r1, #608	; 0x260
 80012cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d0:	f002 fa94 	bl	80037fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80012d4:	2200      	movs	r2, #0
 80012d6:	2180      	movs	r1, #128	; 0x80
 80012d8:	4823      	ldr	r0, [pc, #140]	; (8001368 <MX_GPIO_Init+0x118>)
 80012da:	f002 fa8f 	bl	80037fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	2170      	movs	r1, #112	; 0x70
 80012e2:	4822      	ldr	r0, [pc, #136]	; (800136c <MX_GPIO_Init+0x11c>)
 80012e4:	f002 fa8a 	bl	80037fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	4619      	mov	r1, r3
 80012fc:	481a      	ldr	r0, [pc, #104]	; (8001368 <MX_GPIO_Init+0x118>)
 80012fe:	f002 f8d3 	bl	80034a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA6 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_9;
 8001302:	f44f 7318 	mov.w	r3, #608	; 0x260
 8001306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001308:	2301      	movs	r3, #1
 800130a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001310:	2300      	movs	r3, #0
 8001312:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	4619      	mov	r1, r3
 800131a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800131e:	f002 f8c3 	bl	80034a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001322:	2380      	movs	r3, #128	; 0x80
 8001324:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001326:	2301      	movs	r3, #1
 8001328:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132e:	2300      	movs	r3, #0
 8001330:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001332:	f107 0314 	add.w	r3, r7, #20
 8001336:	4619      	mov	r1, r3
 8001338:	480b      	ldr	r0, [pc, #44]	; (8001368 <MX_GPIO_Init+0x118>)
 800133a:	f002 f8b5 	bl	80034a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800133e:	2370      	movs	r3, #112	; 0x70
 8001340:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001342:	2301      	movs	r3, #1
 8001344:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134a:	2300      	movs	r3, #0
 800134c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	4619      	mov	r1, r3
 8001354:	4805      	ldr	r0, [pc, #20]	; (800136c <MX_GPIO_Init+0x11c>)
 8001356:	f002 f8a7 	bl	80034a8 <HAL_GPIO_Init>

}
 800135a:	bf00      	nop
 800135c:	3728      	adds	r7, #40	; 0x28
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40021000 	.word	0x40021000
 8001368:	48000800 	.word	0x48000800
 800136c:	48000400 	.word	0x48000400

08001370 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001378:	1d39      	adds	r1, r7, #4
 800137a:	f04f 33ff 	mov.w	r3, #4294967295
 800137e:	2201      	movs	r2, #1
 8001380:	4803      	ldr	r0, [pc, #12]	; (8001390 <__io_putchar+0x20>)
 8001382:	f003 fed3 	bl	800512c <HAL_UART_Transmit>
  return ch;
 8001386:	687b      	ldr	r3, [r7, #4]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20001ad4 	.word	0x20001ad4

08001394 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001394:	b590      	push	{r4, r7, lr}
 8001396:	b093      	sub	sp, #76	; 0x4c
 8001398:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800139a:	f000 faf5 	bl	8001988 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800139e:	f000 f85b 	bl	8001458 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a2:	f7ff ff55 	bl	8001250 <MX_GPIO_Init>
  MX_DMA_Init();
 80013a6:	f7ff ff35 	bl	8001214 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80013aa:	f000 fa37 	bl	800181c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80013ae:	f7ff fe23 	bl	8000ff8 <MX_ADC1_Init>
  MX_RTC_Init();
 80013b2:	f000 f8a9 	bl	8001508 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  //HAL_ADCEx_Calibration_Start(&hdac1);
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC_Value, FFT_LENGTH);
 80013b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013ba:	4920      	ldr	r1, [pc, #128]	; (800143c <main+0xa8>)
 80013bc:	4820      	ldr	r0, [pc, #128]	; (8001440 <main+0xac>)
 80013be:	f000 feaf 	bl	8002120 <HAL_ADC_Start_DMA>

    Lcd_PortType ports[] = { GPIOC, GPIOB, GPIOA, GPIOA };
 80013c2:	4b20      	ldr	r3, [pc, #128]	; (8001444 <main+0xb0>)
 80013c4:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80013c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    Lcd_PinType pins[] = {GPIO_PIN_7, GPIO_PIN_6, GPIO_PIN_9, GPIO_PIN_6};
 80013ce:	4a1e      	ldr	r2, [pc, #120]	; (8001448 <main+0xb4>)
 80013d0:	f107 031c 	add.w	r3, r7, #28
 80013d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013d8:	e883 0003 	stmia.w	r3, {r0, r1}
    Lcd_HandleTypeDef lcd;

    lcd = Lcd_create(ports, pins, GPIOB, GPIO_PIN_5, GPIOB, GPIO_PIN_4, LCD_4_BIT_MODE);
 80013dc:	1d38      	adds	r0, r7, #4
 80013de:	f107 021c 	add.w	r2, r7, #28
 80013e2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80013e6:	2300      	movs	r3, #0
 80013e8:	9303      	str	r3, [sp, #12]
 80013ea:	2310      	movs	r3, #16
 80013ec:	9302      	str	r3, [sp, #8]
 80013ee:	4b17      	ldr	r3, [pc, #92]	; (800144c <main+0xb8>)
 80013f0:	9301      	str	r3, [sp, #4]
 80013f2:	2320      	movs	r3, #32
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	4b15      	ldr	r3, [pc, #84]	; (800144c <main+0xb8>)
 80013f8:	f004 fb93 	bl	8005b22 <Lcd_create>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  cnt ++;
 80013fc:	4b14      	ldr	r3, [pc, #80]	; (8001450 <main+0xbc>)
 80013fe:	881b      	ldrh	r3, [r3, #0]
 8001400:	3301      	adds	r3, #1
 8001402:	b29a      	uxth	r2, r3
 8001404:	4b12      	ldr	r3, [pc, #72]	; (8001450 <main+0xbc>)
 8001406:	801a      	strh	r2, [r3, #0]
//	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0){
//		  Lcd_clear(store);
//	  }

	  //Store the ADC value in an array ASAP
	  for(int i = 0; i < FFT_LENGTH; i++){
 8001408:	2300      	movs	r3, #0
 800140a:	637b      	str	r3, [r7, #52]	; 0x34
 800140c:	e010      	b.n	8001430 <main+0x9c>
		//  ADC_In[i] = ADC_Value[i] * 3.3 / 4096;
		  ADC_In[i] = ADC_Value[i];
 800140e:	4a0b      	ldr	r2, [pc, #44]	; (800143c <main+0xa8>)
 8001410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001412:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001416:	ee07 3a90 	vmov	s15, r3
 800141a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800141e:	4a0d      	ldr	r2, [pc, #52]	; (8001454 <main+0xc0>)
 8001420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4413      	add	r3, r2
 8001426:	edc3 7a00 	vstr	s15, [r3]
	  for(int i = 0; i < FFT_LENGTH; i++){
 800142a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800142c:	3301      	adds	r3, #1
 800142e:	637b      	str	r3, [r7, #52]	; 0x34
 8001430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001436:	dbea      	blt.n	800140e <main+0x7a>
	  cnt ++;
 8001438:	e7e0      	b.n	80013fc <main+0x68>
 800143a:	bf00      	nop
 800143c:	200002ac 	.word	0x200002ac
 8001440:	200001fc 	.word	0x200001fc
 8001444:	0800a608 	.word	0x0800a608
 8001448:	0800a618 	.word	0x0800a618
 800144c:	48000400 	.word	0x48000400
 8001450:	200002a8 	.word	0x200002a8
 8001454:	20000aac 	.word	0x20000aac

08001458 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b096      	sub	sp, #88	; 0x58
 800145c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800145e:	f107 0314 	add.w	r3, r7, #20
 8001462:	2244      	movs	r2, #68	; 0x44
 8001464:	2100      	movs	r1, #0
 8001466:	4618      	mov	r0, r3
 8001468:	f004 fc48 	bl	8005cfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800146c:	463b      	mov	r3, r7
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
 8001478:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800147a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800147e:	f002 f9e3 	bl	8003848 <HAL_PWREx_ControlVoltageScaling>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001488:	f000 f839 	bl	80014fe <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800148c:	230a      	movs	r3, #10
 800148e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001490:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001494:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001496:	2310      	movs	r3, #16
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800149a:	2301      	movs	r3, #1
 800149c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800149e:	2302      	movs	r3, #2
 80014a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014a2:	2302      	movs	r3, #2
 80014a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80014a6:	2301      	movs	r3, #1
 80014a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80014aa:	230a      	movs	r3, #10
 80014ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80014ae:	2307      	movs	r3, #7
 80014b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014b2:	2302      	movs	r3, #2
 80014b4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014b6:	2302      	movs	r3, #2
 80014b8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	4618      	mov	r0, r3
 80014c0:	f002 fa18 	bl	80038f4 <HAL_RCC_OscConfig>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <SystemClock_Config+0x76>
  {
    Error_Handler();
 80014ca:	f000 f818 	bl	80014fe <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ce:	230f      	movs	r3, #15
 80014d0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014d2:	2303      	movs	r3, #3
 80014d4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014e2:	463b      	mov	r3, r7
 80014e4:	2104      	movs	r1, #4
 80014e6:	4618      	mov	r0, r3
 80014e8:	f002 fde0 	bl	80040ac <HAL_RCC_ClockConfig>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80014f2:	f000 f804 	bl	80014fe <Error_Handler>
  }
}
 80014f6:	bf00      	nop
 80014f8:	3758      	adds	r7, #88	; 0x58
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001502:	b672      	cpsid	i
}
 8001504:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001506:	e7fe      	b.n	8001506 <Error_Handler+0x8>

08001508 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800150c:	4b10      	ldr	r3, [pc, #64]	; (8001550 <MX_RTC_Init+0x48>)
 800150e:	4a11      	ldr	r2, [pc, #68]	; (8001554 <MX_RTC_Init+0x4c>)
 8001510:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001512:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <MX_RTC_Init+0x48>)
 8001514:	2200      	movs	r2, #0
 8001516:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001518:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <MX_RTC_Init+0x48>)
 800151a:	227f      	movs	r2, #127	; 0x7f
 800151c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800151e:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <MX_RTC_Init+0x48>)
 8001520:	22ff      	movs	r2, #255	; 0xff
 8001522:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001524:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <MX_RTC_Init+0x48>)
 8001526:	2200      	movs	r2, #0
 8001528:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <MX_RTC_Init+0x48>)
 800152c:	2200      	movs	r2, #0
 800152e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001530:	4b07      	ldr	r3, [pc, #28]	; (8001550 <MX_RTC_Init+0x48>)
 8001532:	2200      	movs	r2, #0
 8001534:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <MX_RTC_Init+0x48>)
 8001538:	2200      	movs	r2, #0
 800153a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800153c:	4804      	ldr	r0, [pc, #16]	; (8001550 <MX_RTC_Init+0x48>)
 800153e:	f003 fc95 	bl	8004e6c <HAL_RTC_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001548:	f7ff ffd9 	bl	80014fe <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20001aac 	.word	0x20001aac
 8001554:	40002800 	.word	0x40002800

08001558 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b0a4      	sub	sp, #144	; 0x90
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001560:	f107 0308 	add.w	r3, r7, #8
 8001564:	2288      	movs	r2, #136	; 0x88
 8001566:	2100      	movs	r1, #0
 8001568:	4618      	mov	r0, r3
 800156a:	f004 fbc7 	bl	8005cfc <memset>
  if(rtcHandle->Instance==RTC)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a10      	ldr	r2, [pc, #64]	; (80015b4 <HAL_RTC_MspInit+0x5c>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d118      	bne.n	80015aa <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001578:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800157c:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800157e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001582:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001586:	f107 0308 	add.w	r3, r7, #8
 800158a:	4618      	mov	r0, r3
 800158c:	f002 ffb2 	bl	80044f4 <HAL_RCCEx_PeriphCLKConfig>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001596:	f7ff ffb2 	bl	80014fe <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800159a:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <HAL_RTC_MspInit+0x60>)
 800159c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015a0:	4a05      	ldr	r2, [pc, #20]	; (80015b8 <HAL_RTC_MspInit+0x60>)
 80015a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80015aa:	bf00      	nop
 80015ac:	3790      	adds	r7, #144	; 0x90
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40002800 	.word	0x40002800
 80015b8:	40021000 	.word	0x40021000

080015bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c2:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <HAL_MspInit+0x44>)
 80015c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015c6:	4a0e      	ldr	r2, [pc, #56]	; (8001600 <HAL_MspInit+0x44>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6613      	str	r3, [r2, #96]	; 0x60
 80015ce:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <HAL_MspInit+0x44>)
 80015d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <HAL_MspInit+0x44>)
 80015dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015de:	4a08      	ldr	r2, [pc, #32]	; (8001600 <HAL_MspInit+0x44>)
 80015e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e4:	6593      	str	r3, [r2, #88]	; 0x58
 80015e6:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_MspInit+0x44>)
 80015e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ee:	603b      	str	r3, [r7, #0]
 80015f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	40021000 	.word	0x40021000

08001604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001608:	e7fe      	b.n	8001608 <NMI_Handler+0x4>

0800160a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800160e:	e7fe      	b.n	800160e <HardFault_Handler+0x4>

08001610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001614:	e7fe      	b.n	8001614 <MemManage_Handler+0x4>

08001616 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800161a:	e7fe      	b.n	800161a <BusFault_Handler+0x4>

0800161c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001620:	e7fe      	b.n	8001620 <UsageFault_Handler+0x4>

08001622 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001650:	f000 f9f6 	bl	8001a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}

08001658 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800165c:	4802      	ldr	r0, [pc, #8]	; (8001668 <DMA1_Channel1_IRQHandler+0x10>)
 800165e:	f001 fe43 	bl	80032e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000260 	.word	0x20000260

0800166c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
	return 1;
 8001670:	2301      	movs	r3, #1
}
 8001672:	4618      	mov	r0, r3
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <_kill>:

int _kill(int pid, int sig)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001686:	f004 fb0f 	bl	8005ca8 <__errno>
 800168a:	4603      	mov	r3, r0
 800168c:	2216      	movs	r2, #22
 800168e:	601a      	str	r2, [r3, #0]
	return -1;
 8001690:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001694:	4618      	mov	r0, r3
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <_exit>:

void _exit (int status)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016a4:	f04f 31ff 	mov.w	r1, #4294967295
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f7ff ffe7 	bl	800167c <_kill>
	while (1) {}		/* Make sure we hang here */
 80016ae:	e7fe      	b.n	80016ae <_exit+0x12>

080016b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	e00a      	b.n	80016d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016c2:	f3af 8000 	nop.w
 80016c6:	4601      	mov	r1, r0
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	1c5a      	adds	r2, r3, #1
 80016cc:	60ba      	str	r2, [r7, #8]
 80016ce:	b2ca      	uxtb	r2, r1
 80016d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	3301      	adds	r3, #1
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	697a      	ldr	r2, [r7, #20]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	429a      	cmp	r2, r3
 80016de:	dbf0      	blt.n	80016c2 <_read+0x12>
	}

return len;
 80016e0:	687b      	ldr	r3, [r7, #4]
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b086      	sub	sp, #24
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	60f8      	str	r0, [r7, #12]
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
 80016fa:	e009      	b.n	8001710 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	1c5a      	adds	r2, r3, #1
 8001700:	60ba      	str	r2, [r7, #8]
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff fe33 	bl	8001370 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	3301      	adds	r3, #1
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	429a      	cmp	r2, r3
 8001716:	dbf1      	blt.n	80016fc <_write+0x12>
	}
	return len;
 8001718:	687b      	ldr	r3, [r7, #4]
}
 800171a:	4618      	mov	r0, r3
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <_close>:

int _close(int file)
{
 8001722:	b480      	push	{r7}
 8001724:	b083      	sub	sp, #12
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
	return -1;
 800172a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800172e:	4618      	mov	r0, r3
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
 8001742:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800174a:	605a      	str	r2, [r3, #4]
	return 0;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <_isatty>:

int _isatty(int file)
{
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
	return 1;
 8001762:	2301      	movs	r3, #1
}
 8001764:	4618      	mov	r0, r3
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
	return 0;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
	...

0800178c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001794:	4a14      	ldr	r2, [pc, #80]	; (80017e8 <_sbrk+0x5c>)
 8001796:	4b15      	ldr	r3, [pc, #84]	; (80017ec <_sbrk+0x60>)
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017a0:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <_sbrk+0x64>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d102      	bne.n	80017ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017a8:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <_sbrk+0x64>)
 80017aa:	4a12      	ldr	r2, [pc, #72]	; (80017f4 <_sbrk+0x68>)
 80017ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ae:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <_sbrk+0x64>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d207      	bcs.n	80017cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017bc:	f004 fa74 	bl	8005ca8 <__errno>
 80017c0:	4603      	mov	r3, r0
 80017c2:	220c      	movs	r2, #12
 80017c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017c6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ca:	e009      	b.n	80017e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017cc:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <_sbrk+0x64>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017d2:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <_sbrk+0x64>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4413      	add	r3, r2
 80017da:	4a05      	ldr	r2, [pc, #20]	; (80017f0 <_sbrk+0x64>)
 80017dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017de:	68fb      	ldr	r3, [r7, #12]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20018000 	.word	0x20018000
 80017ec:	00000400 	.word	0x00000400
 80017f0:	20001ad0 	.word	0x20001ad0
 80017f4:	20001b70 	.word	0x20001b70

080017f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <SystemInit+0x20>)
 80017fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001802:	4a05      	ldr	r2, [pc, #20]	; (8001818 <SystemInit+0x20>)
 8001804:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001808:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001820:	4b14      	ldr	r3, [pc, #80]	; (8001874 <MX_USART2_UART_Init+0x58>)
 8001822:	4a15      	ldr	r2, [pc, #84]	; (8001878 <MX_USART2_UART_Init+0x5c>)
 8001824:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001826:	4b13      	ldr	r3, [pc, #76]	; (8001874 <MX_USART2_UART_Init+0x58>)
 8001828:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800182c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800182e:	4b11      	ldr	r3, [pc, #68]	; (8001874 <MX_USART2_UART_Init+0x58>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001834:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <MX_USART2_UART_Init+0x58>)
 8001836:	2200      	movs	r2, #0
 8001838:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800183a:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <MX_USART2_UART_Init+0x58>)
 800183c:	2200      	movs	r2, #0
 800183e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001840:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <MX_USART2_UART_Init+0x58>)
 8001842:	220c      	movs	r2, #12
 8001844:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001846:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <MX_USART2_UART_Init+0x58>)
 8001848:	2200      	movs	r2, #0
 800184a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800184c:	4b09      	ldr	r3, [pc, #36]	; (8001874 <MX_USART2_UART_Init+0x58>)
 800184e:	2200      	movs	r2, #0
 8001850:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001852:	4b08      	ldr	r3, [pc, #32]	; (8001874 <MX_USART2_UART_Init+0x58>)
 8001854:	2200      	movs	r2, #0
 8001856:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <MX_USART2_UART_Init+0x58>)
 800185a:	2200      	movs	r2, #0
 800185c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800185e:	4805      	ldr	r0, [pc, #20]	; (8001874 <MX_USART2_UART_Init+0x58>)
 8001860:	f003 fc16 	bl	8005090 <HAL_UART_Init>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800186a:	f7ff fe48 	bl	80014fe <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20001ad4 	.word	0x20001ad4
 8001878:	40004400 	.word	0x40004400

0800187c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b0ac      	sub	sp, #176	; 0xb0
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001884:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	2288      	movs	r2, #136	; 0x88
 800189a:	2100      	movs	r1, #0
 800189c:	4618      	mov	r0, r3
 800189e:	f004 fa2d 	bl	8005cfc <memset>
  if(uartHandle->Instance==USART2)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a21      	ldr	r2, [pc, #132]	; (800192c <HAL_UART_MspInit+0xb0>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d13b      	bne.n	8001924 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80018ac:	2302      	movs	r3, #2
 80018ae:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80018b0:	2300      	movs	r3, #0
 80018b2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	4618      	mov	r0, r3
 80018ba:	f002 fe1b 	bl	80044f4 <HAL_RCCEx_PeriphCLKConfig>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018c4:	f7ff fe1b 	bl	80014fe <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018c8:	4b19      	ldr	r3, [pc, #100]	; (8001930 <HAL_UART_MspInit+0xb4>)
 80018ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018cc:	4a18      	ldr	r2, [pc, #96]	; (8001930 <HAL_UART_MspInit+0xb4>)
 80018ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d2:	6593      	str	r3, [r2, #88]	; 0x58
 80018d4:	4b16      	ldr	r3, [pc, #88]	; (8001930 <HAL_UART_MspInit+0xb4>)
 80018d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018dc:	613b      	str	r3, [r7, #16]
 80018de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e0:	4b13      	ldr	r3, [pc, #76]	; (8001930 <HAL_UART_MspInit+0xb4>)
 80018e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e4:	4a12      	ldr	r2, [pc, #72]	; (8001930 <HAL_UART_MspInit+0xb4>)
 80018e6:	f043 0301 	orr.w	r3, r3, #1
 80018ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ec:	4b10      	ldr	r3, [pc, #64]	; (8001930 <HAL_UART_MspInit+0xb4>)
 80018ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018f8:	230c      	movs	r3, #12
 80018fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fe:	2302      	movs	r3, #2
 8001900:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190a:	2303      	movs	r3, #3
 800190c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001910:	2307      	movs	r3, #7
 8001912:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001916:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800191a:	4619      	mov	r1, r3
 800191c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001920:	f001 fdc2 	bl	80034a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001924:	bf00      	nop
 8001926:	37b0      	adds	r7, #176	; 0xb0
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40004400 	.word	0x40004400
 8001930:	40021000 	.word	0x40021000

08001934 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001934:	f8df d034 	ldr.w	sp, [pc, #52]	; 800196c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001938:	f7ff ff5e 	bl	80017f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800193c:	480c      	ldr	r0, [pc, #48]	; (8001970 <LoopForever+0x6>)
  ldr r1, =_edata
 800193e:	490d      	ldr	r1, [pc, #52]	; (8001974 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001940:	4a0d      	ldr	r2, [pc, #52]	; (8001978 <LoopForever+0xe>)
  movs r3, #0
 8001942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001944:	e002      	b.n	800194c <LoopCopyDataInit>

08001946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800194a:	3304      	adds	r3, #4

0800194c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800194c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800194e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001950:	d3f9      	bcc.n	8001946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001952:	4a0a      	ldr	r2, [pc, #40]	; (800197c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001954:	4c0a      	ldr	r4, [pc, #40]	; (8001980 <LoopForever+0x16>)
  movs r3, #0
 8001956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001958:	e001      	b.n	800195e <LoopFillZerobss>

0800195a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800195a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800195c:	3204      	adds	r2, #4

0800195e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800195e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001960:	d3fb      	bcc.n	800195a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001962:	f004 f9a7 	bl	8005cb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001966:	f7ff fd15 	bl	8001394 <main>

0800196a <LoopForever>:

LoopForever:
    b LoopForever
 800196a:	e7fe      	b.n	800196a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800196c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001974:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001978:	0800ab1c 	.word	0x0800ab1c
  ldr r2, =_sbss
 800197c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001980:	20001b6c 	.word	0x20001b6c

08001984 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001984:	e7fe      	b.n	8001984 <ADC1_2_IRQHandler>
	...

08001988 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800198e:	2300      	movs	r3, #0
 8001990:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001992:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <HAL_Init+0x3c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a0b      	ldr	r2, [pc, #44]	; (80019c4 <HAL_Init+0x3c>)
 8001998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800199c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800199e:	2003      	movs	r0, #3
 80019a0:	f001 fb48 	bl	8003034 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019a4:	2000      	movs	r0, #0
 80019a6:	f000 f80f 	bl	80019c8 <HAL_InitTick>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d002      	beq.n	80019b6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	71fb      	strb	r3, [r7, #7]
 80019b4:	e001      	b.n	80019ba <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019b6:	f7ff fe01 	bl	80015bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019ba:	79fb      	ldrb	r3, [r7, #7]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40022000 	.word	0x40022000

080019c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019d0:	2300      	movs	r3, #0
 80019d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019d4:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <HAL_InitTick+0x6c>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d023      	beq.n	8001a24 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019dc:	4b16      	ldr	r3, [pc, #88]	; (8001a38 <HAL_InitTick+0x70>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <HAL_InitTick+0x6c>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	4619      	mov	r1, r3
 80019e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f2:	4618      	mov	r0, r3
 80019f4:	f001 fb53 	bl	800309e <HAL_SYSTICK_Config>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d10f      	bne.n	8001a1e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b0f      	cmp	r3, #15
 8001a02:	d809      	bhi.n	8001a18 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a04:	2200      	movs	r2, #0
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	f04f 30ff 	mov.w	r0, #4294967295
 8001a0c:	f001 fb1d 	bl	800304a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a10:	4a0a      	ldr	r2, [pc, #40]	; (8001a3c <HAL_InitTick+0x74>)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	e007      	b.n	8001a28 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	73fb      	strb	r3, [r7, #15]
 8001a1c:	e004      	b.n	8001a28 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	73fb      	strb	r3, [r7, #15]
 8001a22:	e001      	b.n	8001a28 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000008 	.word	0x20000008
 8001a38:	20000000 	.word	0x20000000
 8001a3c:	20000004 	.word	0x20000004

08001a40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_IncTick+0x20>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <HAL_IncTick+0x24>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4413      	add	r3, r2
 8001a50:	4a04      	ldr	r2, [pc, #16]	; (8001a64 <HAL_IncTick+0x24>)
 8001a52:	6013      	str	r3, [r2, #0]
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	20000008 	.word	0x20000008
 8001a64:	20001b58 	.word	0x20001b58

08001a68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a6c:	4b03      	ldr	r3, [pc, #12]	; (8001a7c <HAL_GetTick+0x14>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	20001b58 	.word	0x20001b58

08001a80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a88:	f7ff ffee 	bl	8001a68 <HAL_GetTick>
 8001a8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a98:	d005      	beq.n	8001aa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <HAL_Delay+0x44>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aa6:	bf00      	nop
 8001aa8:	f7ff ffde 	bl	8001a68 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d8f7      	bhi.n	8001aa8 <HAL_Delay+0x28>
  {

  }
}
 8001ab8:	bf00      	nop
 8001aba:	bf00      	nop
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000008 	.word	0x20000008

08001ac8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	431a      	orrs	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	609a      	str	r2, [r3, #8]
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	431a      	orrs	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	609a      	str	r2, [r3, #8]
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b087      	sub	sp, #28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
 8001b3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	3360      	adds	r3, #96	; 0x60
 8001b42:	461a      	mov	r2, r3
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <LL_ADC_SetOffset+0x44>)
 8001b52:	4013      	ands	r3, r2
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b68:	bf00      	nop
 8001b6a:	371c      	adds	r7, #28
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	03fff000 	.word	0x03fff000

08001b78 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	3360      	adds	r3, #96	; 0x60
 8001b86:	461a      	mov	r2, r3
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4413      	add	r3, r2
 8001b8e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b087      	sub	sp, #28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	3360      	adds	r3, #96	; 0x60
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001bce:	bf00      	nop
 8001bd0:	371c      	adds	r7, #28
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e000      	b.n	8001bf4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b087      	sub	sp, #28
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	3330      	adds	r3, #48	; 0x30
 8001c10:	461a      	mov	r2, r3
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	0a1b      	lsrs	r3, r3, #8
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	f003 030c 	and.w	r3, r3, #12
 8001c1c:	4413      	add	r3, r2
 8001c1e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	f003 031f 	and.w	r3, r3, #31
 8001c2a:	211f      	movs	r1, #31
 8001c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	401a      	ands	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	0e9b      	lsrs	r3, r3, #26
 8001c38:	f003 011f 	and.w	r1, r3, #31
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	f003 031f 	and.w	r3, r3, #31
 8001c42:	fa01 f303 	lsl.w	r3, r1, r3
 8001c46:	431a      	orrs	r2, r3
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c4c:	bf00      	nop
 8001c4e:	371c      	adds	r7, #28
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b087      	sub	sp, #28
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	3314      	adds	r3, #20
 8001c68:	461a      	mov	r2, r3
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	0e5b      	lsrs	r3, r3, #25
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	4413      	add	r3, r2
 8001c76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	0d1b      	lsrs	r3, r3, #20
 8001c80:	f003 031f 	and.w	r3, r3, #31
 8001c84:	2107      	movs	r1, #7
 8001c86:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	401a      	ands	r2, r3
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	0d1b      	lsrs	r3, r3, #20
 8001c92:	f003 031f 	and.w	r3, r3, #31
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9c:	431a      	orrs	r2, r3
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ca2:	bf00      	nop
 8001ca4:	371c      	adds	r7, #28
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
	...

08001cb0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	401a      	ands	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f003 0318 	and.w	r3, r3, #24
 8001cd2:	4908      	ldr	r1, [pc, #32]	; (8001cf4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001cd4:	40d9      	lsrs	r1, r3
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	400b      	ands	r3, r1
 8001cda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001ce6:	bf00      	nop
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	0007ffff 	.word	0x0007ffff

08001cf8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 031f 	and.w	r3, r3, #31
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001d24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6093      	str	r3, [r2, #8]
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d4c:	d101      	bne.n	8001d52 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e000      	b.n	8001d54 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001d70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d74:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d9c:	d101      	bne.n	8001da2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001dc0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001dc4:	f043 0201 	orr.w	r2, r3, #1
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d101      	bne.n	8001df0 <LL_ADC_IsEnabled+0x18>
 8001dec:	2301      	movs	r3, #1
 8001dee:	e000      	b.n	8001df2 <LL_ADC_IsEnabled+0x1a>
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e0e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e12:	f043 0204 	orr.w	r2, r3, #4
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 0304 	and.w	r3, r3, #4
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	d101      	bne.n	8001e3e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e000      	b.n	8001e40 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f003 0308 	and.w	r3, r3, #8
 8001e5c:	2b08      	cmp	r3, #8
 8001e5e:	d101      	bne.n	8001e64 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e60:	2301      	movs	r3, #1
 8001e62:	e000      	b.n	8001e66 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
	...

08001e74 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e74:	b590      	push	{r4, r7, lr}
 8001e76:	b089      	sub	sp, #36	; 0x24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e136      	b.n	80020fc <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d109      	bne.n	8001eb0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7ff f921 	bl	80010e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff ff3f 	bl	8001d38 <LL_ADC_IsDeepPowerDownEnabled>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d004      	beq.n	8001eca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff ff25 	bl	8001d14 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff ff5a 	bl	8001d88 <LL_ADC_IsInternalRegulatorEnabled>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d115      	bne.n	8001f06 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff ff3e 	bl	8001d60 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ee4:	4b87      	ldr	r3, [pc, #540]	; (8002104 <HAL_ADC_Init+0x290>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	099b      	lsrs	r3, r3, #6
 8001eea:	4a87      	ldr	r2, [pc, #540]	; (8002108 <HAL_ADC_Init+0x294>)
 8001eec:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef0:	099b      	lsrs	r3, r3, #6
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ef8:	e002      	b.n	8001f00 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	3b01      	subs	r3, #1
 8001efe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1f9      	bne.n	8001efa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff ff3c 	bl	8001d88 <LL_ADC_IsInternalRegulatorEnabled>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d10d      	bne.n	8001f32 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f1a:	f043 0210 	orr.w	r2, r3, #16
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f26:	f043 0201 	orr.w	r2, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff ff75 	bl	8001e26 <LL_ADC_REG_IsConversionOngoing>
 8001f3c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f42:	f003 0310 	and.w	r3, r3, #16
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f040 80cf 	bne.w	80020ea <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f040 80cb 	bne.w	80020ea <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f58:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001f5c:	f043 0202 	orr.w	r2, r3, #2
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff ff35 	bl	8001dd8 <LL_ADC_IsEnabled>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d115      	bne.n	8001fa0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f74:	4865      	ldr	r0, [pc, #404]	; (800210c <HAL_ADC_Init+0x298>)
 8001f76:	f7ff ff2f 	bl	8001dd8 <LL_ADC_IsEnabled>
 8001f7a:	4604      	mov	r4, r0
 8001f7c:	4864      	ldr	r0, [pc, #400]	; (8002110 <HAL_ADC_Init+0x29c>)
 8001f7e:	f7ff ff2b 	bl	8001dd8 <LL_ADC_IsEnabled>
 8001f82:	4603      	mov	r3, r0
 8001f84:	431c      	orrs	r4, r3
 8001f86:	4863      	ldr	r0, [pc, #396]	; (8002114 <HAL_ADC_Init+0x2a0>)
 8001f88:	f7ff ff26 	bl	8001dd8 <LL_ADC_IsEnabled>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	4323      	orrs	r3, r4
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d105      	bne.n	8001fa0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	4619      	mov	r1, r3
 8001f9a:	485f      	ldr	r0, [pc, #380]	; (8002118 <HAL_ADC_Init+0x2a4>)
 8001f9c:	f7ff fd94 	bl	8001ac8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	7e5b      	ldrb	r3, [r3, #25]
 8001fa4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001faa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001fb0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001fb6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fbe:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d106      	bne.n	8001fdc <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	045b      	lsls	r3, r3, #17
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d009      	beq.n	8001ff8 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	4b47      	ldr	r3, [pc, #284]	; (800211c <HAL_ADC_Init+0x2a8>)
 8002000:	4013      	ands	r3, r2
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	6812      	ldr	r2, [r2, #0]
 8002006:	69b9      	ldr	r1, [r7, #24]
 8002008:	430b      	orrs	r3, r1
 800200a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff ff08 	bl	8001e26 <LL_ADC_REG_IsConversionOngoing>
 8002016:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff ff15 	bl	8001e4c <LL_ADC_INJ_IsConversionOngoing>
 8002022:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d13d      	bne.n	80020a6 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d13a      	bne.n	80020a6 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002034:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800203c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800203e:	4313      	orrs	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800204c:	f023 0302 	bic.w	r3, r3, #2
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	6812      	ldr	r2, [r2, #0]
 8002054:	69b9      	ldr	r1, [r7, #24]
 8002056:	430b      	orrs	r3, r1
 8002058:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002060:	2b01      	cmp	r3, #1
 8002062:	d118      	bne.n	8002096 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800206e:	f023 0304 	bic.w	r3, r3, #4
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800207a:	4311      	orrs	r1, r2
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002080:	4311      	orrs	r1, r2
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002086:	430a      	orrs	r2, r1
 8002088:	431a      	orrs	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f042 0201 	orr.w	r2, r2, #1
 8002092:	611a      	str	r2, [r3, #16]
 8002094:	e007      	b.n	80020a6 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	691a      	ldr	r2, [r3, #16]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 0201 	bic.w	r2, r2, #1
 80020a4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d10c      	bne.n	80020c8 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b4:	f023 010f 	bic.w	r1, r3, #15
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	69db      	ldr	r3, [r3, #28]
 80020bc:	1e5a      	subs	r2, r3, #1
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	430a      	orrs	r2, r1
 80020c4:	631a      	str	r2, [r3, #48]	; 0x30
 80020c6:	e007      	b.n	80020d8 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 020f 	bic.w	r2, r2, #15
 80020d6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020dc:	f023 0303 	bic.w	r3, r3, #3
 80020e0:	f043 0201 	orr.w	r2, r3, #1
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	655a      	str	r2, [r3, #84]	; 0x54
 80020e8:	e007      	b.n	80020fa <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ee:	f043 0210 	orr.w	r2, r3, #16
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80020fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3724      	adds	r7, #36	; 0x24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd90      	pop	{r4, r7, pc}
 8002104:	20000000 	.word	0x20000000
 8002108:	053e2d63 	.word	0x053e2d63
 800210c:	50040000 	.word	0x50040000
 8002110:	50040100 	.word	0x50040100
 8002114:	50040200 	.word	0x50040200
 8002118:	50040300 	.word	0x50040300
 800211c:	fff0c007 	.word	0xfff0c007

08002120 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800212c:	4853      	ldr	r0, [pc, #332]	; (800227c <HAL_ADC_Start_DMA+0x15c>)
 800212e:	f7ff fde3 	bl	8001cf8 <LL_ADC_GetMultimode>
 8002132:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff fe74 	bl	8001e26 <LL_ADC_REG_IsConversionOngoing>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	f040 8093 	bne.w	800226c <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800214c:	2b01      	cmp	r3, #1
 800214e:	d101      	bne.n	8002154 <HAL_ADC_Start_DMA+0x34>
 8002150:	2302      	movs	r3, #2
 8002152:	e08e      	b.n	8002272 <HAL_ADC_Start_DMA+0x152>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a47      	ldr	r2, [pc, #284]	; (8002280 <HAL_ADC_Start_DMA+0x160>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d008      	beq.n	8002178 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d005      	beq.n	8002178 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	2b05      	cmp	r3, #5
 8002170:	d002      	beq.n	8002178 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	2b09      	cmp	r3, #9
 8002176:	d172      	bne.n	800225e <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	f000 fc9b 	bl	8002ab4 <ADC_Enable>
 800217e:	4603      	mov	r3, r0
 8002180:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002182:	7dfb      	ldrb	r3, [r7, #23]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d165      	bne.n	8002254 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800218c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002190:	f023 0301 	bic.w	r3, r3, #1
 8002194:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a38      	ldr	r2, [pc, #224]	; (8002284 <HAL_ADC_Start_DMA+0x164>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d002      	beq.n	80021ac <HAL_ADC_Start_DMA+0x8c>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	e000      	b.n	80021ae <HAL_ADC_Start_DMA+0x8e>
 80021ac:	4b36      	ldr	r3, [pc, #216]	; (8002288 <HAL_ADC_Start_DMA+0x168>)
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	6812      	ldr	r2, [r2, #0]
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d002      	beq.n	80021bc <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d105      	bne.n	80021c8 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d006      	beq.n	80021e2 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d8:	f023 0206 	bic.w	r2, r3, #6
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	659a      	str	r2, [r3, #88]	; 0x58
 80021e0:	e002      	b.n	80021e8 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2200      	movs	r2, #0
 80021e6:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ec:	4a27      	ldr	r2, [pc, #156]	; (800228c <HAL_ADC_Start_DMA+0x16c>)
 80021ee:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f4:	4a26      	ldr	r2, [pc, #152]	; (8002290 <HAL_ADC_Start_DMA+0x170>)
 80021f6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fc:	4a25      	ldr	r2, [pc, #148]	; (8002294 <HAL_ADC_Start_DMA+0x174>)
 80021fe:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	221c      	movs	r2, #28
 8002206:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f042 0210 	orr.w	r2, r2, #16
 800221e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68da      	ldr	r2, [r3, #12]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f042 0201 	orr.w	r2, r2, #1
 800222e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	3340      	adds	r3, #64	; 0x40
 800223a:	4619      	mov	r1, r3
 800223c:	68ba      	ldr	r2, [r7, #8]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f000 fff2 	bl	8003228 <HAL_DMA_Start_IT>
 8002244:	4603      	mov	r3, r0
 8002246:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff fdd6 	bl	8001dfe <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002252:	e00d      	b.n	8002270 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800225c:	e008      	b.n	8002270 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800226a:	e001      	b.n	8002270 <HAL_ADC_Start_DMA+0x150>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800226c:	2302      	movs	r3, #2
 800226e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002270:	7dfb      	ldrb	r3, [r7, #23]
}
 8002272:	4618      	mov	r0, r3
 8002274:	3718      	adds	r7, #24
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	50040300 	.word	0x50040300
 8002280:	50040200 	.word	0x50040200
 8002284:	50040100 	.word	0x50040100
 8002288:	50040000 	.word	0x50040000
 800228c:	08002bc1 	.word	0x08002bc1
 8002290:	08002c99 	.word	0x08002c99
 8002294:	08002cb5 	.word	0x08002cb5

08002298 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b0b6      	sub	sp, #216	; 0xd8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022de:	2300      	movs	r3, #0
 80022e0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d101      	bne.n	80022f6 <HAL_ADC_ConfigChannel+0x22>
 80022f2:	2302      	movs	r3, #2
 80022f4:	e3c7      	b.n	8002a86 <HAL_ADC_ConfigChannel+0x7b2>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff fd8f 	bl	8001e26 <LL_ADC_REG_IsConversionOngoing>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	f040 83a8 	bne.w	8002a60 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b05      	cmp	r3, #5
 8002316:	d824      	bhi.n	8002362 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	3b02      	subs	r3, #2
 800231e:	2b03      	cmp	r3, #3
 8002320:	d81b      	bhi.n	800235a <HAL_ADC_ConfigChannel+0x86>
 8002322:	a201      	add	r2, pc, #4	; (adr r2, 8002328 <HAL_ADC_ConfigChannel+0x54>)
 8002324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002328:	08002339 	.word	0x08002339
 800232c:	08002341 	.word	0x08002341
 8002330:	08002349 	.word	0x08002349
 8002334:	08002351 	.word	0x08002351
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	220c      	movs	r2, #12
 800233c:	605a      	str	r2, [r3, #4]
          break;
 800233e:	e011      	b.n	8002364 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	2212      	movs	r2, #18
 8002344:	605a      	str	r2, [r3, #4]
          break;
 8002346:	e00d      	b.n	8002364 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	2218      	movs	r2, #24
 800234c:	605a      	str	r2, [r3, #4]
          break;
 800234e:	e009      	b.n	8002364 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002356:	605a      	str	r2, [r3, #4]
          break;
 8002358:	e004      	b.n	8002364 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	2206      	movs	r2, #6
 800235e:	605a      	str	r2, [r3, #4]
          break;
 8002360:	e000      	b.n	8002364 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002362:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6818      	ldr	r0, [r3, #0]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	6859      	ldr	r1, [r3, #4]
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	461a      	mov	r2, r3
 8002372:	f7ff fc45 	bl	8001c00 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff fd53 	bl	8001e26 <LL_ADC_REG_IsConversionOngoing>
 8002380:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff fd5f 	bl	8001e4c <LL_ADC_INJ_IsConversionOngoing>
 800238e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002392:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002396:	2b00      	cmp	r3, #0
 8002398:	f040 81a6 	bne.w	80026e8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800239c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f040 81a1 	bne.w	80026e8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6818      	ldr	r0, [r3, #0]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	6819      	ldr	r1, [r3, #0]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	461a      	mov	r2, r3
 80023b4:	f7ff fc50 	bl	8001c58 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	695a      	ldr	r2, [r3, #20]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	08db      	lsrs	r3, r3, #3
 80023c4:	f003 0303 	and.w	r3, r3, #3
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	d00a      	beq.n	80023f0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6818      	ldr	r0, [r3, #0]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	6919      	ldr	r1, [r3, #16]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80023ea:	f7ff fba1 	bl	8001b30 <LL_ADC_SetOffset>
 80023ee:	e17b      	b.n	80026e8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2100      	movs	r1, #0
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff fbbe 	bl	8001b78 <LL_ADC_GetOffsetChannel>
 80023fc:	4603      	mov	r3, r0
 80023fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10a      	bne.n	800241c <HAL_ADC_ConfigChannel+0x148>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2100      	movs	r1, #0
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff fbb3 	bl	8001b78 <LL_ADC_GetOffsetChannel>
 8002412:	4603      	mov	r3, r0
 8002414:	0e9b      	lsrs	r3, r3, #26
 8002416:	f003 021f 	and.w	r2, r3, #31
 800241a:	e01e      	b.n	800245a <HAL_ADC_ConfigChannel+0x186>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2100      	movs	r1, #0
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff fba8 	bl	8001b78 <LL_ADC_GetOffsetChannel>
 8002428:	4603      	mov	r3, r0
 800242a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002432:	fa93 f3a3 	rbit	r3, r3
 8002436:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800243a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800243e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002442:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800244a:	2320      	movs	r3, #32
 800244c:	e004      	b.n	8002458 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800244e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002452:	fab3 f383 	clz	r3, r3
 8002456:	b2db      	uxtb	r3, r3
 8002458:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002462:	2b00      	cmp	r3, #0
 8002464:	d105      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x19e>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	0e9b      	lsrs	r3, r3, #26
 800246c:	f003 031f 	and.w	r3, r3, #31
 8002470:	e018      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x1d0>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800247e:	fa93 f3a3 	rbit	r3, r3
 8002482:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002486:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800248a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800248e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002496:	2320      	movs	r3, #32
 8002498:	e004      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800249a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800249e:	fab3 f383 	clz	r3, r3
 80024a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d106      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2200      	movs	r2, #0
 80024ae:	2100      	movs	r1, #0
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff fb77 	bl	8001ba4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2101      	movs	r1, #1
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff fb5b 	bl	8001b78 <LL_ADC_GetOffsetChannel>
 80024c2:	4603      	mov	r3, r0
 80024c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10a      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x20e>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2101      	movs	r1, #1
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff fb50 	bl	8001b78 <LL_ADC_GetOffsetChannel>
 80024d8:	4603      	mov	r3, r0
 80024da:	0e9b      	lsrs	r3, r3, #26
 80024dc:	f003 021f 	and.w	r2, r3, #31
 80024e0:	e01e      	b.n	8002520 <HAL_ADC_ConfigChannel+0x24c>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2101      	movs	r1, #1
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff fb45 	bl	8001b78 <LL_ADC_GetOffsetChannel>
 80024ee:	4603      	mov	r3, r0
 80024f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80024f8:	fa93 f3a3 	rbit	r3, r3
 80024fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002500:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002504:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002508:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002510:	2320      	movs	r3, #32
 8002512:	e004      	b.n	800251e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002514:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002518:	fab3 f383 	clz	r3, r3
 800251c:	b2db      	uxtb	r3, r3
 800251e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002528:	2b00      	cmp	r3, #0
 800252a:	d105      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x264>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	0e9b      	lsrs	r3, r3, #26
 8002532:	f003 031f 	and.w	r3, r3, #31
 8002536:	e018      	b.n	800256a <HAL_ADC_ConfigChannel+0x296>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002540:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002544:	fa93 f3a3 	rbit	r3, r3
 8002548:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800254c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002550:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002554:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 800255c:	2320      	movs	r3, #32
 800255e:	e004      	b.n	800256a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002560:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002564:	fab3 f383 	clz	r3, r3
 8002568:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800256a:	429a      	cmp	r2, r3
 800256c:	d106      	bne.n	800257c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2200      	movs	r2, #0
 8002574:	2101      	movs	r1, #1
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff fb14 	bl	8001ba4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2102      	movs	r1, #2
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff faf8 	bl	8001b78 <LL_ADC_GetOffsetChannel>
 8002588:	4603      	mov	r3, r0
 800258a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10a      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x2d4>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2102      	movs	r1, #2
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff faed 	bl	8001b78 <LL_ADC_GetOffsetChannel>
 800259e:	4603      	mov	r3, r0
 80025a0:	0e9b      	lsrs	r3, r3, #26
 80025a2:	f003 021f 	and.w	r2, r3, #31
 80025a6:	e01e      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x312>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2102      	movs	r1, #2
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff fae2 	bl	8001b78 <LL_ADC_GetOffsetChannel>
 80025b4:	4603      	mov	r3, r0
 80025b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025be:	fa93 f3a3 	rbit	r3, r3
 80025c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80025c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80025ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80025d6:	2320      	movs	r3, #32
 80025d8:	e004      	b.n	80025e4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80025da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025de:	fab3 f383 	clz	r3, r3
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d105      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x32a>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	0e9b      	lsrs	r3, r3, #26
 80025f8:	f003 031f 	and.w	r3, r3, #31
 80025fc:	e016      	b.n	800262c <HAL_ADC_ConfigChannel+0x358>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002606:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800260a:	fa93 f3a3 	rbit	r3, r3
 800260e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002610:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002612:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002616:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800261e:	2320      	movs	r3, #32
 8002620:	e004      	b.n	800262c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002622:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002626:	fab3 f383 	clz	r3, r3
 800262a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800262c:	429a      	cmp	r2, r3
 800262e:	d106      	bne.n	800263e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2200      	movs	r2, #0
 8002636:	2102      	movs	r1, #2
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff fab3 	bl	8001ba4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2103      	movs	r1, #3
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff fa97 	bl	8001b78 <LL_ADC_GetOffsetChannel>
 800264a:	4603      	mov	r3, r0
 800264c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002650:	2b00      	cmp	r3, #0
 8002652:	d10a      	bne.n	800266a <HAL_ADC_ConfigChannel+0x396>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2103      	movs	r1, #3
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff fa8c 	bl	8001b78 <LL_ADC_GetOffsetChannel>
 8002660:	4603      	mov	r3, r0
 8002662:	0e9b      	lsrs	r3, r3, #26
 8002664:	f003 021f 	and.w	r2, r3, #31
 8002668:	e017      	b.n	800269a <HAL_ADC_ConfigChannel+0x3c6>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2103      	movs	r1, #3
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff fa81 	bl	8001b78 <LL_ADC_GetOffsetChannel>
 8002676:	4603      	mov	r3, r0
 8002678:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800267c:	fa93 f3a3 	rbit	r3, r3
 8002680:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002682:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002684:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002686:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800268c:	2320      	movs	r3, #32
 800268e:	e003      	b.n	8002698 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002690:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002692:	fab3 f383 	clz	r3, r3
 8002696:	b2db      	uxtb	r3, r3
 8002698:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d105      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x3de>
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	0e9b      	lsrs	r3, r3, #26
 80026ac:	f003 031f 	and.w	r3, r3, #31
 80026b0:	e011      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x402>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026ba:	fa93 f3a3 	rbit	r3, r3
 80026be:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80026c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80026c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80026ca:	2320      	movs	r3, #32
 80026cc:	e003      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80026ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026d0:	fab3 f383 	clz	r3, r3
 80026d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d106      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2200      	movs	r2, #0
 80026e0:	2103      	movs	r1, #3
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff fa5e 	bl	8001ba4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff fb73 	bl	8001dd8 <LL_ADC_IsEnabled>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f040 813f 	bne.w	8002978 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6818      	ldr	r0, [r3, #0]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	6819      	ldr	r1, [r3, #0]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	461a      	mov	r2, r3
 8002708:	f7ff fad2 	bl	8001cb0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	4a8e      	ldr	r2, [pc, #568]	; (800294c <HAL_ADC_ConfigChannel+0x678>)
 8002712:	4293      	cmp	r3, r2
 8002714:	f040 8130 	bne.w	8002978 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10b      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x46c>
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	0e9b      	lsrs	r3, r3, #26
 800272e:	3301      	adds	r3, #1
 8002730:	f003 031f 	and.w	r3, r3, #31
 8002734:	2b09      	cmp	r3, #9
 8002736:	bf94      	ite	ls
 8002738:	2301      	movls	r3, #1
 800273a:	2300      	movhi	r3, #0
 800273c:	b2db      	uxtb	r3, r3
 800273e:	e019      	b.n	8002774 <HAL_ADC_ConfigChannel+0x4a0>
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002746:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002748:	fa93 f3a3 	rbit	r3, r3
 800274c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800274e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002750:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002752:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002758:	2320      	movs	r3, #32
 800275a:	e003      	b.n	8002764 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800275c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800275e:	fab3 f383 	clz	r3, r3
 8002762:	b2db      	uxtb	r3, r3
 8002764:	3301      	adds	r3, #1
 8002766:	f003 031f 	and.w	r3, r3, #31
 800276a:	2b09      	cmp	r3, #9
 800276c:	bf94      	ite	ls
 800276e:	2301      	movls	r3, #1
 8002770:	2300      	movhi	r3, #0
 8002772:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002774:	2b00      	cmp	r3, #0
 8002776:	d079      	beq.n	800286c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002780:	2b00      	cmp	r3, #0
 8002782:	d107      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x4c0>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	0e9b      	lsrs	r3, r3, #26
 800278a:	3301      	adds	r3, #1
 800278c:	069b      	lsls	r3, r3, #26
 800278e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002792:	e015      	b.n	80027c0 <HAL_ADC_ConfigChannel+0x4ec>
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800279c:	fa93 f3a3 	rbit	r3, r3
 80027a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80027a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027a4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80027a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80027ac:	2320      	movs	r3, #32
 80027ae:	e003      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80027b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027b2:	fab3 f383 	clz	r3, r3
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	3301      	adds	r3, #1
 80027ba:	069b      	lsls	r3, r3, #26
 80027bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d109      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x50c>
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	0e9b      	lsrs	r3, r3, #26
 80027d2:	3301      	adds	r3, #1
 80027d4:	f003 031f 	and.w	r3, r3, #31
 80027d8:	2101      	movs	r1, #1
 80027da:	fa01 f303 	lsl.w	r3, r1, r3
 80027de:	e017      	b.n	8002810 <HAL_ADC_ConfigChannel+0x53c>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027e8:	fa93 f3a3 	rbit	r3, r3
 80027ec:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80027ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027f0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80027f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80027f8:	2320      	movs	r3, #32
 80027fa:	e003      	b.n	8002804 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80027fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027fe:	fab3 f383 	clz	r3, r3
 8002802:	b2db      	uxtb	r3, r3
 8002804:	3301      	adds	r3, #1
 8002806:	f003 031f 	and.w	r3, r3, #31
 800280a:	2101      	movs	r1, #1
 800280c:	fa01 f303 	lsl.w	r3, r1, r3
 8002810:	ea42 0103 	orr.w	r1, r2, r3
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800281c:	2b00      	cmp	r3, #0
 800281e:	d10a      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x562>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	0e9b      	lsrs	r3, r3, #26
 8002826:	3301      	adds	r3, #1
 8002828:	f003 021f 	and.w	r2, r3, #31
 800282c:	4613      	mov	r3, r2
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	4413      	add	r3, r2
 8002832:	051b      	lsls	r3, r3, #20
 8002834:	e018      	b.n	8002868 <HAL_ADC_ConfigChannel+0x594>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800283e:	fa93 f3a3 	rbit	r3, r3
 8002842:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002846:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800284e:	2320      	movs	r3, #32
 8002850:	e003      	b.n	800285a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002854:	fab3 f383 	clz	r3, r3
 8002858:	b2db      	uxtb	r3, r3
 800285a:	3301      	adds	r3, #1
 800285c:	f003 021f 	and.w	r2, r3, #31
 8002860:	4613      	mov	r3, r2
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	4413      	add	r3, r2
 8002866:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002868:	430b      	orrs	r3, r1
 800286a:	e080      	b.n	800296e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002874:	2b00      	cmp	r3, #0
 8002876:	d107      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x5b4>
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	0e9b      	lsrs	r3, r3, #26
 800287e:	3301      	adds	r3, #1
 8002880:	069b      	lsls	r3, r3, #26
 8002882:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002886:	e015      	b.n	80028b4 <HAL_ADC_ConfigChannel+0x5e0>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002890:	fa93 f3a3 	rbit	r3, r3
 8002894:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002898:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800289a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80028a0:	2320      	movs	r3, #32
 80028a2:	e003      	b.n	80028ac <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80028a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a6:	fab3 f383 	clz	r3, r3
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	3301      	adds	r3, #1
 80028ae:	069b      	lsls	r3, r3, #26
 80028b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d109      	bne.n	80028d4 <HAL_ADC_ConfigChannel+0x600>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	0e9b      	lsrs	r3, r3, #26
 80028c6:	3301      	adds	r3, #1
 80028c8:	f003 031f 	and.w	r3, r3, #31
 80028cc:	2101      	movs	r1, #1
 80028ce:	fa01 f303 	lsl.w	r3, r1, r3
 80028d2:	e017      	b.n	8002904 <HAL_ADC_ConfigChannel+0x630>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028da:	6a3b      	ldr	r3, [r7, #32]
 80028dc:	fa93 f3a3 	rbit	r3, r3
 80028e0:	61fb      	str	r3, [r7, #28]
  return result;
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80028ec:	2320      	movs	r3, #32
 80028ee:	e003      	b.n	80028f8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80028f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f2:	fab3 f383 	clz	r3, r3
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	3301      	adds	r3, #1
 80028fa:	f003 031f 	and.w	r3, r3, #31
 80028fe:	2101      	movs	r1, #1
 8002900:	fa01 f303 	lsl.w	r3, r1, r3
 8002904:	ea42 0103 	orr.w	r1, r2, r3
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10d      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x65c>
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	0e9b      	lsrs	r3, r3, #26
 800291a:	3301      	adds	r3, #1
 800291c:	f003 021f 	and.w	r2, r3, #31
 8002920:	4613      	mov	r3, r2
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	4413      	add	r3, r2
 8002926:	3b1e      	subs	r3, #30
 8002928:	051b      	lsls	r3, r3, #20
 800292a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800292e:	e01d      	b.n	800296c <HAL_ADC_ConfigChannel+0x698>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	fa93 f3a3 	rbit	r3, r3
 800293c:	613b      	str	r3, [r7, #16]
  return result;
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d103      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002948:	2320      	movs	r3, #32
 800294a:	e005      	b.n	8002958 <HAL_ADC_ConfigChannel+0x684>
 800294c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	fab3 f383 	clz	r3, r3
 8002956:	b2db      	uxtb	r3, r3
 8002958:	3301      	adds	r3, #1
 800295a:	f003 021f 	and.w	r2, r3, #31
 800295e:	4613      	mov	r3, r2
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	4413      	add	r3, r2
 8002964:	3b1e      	subs	r3, #30
 8002966:	051b      	lsls	r3, r3, #20
 8002968:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800296c:	430b      	orrs	r3, r1
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	6892      	ldr	r2, [r2, #8]
 8002972:	4619      	mov	r1, r3
 8002974:	f7ff f970 	bl	8001c58 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	4b44      	ldr	r3, [pc, #272]	; (8002a90 <HAL_ADC_ConfigChannel+0x7bc>)
 800297e:	4013      	ands	r3, r2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d07a      	beq.n	8002a7a <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002984:	4843      	ldr	r0, [pc, #268]	; (8002a94 <HAL_ADC_ConfigChannel+0x7c0>)
 8002986:	f7ff f8c5 	bl	8001b14 <LL_ADC_GetCommonPathInternalCh>
 800298a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a41      	ldr	r2, [pc, #260]	; (8002a98 <HAL_ADC_ConfigChannel+0x7c4>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d12c      	bne.n	80029f2 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002998:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800299c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d126      	bne.n	80029f2 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a3c      	ldr	r2, [pc, #240]	; (8002a9c <HAL_ADC_ConfigChannel+0x7c8>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d004      	beq.n	80029b8 <HAL_ADC_ConfigChannel+0x6e4>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a3b      	ldr	r2, [pc, #236]	; (8002aa0 <HAL_ADC_ConfigChannel+0x7cc>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d15d      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029c0:	4619      	mov	r1, r3
 80029c2:	4834      	ldr	r0, [pc, #208]	; (8002a94 <HAL_ADC_ConfigChannel+0x7c0>)
 80029c4:	f7ff f893 	bl	8001aee <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029c8:	4b36      	ldr	r3, [pc, #216]	; (8002aa4 <HAL_ADC_ConfigChannel+0x7d0>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	099b      	lsrs	r3, r3, #6
 80029ce:	4a36      	ldr	r2, [pc, #216]	; (8002aa8 <HAL_ADC_ConfigChannel+0x7d4>)
 80029d0:	fba2 2303 	umull	r2, r3, r2, r3
 80029d4:	099b      	lsrs	r3, r3, #6
 80029d6:	1c5a      	adds	r2, r3, #1
 80029d8:	4613      	mov	r3, r2
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	4413      	add	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80029e2:	e002      	b.n	80029ea <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	3b01      	subs	r3, #1
 80029e8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1f9      	bne.n	80029e4 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029f0:	e040      	b.n	8002a74 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a2d      	ldr	r2, [pc, #180]	; (8002aac <HAL_ADC_ConfigChannel+0x7d8>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d118      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x75a>
 80029fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d112      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a23      	ldr	r2, [pc, #140]	; (8002a9c <HAL_ADC_ConfigChannel+0x7c8>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d004      	beq.n	8002a1c <HAL_ADC_ConfigChannel+0x748>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a22      	ldr	r2, [pc, #136]	; (8002aa0 <HAL_ADC_ConfigChannel+0x7cc>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d12d      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a24:	4619      	mov	r1, r3
 8002a26:	481b      	ldr	r0, [pc, #108]	; (8002a94 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a28:	f7ff f861 	bl	8001aee <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a2c:	e024      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a1f      	ldr	r2, [pc, #124]	; (8002ab0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d120      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d11a      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a14      	ldr	r2, [pc, #80]	; (8002a9c <HAL_ADC_ConfigChannel+0x7c8>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d115      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a52:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a56:	4619      	mov	r1, r3
 8002a58:	480e      	ldr	r0, [pc, #56]	; (8002a94 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a5a:	f7ff f848 	bl	8001aee <LL_ADC_SetCommonPathInternalCh>
 8002a5e:	e00c      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a64:	f043 0220 	orr.w	r2, r3, #32
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002a72:	e002      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a74:	bf00      	nop
 8002a76:	e000      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a78:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a82:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	37d8      	adds	r7, #216	; 0xd8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	80080000 	.word	0x80080000
 8002a94:	50040300 	.word	0x50040300
 8002a98:	c7520000 	.word	0xc7520000
 8002a9c:	50040000 	.word	0x50040000
 8002aa0:	50040200 	.word	0x50040200
 8002aa4:	20000000 	.word	0x20000000
 8002aa8:	053e2d63 	.word	0x053e2d63
 8002aac:	cb840000 	.word	0xcb840000
 8002ab0:	80000001 	.word	0x80000001

08002ab4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002abc:	2300      	movs	r3, #0
 8002abe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff f987 	bl	8001dd8 <LL_ADC_IsEnabled>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d169      	bne.n	8002ba4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689a      	ldr	r2, [r3, #8]
 8002ad6:	4b36      	ldr	r3, [pc, #216]	; (8002bb0 <ADC_Enable+0xfc>)
 8002ad8:	4013      	ands	r3, r2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00d      	beq.n	8002afa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae2:	f043 0210 	orr.w	r2, r3, #16
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aee:	f043 0201 	orr.w	r2, r3, #1
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e055      	b.n	8002ba6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff f956 	bl	8001db0 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002b04:	482b      	ldr	r0, [pc, #172]	; (8002bb4 <ADC_Enable+0x100>)
 8002b06:	f7ff f805 	bl	8001b14 <LL_ADC_GetCommonPathInternalCh>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d013      	beq.n	8002b3c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b14:	4b28      	ldr	r3, [pc, #160]	; (8002bb8 <ADC_Enable+0x104>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	099b      	lsrs	r3, r3, #6
 8002b1a:	4a28      	ldr	r2, [pc, #160]	; (8002bbc <ADC_Enable+0x108>)
 8002b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b20:	099b      	lsrs	r3, r3, #6
 8002b22:	1c5a      	adds	r2, r3, #1
 8002b24:	4613      	mov	r3, r2
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	4413      	add	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002b2e:	e002      	b.n	8002b36 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	3b01      	subs	r3, #1
 8002b34:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1f9      	bne.n	8002b30 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002b3c:	f7fe ff94 	bl	8001a68 <HAL_GetTick>
 8002b40:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b42:	e028      	b.n	8002b96 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff f945 	bl	8001dd8 <LL_ADC_IsEnabled>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d104      	bne.n	8002b5e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff f929 	bl	8001db0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b5e:	f7fe ff83 	bl	8001a68 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d914      	bls.n	8002b96 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d00d      	beq.n	8002b96 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b7e:	f043 0210 	orr.w	r2, r3, #16
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8a:	f043 0201 	orr.w	r2, r3, #1
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e007      	b.n	8002ba6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d1cf      	bne.n	8002b44 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	8000003f 	.word	0x8000003f
 8002bb4:	50040300 	.word	0x50040300
 8002bb8:	20000000 	.word	0x20000000
 8002bbc:	053e2d63 	.word	0x053e2d63

08002bc0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bcc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d14b      	bne.n	8002c72 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bde:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0308 	and.w	r3, r3, #8
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d021      	beq.n	8002c38 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7fe ffee 	bl	8001bda <LL_ADC_REG_IsTriggerSourceSWStart>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d032      	beq.n	8002c6a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d12b      	bne.n	8002c6a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d11f      	bne.n	8002c6a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2e:	f043 0201 	orr.w	r2, r3, #1
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	655a      	str	r2, [r3, #84]	; 0x54
 8002c36:	e018      	b.n	8002c6a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d111      	bne.n	8002c6a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d105      	bne.n	8002c6a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c62:	f043 0201 	orr.w	r2, r3, #1
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f7ff fb14 	bl	8002298 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c70:	e00e      	b.n	8002c90 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c76:	f003 0310 	and.w	r3, r3, #16
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f7ff fb1e 	bl	80022c0 <HAL_ADC_ErrorCallback>
}
 8002c84:	e004      	b.n	8002c90 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	4798      	blx	r3
}
 8002c90:	bf00      	nop
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f7ff fb00 	bl	80022ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cac:	bf00      	nop
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd2:	f043 0204 	orr.w	r2, r3, #4
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f7ff faf0 	bl	80022c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ce0:	bf00      	nop
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <LL_ADC_IsEnabled>:
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d101      	bne.n	8002d00 <LL_ADC_IsEnabled+0x18>
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e000      	b.n	8002d02 <LL_ADC_IsEnabled+0x1a>
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr

08002d0e <LL_ADC_REG_IsConversionOngoing>:
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b083      	sub	sp, #12
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 0304 	and.w	r3, r3, #4
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d101      	bne.n	8002d26 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d22:	2301      	movs	r3, #1
 8002d24:	e000      	b.n	8002d28 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002d34:	b590      	push	{r4, r7, lr}
 8002d36:	b09f      	sub	sp, #124	; 0x7c
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d101      	bne.n	8002d52 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	e093      	b.n	8002e7a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002d5e:	2300      	movs	r3, #0
 8002d60:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a47      	ldr	r2, [pc, #284]	; (8002e84 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d102      	bne.n	8002d72 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002d6c:	4b46      	ldr	r3, [pc, #280]	; (8002e88 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002d6e:	60bb      	str	r3, [r7, #8]
 8002d70:	e001      	b.n	8002d76 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002d72:	2300      	movs	r3, #0
 8002d74:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10b      	bne.n	8002d94 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d80:	f043 0220 	orr.w	r2, r3, #32
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e072      	b.n	8002e7a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff ffb9 	bl	8002d0e <LL_ADC_REG_IsConversionOngoing>
 8002d9c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff ffb3 	bl	8002d0e <LL_ADC_REG_IsConversionOngoing>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d154      	bne.n	8002e58 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002dae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d151      	bne.n	8002e58 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002db4:	4b35      	ldr	r3, [pc, #212]	; (8002e8c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002db6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d02c      	beq.n	8002e1a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	6859      	ldr	r1, [r3, #4]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002dd2:	035b      	lsls	r3, r3, #13
 8002dd4:	430b      	orrs	r3, r1
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dda:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ddc:	4829      	ldr	r0, [pc, #164]	; (8002e84 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002dde:	f7ff ff83 	bl	8002ce8 <LL_ADC_IsEnabled>
 8002de2:	4604      	mov	r4, r0
 8002de4:	4828      	ldr	r0, [pc, #160]	; (8002e88 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002de6:	f7ff ff7f 	bl	8002ce8 <LL_ADC_IsEnabled>
 8002dea:	4603      	mov	r3, r0
 8002dec:	431c      	orrs	r4, r3
 8002dee:	4828      	ldr	r0, [pc, #160]	; (8002e90 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002df0:	f7ff ff7a 	bl	8002ce8 <LL_ADC_IsEnabled>
 8002df4:	4603      	mov	r3, r0
 8002df6:	4323      	orrs	r3, r4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d137      	bne.n	8002e6c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e04:	f023 030f 	bic.w	r3, r3, #15
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	6811      	ldr	r1, [r2, #0]
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	6892      	ldr	r2, [r2, #8]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	431a      	orrs	r2, r3
 8002e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e16:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e18:	e028      	b.n	8002e6c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e24:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e26:	4817      	ldr	r0, [pc, #92]	; (8002e84 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002e28:	f7ff ff5e 	bl	8002ce8 <LL_ADC_IsEnabled>
 8002e2c:	4604      	mov	r4, r0
 8002e2e:	4816      	ldr	r0, [pc, #88]	; (8002e88 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002e30:	f7ff ff5a 	bl	8002ce8 <LL_ADC_IsEnabled>
 8002e34:	4603      	mov	r3, r0
 8002e36:	431c      	orrs	r4, r3
 8002e38:	4815      	ldr	r0, [pc, #84]	; (8002e90 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002e3a:	f7ff ff55 	bl	8002ce8 <LL_ADC_IsEnabled>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	4323      	orrs	r3, r4
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d112      	bne.n	8002e6c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e4e:	f023 030f 	bic.w	r3, r3, #15
 8002e52:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e54:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e56:	e009      	b.n	8002e6c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5c:	f043 0220 	orr.w	r2, r3, #32
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002e6a:	e000      	b.n	8002e6e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e6c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e76:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	377c      	adds	r7, #124	; 0x7c
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd90      	pop	{r4, r7, pc}
 8002e82:	bf00      	nop
 8002e84:	50040000 	.word	0x50040000
 8002e88:	50040100 	.word	0x50040100
 8002e8c:	50040300 	.word	0x50040300
 8002e90:	50040200 	.word	0x50040200

08002e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ea4:	4b0c      	ldr	r3, [pc, #48]	; (8002ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eaa:	68ba      	ldr	r2, [r7, #8]
 8002eac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ebc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ec6:	4a04      	ldr	r2, [pc, #16]	; (8002ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	60d3      	str	r3, [r2, #12]
}
 8002ecc:	bf00      	nop
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	e000ed00 	.word	0xe000ed00

08002edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ee0:	4b04      	ldr	r3, [pc, #16]	; (8002ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	0a1b      	lsrs	r3, r3, #8
 8002ee6:	f003 0307 	and.w	r3, r3, #7
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	e000ed00 	.word	0xe000ed00

08002ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4603      	mov	r3, r0
 8002f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	db0b      	blt.n	8002f22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f0a:	79fb      	ldrb	r3, [r7, #7]
 8002f0c:	f003 021f 	and.w	r2, r3, #31
 8002f10:	4907      	ldr	r1, [pc, #28]	; (8002f30 <__NVIC_EnableIRQ+0x38>)
 8002f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f16:	095b      	lsrs	r3, r3, #5
 8002f18:	2001      	movs	r0, #1
 8002f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f22:	bf00      	nop
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	e000e100 	.word	0xe000e100

08002f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	6039      	str	r1, [r7, #0]
 8002f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	db0a      	blt.n	8002f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	490c      	ldr	r1, [pc, #48]	; (8002f80 <__NVIC_SetPriority+0x4c>)
 8002f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f52:	0112      	lsls	r2, r2, #4
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	440b      	add	r3, r1
 8002f58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f5c:	e00a      	b.n	8002f74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	4908      	ldr	r1, [pc, #32]	; (8002f84 <__NVIC_SetPriority+0x50>)
 8002f64:	79fb      	ldrb	r3, [r7, #7]
 8002f66:	f003 030f 	and.w	r3, r3, #15
 8002f6a:	3b04      	subs	r3, #4
 8002f6c:	0112      	lsls	r2, r2, #4
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	440b      	add	r3, r1
 8002f72:	761a      	strb	r2, [r3, #24]
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	e000e100 	.word	0xe000e100
 8002f84:	e000ed00 	.word	0xe000ed00

08002f88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b089      	sub	sp, #36	; 0x24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	f1c3 0307 	rsb	r3, r3, #7
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	bf28      	it	cs
 8002fa6:	2304      	movcs	r3, #4
 8002fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	3304      	adds	r3, #4
 8002fae:	2b06      	cmp	r3, #6
 8002fb0:	d902      	bls.n	8002fb8 <NVIC_EncodePriority+0x30>
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	3b03      	subs	r3, #3
 8002fb6:	e000      	b.n	8002fba <NVIC_EncodePriority+0x32>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	43da      	mvns	r2, r3
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	401a      	ands	r2, r3
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fda:	43d9      	mvns	r1, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fe0:	4313      	orrs	r3, r2
         );
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3724      	adds	r7, #36	; 0x24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
	...

08002ff0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003000:	d301      	bcc.n	8003006 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003002:	2301      	movs	r3, #1
 8003004:	e00f      	b.n	8003026 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003006:	4a0a      	ldr	r2, [pc, #40]	; (8003030 <SysTick_Config+0x40>)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3b01      	subs	r3, #1
 800300c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800300e:	210f      	movs	r1, #15
 8003010:	f04f 30ff 	mov.w	r0, #4294967295
 8003014:	f7ff ff8e 	bl	8002f34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003018:	4b05      	ldr	r3, [pc, #20]	; (8003030 <SysTick_Config+0x40>)
 800301a:	2200      	movs	r2, #0
 800301c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800301e:	4b04      	ldr	r3, [pc, #16]	; (8003030 <SysTick_Config+0x40>)
 8003020:	2207      	movs	r2, #7
 8003022:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	e000e010 	.word	0xe000e010

08003034 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f7ff ff29 	bl	8002e94 <__NVIC_SetPriorityGrouping>
}
 8003042:	bf00      	nop
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b086      	sub	sp, #24
 800304e:	af00      	add	r7, sp, #0
 8003050:	4603      	mov	r3, r0
 8003052:	60b9      	str	r1, [r7, #8]
 8003054:	607a      	str	r2, [r7, #4]
 8003056:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003058:	2300      	movs	r3, #0
 800305a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800305c:	f7ff ff3e 	bl	8002edc <__NVIC_GetPriorityGrouping>
 8003060:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	68b9      	ldr	r1, [r7, #8]
 8003066:	6978      	ldr	r0, [r7, #20]
 8003068:	f7ff ff8e 	bl	8002f88 <NVIC_EncodePriority>
 800306c:	4602      	mov	r2, r0
 800306e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003072:	4611      	mov	r1, r2
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff ff5d 	bl	8002f34 <__NVIC_SetPriority>
}
 800307a:	bf00      	nop
 800307c:	3718      	adds	r7, #24
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b082      	sub	sp, #8
 8003086:	af00      	add	r7, sp, #0
 8003088:	4603      	mov	r3, r0
 800308a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800308c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff ff31 	bl	8002ef8 <__NVIC_EnableIRQ>
}
 8003096:	bf00      	nop
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b082      	sub	sp, #8
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7ff ffa2 	bl	8002ff0 <SysTick_Config>
 80030ac:	4603      	mov	r3, r0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
	...

080030b8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e098      	b.n	80031fc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	461a      	mov	r2, r3
 80030d0:	4b4d      	ldr	r3, [pc, #308]	; (8003208 <HAL_DMA_Init+0x150>)
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d80f      	bhi.n	80030f6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	461a      	mov	r2, r3
 80030dc:	4b4b      	ldr	r3, [pc, #300]	; (800320c <HAL_DMA_Init+0x154>)
 80030de:	4413      	add	r3, r2
 80030e0:	4a4b      	ldr	r2, [pc, #300]	; (8003210 <HAL_DMA_Init+0x158>)
 80030e2:	fba2 2303 	umull	r2, r3, r2, r3
 80030e6:	091b      	lsrs	r3, r3, #4
 80030e8:	009a      	lsls	r2, r3, #2
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a48      	ldr	r2, [pc, #288]	; (8003214 <HAL_DMA_Init+0x15c>)
 80030f2:	641a      	str	r2, [r3, #64]	; 0x40
 80030f4:	e00e      	b.n	8003114 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	461a      	mov	r2, r3
 80030fc:	4b46      	ldr	r3, [pc, #280]	; (8003218 <HAL_DMA_Init+0x160>)
 80030fe:	4413      	add	r3, r2
 8003100:	4a43      	ldr	r2, [pc, #268]	; (8003210 <HAL_DMA_Init+0x158>)
 8003102:	fba2 2303 	umull	r2, r3, r2, r3
 8003106:	091b      	lsrs	r3, r3, #4
 8003108:	009a      	lsls	r2, r3, #2
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a42      	ldr	r2, [pc, #264]	; (800321c <HAL_DMA_Init+0x164>)
 8003112:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2202      	movs	r2, #2
 8003118:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800312a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800312e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003138:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003144:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003150:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	4313      	orrs	r3, r2
 800315c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800316e:	d039      	beq.n	80031e4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003174:	4a27      	ldr	r2, [pc, #156]	; (8003214 <HAL_DMA_Init+0x15c>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d11a      	bne.n	80031b0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800317a:	4b29      	ldr	r3, [pc, #164]	; (8003220 <HAL_DMA_Init+0x168>)
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003182:	f003 031c 	and.w	r3, r3, #28
 8003186:	210f      	movs	r1, #15
 8003188:	fa01 f303 	lsl.w	r3, r1, r3
 800318c:	43db      	mvns	r3, r3
 800318e:	4924      	ldr	r1, [pc, #144]	; (8003220 <HAL_DMA_Init+0x168>)
 8003190:	4013      	ands	r3, r2
 8003192:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003194:	4b22      	ldr	r3, [pc, #136]	; (8003220 <HAL_DMA_Init+0x168>)
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6859      	ldr	r1, [r3, #4]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a0:	f003 031c 	and.w	r3, r3, #28
 80031a4:	fa01 f303 	lsl.w	r3, r1, r3
 80031a8:	491d      	ldr	r1, [pc, #116]	; (8003220 <HAL_DMA_Init+0x168>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	600b      	str	r3, [r1, #0]
 80031ae:	e019      	b.n	80031e4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80031b0:	4b1c      	ldr	r3, [pc, #112]	; (8003224 <HAL_DMA_Init+0x16c>)
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b8:	f003 031c 	and.w	r3, r3, #28
 80031bc:	210f      	movs	r1, #15
 80031be:	fa01 f303 	lsl.w	r3, r1, r3
 80031c2:	43db      	mvns	r3, r3
 80031c4:	4917      	ldr	r1, [pc, #92]	; (8003224 <HAL_DMA_Init+0x16c>)
 80031c6:	4013      	ands	r3, r2
 80031c8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80031ca:	4b16      	ldr	r3, [pc, #88]	; (8003224 <HAL_DMA_Init+0x16c>)
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6859      	ldr	r1, [r3, #4]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d6:	f003 031c 	and.w	r3, r3, #28
 80031da:	fa01 f303 	lsl.w	r3, r1, r3
 80031de:	4911      	ldr	r1, [pc, #68]	; (8003224 <HAL_DMA_Init+0x16c>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	40020407 	.word	0x40020407
 800320c:	bffdfff8 	.word	0xbffdfff8
 8003210:	cccccccd 	.word	0xcccccccd
 8003214:	40020000 	.word	0x40020000
 8003218:	bffdfbf8 	.word	0xbffdfbf8
 800321c:	40020400 	.word	0x40020400
 8003220:	400200a8 	.word	0x400200a8
 8003224:	400204a8 	.word	0x400204a8

08003228 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
 8003234:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003236:	2300      	movs	r3, #0
 8003238:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003240:	2b01      	cmp	r3, #1
 8003242:	d101      	bne.n	8003248 <HAL_DMA_Start_IT+0x20>
 8003244:	2302      	movs	r3, #2
 8003246:	e04b      	b.n	80032e0 <HAL_DMA_Start_IT+0xb8>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b01      	cmp	r3, #1
 800325a:	d13a      	bne.n	80032d2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2202      	movs	r2, #2
 8003260:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0201 	bic.w	r2, r2, #1
 8003278:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	68b9      	ldr	r1, [r7, #8]
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f000 f8e0 	bl	8003446 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	2b00      	cmp	r3, #0
 800328c:	d008      	beq.n	80032a0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f042 020e 	orr.w	r2, r2, #14
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	e00f      	b.n	80032c0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 0204 	bic.w	r2, r2, #4
 80032ae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 020a 	orr.w	r2, r2, #10
 80032be:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0201 	orr.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	e005      	b.n	80032de <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80032da:	2302      	movs	r3, #2
 80032dc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80032de:	7dfb      	ldrb	r3, [r7, #23]
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3718      	adds	r7, #24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003304:	f003 031c 	and.w	r3, r3, #28
 8003308:	2204      	movs	r2, #4
 800330a:	409a      	lsls	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4013      	ands	r3, r2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d026      	beq.n	8003362 <HAL_DMA_IRQHandler+0x7a>
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	f003 0304 	and.w	r3, r3, #4
 800331a:	2b00      	cmp	r3, #0
 800331c:	d021      	beq.n	8003362 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0320 	and.w	r3, r3, #32
 8003328:	2b00      	cmp	r3, #0
 800332a:	d107      	bne.n	800333c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0204 	bic.w	r2, r2, #4
 800333a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003340:	f003 021c 	and.w	r2, r3, #28
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003348:	2104      	movs	r1, #4
 800334a:	fa01 f202 	lsl.w	r2, r1, r2
 800334e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003354:	2b00      	cmp	r3, #0
 8003356:	d071      	beq.n	800343c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003360:	e06c      	b.n	800343c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003366:	f003 031c 	and.w	r3, r3, #28
 800336a:	2202      	movs	r2, #2
 800336c:	409a      	lsls	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	4013      	ands	r3, r2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d02e      	beq.n	80033d4 <HAL_DMA_IRQHandler+0xec>
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d029      	beq.n	80033d4 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0320 	and.w	r3, r3, #32
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10b      	bne.n	80033a6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 020a 	bic.w	r2, r2, #10
 800339c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033aa:	f003 021c 	and.w	r2, r3, #28
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	2102      	movs	r1, #2
 80033b4:	fa01 f202 	lsl.w	r2, r1, r2
 80033b8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d038      	beq.n	800343c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80033d2:	e033      	b.n	800343c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d8:	f003 031c 	and.w	r3, r3, #28
 80033dc:	2208      	movs	r2, #8
 80033de:	409a      	lsls	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4013      	ands	r3, r2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d02a      	beq.n	800343e <HAL_DMA_IRQHandler+0x156>
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d025      	beq.n	800343e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 020e 	bic.w	r2, r2, #14
 8003400:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003406:	f003 021c 	and.w	r2, r3, #28
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	2101      	movs	r1, #1
 8003410:	fa01 f202 	lsl.w	r2, r1, r2
 8003414:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003430:	2b00      	cmp	r3, #0
 8003432:	d004      	beq.n	800343e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800343c:	bf00      	nop
 800343e:	bf00      	nop
}
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003446:	b480      	push	{r7}
 8003448:	b085      	sub	sp, #20
 800344a:	af00      	add	r7, sp, #0
 800344c:	60f8      	str	r0, [r7, #12]
 800344e:	60b9      	str	r1, [r7, #8]
 8003450:	607a      	str	r2, [r7, #4]
 8003452:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003458:	f003 021c 	and.w	r2, r3, #28
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003460:	2101      	movs	r1, #1
 8003462:	fa01 f202 	lsl.w	r2, r1, r2
 8003466:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	2b10      	cmp	r3, #16
 8003476:	d108      	bne.n	800348a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003488:	e007      	b.n	800349a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	60da      	str	r2, [r3, #12]
}
 800349a:	bf00      	nop
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
	...

080034a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034b2:	2300      	movs	r3, #0
 80034b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034b6:	e17f      	b.n	80037b8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	2101      	movs	r1, #1
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	fa01 f303 	lsl.w	r3, r1, r3
 80034c4:	4013      	ands	r3, r2
 80034c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 8171 	beq.w	80037b2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f003 0303 	and.w	r3, r3, #3
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d005      	beq.n	80034e8 <HAL_GPIO_Init+0x40>
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f003 0303 	and.w	r3, r3, #3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d130      	bne.n	800354a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	2203      	movs	r2, #3
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	43db      	mvns	r3, r3
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	4013      	ands	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	68da      	ldr	r2, [r3, #12]
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	4313      	orrs	r3, r2
 8003510:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800351e:	2201      	movs	r2, #1
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	fa02 f303 	lsl.w	r3, r2, r3
 8003526:	43db      	mvns	r3, r3
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	4013      	ands	r3, r2
 800352c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	091b      	lsrs	r3, r3, #4
 8003534:	f003 0201 	and.w	r2, r3, #1
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	fa02 f303 	lsl.w	r3, r2, r3
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	4313      	orrs	r3, r2
 8003542:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	2b03      	cmp	r3, #3
 8003554:	d118      	bne.n	8003588 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800355c:	2201      	movs	r2, #1
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	43db      	mvns	r3, r3
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	4013      	ands	r3, r2
 800356a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	08db      	lsrs	r3, r3, #3
 8003572:	f003 0201 	and.w	r2, r3, #1
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	4313      	orrs	r3, r2
 8003580:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f003 0303 	and.w	r3, r3, #3
 8003590:	2b03      	cmp	r3, #3
 8003592:	d017      	beq.n	80035c4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	2203      	movs	r2, #3
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	43db      	mvns	r3, r3
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	4013      	ands	r3, r2
 80035aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f003 0303 	and.w	r3, r3, #3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d123      	bne.n	8003618 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	08da      	lsrs	r2, r3, #3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3208      	adds	r2, #8
 80035d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	220f      	movs	r2, #15
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	43db      	mvns	r3, r3
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	4013      	ands	r3, r2
 80035f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	691a      	ldr	r2, [r3, #16]
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	4313      	orrs	r3, r2
 8003608:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	08da      	lsrs	r2, r3, #3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	3208      	adds	r2, #8
 8003612:	6939      	ldr	r1, [r7, #16]
 8003614:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	2203      	movs	r2, #3
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	43db      	mvns	r3, r3
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	4013      	ands	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f003 0203 	and.w	r2, r3, #3
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	4313      	orrs	r3, r2
 8003644:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 80ac 	beq.w	80037b2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800365a:	4b5f      	ldr	r3, [pc, #380]	; (80037d8 <HAL_GPIO_Init+0x330>)
 800365c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800365e:	4a5e      	ldr	r2, [pc, #376]	; (80037d8 <HAL_GPIO_Init+0x330>)
 8003660:	f043 0301 	orr.w	r3, r3, #1
 8003664:	6613      	str	r3, [r2, #96]	; 0x60
 8003666:	4b5c      	ldr	r3, [pc, #368]	; (80037d8 <HAL_GPIO_Init+0x330>)
 8003668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	60bb      	str	r3, [r7, #8]
 8003670:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003672:	4a5a      	ldr	r2, [pc, #360]	; (80037dc <HAL_GPIO_Init+0x334>)
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	089b      	lsrs	r3, r3, #2
 8003678:	3302      	adds	r3, #2
 800367a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800367e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f003 0303 	and.w	r3, r3, #3
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	220f      	movs	r2, #15
 800368a:	fa02 f303 	lsl.w	r3, r2, r3
 800368e:	43db      	mvns	r3, r3
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	4013      	ands	r3, r2
 8003694:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800369c:	d025      	beq.n	80036ea <HAL_GPIO_Init+0x242>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a4f      	ldr	r2, [pc, #316]	; (80037e0 <HAL_GPIO_Init+0x338>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d01f      	beq.n	80036e6 <HAL_GPIO_Init+0x23e>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a4e      	ldr	r2, [pc, #312]	; (80037e4 <HAL_GPIO_Init+0x33c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d019      	beq.n	80036e2 <HAL_GPIO_Init+0x23a>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a4d      	ldr	r2, [pc, #308]	; (80037e8 <HAL_GPIO_Init+0x340>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d013      	beq.n	80036de <HAL_GPIO_Init+0x236>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a4c      	ldr	r2, [pc, #304]	; (80037ec <HAL_GPIO_Init+0x344>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d00d      	beq.n	80036da <HAL_GPIO_Init+0x232>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a4b      	ldr	r2, [pc, #300]	; (80037f0 <HAL_GPIO_Init+0x348>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d007      	beq.n	80036d6 <HAL_GPIO_Init+0x22e>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a4a      	ldr	r2, [pc, #296]	; (80037f4 <HAL_GPIO_Init+0x34c>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d101      	bne.n	80036d2 <HAL_GPIO_Init+0x22a>
 80036ce:	2306      	movs	r3, #6
 80036d0:	e00c      	b.n	80036ec <HAL_GPIO_Init+0x244>
 80036d2:	2307      	movs	r3, #7
 80036d4:	e00a      	b.n	80036ec <HAL_GPIO_Init+0x244>
 80036d6:	2305      	movs	r3, #5
 80036d8:	e008      	b.n	80036ec <HAL_GPIO_Init+0x244>
 80036da:	2304      	movs	r3, #4
 80036dc:	e006      	b.n	80036ec <HAL_GPIO_Init+0x244>
 80036de:	2303      	movs	r3, #3
 80036e0:	e004      	b.n	80036ec <HAL_GPIO_Init+0x244>
 80036e2:	2302      	movs	r3, #2
 80036e4:	e002      	b.n	80036ec <HAL_GPIO_Init+0x244>
 80036e6:	2301      	movs	r3, #1
 80036e8:	e000      	b.n	80036ec <HAL_GPIO_Init+0x244>
 80036ea:	2300      	movs	r3, #0
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	f002 0203 	and.w	r2, r2, #3
 80036f2:	0092      	lsls	r2, r2, #2
 80036f4:	4093      	lsls	r3, r2
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80036fc:	4937      	ldr	r1, [pc, #220]	; (80037dc <HAL_GPIO_Init+0x334>)
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	089b      	lsrs	r3, r3, #2
 8003702:	3302      	adds	r3, #2
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800370a:	4b3b      	ldr	r3, [pc, #236]	; (80037f8 <HAL_GPIO_Init+0x350>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	43db      	mvns	r3, r3
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	4013      	ands	r3, r2
 8003718:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4313      	orrs	r3, r2
 800372c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800372e:	4a32      	ldr	r2, [pc, #200]	; (80037f8 <HAL_GPIO_Init+0x350>)
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003734:	4b30      	ldr	r3, [pc, #192]	; (80037f8 <HAL_GPIO_Init+0x350>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	43db      	mvns	r3, r3
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	4013      	ands	r3, r2
 8003742:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d003      	beq.n	8003758 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	4313      	orrs	r3, r2
 8003756:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003758:	4a27      	ldr	r2, [pc, #156]	; (80037f8 <HAL_GPIO_Init+0x350>)
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800375e:	4b26      	ldr	r3, [pc, #152]	; (80037f8 <HAL_GPIO_Init+0x350>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	43db      	mvns	r3, r3
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	4013      	ands	r3, r2
 800376c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4313      	orrs	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003782:	4a1d      	ldr	r2, [pc, #116]	; (80037f8 <HAL_GPIO_Init+0x350>)
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003788:	4b1b      	ldr	r3, [pc, #108]	; (80037f8 <HAL_GPIO_Init+0x350>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	43db      	mvns	r3, r3
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	4013      	ands	r3, r2
 8003796:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d003      	beq.n	80037ac <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80037ac:	4a12      	ldr	r2, [pc, #72]	; (80037f8 <HAL_GPIO_Init+0x350>)
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	3301      	adds	r3, #1
 80037b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	fa22 f303 	lsr.w	r3, r2, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f47f ae78 	bne.w	80034b8 <HAL_GPIO_Init+0x10>
  }
}
 80037c8:	bf00      	nop
 80037ca:	bf00      	nop
 80037cc:	371c      	adds	r7, #28
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	40021000 	.word	0x40021000
 80037dc:	40010000 	.word	0x40010000
 80037e0:	48000400 	.word	0x48000400
 80037e4:	48000800 	.word	0x48000800
 80037e8:	48000c00 	.word	0x48000c00
 80037ec:	48001000 	.word	0x48001000
 80037f0:	48001400 	.word	0x48001400
 80037f4:	48001800 	.word	0x48001800
 80037f8:	40010400 	.word	0x40010400

080037fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	460b      	mov	r3, r1
 8003806:	807b      	strh	r3, [r7, #2]
 8003808:	4613      	mov	r3, r2
 800380a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800380c:	787b      	ldrb	r3, [r7, #1]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003812:	887a      	ldrh	r2, [r7, #2]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003818:	e002      	b.n	8003820 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800381a:	887a      	ldrh	r2, [r7, #2]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003830:	4b04      	ldr	r3, [pc, #16]	; (8003844 <HAL_PWREx_GetVoltageRange+0x18>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003838:	4618      	mov	r0, r3
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40007000 	.word	0x40007000

08003848 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003856:	d130      	bne.n	80038ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003858:	4b23      	ldr	r3, [pc, #140]	; (80038e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003864:	d038      	beq.n	80038d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003866:	4b20      	ldr	r3, [pc, #128]	; (80038e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800386e:	4a1e      	ldr	r2, [pc, #120]	; (80038e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003870:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003874:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003876:	4b1d      	ldr	r3, [pc, #116]	; (80038ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2232      	movs	r2, #50	; 0x32
 800387c:	fb02 f303 	mul.w	r3, r2, r3
 8003880:	4a1b      	ldr	r2, [pc, #108]	; (80038f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003882:	fba2 2303 	umull	r2, r3, r2, r3
 8003886:	0c9b      	lsrs	r3, r3, #18
 8003888:	3301      	adds	r3, #1
 800388a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800388c:	e002      	b.n	8003894 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	3b01      	subs	r3, #1
 8003892:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003894:	4b14      	ldr	r3, [pc, #80]	; (80038e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800389c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038a0:	d102      	bne.n	80038a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1f2      	bne.n	800388e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038a8:	4b0f      	ldr	r3, [pc, #60]	; (80038e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038b4:	d110      	bne.n	80038d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e00f      	b.n	80038da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80038ba:	4b0b      	ldr	r3, [pc, #44]	; (80038e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038c6:	d007      	beq.n	80038d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038c8:	4b07      	ldr	r3, [pc, #28]	; (80038e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038d0:	4a05      	ldr	r2, [pc, #20]	; (80038e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	40007000 	.word	0x40007000
 80038ec:	20000000 	.word	0x20000000
 80038f0:	431bde83 	.word	0x431bde83

080038f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b088      	sub	sp, #32
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e3ca      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003906:	4b97      	ldr	r3, [pc, #604]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 030c 	and.w	r3, r3, #12
 800390e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003910:	4b94      	ldr	r3, [pc, #592]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f003 0303 	and.w	r3, r3, #3
 8003918:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0310 	and.w	r3, r3, #16
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 80e4 	beq.w	8003af0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d007      	beq.n	800393e <HAL_RCC_OscConfig+0x4a>
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	2b0c      	cmp	r3, #12
 8003932:	f040 808b 	bne.w	8003a4c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	2b01      	cmp	r3, #1
 800393a:	f040 8087 	bne.w	8003a4c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800393e:	4b89      	ldr	r3, [pc, #548]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d005      	beq.n	8003956 <HAL_RCC_OscConfig+0x62>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e3a2      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a1a      	ldr	r2, [r3, #32]
 800395a:	4b82      	ldr	r3, [pc, #520]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0308 	and.w	r3, r3, #8
 8003962:	2b00      	cmp	r3, #0
 8003964:	d004      	beq.n	8003970 <HAL_RCC_OscConfig+0x7c>
 8003966:	4b7f      	ldr	r3, [pc, #508]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800396e:	e005      	b.n	800397c <HAL_RCC_OscConfig+0x88>
 8003970:	4b7c      	ldr	r3, [pc, #496]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003972:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003976:	091b      	lsrs	r3, r3, #4
 8003978:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800397c:	4293      	cmp	r3, r2
 800397e:	d223      	bcs.n	80039c8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	4618      	mov	r0, r3
 8003986:	f000 fd55 	bl	8004434 <RCC_SetFlashLatencyFromMSIRange>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e383      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003994:	4b73      	ldr	r3, [pc, #460]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a72      	ldr	r2, [pc, #456]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 800399a:	f043 0308 	orr.w	r3, r3, #8
 800399e:	6013      	str	r3, [r2, #0]
 80039a0:	4b70      	ldr	r3, [pc, #448]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	496d      	ldr	r1, [pc, #436]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039b2:	4b6c      	ldr	r3, [pc, #432]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	021b      	lsls	r3, r3, #8
 80039c0:	4968      	ldr	r1, [pc, #416]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	604b      	str	r3, [r1, #4]
 80039c6:	e025      	b.n	8003a14 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039c8:	4b66      	ldr	r3, [pc, #408]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a65      	ldr	r2, [pc, #404]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 80039ce:	f043 0308 	orr.w	r3, r3, #8
 80039d2:	6013      	str	r3, [r2, #0]
 80039d4:	4b63      	ldr	r3, [pc, #396]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	4960      	ldr	r1, [pc, #384]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039e6:	4b5f      	ldr	r3, [pc, #380]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	021b      	lsls	r3, r3, #8
 80039f4:	495b      	ldr	r1, [pc, #364]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d109      	bne.n	8003a14 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f000 fd15 	bl	8004434 <RCC_SetFlashLatencyFromMSIRange>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e343      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a14:	f000 fc4a 	bl	80042ac <HAL_RCC_GetSysClockFreq>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	4b52      	ldr	r3, [pc, #328]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	091b      	lsrs	r3, r3, #4
 8003a20:	f003 030f 	and.w	r3, r3, #15
 8003a24:	4950      	ldr	r1, [pc, #320]	; (8003b68 <HAL_RCC_OscConfig+0x274>)
 8003a26:	5ccb      	ldrb	r3, [r1, r3]
 8003a28:	f003 031f 	and.w	r3, r3, #31
 8003a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a30:	4a4e      	ldr	r2, [pc, #312]	; (8003b6c <HAL_RCC_OscConfig+0x278>)
 8003a32:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a34:	4b4e      	ldr	r3, [pc, #312]	; (8003b70 <HAL_RCC_OscConfig+0x27c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7fd ffc5 	bl	80019c8 <HAL_InitTick>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a42:	7bfb      	ldrb	r3, [r7, #15]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d052      	beq.n	8003aee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
 8003a4a:	e327      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d032      	beq.n	8003aba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a54:	4b43      	ldr	r3, [pc, #268]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a42      	ldr	r2, [pc, #264]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003a5a:	f043 0301 	orr.w	r3, r3, #1
 8003a5e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a60:	f7fe f802 	bl	8001a68 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a68:	f7fd fffe 	bl	8001a68 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e310      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a7a:	4b3a      	ldr	r3, [pc, #232]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0f0      	beq.n	8003a68 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a86:	4b37      	ldr	r3, [pc, #220]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a36      	ldr	r2, [pc, #216]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003a8c:	f043 0308 	orr.w	r3, r3, #8
 8003a90:	6013      	str	r3, [r2, #0]
 8003a92:	4b34      	ldr	r3, [pc, #208]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	4931      	ldr	r1, [pc, #196]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003aa4:	4b2f      	ldr	r3, [pc, #188]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	69db      	ldr	r3, [r3, #28]
 8003ab0:	021b      	lsls	r3, r3, #8
 8003ab2:	492c      	ldr	r1, [pc, #176]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	604b      	str	r3, [r1, #4]
 8003ab8:	e01a      	b.n	8003af0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003aba:	4b2a      	ldr	r3, [pc, #168]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a29      	ldr	r2, [pc, #164]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003ac0:	f023 0301 	bic.w	r3, r3, #1
 8003ac4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ac6:	f7fd ffcf 	bl	8001a68 <HAL_GetTick>
 8003aca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003acc:	e008      	b.n	8003ae0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ace:	f7fd ffcb 	bl	8001a68 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e2dd      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ae0:	4b20      	ldr	r3, [pc, #128]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1f0      	bne.n	8003ace <HAL_RCC_OscConfig+0x1da>
 8003aec:	e000      	b.n	8003af0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003aee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d074      	beq.n	8003be6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	2b08      	cmp	r3, #8
 8003b00:	d005      	beq.n	8003b0e <HAL_RCC_OscConfig+0x21a>
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	2b0c      	cmp	r3, #12
 8003b06:	d10e      	bne.n	8003b26 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	2b03      	cmp	r3, #3
 8003b0c:	d10b      	bne.n	8003b26 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b0e:	4b15      	ldr	r3, [pc, #84]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d064      	beq.n	8003be4 <HAL_RCC_OscConfig+0x2f0>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d160      	bne.n	8003be4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e2ba      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b2e:	d106      	bne.n	8003b3e <HAL_RCC_OscConfig+0x24a>
 8003b30:	4b0c      	ldr	r3, [pc, #48]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a0b      	ldr	r2, [pc, #44]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b3a:	6013      	str	r3, [r2, #0]
 8003b3c:	e026      	b.n	8003b8c <HAL_RCC_OscConfig+0x298>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b46:	d115      	bne.n	8003b74 <HAL_RCC_OscConfig+0x280>
 8003b48:	4b06      	ldr	r3, [pc, #24]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a05      	ldr	r2, [pc, #20]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003b4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b52:	6013      	str	r3, [r2, #0]
 8003b54:	4b03      	ldr	r3, [pc, #12]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a02      	ldr	r2, [pc, #8]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003b5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b5e:	6013      	str	r3, [r2, #0]
 8003b60:	e014      	b.n	8003b8c <HAL_RCC_OscConfig+0x298>
 8003b62:	bf00      	nop
 8003b64:	40021000 	.word	0x40021000
 8003b68:	0800a620 	.word	0x0800a620
 8003b6c:	20000000 	.word	0x20000000
 8003b70:	20000004 	.word	0x20000004
 8003b74:	4ba0      	ldr	r3, [pc, #640]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a9f      	ldr	r2, [pc, #636]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b7e:	6013      	str	r3, [r2, #0]
 8003b80:	4b9d      	ldr	r3, [pc, #628]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a9c      	ldr	r2, [pc, #624]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d013      	beq.n	8003bbc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b94:	f7fd ff68 	bl	8001a68 <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b9c:	f7fd ff64 	bl	8001a68 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b64      	cmp	r3, #100	; 0x64
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e276      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bae:	4b92      	ldr	r3, [pc, #584]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0f0      	beq.n	8003b9c <HAL_RCC_OscConfig+0x2a8>
 8003bba:	e014      	b.n	8003be6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbc:	f7fd ff54 	bl	8001a68 <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bc4:	f7fd ff50 	bl	8001a68 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b64      	cmp	r3, #100	; 0x64
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e262      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bd6:	4b88      	ldr	r3, [pc, #544]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1f0      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x2d0>
 8003be2:	e000      	b.n	8003be6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d060      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	2b04      	cmp	r3, #4
 8003bf6:	d005      	beq.n	8003c04 <HAL_RCC_OscConfig+0x310>
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	2b0c      	cmp	r3, #12
 8003bfc:	d119      	bne.n	8003c32 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d116      	bne.n	8003c32 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c04:	4b7c      	ldr	r3, [pc, #496]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d005      	beq.n	8003c1c <HAL_RCC_OscConfig+0x328>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e23f      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c1c:	4b76      	ldr	r3, [pc, #472]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	061b      	lsls	r3, r3, #24
 8003c2a:	4973      	ldr	r1, [pc, #460]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c30:	e040      	b.n	8003cb4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d023      	beq.n	8003c82 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c3a:	4b6f      	ldr	r3, [pc, #444]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a6e      	ldr	r2, [pc, #440]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c46:	f7fd ff0f 	bl	8001a68 <HAL_GetTick>
 8003c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c4c:	e008      	b.n	8003c60 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c4e:	f7fd ff0b 	bl	8001a68 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e21d      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c60:	4b65      	ldr	r3, [pc, #404]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d0f0      	beq.n	8003c4e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c6c:	4b62      	ldr	r3, [pc, #392]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	061b      	lsls	r3, r3, #24
 8003c7a:	495f      	ldr	r1, [pc, #380]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	604b      	str	r3, [r1, #4]
 8003c80:	e018      	b.n	8003cb4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c82:	4b5d      	ldr	r3, [pc, #372]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a5c      	ldr	r2, [pc, #368]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003c88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8e:	f7fd feeb 	bl	8001a68 <HAL_GetTick>
 8003c92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c94:	e008      	b.n	8003ca8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c96:	f7fd fee7 	bl	8001a68 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e1f9      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ca8:	4b53      	ldr	r3, [pc, #332]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1f0      	bne.n	8003c96 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0308 	and.w	r3, r3, #8
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d03c      	beq.n	8003d3a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d01c      	beq.n	8003d02 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cc8:	4b4b      	ldr	r3, [pc, #300]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cce:	4a4a      	ldr	r2, [pc, #296]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003cd0:	f043 0301 	orr.w	r3, r3, #1
 8003cd4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd8:	f7fd fec6 	bl	8001a68 <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ce0:	f7fd fec2 	bl	8001a68 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e1d4      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cf2:	4b41      	ldr	r3, [pc, #260]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003cf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0ef      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x3ec>
 8003d00:	e01b      	b.n	8003d3a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d02:	4b3d      	ldr	r3, [pc, #244]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003d04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d08:	4a3b      	ldr	r2, [pc, #236]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003d0a:	f023 0301 	bic.w	r3, r3, #1
 8003d0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d12:	f7fd fea9 	bl	8001a68 <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d18:	e008      	b.n	8003d2c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d1a:	f7fd fea5 	bl	8001a68 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e1b7      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d2c:	4b32      	ldr	r3, [pc, #200]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1ef      	bne.n	8003d1a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0304 	and.w	r3, r3, #4
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f000 80a6 	beq.w	8003e94 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d4c:	4b2a      	ldr	r3, [pc, #168]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10d      	bne.n	8003d74 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d58:	4b27      	ldr	r3, [pc, #156]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5c:	4a26      	ldr	r2, [pc, #152]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d62:	6593      	str	r3, [r2, #88]	; 0x58
 8003d64:	4b24      	ldr	r3, [pc, #144]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d6c:	60bb      	str	r3, [r7, #8]
 8003d6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d70:	2301      	movs	r3, #1
 8003d72:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d74:	4b21      	ldr	r3, [pc, #132]	; (8003dfc <HAL_RCC_OscConfig+0x508>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d118      	bne.n	8003db2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d80:	4b1e      	ldr	r3, [pc, #120]	; (8003dfc <HAL_RCC_OscConfig+0x508>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a1d      	ldr	r2, [pc, #116]	; (8003dfc <HAL_RCC_OscConfig+0x508>)
 8003d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d8c:	f7fd fe6c 	bl	8001a68 <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d94:	f7fd fe68 	bl	8001a68 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e17a      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003da6:	4b15      	ldr	r3, [pc, #84]	; (8003dfc <HAL_RCC_OscConfig+0x508>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0f0      	beq.n	8003d94 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d108      	bne.n	8003dcc <HAL_RCC_OscConfig+0x4d8>
 8003dba:	4b0f      	ldr	r3, [pc, #60]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc0:	4a0d      	ldr	r2, [pc, #52]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003dc2:	f043 0301 	orr.w	r3, r3, #1
 8003dc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dca:	e029      	b.n	8003e20 <HAL_RCC_OscConfig+0x52c>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	2b05      	cmp	r3, #5
 8003dd2:	d115      	bne.n	8003e00 <HAL_RCC_OscConfig+0x50c>
 8003dd4:	4b08      	ldr	r3, [pc, #32]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dda:	4a07      	ldr	r2, [pc, #28]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003ddc:	f043 0304 	orr.w	r3, r3, #4
 8003de0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003de4:	4b04      	ldr	r3, [pc, #16]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dea:	4a03      	ldr	r2, [pc, #12]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003dec:	f043 0301 	orr.w	r3, r3, #1
 8003df0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003df4:	e014      	b.n	8003e20 <HAL_RCC_OscConfig+0x52c>
 8003df6:	bf00      	nop
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	40007000 	.word	0x40007000
 8003e00:	4b9c      	ldr	r3, [pc, #624]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8003e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e06:	4a9b      	ldr	r2, [pc, #620]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8003e08:	f023 0301 	bic.w	r3, r3, #1
 8003e0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e10:	4b98      	ldr	r3, [pc, #608]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8003e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e16:	4a97      	ldr	r2, [pc, #604]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8003e18:	f023 0304 	bic.w	r3, r3, #4
 8003e1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d016      	beq.n	8003e56 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e28:	f7fd fe1e 	bl	8001a68 <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e2e:	e00a      	b.n	8003e46 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e30:	f7fd fe1a 	bl	8001a68 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e12a      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e46:	4b8b      	ldr	r3, [pc, #556]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8003e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d0ed      	beq.n	8003e30 <HAL_RCC_OscConfig+0x53c>
 8003e54:	e015      	b.n	8003e82 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e56:	f7fd fe07 	bl	8001a68 <HAL_GetTick>
 8003e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e5c:	e00a      	b.n	8003e74 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e5e:	f7fd fe03 	bl	8001a68 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d901      	bls.n	8003e74 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e113      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e74:	4b7f      	ldr	r3, [pc, #508]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8003e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1ed      	bne.n	8003e5e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e82:	7ffb      	ldrb	r3, [r7, #31]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d105      	bne.n	8003e94 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e88:	4b7a      	ldr	r3, [pc, #488]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8003e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8c:	4a79      	ldr	r2, [pc, #484]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8003e8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e92:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 80fe 	beq.w	800409a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	f040 80d0 	bne.w	8004048 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ea8:	4b72      	ldr	r3, [pc, #456]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	f003 0203 	and.w	r2, r3, #3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d130      	bne.n	8003f1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d127      	bne.n	8003f1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d11f      	bne.n	8003f1e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ee8:	2a07      	cmp	r2, #7
 8003eea:	bf14      	ite	ne
 8003eec:	2201      	movne	r2, #1
 8003eee:	2200      	moveq	r2, #0
 8003ef0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d113      	bne.n	8003f1e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f00:	085b      	lsrs	r3, r3, #1
 8003f02:	3b01      	subs	r3, #1
 8003f04:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d109      	bne.n	8003f1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f14:	085b      	lsrs	r3, r3, #1
 8003f16:	3b01      	subs	r3, #1
 8003f18:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d06e      	beq.n	8003ffc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	2b0c      	cmp	r3, #12
 8003f22:	d069      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f24:	4b53      	ldr	r3, [pc, #332]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d105      	bne.n	8003f3c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003f30:	4b50      	ldr	r3, [pc, #320]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e0ad      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f40:	4b4c      	ldr	r3, [pc, #304]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a4b      	ldr	r2, [pc, #300]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8003f46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f4a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f4c:	f7fd fd8c 	bl	8001a68 <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f54:	f7fd fd88 	bl	8001a68 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e09a      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f66:	4b43      	ldr	r3, [pc, #268]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1f0      	bne.n	8003f54 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f72:	4b40      	ldr	r3, [pc, #256]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8003f74:	68da      	ldr	r2, [r3, #12]
 8003f76:	4b40      	ldr	r3, [pc, #256]	; (8004078 <HAL_RCC_OscConfig+0x784>)
 8003f78:	4013      	ands	r3, r2
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f82:	3a01      	subs	r2, #1
 8003f84:	0112      	lsls	r2, r2, #4
 8003f86:	4311      	orrs	r1, r2
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f8c:	0212      	lsls	r2, r2, #8
 8003f8e:	4311      	orrs	r1, r2
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f94:	0852      	lsrs	r2, r2, #1
 8003f96:	3a01      	subs	r2, #1
 8003f98:	0552      	lsls	r2, r2, #21
 8003f9a:	4311      	orrs	r1, r2
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003fa0:	0852      	lsrs	r2, r2, #1
 8003fa2:	3a01      	subs	r2, #1
 8003fa4:	0652      	lsls	r2, r2, #25
 8003fa6:	4311      	orrs	r1, r2
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fac:	0912      	lsrs	r2, r2, #4
 8003fae:	0452      	lsls	r2, r2, #17
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	4930      	ldr	r1, [pc, #192]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003fb8:	4b2e      	ldr	r3, [pc, #184]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a2d      	ldr	r2, [pc, #180]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8003fbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fc2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fc4:	4b2b      	ldr	r3, [pc, #172]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	4a2a      	ldr	r2, [pc, #168]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8003fca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fd0:	f7fd fd4a 	bl	8001a68 <HAL_GetTick>
 8003fd4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fd8:	f7fd fd46 	bl	8001a68 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e058      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fea:	4b22      	ldr	r3, [pc, #136]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d0f0      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ff6:	e050      	b.n	800409a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e04f      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ffc:	4b1d      	ldr	r3, [pc, #116]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d148      	bne.n	800409a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004008:	4b1a      	ldr	r3, [pc, #104]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a19      	ldr	r2, [pc, #100]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 800400e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004012:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004014:	4b17      	ldr	r3, [pc, #92]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	4a16      	ldr	r2, [pc, #88]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 800401a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800401e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004020:	f7fd fd22 	bl	8001a68 <HAL_GetTick>
 8004024:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004026:	e008      	b.n	800403a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004028:	f7fd fd1e 	bl	8001a68 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e030      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800403a:	4b0e      	ldr	r3, [pc, #56]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0f0      	beq.n	8004028 <HAL_RCC_OscConfig+0x734>
 8004046:	e028      	b.n	800409a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	2b0c      	cmp	r3, #12
 800404c:	d023      	beq.n	8004096 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800404e:	4b09      	ldr	r3, [pc, #36]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a08      	ldr	r2, [pc, #32]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8004054:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004058:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405a:	f7fd fd05 	bl	8001a68 <HAL_GetTick>
 800405e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004060:	e00c      	b.n	800407c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004062:	f7fd fd01 	bl	8001a68 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d905      	bls.n	800407c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e013      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
 8004074:	40021000 	.word	0x40021000
 8004078:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800407c:	4b09      	ldr	r3, [pc, #36]	; (80040a4 <HAL_RCC_OscConfig+0x7b0>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1ec      	bne.n	8004062 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004088:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <HAL_RCC_OscConfig+0x7b0>)
 800408a:	68da      	ldr	r2, [r3, #12]
 800408c:	4905      	ldr	r1, [pc, #20]	; (80040a4 <HAL_RCC_OscConfig+0x7b0>)
 800408e:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <HAL_RCC_OscConfig+0x7b4>)
 8004090:	4013      	ands	r3, r2
 8004092:	60cb      	str	r3, [r1, #12]
 8004094:	e001      	b.n	800409a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3720      	adds	r7, #32
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	40021000 	.word	0x40021000
 80040a8:	feeefffc 	.word	0xfeeefffc

080040ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e0e7      	b.n	8004290 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040c0:	4b75      	ldr	r3, [pc, #468]	; (8004298 <HAL_RCC_ClockConfig+0x1ec>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0307 	and.w	r3, r3, #7
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d910      	bls.n	80040f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ce:	4b72      	ldr	r3, [pc, #456]	; (8004298 <HAL_RCC_ClockConfig+0x1ec>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f023 0207 	bic.w	r2, r3, #7
 80040d6:	4970      	ldr	r1, [pc, #448]	; (8004298 <HAL_RCC_ClockConfig+0x1ec>)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	4313      	orrs	r3, r2
 80040dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040de:	4b6e      	ldr	r3, [pc, #440]	; (8004298 <HAL_RCC_ClockConfig+0x1ec>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0307 	and.w	r3, r3, #7
 80040e6:	683a      	ldr	r2, [r7, #0]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d001      	beq.n	80040f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e0cf      	b.n	8004290 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d010      	beq.n	800411e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689a      	ldr	r2, [r3, #8]
 8004100:	4b66      	ldr	r3, [pc, #408]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004108:	429a      	cmp	r2, r3
 800410a:	d908      	bls.n	800411e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800410c:	4b63      	ldr	r3, [pc, #396]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	4960      	ldr	r1, [pc, #384]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 800411a:	4313      	orrs	r3, r2
 800411c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	d04c      	beq.n	80041c4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2b03      	cmp	r3, #3
 8004130:	d107      	bne.n	8004142 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004132:	4b5a      	ldr	r3, [pc, #360]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d121      	bne.n	8004182 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e0a6      	b.n	8004290 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	2b02      	cmp	r3, #2
 8004148:	d107      	bne.n	800415a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800414a:	4b54      	ldr	r3, [pc, #336]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d115      	bne.n	8004182 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e09a      	b.n	8004290 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d107      	bne.n	8004172 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004162:	4b4e      	ldr	r3, [pc, #312]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d109      	bne.n	8004182 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e08e      	b.n	8004290 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004172:	4b4a      	ldr	r3, [pc, #296]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e086      	b.n	8004290 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004182:	4b46      	ldr	r3, [pc, #280]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f023 0203 	bic.w	r2, r3, #3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	4943      	ldr	r1, [pc, #268]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 8004190:	4313      	orrs	r3, r2
 8004192:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004194:	f7fd fc68 	bl	8001a68 <HAL_GetTick>
 8004198:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800419a:	e00a      	b.n	80041b2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800419c:	f7fd fc64 	bl	8001a68 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e06e      	b.n	8004290 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041b2:	4b3a      	ldr	r3, [pc, #232]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f003 020c 	and.w	r2, r3, #12
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d1eb      	bne.n	800419c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d010      	beq.n	80041f2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689a      	ldr	r2, [r3, #8]
 80041d4:	4b31      	ldr	r3, [pc, #196]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041dc:	429a      	cmp	r2, r3
 80041de:	d208      	bcs.n	80041f2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041e0:	4b2e      	ldr	r3, [pc, #184]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	492b      	ldr	r1, [pc, #172]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041f2:	4b29      	ldr	r3, [pc, #164]	; (8004298 <HAL_RCC_ClockConfig+0x1ec>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0307 	and.w	r3, r3, #7
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d210      	bcs.n	8004222 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004200:	4b25      	ldr	r3, [pc, #148]	; (8004298 <HAL_RCC_ClockConfig+0x1ec>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f023 0207 	bic.w	r2, r3, #7
 8004208:	4923      	ldr	r1, [pc, #140]	; (8004298 <HAL_RCC_ClockConfig+0x1ec>)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	4313      	orrs	r3, r2
 800420e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004210:	4b21      	ldr	r3, [pc, #132]	; (8004298 <HAL_RCC_ClockConfig+0x1ec>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	429a      	cmp	r2, r3
 800421c:	d001      	beq.n	8004222 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e036      	b.n	8004290 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0304 	and.w	r3, r3, #4
 800422a:	2b00      	cmp	r3, #0
 800422c:	d008      	beq.n	8004240 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800422e:	4b1b      	ldr	r3, [pc, #108]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	4918      	ldr	r1, [pc, #96]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 800423c:	4313      	orrs	r3, r2
 800423e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0308 	and.w	r3, r3, #8
 8004248:	2b00      	cmp	r3, #0
 800424a:	d009      	beq.n	8004260 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800424c:	4b13      	ldr	r3, [pc, #76]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	00db      	lsls	r3, r3, #3
 800425a:	4910      	ldr	r1, [pc, #64]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 800425c:	4313      	orrs	r3, r2
 800425e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004260:	f000 f824 	bl	80042ac <HAL_RCC_GetSysClockFreq>
 8004264:	4602      	mov	r2, r0
 8004266:	4b0d      	ldr	r3, [pc, #52]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	091b      	lsrs	r3, r3, #4
 800426c:	f003 030f 	and.w	r3, r3, #15
 8004270:	490b      	ldr	r1, [pc, #44]	; (80042a0 <HAL_RCC_ClockConfig+0x1f4>)
 8004272:	5ccb      	ldrb	r3, [r1, r3]
 8004274:	f003 031f 	and.w	r3, r3, #31
 8004278:	fa22 f303 	lsr.w	r3, r2, r3
 800427c:	4a09      	ldr	r2, [pc, #36]	; (80042a4 <HAL_RCC_ClockConfig+0x1f8>)
 800427e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004280:	4b09      	ldr	r3, [pc, #36]	; (80042a8 <HAL_RCC_ClockConfig+0x1fc>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4618      	mov	r0, r3
 8004286:	f7fd fb9f 	bl	80019c8 <HAL_InitTick>
 800428a:	4603      	mov	r3, r0
 800428c:	72fb      	strb	r3, [r7, #11]

  return status;
 800428e:	7afb      	ldrb	r3, [r7, #11]
}
 8004290:	4618      	mov	r0, r3
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	40022000 	.word	0x40022000
 800429c:	40021000 	.word	0x40021000
 80042a0:	0800a620 	.word	0x0800a620
 80042a4:	20000000 	.word	0x20000000
 80042a8:	20000004 	.word	0x20000004

080042ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b089      	sub	sp, #36	; 0x24
 80042b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80042b2:	2300      	movs	r3, #0
 80042b4:	61fb      	str	r3, [r7, #28]
 80042b6:	2300      	movs	r3, #0
 80042b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042ba:	4b3e      	ldr	r3, [pc, #248]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f003 030c 	and.w	r3, r3, #12
 80042c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042c4:	4b3b      	ldr	r3, [pc, #236]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	f003 0303 	and.w	r3, r3, #3
 80042cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d005      	beq.n	80042e0 <HAL_RCC_GetSysClockFreq+0x34>
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	2b0c      	cmp	r3, #12
 80042d8:	d121      	bne.n	800431e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d11e      	bne.n	800431e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80042e0:	4b34      	ldr	r3, [pc, #208]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0308 	and.w	r3, r3, #8
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d107      	bne.n	80042fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80042ec:	4b31      	ldr	r3, [pc, #196]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80042ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042f2:	0a1b      	lsrs	r3, r3, #8
 80042f4:	f003 030f 	and.w	r3, r3, #15
 80042f8:	61fb      	str	r3, [r7, #28]
 80042fa:	e005      	b.n	8004308 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80042fc:	4b2d      	ldr	r3, [pc, #180]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	091b      	lsrs	r3, r3, #4
 8004302:	f003 030f 	and.w	r3, r3, #15
 8004306:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004308:	4a2b      	ldr	r2, [pc, #172]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004310:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10d      	bne.n	8004334 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800431c:	e00a      	b.n	8004334 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	2b04      	cmp	r3, #4
 8004322:	d102      	bne.n	800432a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004324:	4b25      	ldr	r3, [pc, #148]	; (80043bc <HAL_RCC_GetSysClockFreq+0x110>)
 8004326:	61bb      	str	r3, [r7, #24]
 8004328:	e004      	b.n	8004334 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	2b08      	cmp	r3, #8
 800432e:	d101      	bne.n	8004334 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004330:	4b23      	ldr	r3, [pc, #140]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004332:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	2b0c      	cmp	r3, #12
 8004338:	d134      	bne.n	80043a4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800433a:	4b1e      	ldr	r3, [pc, #120]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	f003 0303 	and.w	r3, r3, #3
 8004342:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	2b02      	cmp	r3, #2
 8004348:	d003      	beq.n	8004352 <HAL_RCC_GetSysClockFreq+0xa6>
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	2b03      	cmp	r3, #3
 800434e:	d003      	beq.n	8004358 <HAL_RCC_GetSysClockFreq+0xac>
 8004350:	e005      	b.n	800435e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004352:	4b1a      	ldr	r3, [pc, #104]	; (80043bc <HAL_RCC_GetSysClockFreq+0x110>)
 8004354:	617b      	str	r3, [r7, #20]
      break;
 8004356:	e005      	b.n	8004364 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004358:	4b19      	ldr	r3, [pc, #100]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800435a:	617b      	str	r3, [r7, #20]
      break;
 800435c:	e002      	b.n	8004364 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	617b      	str	r3, [r7, #20]
      break;
 8004362:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004364:	4b13      	ldr	r3, [pc, #76]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	091b      	lsrs	r3, r3, #4
 800436a:	f003 0307 	and.w	r3, r3, #7
 800436e:	3301      	adds	r3, #1
 8004370:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004372:	4b10      	ldr	r3, [pc, #64]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	0a1b      	lsrs	r3, r3, #8
 8004378:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	fb03 f202 	mul.w	r2, r3, r2
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	fbb2 f3f3 	udiv	r3, r2, r3
 8004388:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800438a:	4b0a      	ldr	r3, [pc, #40]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	0e5b      	lsrs	r3, r3, #25
 8004390:	f003 0303 	and.w	r3, r3, #3
 8004394:	3301      	adds	r3, #1
 8004396:	005b      	lsls	r3, r3, #1
 8004398:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80043a4:	69bb      	ldr	r3, [r7, #24]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3724      	adds	r7, #36	; 0x24
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	40021000 	.word	0x40021000
 80043b8:	0800a638 	.word	0x0800a638
 80043bc:	00f42400 	.word	0x00f42400
 80043c0:	007a1200 	.word	0x007a1200

080043c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043c8:	4b03      	ldr	r3, [pc, #12]	; (80043d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80043ca:	681b      	ldr	r3, [r3, #0]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	20000000 	.word	0x20000000

080043dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80043e0:	f7ff fff0 	bl	80043c4 <HAL_RCC_GetHCLKFreq>
 80043e4:	4602      	mov	r2, r0
 80043e6:	4b06      	ldr	r3, [pc, #24]	; (8004400 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	0a1b      	lsrs	r3, r3, #8
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	4904      	ldr	r1, [pc, #16]	; (8004404 <HAL_RCC_GetPCLK1Freq+0x28>)
 80043f2:	5ccb      	ldrb	r3, [r1, r3]
 80043f4:	f003 031f 	and.w	r3, r3, #31
 80043f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	40021000 	.word	0x40021000
 8004404:	0800a630 	.word	0x0800a630

08004408 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800440c:	f7ff ffda 	bl	80043c4 <HAL_RCC_GetHCLKFreq>
 8004410:	4602      	mov	r2, r0
 8004412:	4b06      	ldr	r3, [pc, #24]	; (800442c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	0adb      	lsrs	r3, r3, #11
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	4904      	ldr	r1, [pc, #16]	; (8004430 <HAL_RCC_GetPCLK2Freq+0x28>)
 800441e:	5ccb      	ldrb	r3, [r1, r3]
 8004420:	f003 031f 	and.w	r3, r3, #31
 8004424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004428:	4618      	mov	r0, r3
 800442a:	bd80      	pop	{r7, pc}
 800442c:	40021000 	.word	0x40021000
 8004430:	0800a630 	.word	0x0800a630

08004434 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800443c:	2300      	movs	r3, #0
 800443e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004440:	4b2a      	ldr	r3, [pc, #168]	; (80044ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d003      	beq.n	8004454 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800444c:	f7ff f9ee 	bl	800382c <HAL_PWREx_GetVoltageRange>
 8004450:	6178      	str	r0, [r7, #20]
 8004452:	e014      	b.n	800447e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004454:	4b25      	ldr	r3, [pc, #148]	; (80044ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004458:	4a24      	ldr	r2, [pc, #144]	; (80044ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800445a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800445e:	6593      	str	r3, [r2, #88]	; 0x58
 8004460:	4b22      	ldr	r3, [pc, #136]	; (80044ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004468:	60fb      	str	r3, [r7, #12]
 800446a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800446c:	f7ff f9de 	bl	800382c <HAL_PWREx_GetVoltageRange>
 8004470:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004472:	4b1e      	ldr	r3, [pc, #120]	; (80044ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004476:	4a1d      	ldr	r2, [pc, #116]	; (80044ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004478:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800447c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004484:	d10b      	bne.n	800449e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2b80      	cmp	r3, #128	; 0x80
 800448a:	d919      	bls.n	80044c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2ba0      	cmp	r3, #160	; 0xa0
 8004490:	d902      	bls.n	8004498 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004492:	2302      	movs	r3, #2
 8004494:	613b      	str	r3, [r7, #16]
 8004496:	e013      	b.n	80044c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004498:	2301      	movs	r3, #1
 800449a:	613b      	str	r3, [r7, #16]
 800449c:	e010      	b.n	80044c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b80      	cmp	r3, #128	; 0x80
 80044a2:	d902      	bls.n	80044aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80044a4:	2303      	movs	r3, #3
 80044a6:	613b      	str	r3, [r7, #16]
 80044a8:	e00a      	b.n	80044c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b80      	cmp	r3, #128	; 0x80
 80044ae:	d102      	bne.n	80044b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044b0:	2302      	movs	r3, #2
 80044b2:	613b      	str	r3, [r7, #16]
 80044b4:	e004      	b.n	80044c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2b70      	cmp	r3, #112	; 0x70
 80044ba:	d101      	bne.n	80044c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044bc:	2301      	movs	r3, #1
 80044be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80044c0:	4b0b      	ldr	r3, [pc, #44]	; (80044f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f023 0207 	bic.w	r2, r3, #7
 80044c8:	4909      	ldr	r1, [pc, #36]	; (80044f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80044d0:	4b07      	ldr	r3, [pc, #28]	; (80044f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d001      	beq.n	80044e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e000      	b.n	80044e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3718      	adds	r7, #24
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	40021000 	.word	0x40021000
 80044f0:	40022000 	.word	0x40022000

080044f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044fc:	2300      	movs	r3, #0
 80044fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004500:	2300      	movs	r3, #0
 8004502:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800450c:	2b00      	cmp	r3, #0
 800450e:	d041      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004514:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004518:	d02a      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800451a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800451e:	d824      	bhi.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004520:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004524:	d008      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004526:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800452a:	d81e      	bhi.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00a      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004530:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004534:	d010      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004536:	e018      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004538:	4b86      	ldr	r3, [pc, #536]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	4a85      	ldr	r2, [pc, #532]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800453e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004542:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004544:	e015      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	3304      	adds	r3, #4
 800454a:	2100      	movs	r1, #0
 800454c:	4618      	mov	r0, r3
 800454e:	f000 fabb 	bl	8004ac8 <RCCEx_PLLSAI1_Config>
 8004552:	4603      	mov	r3, r0
 8004554:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004556:	e00c      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3320      	adds	r3, #32
 800455c:	2100      	movs	r1, #0
 800455e:	4618      	mov	r0, r3
 8004560:	f000 fba6 	bl	8004cb0 <RCCEx_PLLSAI2_Config>
 8004564:	4603      	mov	r3, r0
 8004566:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004568:	e003      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	74fb      	strb	r3, [r7, #19]
      break;
 800456e:	e000      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004570:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004572:	7cfb      	ldrb	r3, [r7, #19]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10b      	bne.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004578:	4b76      	ldr	r3, [pc, #472]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800457a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800457e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004586:	4973      	ldr	r1, [pc, #460]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004588:	4313      	orrs	r3, r2
 800458a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800458e:	e001      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004590:	7cfb      	ldrb	r3, [r7, #19]
 8004592:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d041      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80045a8:	d02a      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80045aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80045ae:	d824      	bhi.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80045b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045b4:	d008      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80045b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045ba:	d81e      	bhi.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00a      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80045c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045c4:	d010      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80045c6:	e018      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045c8:	4b62      	ldr	r3, [pc, #392]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	4a61      	ldr	r2, [pc, #388]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045d4:	e015      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	3304      	adds	r3, #4
 80045da:	2100      	movs	r1, #0
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 fa73 	bl	8004ac8 <RCCEx_PLLSAI1_Config>
 80045e2:	4603      	mov	r3, r0
 80045e4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045e6:	e00c      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3320      	adds	r3, #32
 80045ec:	2100      	movs	r1, #0
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 fb5e 	bl	8004cb0 <RCCEx_PLLSAI2_Config>
 80045f4:	4603      	mov	r3, r0
 80045f6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045f8:	e003      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	74fb      	strb	r3, [r7, #19]
      break;
 80045fe:	e000      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004600:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004602:	7cfb      	ldrb	r3, [r7, #19]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10b      	bne.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004608:	4b52      	ldr	r3, [pc, #328]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800460a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004616:	494f      	ldr	r1, [pc, #316]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004618:	4313      	orrs	r3, r2
 800461a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800461e:	e001      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004620:	7cfb      	ldrb	r3, [r7, #19]
 8004622:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 80a0 	beq.w	8004772 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004632:	2300      	movs	r3, #0
 8004634:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004636:	4b47      	ldr	r3, [pc, #284]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800463a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004642:	2301      	movs	r3, #1
 8004644:	e000      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004646:	2300      	movs	r3, #0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00d      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800464c:	4b41      	ldr	r3, [pc, #260]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800464e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004650:	4a40      	ldr	r2, [pc, #256]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004656:	6593      	str	r3, [r2, #88]	; 0x58
 8004658:	4b3e      	ldr	r3, [pc, #248]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800465a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800465c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004660:	60bb      	str	r3, [r7, #8]
 8004662:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004664:	2301      	movs	r3, #1
 8004666:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004668:	4b3b      	ldr	r3, [pc, #236]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a3a      	ldr	r2, [pc, #232]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800466e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004672:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004674:	f7fd f9f8 	bl	8001a68 <HAL_GetTick>
 8004678:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800467a:	e009      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800467c:	f7fd f9f4 	bl	8001a68 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d902      	bls.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	74fb      	strb	r3, [r7, #19]
        break;
 800468e:	e005      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004690:	4b31      	ldr	r3, [pc, #196]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004698:	2b00      	cmp	r3, #0
 800469a:	d0ef      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800469c:	7cfb      	ldrb	r3, [r7, #19]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d15c      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80046a2:	4b2c      	ldr	r3, [pc, #176]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d01f      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d019      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046c0:	4b24      	ldr	r3, [pc, #144]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046cc:	4b21      	ldr	r3, [pc, #132]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d2:	4a20      	ldr	r2, [pc, #128]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046dc:	4b1d      	ldr	r3, [pc, #116]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e2:	4a1c      	ldr	r2, [pc, #112]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046ec:	4a19      	ldr	r2, [pc, #100]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d016      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046fe:	f7fd f9b3 	bl	8001a68 <HAL_GetTick>
 8004702:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004704:	e00b      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004706:	f7fd f9af 	bl	8001a68 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	f241 3288 	movw	r2, #5000	; 0x1388
 8004714:	4293      	cmp	r3, r2
 8004716:	d902      	bls.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	74fb      	strb	r3, [r7, #19]
            break;
 800471c:	e006      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800471e:	4b0d      	ldr	r3, [pc, #52]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004724:	f003 0302 	and.w	r3, r3, #2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d0ec      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800472c:	7cfb      	ldrb	r3, [r7, #19]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10c      	bne.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004732:	4b08      	ldr	r3, [pc, #32]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004738:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004742:	4904      	ldr	r1, [pc, #16]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004744:	4313      	orrs	r3, r2
 8004746:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800474a:	e009      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800474c:	7cfb      	ldrb	r3, [r7, #19]
 800474e:	74bb      	strb	r3, [r7, #18]
 8004750:	e006      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004752:	bf00      	nop
 8004754:	40021000 	.word	0x40021000
 8004758:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800475c:	7cfb      	ldrb	r3, [r7, #19]
 800475e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004760:	7c7b      	ldrb	r3, [r7, #17]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d105      	bne.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004766:	4b9e      	ldr	r3, [pc, #632]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800476a:	4a9d      	ldr	r2, [pc, #628]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800476c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004770:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00a      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800477e:	4b98      	ldr	r3, [pc, #608]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004784:	f023 0203 	bic.w	r2, r3, #3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478c:	4994      	ldr	r1, [pc, #592]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800478e:	4313      	orrs	r3, r2
 8004790:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00a      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047a0:	4b8f      	ldr	r3, [pc, #572]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a6:	f023 020c 	bic.w	r2, r3, #12
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ae:	498c      	ldr	r1, [pc, #560]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0304 	and.w	r3, r3, #4
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00a      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047c2:	4b87      	ldr	r3, [pc, #540]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d0:	4983      	ldr	r1, [pc, #524]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0308 	and.w	r3, r3, #8
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00a      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047e4:	4b7e      	ldr	r3, [pc, #504]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f2:	497b      	ldr	r1, [pc, #492]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0310 	and.w	r3, r3, #16
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00a      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004806:	4b76      	ldr	r3, [pc, #472]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004814:	4972      	ldr	r1, [pc, #456]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004816:	4313      	orrs	r3, r2
 8004818:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0320 	and.w	r3, r3, #32
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00a      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004828:	4b6d      	ldr	r3, [pc, #436]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800482a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800482e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004836:	496a      	ldr	r1, [pc, #424]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004838:	4313      	orrs	r3, r2
 800483a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00a      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800484a:	4b65      	ldr	r3, [pc, #404]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800484c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004850:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004858:	4961      	ldr	r1, [pc, #388]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800485a:	4313      	orrs	r3, r2
 800485c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00a      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800486c:	4b5c      	ldr	r3, [pc, #368]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800486e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004872:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800487a:	4959      	ldr	r1, [pc, #356]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800487c:	4313      	orrs	r3, r2
 800487e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00a      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800488e:	4b54      	ldr	r3, [pc, #336]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004894:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800489c:	4950      	ldr	r1, [pc, #320]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00a      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048b0:	4b4b      	ldr	r3, [pc, #300]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048be:	4948      	ldr	r1, [pc, #288]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00a      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048d2:	4b43      	ldr	r3, [pc, #268]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e0:	493f      	ldr	r1, [pc, #252]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d028      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048f4:	4b3a      	ldr	r3, [pc, #232]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004902:	4937      	ldr	r1, [pc, #220]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004904:	4313      	orrs	r3, r2
 8004906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800490e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004912:	d106      	bne.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004914:	4b32      	ldr	r3, [pc, #200]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	4a31      	ldr	r2, [pc, #196]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800491a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800491e:	60d3      	str	r3, [r2, #12]
 8004920:	e011      	b.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004926:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800492a:	d10c      	bne.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	3304      	adds	r3, #4
 8004930:	2101      	movs	r1, #1
 8004932:	4618      	mov	r0, r3
 8004934:	f000 f8c8 	bl	8004ac8 <RCCEx_PLLSAI1_Config>
 8004938:	4603      	mov	r3, r0
 800493a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800493c:	7cfb      	ldrb	r3, [r7, #19]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004942:	7cfb      	ldrb	r3, [r7, #19]
 8004944:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d028      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004952:	4b23      	ldr	r3, [pc, #140]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004958:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004960:	491f      	ldr	r1, [pc, #124]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004962:	4313      	orrs	r3, r2
 8004964:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004970:	d106      	bne.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004972:	4b1b      	ldr	r3, [pc, #108]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	4a1a      	ldr	r2, [pc, #104]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004978:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800497c:	60d3      	str	r3, [r2, #12]
 800497e:	e011      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004984:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004988:	d10c      	bne.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	3304      	adds	r3, #4
 800498e:	2101      	movs	r1, #1
 8004990:	4618      	mov	r0, r3
 8004992:	f000 f899 	bl	8004ac8 <RCCEx_PLLSAI1_Config>
 8004996:	4603      	mov	r3, r0
 8004998:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800499a:	7cfb      	ldrb	r3, [r7, #19]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80049a0:	7cfb      	ldrb	r3, [r7, #19]
 80049a2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d02b      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049b0:	4b0b      	ldr	r3, [pc, #44]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049be:	4908      	ldr	r1, [pc, #32]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049ce:	d109      	bne.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049d0:	4b03      	ldr	r3, [pc, #12]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	4a02      	ldr	r2, [pc, #8]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049da:	60d3      	str	r3, [r2, #12]
 80049dc:	e014      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80049de:	bf00      	nop
 80049e0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049ec:	d10c      	bne.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	3304      	adds	r3, #4
 80049f2:	2101      	movs	r1, #1
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 f867 	bl	8004ac8 <RCCEx_PLLSAI1_Config>
 80049fa:	4603      	mov	r3, r0
 80049fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049fe:	7cfb      	ldrb	r3, [r7, #19]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d001      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004a04:	7cfb      	ldrb	r3, [r7, #19]
 8004a06:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d02f      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a14:	4b2b      	ldr	r3, [pc, #172]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a22:	4928      	ldr	r1, [pc, #160]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a32:	d10d      	bne.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	3304      	adds	r3, #4
 8004a38:	2102      	movs	r1, #2
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 f844 	bl	8004ac8 <RCCEx_PLLSAI1_Config>
 8004a40:	4603      	mov	r3, r0
 8004a42:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a44:	7cfb      	ldrb	r3, [r7, #19]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d014      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a4a:	7cfb      	ldrb	r3, [r7, #19]
 8004a4c:	74bb      	strb	r3, [r7, #18]
 8004a4e:	e011      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a58:	d10c      	bne.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	3320      	adds	r3, #32
 8004a5e:	2102      	movs	r1, #2
 8004a60:	4618      	mov	r0, r3
 8004a62:	f000 f925 	bl	8004cb0 <RCCEx_PLLSAI2_Config>
 8004a66:	4603      	mov	r3, r0
 8004a68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a6a:	7cfb      	ldrb	r3, [r7, #19]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d001      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a70:	7cfb      	ldrb	r3, [r7, #19]
 8004a72:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00a      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a80:	4b10      	ldr	r3, [pc, #64]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a86:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a8e:	490d      	ldr	r1, [pc, #52]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00b      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004aa2:	4b08      	ldr	r3, [pc, #32]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ab2:	4904      	ldr	r1, [pc, #16]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004aba:	7cbb      	ldrb	r3, [r7, #18]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3718      	adds	r7, #24
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	40021000 	.word	0x40021000

08004ac8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ad6:	4b75      	ldr	r3, [pc, #468]	; (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	f003 0303 	and.w	r3, r3, #3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d018      	beq.n	8004b14 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004ae2:	4b72      	ldr	r3, [pc, #456]	; (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	f003 0203 	and.w	r2, r3, #3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d10d      	bne.n	8004b0e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
       ||
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d009      	beq.n	8004b0e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004afa:	4b6c      	ldr	r3, [pc, #432]	; (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	091b      	lsrs	r3, r3, #4
 8004b00:	f003 0307 	and.w	r3, r3, #7
 8004b04:	1c5a      	adds	r2, r3, #1
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
       ||
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d047      	beq.n	8004b9e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	73fb      	strb	r3, [r7, #15]
 8004b12:	e044      	b.n	8004b9e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2b03      	cmp	r3, #3
 8004b1a:	d018      	beq.n	8004b4e <RCCEx_PLLSAI1_Config+0x86>
 8004b1c:	2b03      	cmp	r3, #3
 8004b1e:	d825      	bhi.n	8004b6c <RCCEx_PLLSAI1_Config+0xa4>
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d002      	beq.n	8004b2a <RCCEx_PLLSAI1_Config+0x62>
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d009      	beq.n	8004b3c <RCCEx_PLLSAI1_Config+0x74>
 8004b28:	e020      	b.n	8004b6c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b2a:	4b60      	ldr	r3, [pc, #384]	; (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d11d      	bne.n	8004b72 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b3a:	e01a      	b.n	8004b72 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b3c:	4b5b      	ldr	r3, [pc, #364]	; (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d116      	bne.n	8004b76 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b4c:	e013      	b.n	8004b76 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b4e:	4b57      	ldr	r3, [pc, #348]	; (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10f      	bne.n	8004b7a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b5a:	4b54      	ldr	r3, [pc, #336]	; (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d109      	bne.n	8004b7a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b6a:	e006      	b.n	8004b7a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b70:	e004      	b.n	8004b7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b72:	bf00      	nop
 8004b74:	e002      	b.n	8004b7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b76:	bf00      	nop
 8004b78:	e000      	b.n	8004b7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b7c:	7bfb      	ldrb	r3, [r7, #15]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10d      	bne.n	8004b9e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b82:	4b4a      	ldr	r3, [pc, #296]	; (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6819      	ldr	r1, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	3b01      	subs	r3, #1
 8004b94:	011b      	lsls	r3, r3, #4
 8004b96:	430b      	orrs	r3, r1
 8004b98:	4944      	ldr	r1, [pc, #272]	; (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d17d      	bne.n	8004ca0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ba4:	4b41      	ldr	r3, [pc, #260]	; (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a40      	ldr	r2, [pc, #256]	; (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004baa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004bae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bb0:	f7fc ff5a 	bl	8001a68 <HAL_GetTick>
 8004bb4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004bb6:	e009      	b.n	8004bcc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bb8:	f7fc ff56 	bl	8001a68 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d902      	bls.n	8004bcc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	73fb      	strb	r3, [r7, #15]
        break;
 8004bca:	e005      	b.n	8004bd8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004bcc:	4b37      	ldr	r3, [pc, #220]	; (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1ef      	bne.n	8004bb8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004bd8:	7bfb      	ldrb	r3, [r7, #15]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d160      	bne.n	8004ca0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d111      	bne.n	8004c08 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004be4:	4b31      	ldr	r3, [pc, #196]	; (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004bec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	6892      	ldr	r2, [r2, #8]
 8004bf4:	0211      	lsls	r1, r2, #8
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	68d2      	ldr	r2, [r2, #12]
 8004bfa:	0912      	lsrs	r2, r2, #4
 8004bfc:	0452      	lsls	r2, r2, #17
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	492a      	ldr	r1, [pc, #168]	; (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	610b      	str	r3, [r1, #16]
 8004c06:	e027      	b.n	8004c58 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d112      	bne.n	8004c34 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c0e:	4b27      	ldr	r3, [pc, #156]	; (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004c16:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	6892      	ldr	r2, [r2, #8]
 8004c1e:	0211      	lsls	r1, r2, #8
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	6912      	ldr	r2, [r2, #16]
 8004c24:	0852      	lsrs	r2, r2, #1
 8004c26:	3a01      	subs	r2, #1
 8004c28:	0552      	lsls	r2, r2, #21
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	491f      	ldr	r1, [pc, #124]	; (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	610b      	str	r3, [r1, #16]
 8004c32:	e011      	b.n	8004c58 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c34:	4b1d      	ldr	r3, [pc, #116]	; (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004c3c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	6892      	ldr	r2, [r2, #8]
 8004c44:	0211      	lsls	r1, r2, #8
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	6952      	ldr	r2, [r2, #20]
 8004c4a:	0852      	lsrs	r2, r2, #1
 8004c4c:	3a01      	subs	r2, #1
 8004c4e:	0652      	lsls	r2, r2, #25
 8004c50:	430a      	orrs	r2, r1
 8004c52:	4916      	ldr	r1, [pc, #88]	; (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c58:	4b14      	ldr	r3, [pc, #80]	; (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a13      	ldr	r2, [pc, #76]	; (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c62:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c64:	f7fc ff00 	bl	8001a68 <HAL_GetTick>
 8004c68:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c6a:	e009      	b.n	8004c80 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c6c:	f7fc fefc 	bl	8001a68 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d902      	bls.n	8004c80 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	73fb      	strb	r3, [r7, #15]
          break;
 8004c7e:	e005      	b.n	8004c8c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c80:	4b0a      	ldr	r3, [pc, #40]	; (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d0ef      	beq.n	8004c6c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004c8c:	7bfb      	ldrb	r3, [r7, #15]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d106      	bne.n	8004ca0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004c92:	4b06      	ldr	r3, [pc, #24]	; (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c94:	691a      	ldr	r2, [r3, #16]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	4904      	ldr	r1, [pc, #16]	; (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	40021000 	.word	0x40021000

08004cb0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004cbe:	4b6a      	ldr	r3, [pc, #424]	; (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	f003 0303 	and.w	r3, r3, #3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d018      	beq.n	8004cfc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004cca:	4b67      	ldr	r3, [pc, #412]	; (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	f003 0203 	and.w	r2, r3, #3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d10d      	bne.n	8004cf6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
       ||
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d009      	beq.n	8004cf6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004ce2:	4b61      	ldr	r3, [pc, #388]	; (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	091b      	lsrs	r3, r3, #4
 8004ce8:	f003 0307 	and.w	r3, r3, #7
 8004cec:	1c5a      	adds	r2, r3, #1
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
       ||
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d047      	beq.n	8004d86 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	73fb      	strb	r3, [r7, #15]
 8004cfa:	e044      	b.n	8004d86 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2b03      	cmp	r3, #3
 8004d02:	d018      	beq.n	8004d36 <RCCEx_PLLSAI2_Config+0x86>
 8004d04:	2b03      	cmp	r3, #3
 8004d06:	d825      	bhi.n	8004d54 <RCCEx_PLLSAI2_Config+0xa4>
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d002      	beq.n	8004d12 <RCCEx_PLLSAI2_Config+0x62>
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d009      	beq.n	8004d24 <RCCEx_PLLSAI2_Config+0x74>
 8004d10:	e020      	b.n	8004d54 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d12:	4b55      	ldr	r3, [pc, #340]	; (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d11d      	bne.n	8004d5a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d22:	e01a      	b.n	8004d5a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d24:	4b50      	ldr	r3, [pc, #320]	; (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d116      	bne.n	8004d5e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d34:	e013      	b.n	8004d5e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d36:	4b4c      	ldr	r3, [pc, #304]	; (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10f      	bne.n	8004d62 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d42:	4b49      	ldr	r3, [pc, #292]	; (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d109      	bne.n	8004d62 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d52:	e006      	b.n	8004d62 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	73fb      	strb	r3, [r7, #15]
      break;
 8004d58:	e004      	b.n	8004d64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d5a:	bf00      	nop
 8004d5c:	e002      	b.n	8004d64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d5e:	bf00      	nop
 8004d60:	e000      	b.n	8004d64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d62:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d64:	7bfb      	ldrb	r3, [r7, #15]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10d      	bne.n	8004d86 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d6a:	4b3f      	ldr	r3, [pc, #252]	; (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6819      	ldr	r1, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	011b      	lsls	r3, r3, #4
 8004d7e:	430b      	orrs	r3, r1
 8004d80:	4939      	ldr	r1, [pc, #228]	; (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d86:	7bfb      	ldrb	r3, [r7, #15]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d167      	bne.n	8004e5c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004d8c:	4b36      	ldr	r3, [pc, #216]	; (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a35      	ldr	r2, [pc, #212]	; (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d98:	f7fc fe66 	bl	8001a68 <HAL_GetTick>
 8004d9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d9e:	e009      	b.n	8004db4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004da0:	f7fc fe62 	bl	8001a68 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d902      	bls.n	8004db4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	73fb      	strb	r3, [r7, #15]
        break;
 8004db2:	e005      	b.n	8004dc0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004db4:	4b2c      	ldr	r3, [pc, #176]	; (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1ef      	bne.n	8004da0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004dc0:	7bfb      	ldrb	r3, [r7, #15]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d14a      	bne.n	8004e5c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d111      	bne.n	8004df0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004dcc:	4b26      	ldr	r3, [pc, #152]	; (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dce:	695b      	ldr	r3, [r3, #20]
 8004dd0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004dd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	6892      	ldr	r2, [r2, #8]
 8004ddc:	0211      	lsls	r1, r2, #8
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	68d2      	ldr	r2, [r2, #12]
 8004de2:	0912      	lsrs	r2, r2, #4
 8004de4:	0452      	lsls	r2, r2, #17
 8004de6:	430a      	orrs	r2, r1
 8004de8:	491f      	ldr	r1, [pc, #124]	; (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	614b      	str	r3, [r1, #20]
 8004dee:	e011      	b.n	8004e14 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004df0:	4b1d      	ldr	r3, [pc, #116]	; (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004df8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	6892      	ldr	r2, [r2, #8]
 8004e00:	0211      	lsls	r1, r2, #8
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	6912      	ldr	r2, [r2, #16]
 8004e06:	0852      	lsrs	r2, r2, #1
 8004e08:	3a01      	subs	r2, #1
 8004e0a:	0652      	lsls	r2, r2, #25
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	4916      	ldr	r1, [pc, #88]	; (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004e14:	4b14      	ldr	r3, [pc, #80]	; (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a13      	ldr	r2, [pc, #76]	; (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e20:	f7fc fe22 	bl	8001a68 <HAL_GetTick>
 8004e24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e26:	e009      	b.n	8004e3c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e28:	f7fc fe1e 	bl	8001a68 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d902      	bls.n	8004e3c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	73fb      	strb	r3, [r7, #15]
          break;
 8004e3a:	e005      	b.n	8004e48 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e3c:	4b0a      	ldr	r3, [pc, #40]	; (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d0ef      	beq.n	8004e28 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004e48:	7bfb      	ldrb	r3, [r7, #15]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d106      	bne.n	8004e5c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004e4e:	4b06      	ldr	r3, [pc, #24]	; (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e50:	695a      	ldr	r2, [r3, #20]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	4904      	ldr	r1, [pc, #16]	; (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	40021000 	.word	0x40021000

08004e6c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d06c      	beq.n	8004f58 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d106      	bne.n	8004e98 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7fc fb60 	bl	8001558 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	22ca      	movs	r2, #202	; 0xca
 8004ea6:	625a      	str	r2, [r3, #36]	; 0x24
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2253      	movs	r2, #83	; 0x53
 8004eae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 f87c 	bl	8004fae <RTC_EnterInitMode>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004eba:	7bfb      	ldrb	r3, [r7, #15]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d14b      	bne.n	8004f58 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	6812      	ldr	r2, [r2, #0]
 8004eca:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004ece:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ed2:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6899      	ldr	r1, [r3, #8]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685a      	ldr	r2, [r3, #4]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	699b      	ldr	r3, [r3, #24]
 8004ee8:	431a      	orrs	r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	68d2      	ldr	r2, [r2, #12]
 8004efa:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6919      	ldr	r1, [r3, #16]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	041a      	lsls	r2, r3, #16
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 f87f 	bl	8005014 <RTC_ExitInitMode>
 8004f16:	4603      	mov	r3, r0
 8004f18:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004f1a:	7bfb      	ldrb	r3, [r7, #15]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d11b      	bne.n	8004f58 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f022 0203 	bic.w	r2, r2, #3
 8004f2e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	69da      	ldr	r2, [r3, #28]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	431a      	orrs	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	430a      	orrs	r2, r1
 8004f46:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	22ff      	movs	r2, #255	; 0xff
 8004f4e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8004f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b084      	sub	sp, #16
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68da      	ldr	r2, [r3, #12]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f78:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004f7a:	f7fc fd75 	bl	8001a68 <HAL_GetTick>
 8004f7e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004f80:	e009      	b.n	8004f96 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004f82:	f7fc fd71 	bl	8001a68 <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f90:	d901      	bls.n	8004f96 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e007      	b.n	8004fa6 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	f003 0320 	and.w	r3, r3, #32
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d0ee      	beq.n	8004f82 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b084      	sub	sp, #16
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d120      	bne.n	800500a <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8004fd0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004fd2:	f7fc fd49 	bl	8001a68 <HAL_GetTick>
 8004fd6:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004fd8:	e00d      	b.n	8004ff6 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004fda:	f7fc fd45 	bl	8001a68 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fe8:	d905      	bls.n	8004ff6 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2203      	movs	r2, #3
 8004ff2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005000:	2b00      	cmp	r3, #0
 8005002:	d102      	bne.n	800500a <RTC_EnterInitMode+0x5c>
 8005004:	7bfb      	ldrb	r3, [r7, #15]
 8005006:	2b03      	cmp	r3, #3
 8005008:	d1e7      	bne.n	8004fda <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800500a:	7bfb      	ldrb	r3, [r7, #15]
}
 800500c:	4618      	mov	r0, r3
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800501c:	2300      	movs	r3, #0
 800501e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005020:	4b1a      	ldr	r3, [pc, #104]	; (800508c <RTC_ExitInitMode+0x78>)
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	4a19      	ldr	r2, [pc, #100]	; (800508c <RTC_ExitInitMode+0x78>)
 8005026:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800502a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800502c:	4b17      	ldr	r3, [pc, #92]	; (800508c <RTC_ExitInitMode+0x78>)
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f003 0320 	and.w	r3, r3, #32
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10c      	bne.n	8005052 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f7ff ff92 	bl	8004f62 <HAL_RTC_WaitForSynchro>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d01e      	beq.n	8005082 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2203      	movs	r2, #3
 8005048:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	73fb      	strb	r3, [r7, #15]
 8005050:	e017      	b.n	8005082 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005052:	4b0e      	ldr	r3, [pc, #56]	; (800508c <RTC_ExitInitMode+0x78>)
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	4a0d      	ldr	r2, [pc, #52]	; (800508c <RTC_ExitInitMode+0x78>)
 8005058:	f023 0320 	bic.w	r3, r3, #32
 800505c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f7ff ff7f 	bl	8004f62 <HAL_RTC_WaitForSynchro>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d005      	beq.n	8005076 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2203      	movs	r2, #3
 800506e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005076:	4b05      	ldr	r3, [pc, #20]	; (800508c <RTC_ExitInitMode+0x78>)
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	4a04      	ldr	r2, [pc, #16]	; (800508c <RTC_ExitInitMode+0x78>)
 800507c:	f043 0320 	orr.w	r3, r3, #32
 8005080:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005082:	7bfb      	ldrb	r3, [r7, #15]
}
 8005084:	4618      	mov	r0, r3
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	40002800 	.word	0x40002800

08005090 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e040      	b.n	8005124 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d106      	bne.n	80050b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f7fc fbe2 	bl	800187c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2224      	movs	r2, #36	; 0x24
 80050bc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f022 0201 	bic.w	r2, r2, #1
 80050cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f8c0 	bl	8005254 <UART_SetConfig>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d101      	bne.n	80050de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e022      	b.n	8005124 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d002      	beq.n	80050ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 fb6c 	bl	80057c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	685a      	ldr	r2, [r3, #4]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689a      	ldr	r2, [r3, #8]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800510a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0201 	orr.w	r2, r2, #1
 800511a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 fbf3 	bl	8005908 <UART_CheckIdleState>
 8005122:	4603      	mov	r3, r0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3708      	adds	r7, #8
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b08a      	sub	sp, #40	; 0x28
 8005130:	af02      	add	r7, sp, #8
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	603b      	str	r3, [r7, #0]
 8005138:	4613      	mov	r3, r2
 800513a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005140:	2b20      	cmp	r3, #32
 8005142:	f040 8082 	bne.w	800524a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d002      	beq.n	8005152 <HAL_UART_Transmit+0x26>
 800514c:	88fb      	ldrh	r3, [r7, #6]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d101      	bne.n	8005156 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e07a      	b.n	800524c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800515c:	2b01      	cmp	r3, #1
 800515e:	d101      	bne.n	8005164 <HAL_UART_Transmit+0x38>
 8005160:	2302      	movs	r3, #2
 8005162:	e073      	b.n	800524c <HAL_UART_Transmit+0x120>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2221      	movs	r2, #33	; 0x21
 8005178:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800517a:	f7fc fc75 	bl	8001a68 <HAL_GetTick>
 800517e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	88fa      	ldrh	r2, [r7, #6]
 8005184:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	88fa      	ldrh	r2, [r7, #6]
 800518c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005198:	d108      	bne.n	80051ac <HAL_UART_Transmit+0x80>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d104      	bne.n	80051ac <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80051a2:	2300      	movs	r3, #0
 80051a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	61bb      	str	r3, [r7, #24]
 80051aa:	e003      	b.n	80051b4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051b0:	2300      	movs	r3, #0
 80051b2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80051bc:	e02d      	b.n	800521a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	2200      	movs	r2, #0
 80051c6:	2180      	movs	r1, #128	; 0x80
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	f000 fbe6 	bl	800599a <UART_WaitOnFlagUntilTimeout>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d001      	beq.n	80051d8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e039      	b.n	800524c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10b      	bne.n	80051f6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	881a      	ldrh	r2, [r3, #0]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051ea:	b292      	uxth	r2, r2
 80051ec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	3302      	adds	r3, #2
 80051f2:	61bb      	str	r3, [r7, #24]
 80051f4:	e008      	b.n	8005208 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	781a      	ldrb	r2, [r3, #0]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	b292      	uxth	r2, r2
 8005200:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	3301      	adds	r3, #1
 8005206:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800520e:	b29b      	uxth	r3, r3
 8005210:	3b01      	subs	r3, #1
 8005212:	b29a      	uxth	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005220:	b29b      	uxth	r3, r3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1cb      	bne.n	80051be <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	9300      	str	r3, [sp, #0]
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	2200      	movs	r2, #0
 800522e:	2140      	movs	r1, #64	; 0x40
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f000 fbb2 	bl	800599a <UART_WaitOnFlagUntilTimeout>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d001      	beq.n	8005240 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e005      	b.n	800524c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2220      	movs	r2, #32
 8005244:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005246:	2300      	movs	r3, #0
 8005248:	e000      	b.n	800524c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800524a:	2302      	movs	r3, #2
  }
}
 800524c:	4618      	mov	r0, r3
 800524e:	3720      	adds	r7, #32
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005258:	b08a      	sub	sp, #40	; 0x28
 800525a:	af00      	add	r7, sp, #0
 800525c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800525e:	2300      	movs	r3, #0
 8005260:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	689a      	ldr	r2, [r3, #8]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	431a      	orrs	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	431a      	orrs	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	4313      	orrs	r3, r2
 800527a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	4ba4      	ldr	r3, [pc, #656]	; (8005514 <UART_SetConfig+0x2c0>)
 8005284:	4013      	ands	r3, r2
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	6812      	ldr	r2, [r2, #0]
 800528a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800528c:	430b      	orrs	r3, r1
 800528e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	68da      	ldr	r2, [r3, #12]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	430a      	orrs	r2, r1
 80052a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a99      	ldr	r2, [pc, #612]	; (8005518 <UART_SetConfig+0x2c4>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d004      	beq.n	80052c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052bc:	4313      	orrs	r3, r2
 80052be:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052d0:	430a      	orrs	r2, r1
 80052d2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a90      	ldr	r2, [pc, #576]	; (800551c <UART_SetConfig+0x2c8>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d126      	bne.n	800532c <UART_SetConfig+0xd8>
 80052de:	4b90      	ldr	r3, [pc, #576]	; (8005520 <UART_SetConfig+0x2cc>)
 80052e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e4:	f003 0303 	and.w	r3, r3, #3
 80052e8:	2b03      	cmp	r3, #3
 80052ea:	d81b      	bhi.n	8005324 <UART_SetConfig+0xd0>
 80052ec:	a201      	add	r2, pc, #4	; (adr r2, 80052f4 <UART_SetConfig+0xa0>)
 80052ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f2:	bf00      	nop
 80052f4:	08005305 	.word	0x08005305
 80052f8:	08005315 	.word	0x08005315
 80052fc:	0800530d 	.word	0x0800530d
 8005300:	0800531d 	.word	0x0800531d
 8005304:	2301      	movs	r3, #1
 8005306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800530a:	e116      	b.n	800553a <UART_SetConfig+0x2e6>
 800530c:	2302      	movs	r3, #2
 800530e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005312:	e112      	b.n	800553a <UART_SetConfig+0x2e6>
 8005314:	2304      	movs	r3, #4
 8005316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800531a:	e10e      	b.n	800553a <UART_SetConfig+0x2e6>
 800531c:	2308      	movs	r3, #8
 800531e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005322:	e10a      	b.n	800553a <UART_SetConfig+0x2e6>
 8005324:	2310      	movs	r3, #16
 8005326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800532a:	e106      	b.n	800553a <UART_SetConfig+0x2e6>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a7c      	ldr	r2, [pc, #496]	; (8005524 <UART_SetConfig+0x2d0>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d138      	bne.n	80053a8 <UART_SetConfig+0x154>
 8005336:	4b7a      	ldr	r3, [pc, #488]	; (8005520 <UART_SetConfig+0x2cc>)
 8005338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800533c:	f003 030c 	and.w	r3, r3, #12
 8005340:	2b0c      	cmp	r3, #12
 8005342:	d82d      	bhi.n	80053a0 <UART_SetConfig+0x14c>
 8005344:	a201      	add	r2, pc, #4	; (adr r2, 800534c <UART_SetConfig+0xf8>)
 8005346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534a:	bf00      	nop
 800534c:	08005381 	.word	0x08005381
 8005350:	080053a1 	.word	0x080053a1
 8005354:	080053a1 	.word	0x080053a1
 8005358:	080053a1 	.word	0x080053a1
 800535c:	08005391 	.word	0x08005391
 8005360:	080053a1 	.word	0x080053a1
 8005364:	080053a1 	.word	0x080053a1
 8005368:	080053a1 	.word	0x080053a1
 800536c:	08005389 	.word	0x08005389
 8005370:	080053a1 	.word	0x080053a1
 8005374:	080053a1 	.word	0x080053a1
 8005378:	080053a1 	.word	0x080053a1
 800537c:	08005399 	.word	0x08005399
 8005380:	2300      	movs	r3, #0
 8005382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005386:	e0d8      	b.n	800553a <UART_SetConfig+0x2e6>
 8005388:	2302      	movs	r3, #2
 800538a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800538e:	e0d4      	b.n	800553a <UART_SetConfig+0x2e6>
 8005390:	2304      	movs	r3, #4
 8005392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005396:	e0d0      	b.n	800553a <UART_SetConfig+0x2e6>
 8005398:	2308      	movs	r3, #8
 800539a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800539e:	e0cc      	b.n	800553a <UART_SetConfig+0x2e6>
 80053a0:	2310      	movs	r3, #16
 80053a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053a6:	e0c8      	b.n	800553a <UART_SetConfig+0x2e6>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a5e      	ldr	r2, [pc, #376]	; (8005528 <UART_SetConfig+0x2d4>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d125      	bne.n	80053fe <UART_SetConfig+0x1aa>
 80053b2:	4b5b      	ldr	r3, [pc, #364]	; (8005520 <UART_SetConfig+0x2cc>)
 80053b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80053bc:	2b30      	cmp	r3, #48	; 0x30
 80053be:	d016      	beq.n	80053ee <UART_SetConfig+0x19a>
 80053c0:	2b30      	cmp	r3, #48	; 0x30
 80053c2:	d818      	bhi.n	80053f6 <UART_SetConfig+0x1a2>
 80053c4:	2b20      	cmp	r3, #32
 80053c6:	d00a      	beq.n	80053de <UART_SetConfig+0x18a>
 80053c8:	2b20      	cmp	r3, #32
 80053ca:	d814      	bhi.n	80053f6 <UART_SetConfig+0x1a2>
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d002      	beq.n	80053d6 <UART_SetConfig+0x182>
 80053d0:	2b10      	cmp	r3, #16
 80053d2:	d008      	beq.n	80053e6 <UART_SetConfig+0x192>
 80053d4:	e00f      	b.n	80053f6 <UART_SetConfig+0x1a2>
 80053d6:	2300      	movs	r3, #0
 80053d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053dc:	e0ad      	b.n	800553a <UART_SetConfig+0x2e6>
 80053de:	2302      	movs	r3, #2
 80053e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053e4:	e0a9      	b.n	800553a <UART_SetConfig+0x2e6>
 80053e6:	2304      	movs	r3, #4
 80053e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ec:	e0a5      	b.n	800553a <UART_SetConfig+0x2e6>
 80053ee:	2308      	movs	r3, #8
 80053f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053f4:	e0a1      	b.n	800553a <UART_SetConfig+0x2e6>
 80053f6:	2310      	movs	r3, #16
 80053f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053fc:	e09d      	b.n	800553a <UART_SetConfig+0x2e6>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a4a      	ldr	r2, [pc, #296]	; (800552c <UART_SetConfig+0x2d8>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d125      	bne.n	8005454 <UART_SetConfig+0x200>
 8005408:	4b45      	ldr	r3, [pc, #276]	; (8005520 <UART_SetConfig+0x2cc>)
 800540a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800540e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005412:	2bc0      	cmp	r3, #192	; 0xc0
 8005414:	d016      	beq.n	8005444 <UART_SetConfig+0x1f0>
 8005416:	2bc0      	cmp	r3, #192	; 0xc0
 8005418:	d818      	bhi.n	800544c <UART_SetConfig+0x1f8>
 800541a:	2b80      	cmp	r3, #128	; 0x80
 800541c:	d00a      	beq.n	8005434 <UART_SetConfig+0x1e0>
 800541e:	2b80      	cmp	r3, #128	; 0x80
 8005420:	d814      	bhi.n	800544c <UART_SetConfig+0x1f8>
 8005422:	2b00      	cmp	r3, #0
 8005424:	d002      	beq.n	800542c <UART_SetConfig+0x1d8>
 8005426:	2b40      	cmp	r3, #64	; 0x40
 8005428:	d008      	beq.n	800543c <UART_SetConfig+0x1e8>
 800542a:	e00f      	b.n	800544c <UART_SetConfig+0x1f8>
 800542c:	2300      	movs	r3, #0
 800542e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005432:	e082      	b.n	800553a <UART_SetConfig+0x2e6>
 8005434:	2302      	movs	r3, #2
 8005436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800543a:	e07e      	b.n	800553a <UART_SetConfig+0x2e6>
 800543c:	2304      	movs	r3, #4
 800543e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005442:	e07a      	b.n	800553a <UART_SetConfig+0x2e6>
 8005444:	2308      	movs	r3, #8
 8005446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800544a:	e076      	b.n	800553a <UART_SetConfig+0x2e6>
 800544c:	2310      	movs	r3, #16
 800544e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005452:	e072      	b.n	800553a <UART_SetConfig+0x2e6>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a35      	ldr	r2, [pc, #212]	; (8005530 <UART_SetConfig+0x2dc>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d12a      	bne.n	80054b4 <UART_SetConfig+0x260>
 800545e:	4b30      	ldr	r3, [pc, #192]	; (8005520 <UART_SetConfig+0x2cc>)
 8005460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005464:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005468:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800546c:	d01a      	beq.n	80054a4 <UART_SetConfig+0x250>
 800546e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005472:	d81b      	bhi.n	80054ac <UART_SetConfig+0x258>
 8005474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005478:	d00c      	beq.n	8005494 <UART_SetConfig+0x240>
 800547a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800547e:	d815      	bhi.n	80054ac <UART_SetConfig+0x258>
 8005480:	2b00      	cmp	r3, #0
 8005482:	d003      	beq.n	800548c <UART_SetConfig+0x238>
 8005484:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005488:	d008      	beq.n	800549c <UART_SetConfig+0x248>
 800548a:	e00f      	b.n	80054ac <UART_SetConfig+0x258>
 800548c:	2300      	movs	r3, #0
 800548e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005492:	e052      	b.n	800553a <UART_SetConfig+0x2e6>
 8005494:	2302      	movs	r3, #2
 8005496:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800549a:	e04e      	b.n	800553a <UART_SetConfig+0x2e6>
 800549c:	2304      	movs	r3, #4
 800549e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054a2:	e04a      	b.n	800553a <UART_SetConfig+0x2e6>
 80054a4:	2308      	movs	r3, #8
 80054a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054aa:	e046      	b.n	800553a <UART_SetConfig+0x2e6>
 80054ac:	2310      	movs	r3, #16
 80054ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054b2:	e042      	b.n	800553a <UART_SetConfig+0x2e6>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a17      	ldr	r2, [pc, #92]	; (8005518 <UART_SetConfig+0x2c4>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d13a      	bne.n	8005534 <UART_SetConfig+0x2e0>
 80054be:	4b18      	ldr	r3, [pc, #96]	; (8005520 <UART_SetConfig+0x2cc>)
 80054c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80054c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054cc:	d01a      	beq.n	8005504 <UART_SetConfig+0x2b0>
 80054ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054d2:	d81b      	bhi.n	800550c <UART_SetConfig+0x2b8>
 80054d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054d8:	d00c      	beq.n	80054f4 <UART_SetConfig+0x2a0>
 80054da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054de:	d815      	bhi.n	800550c <UART_SetConfig+0x2b8>
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d003      	beq.n	80054ec <UART_SetConfig+0x298>
 80054e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054e8:	d008      	beq.n	80054fc <UART_SetConfig+0x2a8>
 80054ea:	e00f      	b.n	800550c <UART_SetConfig+0x2b8>
 80054ec:	2300      	movs	r3, #0
 80054ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054f2:	e022      	b.n	800553a <UART_SetConfig+0x2e6>
 80054f4:	2302      	movs	r3, #2
 80054f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054fa:	e01e      	b.n	800553a <UART_SetConfig+0x2e6>
 80054fc:	2304      	movs	r3, #4
 80054fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005502:	e01a      	b.n	800553a <UART_SetConfig+0x2e6>
 8005504:	2308      	movs	r3, #8
 8005506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800550a:	e016      	b.n	800553a <UART_SetConfig+0x2e6>
 800550c:	2310      	movs	r3, #16
 800550e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005512:	e012      	b.n	800553a <UART_SetConfig+0x2e6>
 8005514:	efff69f3 	.word	0xefff69f3
 8005518:	40008000 	.word	0x40008000
 800551c:	40013800 	.word	0x40013800
 8005520:	40021000 	.word	0x40021000
 8005524:	40004400 	.word	0x40004400
 8005528:	40004800 	.word	0x40004800
 800552c:	40004c00 	.word	0x40004c00
 8005530:	40005000 	.word	0x40005000
 8005534:	2310      	movs	r3, #16
 8005536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a9f      	ldr	r2, [pc, #636]	; (80057bc <UART_SetConfig+0x568>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d17a      	bne.n	800563a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005544:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005548:	2b08      	cmp	r3, #8
 800554a:	d824      	bhi.n	8005596 <UART_SetConfig+0x342>
 800554c:	a201      	add	r2, pc, #4	; (adr r2, 8005554 <UART_SetConfig+0x300>)
 800554e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005552:	bf00      	nop
 8005554:	08005579 	.word	0x08005579
 8005558:	08005597 	.word	0x08005597
 800555c:	08005581 	.word	0x08005581
 8005560:	08005597 	.word	0x08005597
 8005564:	08005587 	.word	0x08005587
 8005568:	08005597 	.word	0x08005597
 800556c:	08005597 	.word	0x08005597
 8005570:	08005597 	.word	0x08005597
 8005574:	0800558f 	.word	0x0800558f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005578:	f7fe ff30 	bl	80043dc <HAL_RCC_GetPCLK1Freq>
 800557c:	61f8      	str	r0, [r7, #28]
        break;
 800557e:	e010      	b.n	80055a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005580:	4b8f      	ldr	r3, [pc, #572]	; (80057c0 <UART_SetConfig+0x56c>)
 8005582:	61fb      	str	r3, [r7, #28]
        break;
 8005584:	e00d      	b.n	80055a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005586:	f7fe fe91 	bl	80042ac <HAL_RCC_GetSysClockFreq>
 800558a:	61f8      	str	r0, [r7, #28]
        break;
 800558c:	e009      	b.n	80055a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800558e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005592:	61fb      	str	r3, [r7, #28]
        break;
 8005594:	e005      	b.n	80055a2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005596:	2300      	movs	r3, #0
 8005598:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80055a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f000 80fb 	beq.w	80057a0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	4613      	mov	r3, r2
 80055b0:	005b      	lsls	r3, r3, #1
 80055b2:	4413      	add	r3, r2
 80055b4:	69fa      	ldr	r2, [r7, #28]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d305      	bcc.n	80055c6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055c0:	69fa      	ldr	r2, [r7, #28]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d903      	bls.n	80055ce <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80055cc:	e0e8      	b.n	80057a0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	2200      	movs	r2, #0
 80055d2:	461c      	mov	r4, r3
 80055d4:	4615      	mov	r5, r2
 80055d6:	f04f 0200 	mov.w	r2, #0
 80055da:	f04f 0300 	mov.w	r3, #0
 80055de:	022b      	lsls	r3, r5, #8
 80055e0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80055e4:	0222      	lsls	r2, r4, #8
 80055e6:	68f9      	ldr	r1, [r7, #12]
 80055e8:	6849      	ldr	r1, [r1, #4]
 80055ea:	0849      	lsrs	r1, r1, #1
 80055ec:	2000      	movs	r0, #0
 80055ee:	4688      	mov	r8, r1
 80055f0:	4681      	mov	r9, r0
 80055f2:	eb12 0a08 	adds.w	sl, r2, r8
 80055f6:	eb43 0b09 	adc.w	fp, r3, r9
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	603b      	str	r3, [r7, #0]
 8005602:	607a      	str	r2, [r7, #4]
 8005604:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005608:	4650      	mov	r0, sl
 800560a:	4659      	mov	r1, fp
 800560c:	f7fb fb3c 	bl	8000c88 <__aeabi_uldivmod>
 8005610:	4602      	mov	r2, r0
 8005612:	460b      	mov	r3, r1
 8005614:	4613      	mov	r3, r2
 8005616:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800561e:	d308      	bcc.n	8005632 <UART_SetConfig+0x3de>
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005626:	d204      	bcs.n	8005632 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	69ba      	ldr	r2, [r7, #24]
 800562e:	60da      	str	r2, [r3, #12]
 8005630:	e0b6      	b.n	80057a0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005638:	e0b2      	b.n	80057a0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	69db      	ldr	r3, [r3, #28]
 800563e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005642:	d15e      	bne.n	8005702 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005644:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005648:	2b08      	cmp	r3, #8
 800564a:	d828      	bhi.n	800569e <UART_SetConfig+0x44a>
 800564c:	a201      	add	r2, pc, #4	; (adr r2, 8005654 <UART_SetConfig+0x400>)
 800564e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005652:	bf00      	nop
 8005654:	08005679 	.word	0x08005679
 8005658:	08005681 	.word	0x08005681
 800565c:	08005689 	.word	0x08005689
 8005660:	0800569f 	.word	0x0800569f
 8005664:	0800568f 	.word	0x0800568f
 8005668:	0800569f 	.word	0x0800569f
 800566c:	0800569f 	.word	0x0800569f
 8005670:	0800569f 	.word	0x0800569f
 8005674:	08005697 	.word	0x08005697
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005678:	f7fe feb0 	bl	80043dc <HAL_RCC_GetPCLK1Freq>
 800567c:	61f8      	str	r0, [r7, #28]
        break;
 800567e:	e014      	b.n	80056aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005680:	f7fe fec2 	bl	8004408 <HAL_RCC_GetPCLK2Freq>
 8005684:	61f8      	str	r0, [r7, #28]
        break;
 8005686:	e010      	b.n	80056aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005688:	4b4d      	ldr	r3, [pc, #308]	; (80057c0 <UART_SetConfig+0x56c>)
 800568a:	61fb      	str	r3, [r7, #28]
        break;
 800568c:	e00d      	b.n	80056aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800568e:	f7fe fe0d 	bl	80042ac <HAL_RCC_GetSysClockFreq>
 8005692:	61f8      	str	r0, [r7, #28]
        break;
 8005694:	e009      	b.n	80056aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005696:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800569a:	61fb      	str	r3, [r7, #28]
        break;
 800569c:	e005      	b.n	80056aa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800569e:	2300      	movs	r3, #0
 80056a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80056a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d077      	beq.n	80057a0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	005a      	lsls	r2, r3, #1
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	085b      	lsrs	r3, r3, #1
 80056ba:	441a      	add	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	2b0f      	cmp	r3, #15
 80056ca:	d916      	bls.n	80056fa <UART_SetConfig+0x4a6>
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056d2:	d212      	bcs.n	80056fa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	f023 030f 	bic.w	r3, r3, #15
 80056dc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	085b      	lsrs	r3, r3, #1
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	f003 0307 	and.w	r3, r3, #7
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	8afb      	ldrh	r3, [r7, #22]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	8afa      	ldrh	r2, [r7, #22]
 80056f6:	60da      	str	r2, [r3, #12]
 80056f8:	e052      	b.n	80057a0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005700:	e04e      	b.n	80057a0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005702:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005706:	2b08      	cmp	r3, #8
 8005708:	d827      	bhi.n	800575a <UART_SetConfig+0x506>
 800570a:	a201      	add	r2, pc, #4	; (adr r2, 8005710 <UART_SetConfig+0x4bc>)
 800570c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005710:	08005735 	.word	0x08005735
 8005714:	0800573d 	.word	0x0800573d
 8005718:	08005745 	.word	0x08005745
 800571c:	0800575b 	.word	0x0800575b
 8005720:	0800574b 	.word	0x0800574b
 8005724:	0800575b 	.word	0x0800575b
 8005728:	0800575b 	.word	0x0800575b
 800572c:	0800575b 	.word	0x0800575b
 8005730:	08005753 	.word	0x08005753
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005734:	f7fe fe52 	bl	80043dc <HAL_RCC_GetPCLK1Freq>
 8005738:	61f8      	str	r0, [r7, #28]
        break;
 800573a:	e014      	b.n	8005766 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800573c:	f7fe fe64 	bl	8004408 <HAL_RCC_GetPCLK2Freq>
 8005740:	61f8      	str	r0, [r7, #28]
        break;
 8005742:	e010      	b.n	8005766 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005744:	4b1e      	ldr	r3, [pc, #120]	; (80057c0 <UART_SetConfig+0x56c>)
 8005746:	61fb      	str	r3, [r7, #28]
        break;
 8005748:	e00d      	b.n	8005766 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800574a:	f7fe fdaf 	bl	80042ac <HAL_RCC_GetSysClockFreq>
 800574e:	61f8      	str	r0, [r7, #28]
        break;
 8005750:	e009      	b.n	8005766 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005752:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005756:	61fb      	str	r3, [r7, #28]
        break;
 8005758:	e005      	b.n	8005766 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800575a:	2300      	movs	r3, #0
 800575c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005764:	bf00      	nop
    }

    if (pclk != 0U)
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d019      	beq.n	80057a0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	085a      	lsrs	r2, r3, #1
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	441a      	add	r2, r3
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	fbb2 f3f3 	udiv	r3, r2, r3
 800577e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	2b0f      	cmp	r3, #15
 8005784:	d909      	bls.n	800579a <UART_SetConfig+0x546>
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800578c:	d205      	bcs.n	800579a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	b29a      	uxth	r2, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	60da      	str	r2, [r3, #12]
 8005798:	e002      	b.n	80057a0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80057ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3728      	adds	r7, #40	; 0x28
 80057b4:	46bd      	mov	sp, r7
 80057b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057ba:	bf00      	nop
 80057bc:	40008000 	.word	0x40008000
 80057c0:	00f42400 	.word	0x00f42400

080057c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d0:	f003 0301 	and.w	r3, r3, #1
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00a      	beq.n	80057ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	430a      	orrs	r2, r1
 80057ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f2:	f003 0302 	and.w	r3, r3, #2
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00a      	beq.n	8005810 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	430a      	orrs	r2, r1
 800580e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005814:	f003 0304 	and.w	r3, r3, #4
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00a      	beq.n	8005832 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005836:	f003 0308 	and.w	r3, r3, #8
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00a      	beq.n	8005854 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	430a      	orrs	r2, r1
 8005852:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005858:	f003 0310 	and.w	r3, r3, #16
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00a      	beq.n	8005876 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	430a      	orrs	r2, r1
 8005874:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587a:	f003 0320 	and.w	r3, r3, #32
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00a      	beq.n	8005898 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	430a      	orrs	r2, r1
 8005896:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d01a      	beq.n	80058da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	430a      	orrs	r2, r1
 80058b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058c2:	d10a      	bne.n	80058da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	430a      	orrs	r2, r1
 80058d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00a      	beq.n	80058fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	430a      	orrs	r2, r1
 80058fa:	605a      	str	r2, [r3, #4]
  }
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b086      	sub	sp, #24
 800590c:	af02      	add	r7, sp, #8
 800590e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005918:	f7fc f8a6 	bl	8001a68 <HAL_GetTick>
 800591c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0308 	and.w	r3, r3, #8
 8005928:	2b08      	cmp	r3, #8
 800592a:	d10e      	bne.n	800594a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800592c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f82d 	bl	800599a <UART_WaitOnFlagUntilTimeout>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d001      	beq.n	800594a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e023      	b.n	8005992 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0304 	and.w	r3, r3, #4
 8005954:	2b04      	cmp	r3, #4
 8005956:	d10e      	bne.n	8005976 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005958:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800595c:	9300      	str	r3, [sp, #0]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f817 	bl	800599a <UART_WaitOnFlagUntilTimeout>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d001      	beq.n	8005976 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e00d      	b.n	8005992 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2220      	movs	r2, #32
 800597a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2220      	movs	r2, #32
 8005980:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b09c      	sub	sp, #112	; 0x70
 800599e:	af00      	add	r7, sp, #0
 80059a0:	60f8      	str	r0, [r7, #12]
 80059a2:	60b9      	str	r1, [r7, #8]
 80059a4:	603b      	str	r3, [r7, #0]
 80059a6:	4613      	mov	r3, r2
 80059a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059aa:	e0a5      	b.n	8005af8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b2:	f000 80a1 	beq.w	8005af8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059b6:	f7fc f857 	bl	8001a68 <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d302      	bcc.n	80059cc <UART_WaitOnFlagUntilTimeout+0x32>
 80059c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d13e      	bne.n	8005a4a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059d4:	e853 3f00 	ldrex	r3, [r3]
 80059d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80059da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059e0:	667b      	str	r3, [r7, #100]	; 0x64
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	461a      	mov	r2, r3
 80059e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059ec:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80059f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80059f2:	e841 2300 	strex	r3, r2, [r1]
 80059f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80059f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1e6      	bne.n	80059cc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	3308      	adds	r3, #8
 8005a04:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a08:	e853 3f00 	ldrex	r3, [r3]
 8005a0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a10:	f023 0301 	bic.w	r3, r3, #1
 8005a14:	663b      	str	r3, [r7, #96]	; 0x60
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	3308      	adds	r3, #8
 8005a1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a1e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005a20:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a26:	e841 2300 	strex	r3, r2, [r1]
 8005a2a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005a2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1e5      	bne.n	80059fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2220      	movs	r2, #32
 8005a36:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e067      	b.n	8005b1a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0304 	and.w	r3, r3, #4
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d04f      	beq.n	8005af8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a66:	d147      	bne.n	8005af8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a70:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7a:	e853 3f00 	ldrex	r3, [r3]
 8005a7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a82:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a90:	637b      	str	r3, [r7, #52]	; 0x34
 8005a92:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a98:	e841 2300 	strex	r3, r2, [r1]
 8005a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1e6      	bne.n	8005a72 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	3308      	adds	r3, #8
 8005aaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	e853 3f00 	ldrex	r3, [r3]
 8005ab2:	613b      	str	r3, [r7, #16]
   return(result);
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	f023 0301 	bic.w	r3, r3, #1
 8005aba:	66bb      	str	r3, [r7, #104]	; 0x68
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	3308      	adds	r3, #8
 8005ac2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005ac4:	623a      	str	r2, [r7, #32]
 8005ac6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac8:	69f9      	ldr	r1, [r7, #28]
 8005aca:	6a3a      	ldr	r2, [r7, #32]
 8005acc:	e841 2300 	strex	r3, r2, [r1]
 8005ad0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1e5      	bne.n	8005aa4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2220      	movs	r2, #32
 8005adc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2220      	movs	r2, #32
 8005ae2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e010      	b.n	8005b1a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	69da      	ldr	r2, [r3, #28]
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	4013      	ands	r3, r2
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	bf0c      	ite	eq
 8005b08:	2301      	moveq	r3, #1
 8005b0a:	2300      	movne	r3, #0
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	461a      	mov	r2, r3
 8005b10:	79fb      	ldrb	r3, [r7, #7]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	f43f af4a 	beq.w	80059ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3770      	adds	r7, #112	; 0x70
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8005b22:	b5b0      	push	{r4, r5, r7, lr}
 8005b24:	b08a      	sub	sp, #40	; 0x28
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	60f8      	str	r0, [r7, #12]
 8005b2a:	60b9      	str	r1, [r7, #8]
 8005b2c:	607a      	str	r2, [r7, #4]
 8005b2e:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8005b30:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8005b34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8005b38:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005b3c:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8005b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b40:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8005b42:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005b44:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8005b52:	f107 0310 	add.w	r3, r7, #16
 8005b56:	4618      	mov	r0, r3
 8005b58:	f000 f80e 	bl	8005b78 <Lcd_init>

	return lcd;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	461d      	mov	r5, r3
 8005b60:	f107 0410 	add.w	r4, r7, #16
 8005b64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b68:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005b6c:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	3728      	adds	r7, #40	; 0x28
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bdb0      	pop	{r4, r5, r7, pc}

08005b78 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	7d9b      	ldrb	r3, [r3, #22]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d10c      	bne.n	8005ba2 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8005b88:	2133      	movs	r1, #51	; 0x33
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 f81d 	bl	8005bca <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8005b90:	2132      	movs	r1, #50	; 0x32
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 f819 	bl	8005bca <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8005b98:	2128      	movs	r1, #40	; 0x28
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f815 	bl	8005bca <lcd_write_command>
 8005ba0:	e003      	b.n	8005baa <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8005ba2:	2138      	movs	r1, #56	; 0x38
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 f810 	bl	8005bca <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8005baa:	2101      	movs	r1, #1
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 f80c 	bl	8005bca <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8005bb2:	210c      	movs	r1, #12
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 f808 	bl	8005bca <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8005bba:	2106      	movs	r1, #6
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 f804 	bl	8005bca <lcd_write_command>
}
 8005bc2:	bf00      	nop
 8005bc4:	3708      	adds	r7, #8
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b082      	sub	sp, #8
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6898      	ldr	r0, [r3, #8]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	899b      	ldrh	r3, [r3, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	4619      	mov	r1, r3
 8005be2:	f7fd fe0b 	bl	80037fc <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	7d9b      	ldrb	r3, [r3, #22]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d111      	bne.n	8005c12 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8005bee:	78fb      	ldrb	r3, [r7, #3]
 8005bf0:	091b      	lsrs	r3, r3, #4
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	2204      	movs	r2, #4
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 f814 	bl	8005c26 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8005bfe:	78fb      	ldrb	r3, [r7, #3]
 8005c00:	f003 030f 	and.w	r3, r3, #15
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	2204      	movs	r2, #4
 8005c08:	4619      	mov	r1, r3
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f80b 	bl	8005c26 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8005c10:	e005      	b.n	8005c1e <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8005c12:	78fb      	ldrb	r3, [r7, #3]
 8005c14:	2208      	movs	r2, #8
 8005c16:	4619      	mov	r1, r3
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 f804 	bl	8005c26 <lcd_write>
}
 8005c1e:	bf00      	nop
 8005c20:	3708      	adds	r7, #8
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b084      	sub	sp, #16
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
 8005c2e:	460b      	mov	r3, r1
 8005c30:	70fb      	strb	r3, [r7, #3]
 8005c32:	4613      	mov	r3, r2
 8005c34:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8005c36:	2300      	movs	r3, #0
 8005c38:	73fb      	strb	r3, [r7, #15]
 8005c3a:	e019      	b.n	8005c70 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	7bfb      	ldrb	r3, [r7, #15]
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	4413      	add	r3, r2
 8005c46:	6818      	ldr	r0, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685a      	ldr	r2, [r3, #4]
 8005c4c:	7bfb      	ldrb	r3, [r7, #15]
 8005c4e:	005b      	lsls	r3, r3, #1
 8005c50:	4413      	add	r3, r2
 8005c52:	8819      	ldrh	r1, [r3, #0]
 8005c54:	78fa      	ldrb	r2, [r7, #3]
 8005c56:	7bfb      	ldrb	r3, [r7, #15]
 8005c58:	fa42 f303 	asr.w	r3, r2, r3
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	461a      	mov	r2, r3
 8005c66:	f7fd fdc9 	bl	80037fc <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8005c6a:	7bfb      	ldrb	r3, [r7, #15]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	73fb      	strb	r3, [r7, #15]
 8005c70:	7bfa      	ldrb	r2, [r7, #15]
 8005c72:	78bb      	ldrb	r3, [r7, #2]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d3e1      	bcc.n	8005c3c <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6918      	ldr	r0, [r3, #16]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	8a9b      	ldrh	r3, [r3, #20]
 8005c80:	2201      	movs	r2, #1
 8005c82:	4619      	mov	r1, r3
 8005c84:	f7fd fdba 	bl	80037fc <HAL_GPIO_WritePin>
	DELAY(1);
 8005c88:	2001      	movs	r0, #1
 8005c8a:	f7fb fef9 	bl	8001a80 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6918      	ldr	r0, [r3, #16]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	8a9b      	ldrh	r3, [r3, #20]
 8005c96:	2200      	movs	r2, #0
 8005c98:	4619      	mov	r1, r3
 8005c9a:	f7fd fdaf 	bl	80037fc <HAL_GPIO_WritePin>
}
 8005c9e:	bf00      	nop
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
	...

08005ca8 <__errno>:
 8005ca8:	4b01      	ldr	r3, [pc, #4]	; (8005cb0 <__errno+0x8>)
 8005caa:	6818      	ldr	r0, [r3, #0]
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	2000000c 	.word	0x2000000c

08005cb4 <__libc_init_array>:
 8005cb4:	b570      	push	{r4, r5, r6, lr}
 8005cb6:	4d0d      	ldr	r5, [pc, #52]	; (8005cec <__libc_init_array+0x38>)
 8005cb8:	4c0d      	ldr	r4, [pc, #52]	; (8005cf0 <__libc_init_array+0x3c>)
 8005cba:	1b64      	subs	r4, r4, r5
 8005cbc:	10a4      	asrs	r4, r4, #2
 8005cbe:	2600      	movs	r6, #0
 8005cc0:	42a6      	cmp	r6, r4
 8005cc2:	d109      	bne.n	8005cd8 <__libc_init_array+0x24>
 8005cc4:	4d0b      	ldr	r5, [pc, #44]	; (8005cf4 <__libc_init_array+0x40>)
 8005cc6:	4c0c      	ldr	r4, [pc, #48]	; (8005cf8 <__libc_init_array+0x44>)
 8005cc8:	f004 fc92 	bl	800a5f0 <_init>
 8005ccc:	1b64      	subs	r4, r4, r5
 8005cce:	10a4      	asrs	r4, r4, #2
 8005cd0:	2600      	movs	r6, #0
 8005cd2:	42a6      	cmp	r6, r4
 8005cd4:	d105      	bne.n	8005ce2 <__libc_init_array+0x2e>
 8005cd6:	bd70      	pop	{r4, r5, r6, pc}
 8005cd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cdc:	4798      	blx	r3
 8005cde:	3601      	adds	r6, #1
 8005ce0:	e7ee      	b.n	8005cc0 <__libc_init_array+0xc>
 8005ce2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ce6:	4798      	blx	r3
 8005ce8:	3601      	adds	r6, #1
 8005cea:	e7f2      	b.n	8005cd2 <__libc_init_array+0x1e>
 8005cec:	0800ab14 	.word	0x0800ab14
 8005cf0:	0800ab14 	.word	0x0800ab14
 8005cf4:	0800ab14 	.word	0x0800ab14
 8005cf8:	0800ab18 	.word	0x0800ab18

08005cfc <memset>:
 8005cfc:	4402      	add	r2, r0
 8005cfe:	4603      	mov	r3, r0
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d100      	bne.n	8005d06 <memset+0xa>
 8005d04:	4770      	bx	lr
 8005d06:	f803 1b01 	strb.w	r1, [r3], #1
 8005d0a:	e7f9      	b.n	8005d00 <memset+0x4>

08005d0c <__cvt>:
 8005d0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d10:	ec55 4b10 	vmov	r4, r5, d0
 8005d14:	2d00      	cmp	r5, #0
 8005d16:	460e      	mov	r6, r1
 8005d18:	4619      	mov	r1, r3
 8005d1a:	462b      	mov	r3, r5
 8005d1c:	bfbb      	ittet	lt
 8005d1e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005d22:	461d      	movlt	r5, r3
 8005d24:	2300      	movge	r3, #0
 8005d26:	232d      	movlt	r3, #45	; 0x2d
 8005d28:	700b      	strb	r3, [r1, #0]
 8005d2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d2c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005d30:	4691      	mov	r9, r2
 8005d32:	f023 0820 	bic.w	r8, r3, #32
 8005d36:	bfbc      	itt	lt
 8005d38:	4622      	movlt	r2, r4
 8005d3a:	4614      	movlt	r4, r2
 8005d3c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d40:	d005      	beq.n	8005d4e <__cvt+0x42>
 8005d42:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005d46:	d100      	bne.n	8005d4a <__cvt+0x3e>
 8005d48:	3601      	adds	r6, #1
 8005d4a:	2102      	movs	r1, #2
 8005d4c:	e000      	b.n	8005d50 <__cvt+0x44>
 8005d4e:	2103      	movs	r1, #3
 8005d50:	ab03      	add	r3, sp, #12
 8005d52:	9301      	str	r3, [sp, #4]
 8005d54:	ab02      	add	r3, sp, #8
 8005d56:	9300      	str	r3, [sp, #0]
 8005d58:	ec45 4b10 	vmov	d0, r4, r5
 8005d5c:	4653      	mov	r3, sl
 8005d5e:	4632      	mov	r2, r6
 8005d60:	f001 fdae 	bl	80078c0 <_dtoa_r>
 8005d64:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005d68:	4607      	mov	r7, r0
 8005d6a:	d102      	bne.n	8005d72 <__cvt+0x66>
 8005d6c:	f019 0f01 	tst.w	r9, #1
 8005d70:	d022      	beq.n	8005db8 <__cvt+0xac>
 8005d72:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d76:	eb07 0906 	add.w	r9, r7, r6
 8005d7a:	d110      	bne.n	8005d9e <__cvt+0x92>
 8005d7c:	783b      	ldrb	r3, [r7, #0]
 8005d7e:	2b30      	cmp	r3, #48	; 0x30
 8005d80:	d10a      	bne.n	8005d98 <__cvt+0x8c>
 8005d82:	2200      	movs	r2, #0
 8005d84:	2300      	movs	r3, #0
 8005d86:	4620      	mov	r0, r4
 8005d88:	4629      	mov	r1, r5
 8005d8a:	f7fa fe9d 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d8e:	b918      	cbnz	r0, 8005d98 <__cvt+0x8c>
 8005d90:	f1c6 0601 	rsb	r6, r6, #1
 8005d94:	f8ca 6000 	str.w	r6, [sl]
 8005d98:	f8da 3000 	ldr.w	r3, [sl]
 8005d9c:	4499      	add	r9, r3
 8005d9e:	2200      	movs	r2, #0
 8005da0:	2300      	movs	r3, #0
 8005da2:	4620      	mov	r0, r4
 8005da4:	4629      	mov	r1, r5
 8005da6:	f7fa fe8f 	bl	8000ac8 <__aeabi_dcmpeq>
 8005daa:	b108      	cbz	r0, 8005db0 <__cvt+0xa4>
 8005dac:	f8cd 900c 	str.w	r9, [sp, #12]
 8005db0:	2230      	movs	r2, #48	; 0x30
 8005db2:	9b03      	ldr	r3, [sp, #12]
 8005db4:	454b      	cmp	r3, r9
 8005db6:	d307      	bcc.n	8005dc8 <__cvt+0xbc>
 8005db8:	9b03      	ldr	r3, [sp, #12]
 8005dba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005dbc:	1bdb      	subs	r3, r3, r7
 8005dbe:	4638      	mov	r0, r7
 8005dc0:	6013      	str	r3, [r2, #0]
 8005dc2:	b004      	add	sp, #16
 8005dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dc8:	1c59      	adds	r1, r3, #1
 8005dca:	9103      	str	r1, [sp, #12]
 8005dcc:	701a      	strb	r2, [r3, #0]
 8005dce:	e7f0      	b.n	8005db2 <__cvt+0xa6>

08005dd0 <__exponent>:
 8005dd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2900      	cmp	r1, #0
 8005dd6:	bfb8      	it	lt
 8005dd8:	4249      	neglt	r1, r1
 8005dda:	f803 2b02 	strb.w	r2, [r3], #2
 8005dde:	bfb4      	ite	lt
 8005de0:	222d      	movlt	r2, #45	; 0x2d
 8005de2:	222b      	movge	r2, #43	; 0x2b
 8005de4:	2909      	cmp	r1, #9
 8005de6:	7042      	strb	r2, [r0, #1]
 8005de8:	dd2a      	ble.n	8005e40 <__exponent+0x70>
 8005dea:	f10d 0407 	add.w	r4, sp, #7
 8005dee:	46a4      	mov	ip, r4
 8005df0:	270a      	movs	r7, #10
 8005df2:	46a6      	mov	lr, r4
 8005df4:	460a      	mov	r2, r1
 8005df6:	fb91 f6f7 	sdiv	r6, r1, r7
 8005dfa:	fb07 1516 	mls	r5, r7, r6, r1
 8005dfe:	3530      	adds	r5, #48	; 0x30
 8005e00:	2a63      	cmp	r2, #99	; 0x63
 8005e02:	f104 34ff 	add.w	r4, r4, #4294967295
 8005e06:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005e0a:	4631      	mov	r1, r6
 8005e0c:	dcf1      	bgt.n	8005df2 <__exponent+0x22>
 8005e0e:	3130      	adds	r1, #48	; 0x30
 8005e10:	f1ae 0502 	sub.w	r5, lr, #2
 8005e14:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005e18:	1c44      	adds	r4, r0, #1
 8005e1a:	4629      	mov	r1, r5
 8005e1c:	4561      	cmp	r1, ip
 8005e1e:	d30a      	bcc.n	8005e36 <__exponent+0x66>
 8005e20:	f10d 0209 	add.w	r2, sp, #9
 8005e24:	eba2 020e 	sub.w	r2, r2, lr
 8005e28:	4565      	cmp	r5, ip
 8005e2a:	bf88      	it	hi
 8005e2c:	2200      	movhi	r2, #0
 8005e2e:	4413      	add	r3, r2
 8005e30:	1a18      	subs	r0, r3, r0
 8005e32:	b003      	add	sp, #12
 8005e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e3a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005e3e:	e7ed      	b.n	8005e1c <__exponent+0x4c>
 8005e40:	2330      	movs	r3, #48	; 0x30
 8005e42:	3130      	adds	r1, #48	; 0x30
 8005e44:	7083      	strb	r3, [r0, #2]
 8005e46:	70c1      	strb	r1, [r0, #3]
 8005e48:	1d03      	adds	r3, r0, #4
 8005e4a:	e7f1      	b.n	8005e30 <__exponent+0x60>

08005e4c <_printf_float>:
 8005e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e50:	ed2d 8b02 	vpush	{d8}
 8005e54:	b08d      	sub	sp, #52	; 0x34
 8005e56:	460c      	mov	r4, r1
 8005e58:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005e5c:	4616      	mov	r6, r2
 8005e5e:	461f      	mov	r7, r3
 8005e60:	4605      	mov	r5, r0
 8005e62:	f002 fe8b 	bl	8008b7c <_localeconv_r>
 8005e66:	f8d0 a000 	ldr.w	sl, [r0]
 8005e6a:	4650      	mov	r0, sl
 8005e6c:	f7fa f9b0 	bl	80001d0 <strlen>
 8005e70:	2300      	movs	r3, #0
 8005e72:	930a      	str	r3, [sp, #40]	; 0x28
 8005e74:	6823      	ldr	r3, [r4, #0]
 8005e76:	9305      	str	r3, [sp, #20]
 8005e78:	f8d8 3000 	ldr.w	r3, [r8]
 8005e7c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005e80:	3307      	adds	r3, #7
 8005e82:	f023 0307 	bic.w	r3, r3, #7
 8005e86:	f103 0208 	add.w	r2, r3, #8
 8005e8a:	f8c8 2000 	str.w	r2, [r8]
 8005e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e92:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005e96:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005e9a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005e9e:	9307      	str	r3, [sp, #28]
 8005ea0:	f8cd 8018 	str.w	r8, [sp, #24]
 8005ea4:	ee08 0a10 	vmov	s16, r0
 8005ea8:	4b9f      	ldr	r3, [pc, #636]	; (8006128 <_printf_float+0x2dc>)
 8005eaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005eae:	f04f 32ff 	mov.w	r2, #4294967295
 8005eb2:	f7fa fe3b 	bl	8000b2c <__aeabi_dcmpun>
 8005eb6:	bb88      	cbnz	r0, 8005f1c <_printf_float+0xd0>
 8005eb8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ebc:	4b9a      	ldr	r3, [pc, #616]	; (8006128 <_printf_float+0x2dc>)
 8005ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8005ec2:	f7fa fe15 	bl	8000af0 <__aeabi_dcmple>
 8005ec6:	bb48      	cbnz	r0, 8005f1c <_printf_float+0xd0>
 8005ec8:	2200      	movs	r2, #0
 8005eca:	2300      	movs	r3, #0
 8005ecc:	4640      	mov	r0, r8
 8005ece:	4649      	mov	r1, r9
 8005ed0:	f7fa fe04 	bl	8000adc <__aeabi_dcmplt>
 8005ed4:	b110      	cbz	r0, 8005edc <_printf_float+0x90>
 8005ed6:	232d      	movs	r3, #45	; 0x2d
 8005ed8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005edc:	4b93      	ldr	r3, [pc, #588]	; (800612c <_printf_float+0x2e0>)
 8005ede:	4894      	ldr	r0, [pc, #592]	; (8006130 <_printf_float+0x2e4>)
 8005ee0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005ee4:	bf94      	ite	ls
 8005ee6:	4698      	movls	r8, r3
 8005ee8:	4680      	movhi	r8, r0
 8005eea:	2303      	movs	r3, #3
 8005eec:	6123      	str	r3, [r4, #16]
 8005eee:	9b05      	ldr	r3, [sp, #20]
 8005ef0:	f023 0204 	bic.w	r2, r3, #4
 8005ef4:	6022      	str	r2, [r4, #0]
 8005ef6:	f04f 0900 	mov.w	r9, #0
 8005efa:	9700      	str	r7, [sp, #0]
 8005efc:	4633      	mov	r3, r6
 8005efe:	aa0b      	add	r2, sp, #44	; 0x2c
 8005f00:	4621      	mov	r1, r4
 8005f02:	4628      	mov	r0, r5
 8005f04:	f000 f9d8 	bl	80062b8 <_printf_common>
 8005f08:	3001      	adds	r0, #1
 8005f0a:	f040 8090 	bne.w	800602e <_printf_float+0x1e2>
 8005f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f12:	b00d      	add	sp, #52	; 0x34
 8005f14:	ecbd 8b02 	vpop	{d8}
 8005f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f1c:	4642      	mov	r2, r8
 8005f1e:	464b      	mov	r3, r9
 8005f20:	4640      	mov	r0, r8
 8005f22:	4649      	mov	r1, r9
 8005f24:	f7fa fe02 	bl	8000b2c <__aeabi_dcmpun>
 8005f28:	b140      	cbz	r0, 8005f3c <_printf_float+0xf0>
 8005f2a:	464b      	mov	r3, r9
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	bfbc      	itt	lt
 8005f30:	232d      	movlt	r3, #45	; 0x2d
 8005f32:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005f36:	487f      	ldr	r0, [pc, #508]	; (8006134 <_printf_float+0x2e8>)
 8005f38:	4b7f      	ldr	r3, [pc, #508]	; (8006138 <_printf_float+0x2ec>)
 8005f3a:	e7d1      	b.n	8005ee0 <_printf_float+0x94>
 8005f3c:	6863      	ldr	r3, [r4, #4]
 8005f3e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005f42:	9206      	str	r2, [sp, #24]
 8005f44:	1c5a      	adds	r2, r3, #1
 8005f46:	d13f      	bne.n	8005fc8 <_printf_float+0x17c>
 8005f48:	2306      	movs	r3, #6
 8005f4a:	6063      	str	r3, [r4, #4]
 8005f4c:	9b05      	ldr	r3, [sp, #20]
 8005f4e:	6861      	ldr	r1, [r4, #4]
 8005f50:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005f54:	2300      	movs	r3, #0
 8005f56:	9303      	str	r3, [sp, #12]
 8005f58:	ab0a      	add	r3, sp, #40	; 0x28
 8005f5a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005f5e:	ab09      	add	r3, sp, #36	; 0x24
 8005f60:	ec49 8b10 	vmov	d0, r8, r9
 8005f64:	9300      	str	r3, [sp, #0]
 8005f66:	6022      	str	r2, [r4, #0]
 8005f68:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005f6c:	4628      	mov	r0, r5
 8005f6e:	f7ff fecd 	bl	8005d0c <__cvt>
 8005f72:	9b06      	ldr	r3, [sp, #24]
 8005f74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f76:	2b47      	cmp	r3, #71	; 0x47
 8005f78:	4680      	mov	r8, r0
 8005f7a:	d108      	bne.n	8005f8e <_printf_float+0x142>
 8005f7c:	1cc8      	adds	r0, r1, #3
 8005f7e:	db02      	blt.n	8005f86 <_printf_float+0x13a>
 8005f80:	6863      	ldr	r3, [r4, #4]
 8005f82:	4299      	cmp	r1, r3
 8005f84:	dd41      	ble.n	800600a <_printf_float+0x1be>
 8005f86:	f1ab 0b02 	sub.w	fp, fp, #2
 8005f8a:	fa5f fb8b 	uxtb.w	fp, fp
 8005f8e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005f92:	d820      	bhi.n	8005fd6 <_printf_float+0x18a>
 8005f94:	3901      	subs	r1, #1
 8005f96:	465a      	mov	r2, fp
 8005f98:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005f9c:	9109      	str	r1, [sp, #36]	; 0x24
 8005f9e:	f7ff ff17 	bl	8005dd0 <__exponent>
 8005fa2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fa4:	1813      	adds	r3, r2, r0
 8005fa6:	2a01      	cmp	r2, #1
 8005fa8:	4681      	mov	r9, r0
 8005faa:	6123      	str	r3, [r4, #16]
 8005fac:	dc02      	bgt.n	8005fb4 <_printf_float+0x168>
 8005fae:	6822      	ldr	r2, [r4, #0]
 8005fb0:	07d2      	lsls	r2, r2, #31
 8005fb2:	d501      	bpl.n	8005fb8 <_printf_float+0x16c>
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	6123      	str	r3, [r4, #16]
 8005fb8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d09c      	beq.n	8005efa <_printf_float+0xae>
 8005fc0:	232d      	movs	r3, #45	; 0x2d
 8005fc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fc6:	e798      	b.n	8005efa <_printf_float+0xae>
 8005fc8:	9a06      	ldr	r2, [sp, #24]
 8005fca:	2a47      	cmp	r2, #71	; 0x47
 8005fcc:	d1be      	bne.n	8005f4c <_printf_float+0x100>
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d1bc      	bne.n	8005f4c <_printf_float+0x100>
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e7b9      	b.n	8005f4a <_printf_float+0xfe>
 8005fd6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005fda:	d118      	bne.n	800600e <_printf_float+0x1c2>
 8005fdc:	2900      	cmp	r1, #0
 8005fde:	6863      	ldr	r3, [r4, #4]
 8005fe0:	dd0b      	ble.n	8005ffa <_printf_float+0x1ae>
 8005fe2:	6121      	str	r1, [r4, #16]
 8005fe4:	b913      	cbnz	r3, 8005fec <_printf_float+0x1a0>
 8005fe6:	6822      	ldr	r2, [r4, #0]
 8005fe8:	07d0      	lsls	r0, r2, #31
 8005fea:	d502      	bpl.n	8005ff2 <_printf_float+0x1a6>
 8005fec:	3301      	adds	r3, #1
 8005fee:	440b      	add	r3, r1
 8005ff0:	6123      	str	r3, [r4, #16]
 8005ff2:	65a1      	str	r1, [r4, #88]	; 0x58
 8005ff4:	f04f 0900 	mov.w	r9, #0
 8005ff8:	e7de      	b.n	8005fb8 <_printf_float+0x16c>
 8005ffa:	b913      	cbnz	r3, 8006002 <_printf_float+0x1b6>
 8005ffc:	6822      	ldr	r2, [r4, #0]
 8005ffe:	07d2      	lsls	r2, r2, #31
 8006000:	d501      	bpl.n	8006006 <_printf_float+0x1ba>
 8006002:	3302      	adds	r3, #2
 8006004:	e7f4      	b.n	8005ff0 <_printf_float+0x1a4>
 8006006:	2301      	movs	r3, #1
 8006008:	e7f2      	b.n	8005ff0 <_printf_float+0x1a4>
 800600a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800600e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006010:	4299      	cmp	r1, r3
 8006012:	db05      	blt.n	8006020 <_printf_float+0x1d4>
 8006014:	6823      	ldr	r3, [r4, #0]
 8006016:	6121      	str	r1, [r4, #16]
 8006018:	07d8      	lsls	r0, r3, #31
 800601a:	d5ea      	bpl.n	8005ff2 <_printf_float+0x1a6>
 800601c:	1c4b      	adds	r3, r1, #1
 800601e:	e7e7      	b.n	8005ff0 <_printf_float+0x1a4>
 8006020:	2900      	cmp	r1, #0
 8006022:	bfd4      	ite	le
 8006024:	f1c1 0202 	rsble	r2, r1, #2
 8006028:	2201      	movgt	r2, #1
 800602a:	4413      	add	r3, r2
 800602c:	e7e0      	b.n	8005ff0 <_printf_float+0x1a4>
 800602e:	6823      	ldr	r3, [r4, #0]
 8006030:	055a      	lsls	r2, r3, #21
 8006032:	d407      	bmi.n	8006044 <_printf_float+0x1f8>
 8006034:	6923      	ldr	r3, [r4, #16]
 8006036:	4642      	mov	r2, r8
 8006038:	4631      	mov	r1, r6
 800603a:	4628      	mov	r0, r5
 800603c:	47b8      	blx	r7
 800603e:	3001      	adds	r0, #1
 8006040:	d12c      	bne.n	800609c <_printf_float+0x250>
 8006042:	e764      	b.n	8005f0e <_printf_float+0xc2>
 8006044:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006048:	f240 80e0 	bls.w	800620c <_printf_float+0x3c0>
 800604c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006050:	2200      	movs	r2, #0
 8006052:	2300      	movs	r3, #0
 8006054:	f7fa fd38 	bl	8000ac8 <__aeabi_dcmpeq>
 8006058:	2800      	cmp	r0, #0
 800605a:	d034      	beq.n	80060c6 <_printf_float+0x27a>
 800605c:	4a37      	ldr	r2, [pc, #220]	; (800613c <_printf_float+0x2f0>)
 800605e:	2301      	movs	r3, #1
 8006060:	4631      	mov	r1, r6
 8006062:	4628      	mov	r0, r5
 8006064:	47b8      	blx	r7
 8006066:	3001      	adds	r0, #1
 8006068:	f43f af51 	beq.w	8005f0e <_printf_float+0xc2>
 800606c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006070:	429a      	cmp	r2, r3
 8006072:	db02      	blt.n	800607a <_printf_float+0x22e>
 8006074:	6823      	ldr	r3, [r4, #0]
 8006076:	07d8      	lsls	r0, r3, #31
 8006078:	d510      	bpl.n	800609c <_printf_float+0x250>
 800607a:	ee18 3a10 	vmov	r3, s16
 800607e:	4652      	mov	r2, sl
 8006080:	4631      	mov	r1, r6
 8006082:	4628      	mov	r0, r5
 8006084:	47b8      	blx	r7
 8006086:	3001      	adds	r0, #1
 8006088:	f43f af41 	beq.w	8005f0e <_printf_float+0xc2>
 800608c:	f04f 0800 	mov.w	r8, #0
 8006090:	f104 091a 	add.w	r9, r4, #26
 8006094:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006096:	3b01      	subs	r3, #1
 8006098:	4543      	cmp	r3, r8
 800609a:	dc09      	bgt.n	80060b0 <_printf_float+0x264>
 800609c:	6823      	ldr	r3, [r4, #0]
 800609e:	079b      	lsls	r3, r3, #30
 80060a0:	f100 8105 	bmi.w	80062ae <_printf_float+0x462>
 80060a4:	68e0      	ldr	r0, [r4, #12]
 80060a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060a8:	4298      	cmp	r0, r3
 80060aa:	bfb8      	it	lt
 80060ac:	4618      	movlt	r0, r3
 80060ae:	e730      	b.n	8005f12 <_printf_float+0xc6>
 80060b0:	2301      	movs	r3, #1
 80060b2:	464a      	mov	r2, r9
 80060b4:	4631      	mov	r1, r6
 80060b6:	4628      	mov	r0, r5
 80060b8:	47b8      	blx	r7
 80060ba:	3001      	adds	r0, #1
 80060bc:	f43f af27 	beq.w	8005f0e <_printf_float+0xc2>
 80060c0:	f108 0801 	add.w	r8, r8, #1
 80060c4:	e7e6      	b.n	8006094 <_printf_float+0x248>
 80060c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	dc39      	bgt.n	8006140 <_printf_float+0x2f4>
 80060cc:	4a1b      	ldr	r2, [pc, #108]	; (800613c <_printf_float+0x2f0>)
 80060ce:	2301      	movs	r3, #1
 80060d0:	4631      	mov	r1, r6
 80060d2:	4628      	mov	r0, r5
 80060d4:	47b8      	blx	r7
 80060d6:	3001      	adds	r0, #1
 80060d8:	f43f af19 	beq.w	8005f0e <_printf_float+0xc2>
 80060dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060e0:	4313      	orrs	r3, r2
 80060e2:	d102      	bne.n	80060ea <_printf_float+0x29e>
 80060e4:	6823      	ldr	r3, [r4, #0]
 80060e6:	07d9      	lsls	r1, r3, #31
 80060e8:	d5d8      	bpl.n	800609c <_printf_float+0x250>
 80060ea:	ee18 3a10 	vmov	r3, s16
 80060ee:	4652      	mov	r2, sl
 80060f0:	4631      	mov	r1, r6
 80060f2:	4628      	mov	r0, r5
 80060f4:	47b8      	blx	r7
 80060f6:	3001      	adds	r0, #1
 80060f8:	f43f af09 	beq.w	8005f0e <_printf_float+0xc2>
 80060fc:	f04f 0900 	mov.w	r9, #0
 8006100:	f104 0a1a 	add.w	sl, r4, #26
 8006104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006106:	425b      	negs	r3, r3
 8006108:	454b      	cmp	r3, r9
 800610a:	dc01      	bgt.n	8006110 <_printf_float+0x2c4>
 800610c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800610e:	e792      	b.n	8006036 <_printf_float+0x1ea>
 8006110:	2301      	movs	r3, #1
 8006112:	4652      	mov	r2, sl
 8006114:	4631      	mov	r1, r6
 8006116:	4628      	mov	r0, r5
 8006118:	47b8      	blx	r7
 800611a:	3001      	adds	r0, #1
 800611c:	f43f aef7 	beq.w	8005f0e <_printf_float+0xc2>
 8006120:	f109 0901 	add.w	r9, r9, #1
 8006124:	e7ee      	b.n	8006104 <_printf_float+0x2b8>
 8006126:	bf00      	nop
 8006128:	7fefffff 	.word	0x7fefffff
 800612c:	0800a66c 	.word	0x0800a66c
 8006130:	0800a670 	.word	0x0800a670
 8006134:	0800a678 	.word	0x0800a678
 8006138:	0800a674 	.word	0x0800a674
 800613c:	0800a67c 	.word	0x0800a67c
 8006140:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006142:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006144:	429a      	cmp	r2, r3
 8006146:	bfa8      	it	ge
 8006148:	461a      	movge	r2, r3
 800614a:	2a00      	cmp	r2, #0
 800614c:	4691      	mov	r9, r2
 800614e:	dc37      	bgt.n	80061c0 <_printf_float+0x374>
 8006150:	f04f 0b00 	mov.w	fp, #0
 8006154:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006158:	f104 021a 	add.w	r2, r4, #26
 800615c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800615e:	9305      	str	r3, [sp, #20]
 8006160:	eba3 0309 	sub.w	r3, r3, r9
 8006164:	455b      	cmp	r3, fp
 8006166:	dc33      	bgt.n	80061d0 <_printf_float+0x384>
 8006168:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800616c:	429a      	cmp	r2, r3
 800616e:	db3b      	blt.n	80061e8 <_printf_float+0x39c>
 8006170:	6823      	ldr	r3, [r4, #0]
 8006172:	07da      	lsls	r2, r3, #31
 8006174:	d438      	bmi.n	80061e8 <_printf_float+0x39c>
 8006176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006178:	9a05      	ldr	r2, [sp, #20]
 800617a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800617c:	1a9a      	subs	r2, r3, r2
 800617e:	eba3 0901 	sub.w	r9, r3, r1
 8006182:	4591      	cmp	r9, r2
 8006184:	bfa8      	it	ge
 8006186:	4691      	movge	r9, r2
 8006188:	f1b9 0f00 	cmp.w	r9, #0
 800618c:	dc35      	bgt.n	80061fa <_printf_float+0x3ae>
 800618e:	f04f 0800 	mov.w	r8, #0
 8006192:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006196:	f104 0a1a 	add.w	sl, r4, #26
 800619a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800619e:	1a9b      	subs	r3, r3, r2
 80061a0:	eba3 0309 	sub.w	r3, r3, r9
 80061a4:	4543      	cmp	r3, r8
 80061a6:	f77f af79 	ble.w	800609c <_printf_float+0x250>
 80061aa:	2301      	movs	r3, #1
 80061ac:	4652      	mov	r2, sl
 80061ae:	4631      	mov	r1, r6
 80061b0:	4628      	mov	r0, r5
 80061b2:	47b8      	blx	r7
 80061b4:	3001      	adds	r0, #1
 80061b6:	f43f aeaa 	beq.w	8005f0e <_printf_float+0xc2>
 80061ba:	f108 0801 	add.w	r8, r8, #1
 80061be:	e7ec      	b.n	800619a <_printf_float+0x34e>
 80061c0:	4613      	mov	r3, r2
 80061c2:	4631      	mov	r1, r6
 80061c4:	4642      	mov	r2, r8
 80061c6:	4628      	mov	r0, r5
 80061c8:	47b8      	blx	r7
 80061ca:	3001      	adds	r0, #1
 80061cc:	d1c0      	bne.n	8006150 <_printf_float+0x304>
 80061ce:	e69e      	b.n	8005f0e <_printf_float+0xc2>
 80061d0:	2301      	movs	r3, #1
 80061d2:	4631      	mov	r1, r6
 80061d4:	4628      	mov	r0, r5
 80061d6:	9205      	str	r2, [sp, #20]
 80061d8:	47b8      	blx	r7
 80061da:	3001      	adds	r0, #1
 80061dc:	f43f ae97 	beq.w	8005f0e <_printf_float+0xc2>
 80061e0:	9a05      	ldr	r2, [sp, #20]
 80061e2:	f10b 0b01 	add.w	fp, fp, #1
 80061e6:	e7b9      	b.n	800615c <_printf_float+0x310>
 80061e8:	ee18 3a10 	vmov	r3, s16
 80061ec:	4652      	mov	r2, sl
 80061ee:	4631      	mov	r1, r6
 80061f0:	4628      	mov	r0, r5
 80061f2:	47b8      	blx	r7
 80061f4:	3001      	adds	r0, #1
 80061f6:	d1be      	bne.n	8006176 <_printf_float+0x32a>
 80061f8:	e689      	b.n	8005f0e <_printf_float+0xc2>
 80061fa:	9a05      	ldr	r2, [sp, #20]
 80061fc:	464b      	mov	r3, r9
 80061fe:	4442      	add	r2, r8
 8006200:	4631      	mov	r1, r6
 8006202:	4628      	mov	r0, r5
 8006204:	47b8      	blx	r7
 8006206:	3001      	adds	r0, #1
 8006208:	d1c1      	bne.n	800618e <_printf_float+0x342>
 800620a:	e680      	b.n	8005f0e <_printf_float+0xc2>
 800620c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800620e:	2a01      	cmp	r2, #1
 8006210:	dc01      	bgt.n	8006216 <_printf_float+0x3ca>
 8006212:	07db      	lsls	r3, r3, #31
 8006214:	d538      	bpl.n	8006288 <_printf_float+0x43c>
 8006216:	2301      	movs	r3, #1
 8006218:	4642      	mov	r2, r8
 800621a:	4631      	mov	r1, r6
 800621c:	4628      	mov	r0, r5
 800621e:	47b8      	blx	r7
 8006220:	3001      	adds	r0, #1
 8006222:	f43f ae74 	beq.w	8005f0e <_printf_float+0xc2>
 8006226:	ee18 3a10 	vmov	r3, s16
 800622a:	4652      	mov	r2, sl
 800622c:	4631      	mov	r1, r6
 800622e:	4628      	mov	r0, r5
 8006230:	47b8      	blx	r7
 8006232:	3001      	adds	r0, #1
 8006234:	f43f ae6b 	beq.w	8005f0e <_printf_float+0xc2>
 8006238:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800623c:	2200      	movs	r2, #0
 800623e:	2300      	movs	r3, #0
 8006240:	f7fa fc42 	bl	8000ac8 <__aeabi_dcmpeq>
 8006244:	b9d8      	cbnz	r0, 800627e <_printf_float+0x432>
 8006246:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006248:	f108 0201 	add.w	r2, r8, #1
 800624c:	3b01      	subs	r3, #1
 800624e:	4631      	mov	r1, r6
 8006250:	4628      	mov	r0, r5
 8006252:	47b8      	blx	r7
 8006254:	3001      	adds	r0, #1
 8006256:	d10e      	bne.n	8006276 <_printf_float+0x42a>
 8006258:	e659      	b.n	8005f0e <_printf_float+0xc2>
 800625a:	2301      	movs	r3, #1
 800625c:	4652      	mov	r2, sl
 800625e:	4631      	mov	r1, r6
 8006260:	4628      	mov	r0, r5
 8006262:	47b8      	blx	r7
 8006264:	3001      	adds	r0, #1
 8006266:	f43f ae52 	beq.w	8005f0e <_printf_float+0xc2>
 800626a:	f108 0801 	add.w	r8, r8, #1
 800626e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006270:	3b01      	subs	r3, #1
 8006272:	4543      	cmp	r3, r8
 8006274:	dcf1      	bgt.n	800625a <_printf_float+0x40e>
 8006276:	464b      	mov	r3, r9
 8006278:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800627c:	e6dc      	b.n	8006038 <_printf_float+0x1ec>
 800627e:	f04f 0800 	mov.w	r8, #0
 8006282:	f104 0a1a 	add.w	sl, r4, #26
 8006286:	e7f2      	b.n	800626e <_printf_float+0x422>
 8006288:	2301      	movs	r3, #1
 800628a:	4642      	mov	r2, r8
 800628c:	e7df      	b.n	800624e <_printf_float+0x402>
 800628e:	2301      	movs	r3, #1
 8006290:	464a      	mov	r2, r9
 8006292:	4631      	mov	r1, r6
 8006294:	4628      	mov	r0, r5
 8006296:	47b8      	blx	r7
 8006298:	3001      	adds	r0, #1
 800629a:	f43f ae38 	beq.w	8005f0e <_printf_float+0xc2>
 800629e:	f108 0801 	add.w	r8, r8, #1
 80062a2:	68e3      	ldr	r3, [r4, #12]
 80062a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80062a6:	1a5b      	subs	r3, r3, r1
 80062a8:	4543      	cmp	r3, r8
 80062aa:	dcf0      	bgt.n	800628e <_printf_float+0x442>
 80062ac:	e6fa      	b.n	80060a4 <_printf_float+0x258>
 80062ae:	f04f 0800 	mov.w	r8, #0
 80062b2:	f104 0919 	add.w	r9, r4, #25
 80062b6:	e7f4      	b.n	80062a2 <_printf_float+0x456>

080062b8 <_printf_common>:
 80062b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062bc:	4616      	mov	r6, r2
 80062be:	4699      	mov	r9, r3
 80062c0:	688a      	ldr	r2, [r1, #8]
 80062c2:	690b      	ldr	r3, [r1, #16]
 80062c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062c8:	4293      	cmp	r3, r2
 80062ca:	bfb8      	it	lt
 80062cc:	4613      	movlt	r3, r2
 80062ce:	6033      	str	r3, [r6, #0]
 80062d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062d4:	4607      	mov	r7, r0
 80062d6:	460c      	mov	r4, r1
 80062d8:	b10a      	cbz	r2, 80062de <_printf_common+0x26>
 80062da:	3301      	adds	r3, #1
 80062dc:	6033      	str	r3, [r6, #0]
 80062de:	6823      	ldr	r3, [r4, #0]
 80062e0:	0699      	lsls	r1, r3, #26
 80062e2:	bf42      	ittt	mi
 80062e4:	6833      	ldrmi	r3, [r6, #0]
 80062e6:	3302      	addmi	r3, #2
 80062e8:	6033      	strmi	r3, [r6, #0]
 80062ea:	6825      	ldr	r5, [r4, #0]
 80062ec:	f015 0506 	ands.w	r5, r5, #6
 80062f0:	d106      	bne.n	8006300 <_printf_common+0x48>
 80062f2:	f104 0a19 	add.w	sl, r4, #25
 80062f6:	68e3      	ldr	r3, [r4, #12]
 80062f8:	6832      	ldr	r2, [r6, #0]
 80062fa:	1a9b      	subs	r3, r3, r2
 80062fc:	42ab      	cmp	r3, r5
 80062fe:	dc26      	bgt.n	800634e <_printf_common+0x96>
 8006300:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006304:	1e13      	subs	r3, r2, #0
 8006306:	6822      	ldr	r2, [r4, #0]
 8006308:	bf18      	it	ne
 800630a:	2301      	movne	r3, #1
 800630c:	0692      	lsls	r2, r2, #26
 800630e:	d42b      	bmi.n	8006368 <_printf_common+0xb0>
 8006310:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006314:	4649      	mov	r1, r9
 8006316:	4638      	mov	r0, r7
 8006318:	47c0      	blx	r8
 800631a:	3001      	adds	r0, #1
 800631c:	d01e      	beq.n	800635c <_printf_common+0xa4>
 800631e:	6823      	ldr	r3, [r4, #0]
 8006320:	68e5      	ldr	r5, [r4, #12]
 8006322:	6832      	ldr	r2, [r6, #0]
 8006324:	f003 0306 	and.w	r3, r3, #6
 8006328:	2b04      	cmp	r3, #4
 800632a:	bf08      	it	eq
 800632c:	1aad      	subeq	r5, r5, r2
 800632e:	68a3      	ldr	r3, [r4, #8]
 8006330:	6922      	ldr	r2, [r4, #16]
 8006332:	bf0c      	ite	eq
 8006334:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006338:	2500      	movne	r5, #0
 800633a:	4293      	cmp	r3, r2
 800633c:	bfc4      	itt	gt
 800633e:	1a9b      	subgt	r3, r3, r2
 8006340:	18ed      	addgt	r5, r5, r3
 8006342:	2600      	movs	r6, #0
 8006344:	341a      	adds	r4, #26
 8006346:	42b5      	cmp	r5, r6
 8006348:	d11a      	bne.n	8006380 <_printf_common+0xc8>
 800634a:	2000      	movs	r0, #0
 800634c:	e008      	b.n	8006360 <_printf_common+0xa8>
 800634e:	2301      	movs	r3, #1
 8006350:	4652      	mov	r2, sl
 8006352:	4649      	mov	r1, r9
 8006354:	4638      	mov	r0, r7
 8006356:	47c0      	blx	r8
 8006358:	3001      	adds	r0, #1
 800635a:	d103      	bne.n	8006364 <_printf_common+0xac>
 800635c:	f04f 30ff 	mov.w	r0, #4294967295
 8006360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006364:	3501      	adds	r5, #1
 8006366:	e7c6      	b.n	80062f6 <_printf_common+0x3e>
 8006368:	18e1      	adds	r1, r4, r3
 800636a:	1c5a      	adds	r2, r3, #1
 800636c:	2030      	movs	r0, #48	; 0x30
 800636e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006372:	4422      	add	r2, r4
 8006374:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006378:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800637c:	3302      	adds	r3, #2
 800637e:	e7c7      	b.n	8006310 <_printf_common+0x58>
 8006380:	2301      	movs	r3, #1
 8006382:	4622      	mov	r2, r4
 8006384:	4649      	mov	r1, r9
 8006386:	4638      	mov	r0, r7
 8006388:	47c0      	blx	r8
 800638a:	3001      	adds	r0, #1
 800638c:	d0e6      	beq.n	800635c <_printf_common+0xa4>
 800638e:	3601      	adds	r6, #1
 8006390:	e7d9      	b.n	8006346 <_printf_common+0x8e>
	...

08006394 <_printf_i>:
 8006394:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006398:	7e0f      	ldrb	r7, [r1, #24]
 800639a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800639c:	2f78      	cmp	r7, #120	; 0x78
 800639e:	4691      	mov	r9, r2
 80063a0:	4680      	mov	r8, r0
 80063a2:	460c      	mov	r4, r1
 80063a4:	469a      	mov	sl, r3
 80063a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80063aa:	d807      	bhi.n	80063bc <_printf_i+0x28>
 80063ac:	2f62      	cmp	r7, #98	; 0x62
 80063ae:	d80a      	bhi.n	80063c6 <_printf_i+0x32>
 80063b0:	2f00      	cmp	r7, #0
 80063b2:	f000 80d8 	beq.w	8006566 <_printf_i+0x1d2>
 80063b6:	2f58      	cmp	r7, #88	; 0x58
 80063b8:	f000 80a3 	beq.w	8006502 <_printf_i+0x16e>
 80063bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80063c4:	e03a      	b.n	800643c <_printf_i+0xa8>
 80063c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80063ca:	2b15      	cmp	r3, #21
 80063cc:	d8f6      	bhi.n	80063bc <_printf_i+0x28>
 80063ce:	a101      	add	r1, pc, #4	; (adr r1, 80063d4 <_printf_i+0x40>)
 80063d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063d4:	0800642d 	.word	0x0800642d
 80063d8:	08006441 	.word	0x08006441
 80063dc:	080063bd 	.word	0x080063bd
 80063e0:	080063bd 	.word	0x080063bd
 80063e4:	080063bd 	.word	0x080063bd
 80063e8:	080063bd 	.word	0x080063bd
 80063ec:	08006441 	.word	0x08006441
 80063f0:	080063bd 	.word	0x080063bd
 80063f4:	080063bd 	.word	0x080063bd
 80063f8:	080063bd 	.word	0x080063bd
 80063fc:	080063bd 	.word	0x080063bd
 8006400:	0800654d 	.word	0x0800654d
 8006404:	08006471 	.word	0x08006471
 8006408:	0800652f 	.word	0x0800652f
 800640c:	080063bd 	.word	0x080063bd
 8006410:	080063bd 	.word	0x080063bd
 8006414:	0800656f 	.word	0x0800656f
 8006418:	080063bd 	.word	0x080063bd
 800641c:	08006471 	.word	0x08006471
 8006420:	080063bd 	.word	0x080063bd
 8006424:	080063bd 	.word	0x080063bd
 8006428:	08006537 	.word	0x08006537
 800642c:	682b      	ldr	r3, [r5, #0]
 800642e:	1d1a      	adds	r2, r3, #4
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	602a      	str	r2, [r5, #0]
 8006434:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006438:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800643c:	2301      	movs	r3, #1
 800643e:	e0a3      	b.n	8006588 <_printf_i+0x1f4>
 8006440:	6820      	ldr	r0, [r4, #0]
 8006442:	6829      	ldr	r1, [r5, #0]
 8006444:	0606      	lsls	r6, r0, #24
 8006446:	f101 0304 	add.w	r3, r1, #4
 800644a:	d50a      	bpl.n	8006462 <_printf_i+0xce>
 800644c:	680e      	ldr	r6, [r1, #0]
 800644e:	602b      	str	r3, [r5, #0]
 8006450:	2e00      	cmp	r6, #0
 8006452:	da03      	bge.n	800645c <_printf_i+0xc8>
 8006454:	232d      	movs	r3, #45	; 0x2d
 8006456:	4276      	negs	r6, r6
 8006458:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800645c:	485e      	ldr	r0, [pc, #376]	; (80065d8 <_printf_i+0x244>)
 800645e:	230a      	movs	r3, #10
 8006460:	e019      	b.n	8006496 <_printf_i+0x102>
 8006462:	680e      	ldr	r6, [r1, #0]
 8006464:	602b      	str	r3, [r5, #0]
 8006466:	f010 0f40 	tst.w	r0, #64	; 0x40
 800646a:	bf18      	it	ne
 800646c:	b236      	sxthne	r6, r6
 800646e:	e7ef      	b.n	8006450 <_printf_i+0xbc>
 8006470:	682b      	ldr	r3, [r5, #0]
 8006472:	6820      	ldr	r0, [r4, #0]
 8006474:	1d19      	adds	r1, r3, #4
 8006476:	6029      	str	r1, [r5, #0]
 8006478:	0601      	lsls	r1, r0, #24
 800647a:	d501      	bpl.n	8006480 <_printf_i+0xec>
 800647c:	681e      	ldr	r6, [r3, #0]
 800647e:	e002      	b.n	8006486 <_printf_i+0xf2>
 8006480:	0646      	lsls	r6, r0, #25
 8006482:	d5fb      	bpl.n	800647c <_printf_i+0xe8>
 8006484:	881e      	ldrh	r6, [r3, #0]
 8006486:	4854      	ldr	r0, [pc, #336]	; (80065d8 <_printf_i+0x244>)
 8006488:	2f6f      	cmp	r7, #111	; 0x6f
 800648a:	bf0c      	ite	eq
 800648c:	2308      	moveq	r3, #8
 800648e:	230a      	movne	r3, #10
 8006490:	2100      	movs	r1, #0
 8006492:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006496:	6865      	ldr	r5, [r4, #4]
 8006498:	60a5      	str	r5, [r4, #8]
 800649a:	2d00      	cmp	r5, #0
 800649c:	bfa2      	ittt	ge
 800649e:	6821      	ldrge	r1, [r4, #0]
 80064a0:	f021 0104 	bicge.w	r1, r1, #4
 80064a4:	6021      	strge	r1, [r4, #0]
 80064a6:	b90e      	cbnz	r6, 80064ac <_printf_i+0x118>
 80064a8:	2d00      	cmp	r5, #0
 80064aa:	d04d      	beq.n	8006548 <_printf_i+0x1b4>
 80064ac:	4615      	mov	r5, r2
 80064ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80064b2:	fb03 6711 	mls	r7, r3, r1, r6
 80064b6:	5dc7      	ldrb	r7, [r0, r7]
 80064b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80064bc:	4637      	mov	r7, r6
 80064be:	42bb      	cmp	r3, r7
 80064c0:	460e      	mov	r6, r1
 80064c2:	d9f4      	bls.n	80064ae <_printf_i+0x11a>
 80064c4:	2b08      	cmp	r3, #8
 80064c6:	d10b      	bne.n	80064e0 <_printf_i+0x14c>
 80064c8:	6823      	ldr	r3, [r4, #0]
 80064ca:	07de      	lsls	r6, r3, #31
 80064cc:	d508      	bpl.n	80064e0 <_printf_i+0x14c>
 80064ce:	6923      	ldr	r3, [r4, #16]
 80064d0:	6861      	ldr	r1, [r4, #4]
 80064d2:	4299      	cmp	r1, r3
 80064d4:	bfde      	ittt	le
 80064d6:	2330      	movle	r3, #48	; 0x30
 80064d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80064e0:	1b52      	subs	r2, r2, r5
 80064e2:	6122      	str	r2, [r4, #16]
 80064e4:	f8cd a000 	str.w	sl, [sp]
 80064e8:	464b      	mov	r3, r9
 80064ea:	aa03      	add	r2, sp, #12
 80064ec:	4621      	mov	r1, r4
 80064ee:	4640      	mov	r0, r8
 80064f0:	f7ff fee2 	bl	80062b8 <_printf_common>
 80064f4:	3001      	adds	r0, #1
 80064f6:	d14c      	bne.n	8006592 <_printf_i+0x1fe>
 80064f8:	f04f 30ff 	mov.w	r0, #4294967295
 80064fc:	b004      	add	sp, #16
 80064fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006502:	4835      	ldr	r0, [pc, #212]	; (80065d8 <_printf_i+0x244>)
 8006504:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006508:	6829      	ldr	r1, [r5, #0]
 800650a:	6823      	ldr	r3, [r4, #0]
 800650c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006510:	6029      	str	r1, [r5, #0]
 8006512:	061d      	lsls	r5, r3, #24
 8006514:	d514      	bpl.n	8006540 <_printf_i+0x1ac>
 8006516:	07df      	lsls	r7, r3, #31
 8006518:	bf44      	itt	mi
 800651a:	f043 0320 	orrmi.w	r3, r3, #32
 800651e:	6023      	strmi	r3, [r4, #0]
 8006520:	b91e      	cbnz	r6, 800652a <_printf_i+0x196>
 8006522:	6823      	ldr	r3, [r4, #0]
 8006524:	f023 0320 	bic.w	r3, r3, #32
 8006528:	6023      	str	r3, [r4, #0]
 800652a:	2310      	movs	r3, #16
 800652c:	e7b0      	b.n	8006490 <_printf_i+0xfc>
 800652e:	6823      	ldr	r3, [r4, #0]
 8006530:	f043 0320 	orr.w	r3, r3, #32
 8006534:	6023      	str	r3, [r4, #0]
 8006536:	2378      	movs	r3, #120	; 0x78
 8006538:	4828      	ldr	r0, [pc, #160]	; (80065dc <_printf_i+0x248>)
 800653a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800653e:	e7e3      	b.n	8006508 <_printf_i+0x174>
 8006540:	0659      	lsls	r1, r3, #25
 8006542:	bf48      	it	mi
 8006544:	b2b6      	uxthmi	r6, r6
 8006546:	e7e6      	b.n	8006516 <_printf_i+0x182>
 8006548:	4615      	mov	r5, r2
 800654a:	e7bb      	b.n	80064c4 <_printf_i+0x130>
 800654c:	682b      	ldr	r3, [r5, #0]
 800654e:	6826      	ldr	r6, [r4, #0]
 8006550:	6961      	ldr	r1, [r4, #20]
 8006552:	1d18      	adds	r0, r3, #4
 8006554:	6028      	str	r0, [r5, #0]
 8006556:	0635      	lsls	r5, r6, #24
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	d501      	bpl.n	8006560 <_printf_i+0x1cc>
 800655c:	6019      	str	r1, [r3, #0]
 800655e:	e002      	b.n	8006566 <_printf_i+0x1d2>
 8006560:	0670      	lsls	r0, r6, #25
 8006562:	d5fb      	bpl.n	800655c <_printf_i+0x1c8>
 8006564:	8019      	strh	r1, [r3, #0]
 8006566:	2300      	movs	r3, #0
 8006568:	6123      	str	r3, [r4, #16]
 800656a:	4615      	mov	r5, r2
 800656c:	e7ba      	b.n	80064e4 <_printf_i+0x150>
 800656e:	682b      	ldr	r3, [r5, #0]
 8006570:	1d1a      	adds	r2, r3, #4
 8006572:	602a      	str	r2, [r5, #0]
 8006574:	681d      	ldr	r5, [r3, #0]
 8006576:	6862      	ldr	r2, [r4, #4]
 8006578:	2100      	movs	r1, #0
 800657a:	4628      	mov	r0, r5
 800657c:	f7f9 fe30 	bl	80001e0 <memchr>
 8006580:	b108      	cbz	r0, 8006586 <_printf_i+0x1f2>
 8006582:	1b40      	subs	r0, r0, r5
 8006584:	6060      	str	r0, [r4, #4]
 8006586:	6863      	ldr	r3, [r4, #4]
 8006588:	6123      	str	r3, [r4, #16]
 800658a:	2300      	movs	r3, #0
 800658c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006590:	e7a8      	b.n	80064e4 <_printf_i+0x150>
 8006592:	6923      	ldr	r3, [r4, #16]
 8006594:	462a      	mov	r2, r5
 8006596:	4649      	mov	r1, r9
 8006598:	4640      	mov	r0, r8
 800659a:	47d0      	blx	sl
 800659c:	3001      	adds	r0, #1
 800659e:	d0ab      	beq.n	80064f8 <_printf_i+0x164>
 80065a0:	6823      	ldr	r3, [r4, #0]
 80065a2:	079b      	lsls	r3, r3, #30
 80065a4:	d413      	bmi.n	80065ce <_printf_i+0x23a>
 80065a6:	68e0      	ldr	r0, [r4, #12]
 80065a8:	9b03      	ldr	r3, [sp, #12]
 80065aa:	4298      	cmp	r0, r3
 80065ac:	bfb8      	it	lt
 80065ae:	4618      	movlt	r0, r3
 80065b0:	e7a4      	b.n	80064fc <_printf_i+0x168>
 80065b2:	2301      	movs	r3, #1
 80065b4:	4632      	mov	r2, r6
 80065b6:	4649      	mov	r1, r9
 80065b8:	4640      	mov	r0, r8
 80065ba:	47d0      	blx	sl
 80065bc:	3001      	adds	r0, #1
 80065be:	d09b      	beq.n	80064f8 <_printf_i+0x164>
 80065c0:	3501      	adds	r5, #1
 80065c2:	68e3      	ldr	r3, [r4, #12]
 80065c4:	9903      	ldr	r1, [sp, #12]
 80065c6:	1a5b      	subs	r3, r3, r1
 80065c8:	42ab      	cmp	r3, r5
 80065ca:	dcf2      	bgt.n	80065b2 <_printf_i+0x21e>
 80065cc:	e7eb      	b.n	80065a6 <_printf_i+0x212>
 80065ce:	2500      	movs	r5, #0
 80065d0:	f104 0619 	add.w	r6, r4, #25
 80065d4:	e7f5      	b.n	80065c2 <_printf_i+0x22e>
 80065d6:	bf00      	nop
 80065d8:	0800a67e 	.word	0x0800a67e
 80065dc:	0800a68f 	.word	0x0800a68f

080065e0 <_scanf_float>:
 80065e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e4:	b087      	sub	sp, #28
 80065e6:	4617      	mov	r7, r2
 80065e8:	9303      	str	r3, [sp, #12]
 80065ea:	688b      	ldr	r3, [r1, #8]
 80065ec:	1e5a      	subs	r2, r3, #1
 80065ee:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80065f2:	bf83      	ittte	hi
 80065f4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80065f8:	195b      	addhi	r3, r3, r5
 80065fa:	9302      	strhi	r3, [sp, #8]
 80065fc:	2300      	movls	r3, #0
 80065fe:	bf86      	itte	hi
 8006600:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006604:	608b      	strhi	r3, [r1, #8]
 8006606:	9302      	strls	r3, [sp, #8]
 8006608:	680b      	ldr	r3, [r1, #0]
 800660a:	468b      	mov	fp, r1
 800660c:	2500      	movs	r5, #0
 800660e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006612:	f84b 3b1c 	str.w	r3, [fp], #28
 8006616:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800661a:	4680      	mov	r8, r0
 800661c:	460c      	mov	r4, r1
 800661e:	465e      	mov	r6, fp
 8006620:	46aa      	mov	sl, r5
 8006622:	46a9      	mov	r9, r5
 8006624:	9501      	str	r5, [sp, #4]
 8006626:	68a2      	ldr	r2, [r4, #8]
 8006628:	b152      	cbz	r2, 8006640 <_scanf_float+0x60>
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	2b4e      	cmp	r3, #78	; 0x4e
 8006630:	d864      	bhi.n	80066fc <_scanf_float+0x11c>
 8006632:	2b40      	cmp	r3, #64	; 0x40
 8006634:	d83c      	bhi.n	80066b0 <_scanf_float+0xd0>
 8006636:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800663a:	b2c8      	uxtb	r0, r1
 800663c:	280e      	cmp	r0, #14
 800663e:	d93a      	bls.n	80066b6 <_scanf_float+0xd6>
 8006640:	f1b9 0f00 	cmp.w	r9, #0
 8006644:	d003      	beq.n	800664e <_scanf_float+0x6e>
 8006646:	6823      	ldr	r3, [r4, #0]
 8006648:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800664c:	6023      	str	r3, [r4, #0]
 800664e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006652:	f1ba 0f01 	cmp.w	sl, #1
 8006656:	f200 8113 	bhi.w	8006880 <_scanf_float+0x2a0>
 800665a:	455e      	cmp	r6, fp
 800665c:	f200 8105 	bhi.w	800686a <_scanf_float+0x28a>
 8006660:	2501      	movs	r5, #1
 8006662:	4628      	mov	r0, r5
 8006664:	b007      	add	sp, #28
 8006666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800666a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800666e:	2a0d      	cmp	r2, #13
 8006670:	d8e6      	bhi.n	8006640 <_scanf_float+0x60>
 8006672:	a101      	add	r1, pc, #4	; (adr r1, 8006678 <_scanf_float+0x98>)
 8006674:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006678:	080067b7 	.word	0x080067b7
 800667c:	08006641 	.word	0x08006641
 8006680:	08006641 	.word	0x08006641
 8006684:	08006641 	.word	0x08006641
 8006688:	08006817 	.word	0x08006817
 800668c:	080067ef 	.word	0x080067ef
 8006690:	08006641 	.word	0x08006641
 8006694:	08006641 	.word	0x08006641
 8006698:	080067c5 	.word	0x080067c5
 800669c:	08006641 	.word	0x08006641
 80066a0:	08006641 	.word	0x08006641
 80066a4:	08006641 	.word	0x08006641
 80066a8:	08006641 	.word	0x08006641
 80066ac:	0800677d 	.word	0x0800677d
 80066b0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80066b4:	e7db      	b.n	800666e <_scanf_float+0x8e>
 80066b6:	290e      	cmp	r1, #14
 80066b8:	d8c2      	bhi.n	8006640 <_scanf_float+0x60>
 80066ba:	a001      	add	r0, pc, #4	; (adr r0, 80066c0 <_scanf_float+0xe0>)
 80066bc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80066c0:	0800676f 	.word	0x0800676f
 80066c4:	08006641 	.word	0x08006641
 80066c8:	0800676f 	.word	0x0800676f
 80066cc:	08006803 	.word	0x08006803
 80066d0:	08006641 	.word	0x08006641
 80066d4:	0800671d 	.word	0x0800671d
 80066d8:	08006759 	.word	0x08006759
 80066dc:	08006759 	.word	0x08006759
 80066e0:	08006759 	.word	0x08006759
 80066e4:	08006759 	.word	0x08006759
 80066e8:	08006759 	.word	0x08006759
 80066ec:	08006759 	.word	0x08006759
 80066f0:	08006759 	.word	0x08006759
 80066f4:	08006759 	.word	0x08006759
 80066f8:	08006759 	.word	0x08006759
 80066fc:	2b6e      	cmp	r3, #110	; 0x6e
 80066fe:	d809      	bhi.n	8006714 <_scanf_float+0x134>
 8006700:	2b60      	cmp	r3, #96	; 0x60
 8006702:	d8b2      	bhi.n	800666a <_scanf_float+0x8a>
 8006704:	2b54      	cmp	r3, #84	; 0x54
 8006706:	d077      	beq.n	80067f8 <_scanf_float+0x218>
 8006708:	2b59      	cmp	r3, #89	; 0x59
 800670a:	d199      	bne.n	8006640 <_scanf_float+0x60>
 800670c:	2d07      	cmp	r5, #7
 800670e:	d197      	bne.n	8006640 <_scanf_float+0x60>
 8006710:	2508      	movs	r5, #8
 8006712:	e029      	b.n	8006768 <_scanf_float+0x188>
 8006714:	2b74      	cmp	r3, #116	; 0x74
 8006716:	d06f      	beq.n	80067f8 <_scanf_float+0x218>
 8006718:	2b79      	cmp	r3, #121	; 0x79
 800671a:	e7f6      	b.n	800670a <_scanf_float+0x12a>
 800671c:	6821      	ldr	r1, [r4, #0]
 800671e:	05c8      	lsls	r0, r1, #23
 8006720:	d51a      	bpl.n	8006758 <_scanf_float+0x178>
 8006722:	9b02      	ldr	r3, [sp, #8]
 8006724:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006728:	6021      	str	r1, [r4, #0]
 800672a:	f109 0901 	add.w	r9, r9, #1
 800672e:	b11b      	cbz	r3, 8006738 <_scanf_float+0x158>
 8006730:	3b01      	subs	r3, #1
 8006732:	3201      	adds	r2, #1
 8006734:	9302      	str	r3, [sp, #8]
 8006736:	60a2      	str	r2, [r4, #8]
 8006738:	68a3      	ldr	r3, [r4, #8]
 800673a:	3b01      	subs	r3, #1
 800673c:	60a3      	str	r3, [r4, #8]
 800673e:	6923      	ldr	r3, [r4, #16]
 8006740:	3301      	adds	r3, #1
 8006742:	6123      	str	r3, [r4, #16]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	3b01      	subs	r3, #1
 8006748:	2b00      	cmp	r3, #0
 800674a:	607b      	str	r3, [r7, #4]
 800674c:	f340 8084 	ble.w	8006858 <_scanf_float+0x278>
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	3301      	adds	r3, #1
 8006754:	603b      	str	r3, [r7, #0]
 8006756:	e766      	b.n	8006626 <_scanf_float+0x46>
 8006758:	eb1a 0f05 	cmn.w	sl, r5
 800675c:	f47f af70 	bne.w	8006640 <_scanf_float+0x60>
 8006760:	6822      	ldr	r2, [r4, #0]
 8006762:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006766:	6022      	str	r2, [r4, #0]
 8006768:	f806 3b01 	strb.w	r3, [r6], #1
 800676c:	e7e4      	b.n	8006738 <_scanf_float+0x158>
 800676e:	6822      	ldr	r2, [r4, #0]
 8006770:	0610      	lsls	r0, r2, #24
 8006772:	f57f af65 	bpl.w	8006640 <_scanf_float+0x60>
 8006776:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800677a:	e7f4      	b.n	8006766 <_scanf_float+0x186>
 800677c:	f1ba 0f00 	cmp.w	sl, #0
 8006780:	d10e      	bne.n	80067a0 <_scanf_float+0x1c0>
 8006782:	f1b9 0f00 	cmp.w	r9, #0
 8006786:	d10e      	bne.n	80067a6 <_scanf_float+0x1c6>
 8006788:	6822      	ldr	r2, [r4, #0]
 800678a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800678e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006792:	d108      	bne.n	80067a6 <_scanf_float+0x1c6>
 8006794:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006798:	6022      	str	r2, [r4, #0]
 800679a:	f04f 0a01 	mov.w	sl, #1
 800679e:	e7e3      	b.n	8006768 <_scanf_float+0x188>
 80067a0:	f1ba 0f02 	cmp.w	sl, #2
 80067a4:	d055      	beq.n	8006852 <_scanf_float+0x272>
 80067a6:	2d01      	cmp	r5, #1
 80067a8:	d002      	beq.n	80067b0 <_scanf_float+0x1d0>
 80067aa:	2d04      	cmp	r5, #4
 80067ac:	f47f af48 	bne.w	8006640 <_scanf_float+0x60>
 80067b0:	3501      	adds	r5, #1
 80067b2:	b2ed      	uxtb	r5, r5
 80067b4:	e7d8      	b.n	8006768 <_scanf_float+0x188>
 80067b6:	f1ba 0f01 	cmp.w	sl, #1
 80067ba:	f47f af41 	bne.w	8006640 <_scanf_float+0x60>
 80067be:	f04f 0a02 	mov.w	sl, #2
 80067c2:	e7d1      	b.n	8006768 <_scanf_float+0x188>
 80067c4:	b97d      	cbnz	r5, 80067e6 <_scanf_float+0x206>
 80067c6:	f1b9 0f00 	cmp.w	r9, #0
 80067ca:	f47f af3c 	bne.w	8006646 <_scanf_float+0x66>
 80067ce:	6822      	ldr	r2, [r4, #0]
 80067d0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80067d4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80067d8:	f47f af39 	bne.w	800664e <_scanf_float+0x6e>
 80067dc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80067e0:	6022      	str	r2, [r4, #0]
 80067e2:	2501      	movs	r5, #1
 80067e4:	e7c0      	b.n	8006768 <_scanf_float+0x188>
 80067e6:	2d03      	cmp	r5, #3
 80067e8:	d0e2      	beq.n	80067b0 <_scanf_float+0x1d0>
 80067ea:	2d05      	cmp	r5, #5
 80067ec:	e7de      	b.n	80067ac <_scanf_float+0x1cc>
 80067ee:	2d02      	cmp	r5, #2
 80067f0:	f47f af26 	bne.w	8006640 <_scanf_float+0x60>
 80067f4:	2503      	movs	r5, #3
 80067f6:	e7b7      	b.n	8006768 <_scanf_float+0x188>
 80067f8:	2d06      	cmp	r5, #6
 80067fa:	f47f af21 	bne.w	8006640 <_scanf_float+0x60>
 80067fe:	2507      	movs	r5, #7
 8006800:	e7b2      	b.n	8006768 <_scanf_float+0x188>
 8006802:	6822      	ldr	r2, [r4, #0]
 8006804:	0591      	lsls	r1, r2, #22
 8006806:	f57f af1b 	bpl.w	8006640 <_scanf_float+0x60>
 800680a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800680e:	6022      	str	r2, [r4, #0]
 8006810:	f8cd 9004 	str.w	r9, [sp, #4]
 8006814:	e7a8      	b.n	8006768 <_scanf_float+0x188>
 8006816:	6822      	ldr	r2, [r4, #0]
 8006818:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800681c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006820:	d006      	beq.n	8006830 <_scanf_float+0x250>
 8006822:	0550      	lsls	r0, r2, #21
 8006824:	f57f af0c 	bpl.w	8006640 <_scanf_float+0x60>
 8006828:	f1b9 0f00 	cmp.w	r9, #0
 800682c:	f43f af0f 	beq.w	800664e <_scanf_float+0x6e>
 8006830:	0591      	lsls	r1, r2, #22
 8006832:	bf58      	it	pl
 8006834:	9901      	ldrpl	r1, [sp, #4]
 8006836:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800683a:	bf58      	it	pl
 800683c:	eba9 0101 	subpl.w	r1, r9, r1
 8006840:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006844:	bf58      	it	pl
 8006846:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800684a:	6022      	str	r2, [r4, #0]
 800684c:	f04f 0900 	mov.w	r9, #0
 8006850:	e78a      	b.n	8006768 <_scanf_float+0x188>
 8006852:	f04f 0a03 	mov.w	sl, #3
 8006856:	e787      	b.n	8006768 <_scanf_float+0x188>
 8006858:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800685c:	4639      	mov	r1, r7
 800685e:	4640      	mov	r0, r8
 8006860:	4798      	blx	r3
 8006862:	2800      	cmp	r0, #0
 8006864:	f43f aedf 	beq.w	8006626 <_scanf_float+0x46>
 8006868:	e6ea      	b.n	8006640 <_scanf_float+0x60>
 800686a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800686e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006872:	463a      	mov	r2, r7
 8006874:	4640      	mov	r0, r8
 8006876:	4798      	blx	r3
 8006878:	6923      	ldr	r3, [r4, #16]
 800687a:	3b01      	subs	r3, #1
 800687c:	6123      	str	r3, [r4, #16]
 800687e:	e6ec      	b.n	800665a <_scanf_float+0x7a>
 8006880:	1e6b      	subs	r3, r5, #1
 8006882:	2b06      	cmp	r3, #6
 8006884:	d825      	bhi.n	80068d2 <_scanf_float+0x2f2>
 8006886:	2d02      	cmp	r5, #2
 8006888:	d836      	bhi.n	80068f8 <_scanf_float+0x318>
 800688a:	455e      	cmp	r6, fp
 800688c:	f67f aee8 	bls.w	8006660 <_scanf_float+0x80>
 8006890:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006894:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006898:	463a      	mov	r2, r7
 800689a:	4640      	mov	r0, r8
 800689c:	4798      	blx	r3
 800689e:	6923      	ldr	r3, [r4, #16]
 80068a0:	3b01      	subs	r3, #1
 80068a2:	6123      	str	r3, [r4, #16]
 80068a4:	e7f1      	b.n	800688a <_scanf_float+0x2aa>
 80068a6:	9802      	ldr	r0, [sp, #8]
 80068a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80068ac:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80068b0:	9002      	str	r0, [sp, #8]
 80068b2:	463a      	mov	r2, r7
 80068b4:	4640      	mov	r0, r8
 80068b6:	4798      	blx	r3
 80068b8:	6923      	ldr	r3, [r4, #16]
 80068ba:	3b01      	subs	r3, #1
 80068bc:	6123      	str	r3, [r4, #16]
 80068be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80068c2:	fa5f fa8a 	uxtb.w	sl, sl
 80068c6:	f1ba 0f02 	cmp.w	sl, #2
 80068ca:	d1ec      	bne.n	80068a6 <_scanf_float+0x2c6>
 80068cc:	3d03      	subs	r5, #3
 80068ce:	b2ed      	uxtb	r5, r5
 80068d0:	1b76      	subs	r6, r6, r5
 80068d2:	6823      	ldr	r3, [r4, #0]
 80068d4:	05da      	lsls	r2, r3, #23
 80068d6:	d52f      	bpl.n	8006938 <_scanf_float+0x358>
 80068d8:	055b      	lsls	r3, r3, #21
 80068da:	d510      	bpl.n	80068fe <_scanf_float+0x31e>
 80068dc:	455e      	cmp	r6, fp
 80068de:	f67f aebf 	bls.w	8006660 <_scanf_float+0x80>
 80068e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80068e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80068ea:	463a      	mov	r2, r7
 80068ec:	4640      	mov	r0, r8
 80068ee:	4798      	blx	r3
 80068f0:	6923      	ldr	r3, [r4, #16]
 80068f2:	3b01      	subs	r3, #1
 80068f4:	6123      	str	r3, [r4, #16]
 80068f6:	e7f1      	b.n	80068dc <_scanf_float+0x2fc>
 80068f8:	46aa      	mov	sl, r5
 80068fa:	9602      	str	r6, [sp, #8]
 80068fc:	e7df      	b.n	80068be <_scanf_float+0x2de>
 80068fe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006902:	6923      	ldr	r3, [r4, #16]
 8006904:	2965      	cmp	r1, #101	; 0x65
 8006906:	f103 33ff 	add.w	r3, r3, #4294967295
 800690a:	f106 35ff 	add.w	r5, r6, #4294967295
 800690e:	6123      	str	r3, [r4, #16]
 8006910:	d00c      	beq.n	800692c <_scanf_float+0x34c>
 8006912:	2945      	cmp	r1, #69	; 0x45
 8006914:	d00a      	beq.n	800692c <_scanf_float+0x34c>
 8006916:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800691a:	463a      	mov	r2, r7
 800691c:	4640      	mov	r0, r8
 800691e:	4798      	blx	r3
 8006920:	6923      	ldr	r3, [r4, #16]
 8006922:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006926:	3b01      	subs	r3, #1
 8006928:	1eb5      	subs	r5, r6, #2
 800692a:	6123      	str	r3, [r4, #16]
 800692c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006930:	463a      	mov	r2, r7
 8006932:	4640      	mov	r0, r8
 8006934:	4798      	blx	r3
 8006936:	462e      	mov	r6, r5
 8006938:	6825      	ldr	r5, [r4, #0]
 800693a:	f015 0510 	ands.w	r5, r5, #16
 800693e:	d159      	bne.n	80069f4 <_scanf_float+0x414>
 8006940:	7035      	strb	r5, [r6, #0]
 8006942:	6823      	ldr	r3, [r4, #0]
 8006944:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800694c:	d11b      	bne.n	8006986 <_scanf_float+0x3a6>
 800694e:	9b01      	ldr	r3, [sp, #4]
 8006950:	454b      	cmp	r3, r9
 8006952:	eba3 0209 	sub.w	r2, r3, r9
 8006956:	d123      	bne.n	80069a0 <_scanf_float+0x3c0>
 8006958:	2200      	movs	r2, #0
 800695a:	4659      	mov	r1, fp
 800695c:	4640      	mov	r0, r8
 800695e:	f000 fe99 	bl	8007694 <_strtod_r>
 8006962:	6822      	ldr	r2, [r4, #0]
 8006964:	9b03      	ldr	r3, [sp, #12]
 8006966:	f012 0f02 	tst.w	r2, #2
 800696a:	ec57 6b10 	vmov	r6, r7, d0
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	d021      	beq.n	80069b6 <_scanf_float+0x3d6>
 8006972:	9903      	ldr	r1, [sp, #12]
 8006974:	1d1a      	adds	r2, r3, #4
 8006976:	600a      	str	r2, [r1, #0]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	e9c3 6700 	strd	r6, r7, [r3]
 800697e:	68e3      	ldr	r3, [r4, #12]
 8006980:	3301      	adds	r3, #1
 8006982:	60e3      	str	r3, [r4, #12]
 8006984:	e66d      	b.n	8006662 <_scanf_float+0x82>
 8006986:	9b04      	ldr	r3, [sp, #16]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d0e5      	beq.n	8006958 <_scanf_float+0x378>
 800698c:	9905      	ldr	r1, [sp, #20]
 800698e:	230a      	movs	r3, #10
 8006990:	462a      	mov	r2, r5
 8006992:	3101      	adds	r1, #1
 8006994:	4640      	mov	r0, r8
 8006996:	f000 ff05 	bl	80077a4 <_strtol_r>
 800699a:	9b04      	ldr	r3, [sp, #16]
 800699c:	9e05      	ldr	r6, [sp, #20]
 800699e:	1ac2      	subs	r2, r0, r3
 80069a0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80069a4:	429e      	cmp	r6, r3
 80069a6:	bf28      	it	cs
 80069a8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80069ac:	4912      	ldr	r1, [pc, #72]	; (80069f8 <_scanf_float+0x418>)
 80069ae:	4630      	mov	r0, r6
 80069b0:	f000 f82c 	bl	8006a0c <siprintf>
 80069b4:	e7d0      	b.n	8006958 <_scanf_float+0x378>
 80069b6:	9903      	ldr	r1, [sp, #12]
 80069b8:	f012 0f04 	tst.w	r2, #4
 80069bc:	f103 0204 	add.w	r2, r3, #4
 80069c0:	600a      	str	r2, [r1, #0]
 80069c2:	d1d9      	bne.n	8006978 <_scanf_float+0x398>
 80069c4:	f8d3 8000 	ldr.w	r8, [r3]
 80069c8:	ee10 2a10 	vmov	r2, s0
 80069cc:	ee10 0a10 	vmov	r0, s0
 80069d0:	463b      	mov	r3, r7
 80069d2:	4639      	mov	r1, r7
 80069d4:	f7fa f8aa 	bl	8000b2c <__aeabi_dcmpun>
 80069d8:	b128      	cbz	r0, 80069e6 <_scanf_float+0x406>
 80069da:	4808      	ldr	r0, [pc, #32]	; (80069fc <_scanf_float+0x41c>)
 80069dc:	f000 f810 	bl	8006a00 <nanf>
 80069e0:	ed88 0a00 	vstr	s0, [r8]
 80069e4:	e7cb      	b.n	800697e <_scanf_float+0x39e>
 80069e6:	4630      	mov	r0, r6
 80069e8:	4639      	mov	r1, r7
 80069ea:	f7fa f8fd 	bl	8000be8 <__aeabi_d2f>
 80069ee:	f8c8 0000 	str.w	r0, [r8]
 80069f2:	e7c4      	b.n	800697e <_scanf_float+0x39e>
 80069f4:	2500      	movs	r5, #0
 80069f6:	e634      	b.n	8006662 <_scanf_float+0x82>
 80069f8:	0800a6a0 	.word	0x0800a6a0
 80069fc:	0800aaa8 	.word	0x0800aaa8

08006a00 <nanf>:
 8006a00:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006a08 <nanf+0x8>
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	7fc00000 	.word	0x7fc00000

08006a0c <siprintf>:
 8006a0c:	b40e      	push	{r1, r2, r3}
 8006a0e:	b500      	push	{lr}
 8006a10:	b09c      	sub	sp, #112	; 0x70
 8006a12:	ab1d      	add	r3, sp, #116	; 0x74
 8006a14:	9002      	str	r0, [sp, #8]
 8006a16:	9006      	str	r0, [sp, #24]
 8006a18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a1c:	4809      	ldr	r0, [pc, #36]	; (8006a44 <siprintf+0x38>)
 8006a1e:	9107      	str	r1, [sp, #28]
 8006a20:	9104      	str	r1, [sp, #16]
 8006a22:	4909      	ldr	r1, [pc, #36]	; (8006a48 <siprintf+0x3c>)
 8006a24:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a28:	9105      	str	r1, [sp, #20]
 8006a2a:	6800      	ldr	r0, [r0, #0]
 8006a2c:	9301      	str	r3, [sp, #4]
 8006a2e:	a902      	add	r1, sp, #8
 8006a30:	f002 fee4 	bl	80097fc <_svfiprintf_r>
 8006a34:	9b02      	ldr	r3, [sp, #8]
 8006a36:	2200      	movs	r2, #0
 8006a38:	701a      	strb	r2, [r3, #0]
 8006a3a:	b01c      	add	sp, #112	; 0x70
 8006a3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a40:	b003      	add	sp, #12
 8006a42:	4770      	bx	lr
 8006a44:	2000000c 	.word	0x2000000c
 8006a48:	ffff0208 	.word	0xffff0208

08006a4c <sulp>:
 8006a4c:	b570      	push	{r4, r5, r6, lr}
 8006a4e:	4604      	mov	r4, r0
 8006a50:	460d      	mov	r5, r1
 8006a52:	ec45 4b10 	vmov	d0, r4, r5
 8006a56:	4616      	mov	r6, r2
 8006a58:	f002 fc2e 	bl	80092b8 <__ulp>
 8006a5c:	ec51 0b10 	vmov	r0, r1, d0
 8006a60:	b17e      	cbz	r6, 8006a82 <sulp+0x36>
 8006a62:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006a66:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	dd09      	ble.n	8006a82 <sulp+0x36>
 8006a6e:	051b      	lsls	r3, r3, #20
 8006a70:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006a74:	2400      	movs	r4, #0
 8006a76:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006a7a:	4622      	mov	r2, r4
 8006a7c:	462b      	mov	r3, r5
 8006a7e:	f7f9 fdbb 	bl	80005f8 <__aeabi_dmul>
 8006a82:	bd70      	pop	{r4, r5, r6, pc}
 8006a84:	0000      	movs	r0, r0
	...

08006a88 <_strtod_l>:
 8006a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a8c:	ed2d 8b02 	vpush	{d8}
 8006a90:	b09d      	sub	sp, #116	; 0x74
 8006a92:	461f      	mov	r7, r3
 8006a94:	2300      	movs	r3, #0
 8006a96:	9318      	str	r3, [sp, #96]	; 0x60
 8006a98:	4ba2      	ldr	r3, [pc, #648]	; (8006d24 <_strtod_l+0x29c>)
 8006a9a:	9213      	str	r2, [sp, #76]	; 0x4c
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	9305      	str	r3, [sp, #20]
 8006aa0:	4604      	mov	r4, r0
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	4688      	mov	r8, r1
 8006aa6:	f7f9 fb93 	bl	80001d0 <strlen>
 8006aaa:	f04f 0a00 	mov.w	sl, #0
 8006aae:	4605      	mov	r5, r0
 8006ab0:	f04f 0b00 	mov.w	fp, #0
 8006ab4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006ab8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006aba:	781a      	ldrb	r2, [r3, #0]
 8006abc:	2a2b      	cmp	r2, #43	; 0x2b
 8006abe:	d04e      	beq.n	8006b5e <_strtod_l+0xd6>
 8006ac0:	d83b      	bhi.n	8006b3a <_strtod_l+0xb2>
 8006ac2:	2a0d      	cmp	r2, #13
 8006ac4:	d834      	bhi.n	8006b30 <_strtod_l+0xa8>
 8006ac6:	2a08      	cmp	r2, #8
 8006ac8:	d834      	bhi.n	8006b34 <_strtod_l+0xac>
 8006aca:	2a00      	cmp	r2, #0
 8006acc:	d03e      	beq.n	8006b4c <_strtod_l+0xc4>
 8006ace:	2300      	movs	r3, #0
 8006ad0:	930a      	str	r3, [sp, #40]	; 0x28
 8006ad2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006ad4:	7833      	ldrb	r3, [r6, #0]
 8006ad6:	2b30      	cmp	r3, #48	; 0x30
 8006ad8:	f040 80b0 	bne.w	8006c3c <_strtod_l+0x1b4>
 8006adc:	7873      	ldrb	r3, [r6, #1]
 8006ade:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006ae2:	2b58      	cmp	r3, #88	; 0x58
 8006ae4:	d168      	bne.n	8006bb8 <_strtod_l+0x130>
 8006ae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ae8:	9301      	str	r3, [sp, #4]
 8006aea:	ab18      	add	r3, sp, #96	; 0x60
 8006aec:	9702      	str	r7, [sp, #8]
 8006aee:	9300      	str	r3, [sp, #0]
 8006af0:	4a8d      	ldr	r2, [pc, #564]	; (8006d28 <_strtod_l+0x2a0>)
 8006af2:	ab19      	add	r3, sp, #100	; 0x64
 8006af4:	a917      	add	r1, sp, #92	; 0x5c
 8006af6:	4620      	mov	r0, r4
 8006af8:	f001 fd38 	bl	800856c <__gethex>
 8006afc:	f010 0707 	ands.w	r7, r0, #7
 8006b00:	4605      	mov	r5, r0
 8006b02:	d005      	beq.n	8006b10 <_strtod_l+0x88>
 8006b04:	2f06      	cmp	r7, #6
 8006b06:	d12c      	bne.n	8006b62 <_strtod_l+0xda>
 8006b08:	3601      	adds	r6, #1
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	9617      	str	r6, [sp, #92]	; 0x5c
 8006b0e:	930a      	str	r3, [sp, #40]	; 0x28
 8006b10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	f040 8590 	bne.w	8007638 <_strtod_l+0xbb0>
 8006b18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b1a:	b1eb      	cbz	r3, 8006b58 <_strtod_l+0xd0>
 8006b1c:	4652      	mov	r2, sl
 8006b1e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006b22:	ec43 2b10 	vmov	d0, r2, r3
 8006b26:	b01d      	add	sp, #116	; 0x74
 8006b28:	ecbd 8b02 	vpop	{d8}
 8006b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b30:	2a20      	cmp	r2, #32
 8006b32:	d1cc      	bne.n	8006ace <_strtod_l+0x46>
 8006b34:	3301      	adds	r3, #1
 8006b36:	9317      	str	r3, [sp, #92]	; 0x5c
 8006b38:	e7be      	b.n	8006ab8 <_strtod_l+0x30>
 8006b3a:	2a2d      	cmp	r2, #45	; 0x2d
 8006b3c:	d1c7      	bne.n	8006ace <_strtod_l+0x46>
 8006b3e:	2201      	movs	r2, #1
 8006b40:	920a      	str	r2, [sp, #40]	; 0x28
 8006b42:	1c5a      	adds	r2, r3, #1
 8006b44:	9217      	str	r2, [sp, #92]	; 0x5c
 8006b46:	785b      	ldrb	r3, [r3, #1]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1c2      	bne.n	8006ad2 <_strtod_l+0x4a>
 8006b4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006b4e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	f040 856e 	bne.w	8007634 <_strtod_l+0xbac>
 8006b58:	4652      	mov	r2, sl
 8006b5a:	465b      	mov	r3, fp
 8006b5c:	e7e1      	b.n	8006b22 <_strtod_l+0x9a>
 8006b5e:	2200      	movs	r2, #0
 8006b60:	e7ee      	b.n	8006b40 <_strtod_l+0xb8>
 8006b62:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006b64:	b13a      	cbz	r2, 8006b76 <_strtod_l+0xee>
 8006b66:	2135      	movs	r1, #53	; 0x35
 8006b68:	a81a      	add	r0, sp, #104	; 0x68
 8006b6a:	f002 fcb0 	bl	80094ce <__copybits>
 8006b6e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006b70:	4620      	mov	r0, r4
 8006b72:	f002 f86f 	bl	8008c54 <_Bfree>
 8006b76:	3f01      	subs	r7, #1
 8006b78:	2f04      	cmp	r7, #4
 8006b7a:	d806      	bhi.n	8006b8a <_strtod_l+0x102>
 8006b7c:	e8df f007 	tbb	[pc, r7]
 8006b80:	1714030a 	.word	0x1714030a
 8006b84:	0a          	.byte	0x0a
 8006b85:	00          	.byte	0x00
 8006b86:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006b8a:	0728      	lsls	r0, r5, #28
 8006b8c:	d5c0      	bpl.n	8006b10 <_strtod_l+0x88>
 8006b8e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006b92:	e7bd      	b.n	8006b10 <_strtod_l+0x88>
 8006b94:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006b98:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006b9a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006b9e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006ba2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006ba6:	e7f0      	b.n	8006b8a <_strtod_l+0x102>
 8006ba8:	f8df b180 	ldr.w	fp, [pc, #384]	; 8006d2c <_strtod_l+0x2a4>
 8006bac:	e7ed      	b.n	8006b8a <_strtod_l+0x102>
 8006bae:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006bb2:	f04f 3aff 	mov.w	sl, #4294967295
 8006bb6:	e7e8      	b.n	8006b8a <_strtod_l+0x102>
 8006bb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006bba:	1c5a      	adds	r2, r3, #1
 8006bbc:	9217      	str	r2, [sp, #92]	; 0x5c
 8006bbe:	785b      	ldrb	r3, [r3, #1]
 8006bc0:	2b30      	cmp	r3, #48	; 0x30
 8006bc2:	d0f9      	beq.n	8006bb8 <_strtod_l+0x130>
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d0a3      	beq.n	8006b10 <_strtod_l+0x88>
 8006bc8:	2301      	movs	r3, #1
 8006bca:	f04f 0900 	mov.w	r9, #0
 8006bce:	9304      	str	r3, [sp, #16]
 8006bd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006bd2:	9308      	str	r3, [sp, #32]
 8006bd4:	f8cd 901c 	str.w	r9, [sp, #28]
 8006bd8:	464f      	mov	r7, r9
 8006bda:	220a      	movs	r2, #10
 8006bdc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006bde:	7806      	ldrb	r6, [r0, #0]
 8006be0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006be4:	b2d9      	uxtb	r1, r3
 8006be6:	2909      	cmp	r1, #9
 8006be8:	d92a      	bls.n	8006c40 <_strtod_l+0x1b8>
 8006bea:	9905      	ldr	r1, [sp, #20]
 8006bec:	462a      	mov	r2, r5
 8006bee:	f002 ff1f 	bl	8009a30 <strncmp>
 8006bf2:	b398      	cbz	r0, 8006c5c <_strtod_l+0x1d4>
 8006bf4:	2000      	movs	r0, #0
 8006bf6:	4632      	mov	r2, r6
 8006bf8:	463d      	mov	r5, r7
 8006bfa:	9005      	str	r0, [sp, #20]
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2a65      	cmp	r2, #101	; 0x65
 8006c00:	d001      	beq.n	8006c06 <_strtod_l+0x17e>
 8006c02:	2a45      	cmp	r2, #69	; 0x45
 8006c04:	d118      	bne.n	8006c38 <_strtod_l+0x1b0>
 8006c06:	b91d      	cbnz	r5, 8006c10 <_strtod_l+0x188>
 8006c08:	9a04      	ldr	r2, [sp, #16]
 8006c0a:	4302      	orrs	r2, r0
 8006c0c:	d09e      	beq.n	8006b4c <_strtod_l+0xc4>
 8006c0e:	2500      	movs	r5, #0
 8006c10:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8006c14:	f108 0201 	add.w	r2, r8, #1
 8006c18:	9217      	str	r2, [sp, #92]	; 0x5c
 8006c1a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8006c1e:	2a2b      	cmp	r2, #43	; 0x2b
 8006c20:	d075      	beq.n	8006d0e <_strtod_l+0x286>
 8006c22:	2a2d      	cmp	r2, #45	; 0x2d
 8006c24:	d07b      	beq.n	8006d1e <_strtod_l+0x296>
 8006c26:	f04f 0c00 	mov.w	ip, #0
 8006c2a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006c2e:	2909      	cmp	r1, #9
 8006c30:	f240 8082 	bls.w	8006d38 <_strtod_l+0x2b0>
 8006c34:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006c38:	2600      	movs	r6, #0
 8006c3a:	e09d      	b.n	8006d78 <_strtod_l+0x2f0>
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	e7c4      	b.n	8006bca <_strtod_l+0x142>
 8006c40:	2f08      	cmp	r7, #8
 8006c42:	bfd8      	it	le
 8006c44:	9907      	ldrle	r1, [sp, #28]
 8006c46:	f100 0001 	add.w	r0, r0, #1
 8006c4a:	bfda      	itte	le
 8006c4c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006c50:	9307      	strle	r3, [sp, #28]
 8006c52:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006c56:	3701      	adds	r7, #1
 8006c58:	9017      	str	r0, [sp, #92]	; 0x5c
 8006c5a:	e7bf      	b.n	8006bdc <_strtod_l+0x154>
 8006c5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c5e:	195a      	adds	r2, r3, r5
 8006c60:	9217      	str	r2, [sp, #92]	; 0x5c
 8006c62:	5d5a      	ldrb	r2, [r3, r5]
 8006c64:	2f00      	cmp	r7, #0
 8006c66:	d037      	beq.n	8006cd8 <_strtod_l+0x250>
 8006c68:	9005      	str	r0, [sp, #20]
 8006c6a:	463d      	mov	r5, r7
 8006c6c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006c70:	2b09      	cmp	r3, #9
 8006c72:	d912      	bls.n	8006c9a <_strtod_l+0x212>
 8006c74:	2301      	movs	r3, #1
 8006c76:	e7c2      	b.n	8006bfe <_strtod_l+0x176>
 8006c78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c7a:	1c5a      	adds	r2, r3, #1
 8006c7c:	9217      	str	r2, [sp, #92]	; 0x5c
 8006c7e:	785a      	ldrb	r2, [r3, #1]
 8006c80:	3001      	adds	r0, #1
 8006c82:	2a30      	cmp	r2, #48	; 0x30
 8006c84:	d0f8      	beq.n	8006c78 <_strtod_l+0x1f0>
 8006c86:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006c8a:	2b08      	cmp	r3, #8
 8006c8c:	f200 84d9 	bhi.w	8007642 <_strtod_l+0xbba>
 8006c90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c92:	9005      	str	r0, [sp, #20]
 8006c94:	2000      	movs	r0, #0
 8006c96:	9308      	str	r3, [sp, #32]
 8006c98:	4605      	mov	r5, r0
 8006c9a:	3a30      	subs	r2, #48	; 0x30
 8006c9c:	f100 0301 	add.w	r3, r0, #1
 8006ca0:	d014      	beq.n	8006ccc <_strtod_l+0x244>
 8006ca2:	9905      	ldr	r1, [sp, #20]
 8006ca4:	4419      	add	r1, r3
 8006ca6:	9105      	str	r1, [sp, #20]
 8006ca8:	462b      	mov	r3, r5
 8006caa:	eb00 0e05 	add.w	lr, r0, r5
 8006cae:	210a      	movs	r1, #10
 8006cb0:	4573      	cmp	r3, lr
 8006cb2:	d113      	bne.n	8006cdc <_strtod_l+0x254>
 8006cb4:	182b      	adds	r3, r5, r0
 8006cb6:	2b08      	cmp	r3, #8
 8006cb8:	f105 0501 	add.w	r5, r5, #1
 8006cbc:	4405      	add	r5, r0
 8006cbe:	dc1c      	bgt.n	8006cfa <_strtod_l+0x272>
 8006cc0:	9907      	ldr	r1, [sp, #28]
 8006cc2:	230a      	movs	r3, #10
 8006cc4:	fb03 2301 	mla	r3, r3, r1, r2
 8006cc8:	9307      	str	r3, [sp, #28]
 8006cca:	2300      	movs	r3, #0
 8006ccc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006cce:	1c51      	adds	r1, r2, #1
 8006cd0:	9117      	str	r1, [sp, #92]	; 0x5c
 8006cd2:	7852      	ldrb	r2, [r2, #1]
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	e7c9      	b.n	8006c6c <_strtod_l+0x1e4>
 8006cd8:	4638      	mov	r0, r7
 8006cda:	e7d2      	b.n	8006c82 <_strtod_l+0x1fa>
 8006cdc:	2b08      	cmp	r3, #8
 8006cde:	dc04      	bgt.n	8006cea <_strtod_l+0x262>
 8006ce0:	9e07      	ldr	r6, [sp, #28]
 8006ce2:	434e      	muls	r6, r1
 8006ce4:	9607      	str	r6, [sp, #28]
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	e7e2      	b.n	8006cb0 <_strtod_l+0x228>
 8006cea:	f103 0c01 	add.w	ip, r3, #1
 8006cee:	f1bc 0f10 	cmp.w	ip, #16
 8006cf2:	bfd8      	it	le
 8006cf4:	fb01 f909 	mulle.w	r9, r1, r9
 8006cf8:	e7f5      	b.n	8006ce6 <_strtod_l+0x25e>
 8006cfa:	2d10      	cmp	r5, #16
 8006cfc:	bfdc      	itt	le
 8006cfe:	230a      	movle	r3, #10
 8006d00:	fb03 2909 	mlale	r9, r3, r9, r2
 8006d04:	e7e1      	b.n	8006cca <_strtod_l+0x242>
 8006d06:	2300      	movs	r3, #0
 8006d08:	9305      	str	r3, [sp, #20]
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e77c      	b.n	8006c08 <_strtod_l+0x180>
 8006d0e:	f04f 0c00 	mov.w	ip, #0
 8006d12:	f108 0202 	add.w	r2, r8, #2
 8006d16:	9217      	str	r2, [sp, #92]	; 0x5c
 8006d18:	f898 2002 	ldrb.w	r2, [r8, #2]
 8006d1c:	e785      	b.n	8006c2a <_strtod_l+0x1a2>
 8006d1e:	f04f 0c01 	mov.w	ip, #1
 8006d22:	e7f6      	b.n	8006d12 <_strtod_l+0x28a>
 8006d24:	0800a8f0 	.word	0x0800a8f0
 8006d28:	0800a6a8 	.word	0x0800a6a8
 8006d2c:	7ff00000 	.word	0x7ff00000
 8006d30:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006d32:	1c51      	adds	r1, r2, #1
 8006d34:	9117      	str	r1, [sp, #92]	; 0x5c
 8006d36:	7852      	ldrb	r2, [r2, #1]
 8006d38:	2a30      	cmp	r2, #48	; 0x30
 8006d3a:	d0f9      	beq.n	8006d30 <_strtod_l+0x2a8>
 8006d3c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006d40:	2908      	cmp	r1, #8
 8006d42:	f63f af79 	bhi.w	8006c38 <_strtod_l+0x1b0>
 8006d46:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006d4a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006d4c:	9206      	str	r2, [sp, #24]
 8006d4e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006d50:	1c51      	adds	r1, r2, #1
 8006d52:	9117      	str	r1, [sp, #92]	; 0x5c
 8006d54:	7852      	ldrb	r2, [r2, #1]
 8006d56:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006d5a:	2e09      	cmp	r6, #9
 8006d5c:	d937      	bls.n	8006dce <_strtod_l+0x346>
 8006d5e:	9e06      	ldr	r6, [sp, #24]
 8006d60:	1b89      	subs	r1, r1, r6
 8006d62:	2908      	cmp	r1, #8
 8006d64:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006d68:	dc02      	bgt.n	8006d70 <_strtod_l+0x2e8>
 8006d6a:	4576      	cmp	r6, lr
 8006d6c:	bfa8      	it	ge
 8006d6e:	4676      	movge	r6, lr
 8006d70:	f1bc 0f00 	cmp.w	ip, #0
 8006d74:	d000      	beq.n	8006d78 <_strtod_l+0x2f0>
 8006d76:	4276      	negs	r6, r6
 8006d78:	2d00      	cmp	r5, #0
 8006d7a:	d14d      	bne.n	8006e18 <_strtod_l+0x390>
 8006d7c:	9904      	ldr	r1, [sp, #16]
 8006d7e:	4301      	orrs	r1, r0
 8006d80:	f47f aec6 	bne.w	8006b10 <_strtod_l+0x88>
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	f47f aee1 	bne.w	8006b4c <_strtod_l+0xc4>
 8006d8a:	2a69      	cmp	r2, #105	; 0x69
 8006d8c:	d027      	beq.n	8006dde <_strtod_l+0x356>
 8006d8e:	dc24      	bgt.n	8006dda <_strtod_l+0x352>
 8006d90:	2a49      	cmp	r2, #73	; 0x49
 8006d92:	d024      	beq.n	8006dde <_strtod_l+0x356>
 8006d94:	2a4e      	cmp	r2, #78	; 0x4e
 8006d96:	f47f aed9 	bne.w	8006b4c <_strtod_l+0xc4>
 8006d9a:	499f      	ldr	r1, [pc, #636]	; (8007018 <_strtod_l+0x590>)
 8006d9c:	a817      	add	r0, sp, #92	; 0x5c
 8006d9e:	f001 fe3d 	bl	8008a1c <__match>
 8006da2:	2800      	cmp	r0, #0
 8006da4:	f43f aed2 	beq.w	8006b4c <_strtod_l+0xc4>
 8006da8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	2b28      	cmp	r3, #40	; 0x28
 8006dae:	d12d      	bne.n	8006e0c <_strtod_l+0x384>
 8006db0:	499a      	ldr	r1, [pc, #616]	; (800701c <_strtod_l+0x594>)
 8006db2:	aa1a      	add	r2, sp, #104	; 0x68
 8006db4:	a817      	add	r0, sp, #92	; 0x5c
 8006db6:	f001 fe45 	bl	8008a44 <__hexnan>
 8006dba:	2805      	cmp	r0, #5
 8006dbc:	d126      	bne.n	8006e0c <_strtod_l+0x384>
 8006dbe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006dc0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8006dc4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006dc8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006dcc:	e6a0      	b.n	8006b10 <_strtod_l+0x88>
 8006dce:	210a      	movs	r1, #10
 8006dd0:	fb01 2e0e 	mla	lr, r1, lr, r2
 8006dd4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006dd8:	e7b9      	b.n	8006d4e <_strtod_l+0x2c6>
 8006dda:	2a6e      	cmp	r2, #110	; 0x6e
 8006ddc:	e7db      	b.n	8006d96 <_strtod_l+0x30e>
 8006dde:	4990      	ldr	r1, [pc, #576]	; (8007020 <_strtod_l+0x598>)
 8006de0:	a817      	add	r0, sp, #92	; 0x5c
 8006de2:	f001 fe1b 	bl	8008a1c <__match>
 8006de6:	2800      	cmp	r0, #0
 8006de8:	f43f aeb0 	beq.w	8006b4c <_strtod_l+0xc4>
 8006dec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006dee:	498d      	ldr	r1, [pc, #564]	; (8007024 <_strtod_l+0x59c>)
 8006df0:	3b01      	subs	r3, #1
 8006df2:	a817      	add	r0, sp, #92	; 0x5c
 8006df4:	9317      	str	r3, [sp, #92]	; 0x5c
 8006df6:	f001 fe11 	bl	8008a1c <__match>
 8006dfa:	b910      	cbnz	r0, 8006e02 <_strtod_l+0x37a>
 8006dfc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006dfe:	3301      	adds	r3, #1
 8006e00:	9317      	str	r3, [sp, #92]	; 0x5c
 8006e02:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007034 <_strtod_l+0x5ac>
 8006e06:	f04f 0a00 	mov.w	sl, #0
 8006e0a:	e681      	b.n	8006b10 <_strtod_l+0x88>
 8006e0c:	4886      	ldr	r0, [pc, #536]	; (8007028 <_strtod_l+0x5a0>)
 8006e0e:	f002 fdf7 	bl	8009a00 <nan>
 8006e12:	ec5b ab10 	vmov	sl, fp, d0
 8006e16:	e67b      	b.n	8006b10 <_strtod_l+0x88>
 8006e18:	9b05      	ldr	r3, [sp, #20]
 8006e1a:	9807      	ldr	r0, [sp, #28]
 8006e1c:	1af3      	subs	r3, r6, r3
 8006e1e:	2f00      	cmp	r7, #0
 8006e20:	bf08      	it	eq
 8006e22:	462f      	moveq	r7, r5
 8006e24:	2d10      	cmp	r5, #16
 8006e26:	9306      	str	r3, [sp, #24]
 8006e28:	46a8      	mov	r8, r5
 8006e2a:	bfa8      	it	ge
 8006e2c:	f04f 0810 	movge.w	r8, #16
 8006e30:	f7f9 fb68 	bl	8000504 <__aeabi_ui2d>
 8006e34:	2d09      	cmp	r5, #9
 8006e36:	4682      	mov	sl, r0
 8006e38:	468b      	mov	fp, r1
 8006e3a:	dd13      	ble.n	8006e64 <_strtod_l+0x3dc>
 8006e3c:	4b7b      	ldr	r3, [pc, #492]	; (800702c <_strtod_l+0x5a4>)
 8006e3e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006e42:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006e46:	f7f9 fbd7 	bl	80005f8 <__aeabi_dmul>
 8006e4a:	4682      	mov	sl, r0
 8006e4c:	4648      	mov	r0, r9
 8006e4e:	468b      	mov	fp, r1
 8006e50:	f7f9 fb58 	bl	8000504 <__aeabi_ui2d>
 8006e54:	4602      	mov	r2, r0
 8006e56:	460b      	mov	r3, r1
 8006e58:	4650      	mov	r0, sl
 8006e5a:	4659      	mov	r1, fp
 8006e5c:	f7f9 fa16 	bl	800028c <__adddf3>
 8006e60:	4682      	mov	sl, r0
 8006e62:	468b      	mov	fp, r1
 8006e64:	2d0f      	cmp	r5, #15
 8006e66:	dc38      	bgt.n	8006eda <_strtod_l+0x452>
 8006e68:	9b06      	ldr	r3, [sp, #24]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	f43f ae50 	beq.w	8006b10 <_strtod_l+0x88>
 8006e70:	dd24      	ble.n	8006ebc <_strtod_l+0x434>
 8006e72:	2b16      	cmp	r3, #22
 8006e74:	dc0b      	bgt.n	8006e8e <_strtod_l+0x406>
 8006e76:	496d      	ldr	r1, [pc, #436]	; (800702c <_strtod_l+0x5a4>)
 8006e78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006e7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e80:	4652      	mov	r2, sl
 8006e82:	465b      	mov	r3, fp
 8006e84:	f7f9 fbb8 	bl	80005f8 <__aeabi_dmul>
 8006e88:	4682      	mov	sl, r0
 8006e8a:	468b      	mov	fp, r1
 8006e8c:	e640      	b.n	8006b10 <_strtod_l+0x88>
 8006e8e:	9a06      	ldr	r2, [sp, #24]
 8006e90:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006e94:	4293      	cmp	r3, r2
 8006e96:	db20      	blt.n	8006eda <_strtod_l+0x452>
 8006e98:	4c64      	ldr	r4, [pc, #400]	; (800702c <_strtod_l+0x5a4>)
 8006e9a:	f1c5 050f 	rsb	r5, r5, #15
 8006e9e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006ea2:	4652      	mov	r2, sl
 8006ea4:	465b      	mov	r3, fp
 8006ea6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006eaa:	f7f9 fba5 	bl	80005f8 <__aeabi_dmul>
 8006eae:	9b06      	ldr	r3, [sp, #24]
 8006eb0:	1b5d      	subs	r5, r3, r5
 8006eb2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006eb6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006eba:	e7e3      	b.n	8006e84 <_strtod_l+0x3fc>
 8006ebc:	9b06      	ldr	r3, [sp, #24]
 8006ebe:	3316      	adds	r3, #22
 8006ec0:	db0b      	blt.n	8006eda <_strtod_l+0x452>
 8006ec2:	9b05      	ldr	r3, [sp, #20]
 8006ec4:	1b9e      	subs	r6, r3, r6
 8006ec6:	4b59      	ldr	r3, [pc, #356]	; (800702c <_strtod_l+0x5a4>)
 8006ec8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006ecc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006ed0:	4650      	mov	r0, sl
 8006ed2:	4659      	mov	r1, fp
 8006ed4:	f7f9 fcba 	bl	800084c <__aeabi_ddiv>
 8006ed8:	e7d6      	b.n	8006e88 <_strtod_l+0x400>
 8006eda:	9b06      	ldr	r3, [sp, #24]
 8006edc:	eba5 0808 	sub.w	r8, r5, r8
 8006ee0:	4498      	add	r8, r3
 8006ee2:	f1b8 0f00 	cmp.w	r8, #0
 8006ee6:	dd74      	ble.n	8006fd2 <_strtod_l+0x54a>
 8006ee8:	f018 030f 	ands.w	r3, r8, #15
 8006eec:	d00a      	beq.n	8006f04 <_strtod_l+0x47c>
 8006eee:	494f      	ldr	r1, [pc, #316]	; (800702c <_strtod_l+0x5a4>)
 8006ef0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006ef4:	4652      	mov	r2, sl
 8006ef6:	465b      	mov	r3, fp
 8006ef8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006efc:	f7f9 fb7c 	bl	80005f8 <__aeabi_dmul>
 8006f00:	4682      	mov	sl, r0
 8006f02:	468b      	mov	fp, r1
 8006f04:	f038 080f 	bics.w	r8, r8, #15
 8006f08:	d04f      	beq.n	8006faa <_strtod_l+0x522>
 8006f0a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006f0e:	dd22      	ble.n	8006f56 <_strtod_l+0x4ce>
 8006f10:	2500      	movs	r5, #0
 8006f12:	462e      	mov	r6, r5
 8006f14:	9507      	str	r5, [sp, #28]
 8006f16:	9505      	str	r5, [sp, #20]
 8006f18:	2322      	movs	r3, #34	; 0x22
 8006f1a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007034 <_strtod_l+0x5ac>
 8006f1e:	6023      	str	r3, [r4, #0]
 8006f20:	f04f 0a00 	mov.w	sl, #0
 8006f24:	9b07      	ldr	r3, [sp, #28]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	f43f adf2 	beq.w	8006b10 <_strtod_l+0x88>
 8006f2c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006f2e:	4620      	mov	r0, r4
 8006f30:	f001 fe90 	bl	8008c54 <_Bfree>
 8006f34:	9905      	ldr	r1, [sp, #20]
 8006f36:	4620      	mov	r0, r4
 8006f38:	f001 fe8c 	bl	8008c54 <_Bfree>
 8006f3c:	4631      	mov	r1, r6
 8006f3e:	4620      	mov	r0, r4
 8006f40:	f001 fe88 	bl	8008c54 <_Bfree>
 8006f44:	9907      	ldr	r1, [sp, #28]
 8006f46:	4620      	mov	r0, r4
 8006f48:	f001 fe84 	bl	8008c54 <_Bfree>
 8006f4c:	4629      	mov	r1, r5
 8006f4e:	4620      	mov	r0, r4
 8006f50:	f001 fe80 	bl	8008c54 <_Bfree>
 8006f54:	e5dc      	b.n	8006b10 <_strtod_l+0x88>
 8006f56:	4b36      	ldr	r3, [pc, #216]	; (8007030 <_strtod_l+0x5a8>)
 8006f58:	9304      	str	r3, [sp, #16]
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006f60:	4650      	mov	r0, sl
 8006f62:	4659      	mov	r1, fp
 8006f64:	4699      	mov	r9, r3
 8006f66:	f1b8 0f01 	cmp.w	r8, #1
 8006f6a:	dc21      	bgt.n	8006fb0 <_strtod_l+0x528>
 8006f6c:	b10b      	cbz	r3, 8006f72 <_strtod_l+0x4ea>
 8006f6e:	4682      	mov	sl, r0
 8006f70:	468b      	mov	fp, r1
 8006f72:	4b2f      	ldr	r3, [pc, #188]	; (8007030 <_strtod_l+0x5a8>)
 8006f74:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006f78:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006f7c:	4652      	mov	r2, sl
 8006f7e:	465b      	mov	r3, fp
 8006f80:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006f84:	f7f9 fb38 	bl	80005f8 <__aeabi_dmul>
 8006f88:	4b2a      	ldr	r3, [pc, #168]	; (8007034 <_strtod_l+0x5ac>)
 8006f8a:	460a      	mov	r2, r1
 8006f8c:	400b      	ands	r3, r1
 8006f8e:	492a      	ldr	r1, [pc, #168]	; (8007038 <_strtod_l+0x5b0>)
 8006f90:	428b      	cmp	r3, r1
 8006f92:	4682      	mov	sl, r0
 8006f94:	d8bc      	bhi.n	8006f10 <_strtod_l+0x488>
 8006f96:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006f9a:	428b      	cmp	r3, r1
 8006f9c:	bf86      	itte	hi
 8006f9e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800703c <_strtod_l+0x5b4>
 8006fa2:	f04f 3aff 	movhi.w	sl, #4294967295
 8006fa6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006faa:	2300      	movs	r3, #0
 8006fac:	9304      	str	r3, [sp, #16]
 8006fae:	e084      	b.n	80070ba <_strtod_l+0x632>
 8006fb0:	f018 0f01 	tst.w	r8, #1
 8006fb4:	d005      	beq.n	8006fc2 <_strtod_l+0x53a>
 8006fb6:	9b04      	ldr	r3, [sp, #16]
 8006fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fbc:	f7f9 fb1c 	bl	80005f8 <__aeabi_dmul>
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	9a04      	ldr	r2, [sp, #16]
 8006fc4:	3208      	adds	r2, #8
 8006fc6:	f109 0901 	add.w	r9, r9, #1
 8006fca:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006fce:	9204      	str	r2, [sp, #16]
 8006fd0:	e7c9      	b.n	8006f66 <_strtod_l+0x4de>
 8006fd2:	d0ea      	beq.n	8006faa <_strtod_l+0x522>
 8006fd4:	f1c8 0800 	rsb	r8, r8, #0
 8006fd8:	f018 020f 	ands.w	r2, r8, #15
 8006fdc:	d00a      	beq.n	8006ff4 <_strtod_l+0x56c>
 8006fde:	4b13      	ldr	r3, [pc, #76]	; (800702c <_strtod_l+0x5a4>)
 8006fe0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006fe4:	4650      	mov	r0, sl
 8006fe6:	4659      	mov	r1, fp
 8006fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fec:	f7f9 fc2e 	bl	800084c <__aeabi_ddiv>
 8006ff0:	4682      	mov	sl, r0
 8006ff2:	468b      	mov	fp, r1
 8006ff4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006ff8:	d0d7      	beq.n	8006faa <_strtod_l+0x522>
 8006ffa:	f1b8 0f1f 	cmp.w	r8, #31
 8006ffe:	dd1f      	ble.n	8007040 <_strtod_l+0x5b8>
 8007000:	2500      	movs	r5, #0
 8007002:	462e      	mov	r6, r5
 8007004:	9507      	str	r5, [sp, #28]
 8007006:	9505      	str	r5, [sp, #20]
 8007008:	2322      	movs	r3, #34	; 0x22
 800700a:	f04f 0a00 	mov.w	sl, #0
 800700e:	f04f 0b00 	mov.w	fp, #0
 8007012:	6023      	str	r3, [r4, #0]
 8007014:	e786      	b.n	8006f24 <_strtod_l+0x49c>
 8007016:	bf00      	nop
 8007018:	0800a679 	.word	0x0800a679
 800701c:	0800a6bc 	.word	0x0800a6bc
 8007020:	0800a671 	.word	0x0800a671
 8007024:	0800a7fc 	.word	0x0800a7fc
 8007028:	0800aaa8 	.word	0x0800aaa8
 800702c:	0800a988 	.word	0x0800a988
 8007030:	0800a960 	.word	0x0800a960
 8007034:	7ff00000 	.word	0x7ff00000
 8007038:	7ca00000 	.word	0x7ca00000
 800703c:	7fefffff 	.word	0x7fefffff
 8007040:	f018 0310 	ands.w	r3, r8, #16
 8007044:	bf18      	it	ne
 8007046:	236a      	movne	r3, #106	; 0x6a
 8007048:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80073f8 <_strtod_l+0x970>
 800704c:	9304      	str	r3, [sp, #16]
 800704e:	4650      	mov	r0, sl
 8007050:	4659      	mov	r1, fp
 8007052:	2300      	movs	r3, #0
 8007054:	f018 0f01 	tst.w	r8, #1
 8007058:	d004      	beq.n	8007064 <_strtod_l+0x5dc>
 800705a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800705e:	f7f9 facb 	bl	80005f8 <__aeabi_dmul>
 8007062:	2301      	movs	r3, #1
 8007064:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007068:	f109 0908 	add.w	r9, r9, #8
 800706c:	d1f2      	bne.n	8007054 <_strtod_l+0x5cc>
 800706e:	b10b      	cbz	r3, 8007074 <_strtod_l+0x5ec>
 8007070:	4682      	mov	sl, r0
 8007072:	468b      	mov	fp, r1
 8007074:	9b04      	ldr	r3, [sp, #16]
 8007076:	b1c3      	cbz	r3, 80070aa <_strtod_l+0x622>
 8007078:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800707c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007080:	2b00      	cmp	r3, #0
 8007082:	4659      	mov	r1, fp
 8007084:	dd11      	ble.n	80070aa <_strtod_l+0x622>
 8007086:	2b1f      	cmp	r3, #31
 8007088:	f340 8124 	ble.w	80072d4 <_strtod_l+0x84c>
 800708c:	2b34      	cmp	r3, #52	; 0x34
 800708e:	bfde      	ittt	le
 8007090:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007094:	f04f 33ff 	movle.w	r3, #4294967295
 8007098:	fa03 f202 	lslle.w	r2, r3, r2
 800709c:	f04f 0a00 	mov.w	sl, #0
 80070a0:	bfcc      	ite	gt
 80070a2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80070a6:	ea02 0b01 	andle.w	fp, r2, r1
 80070aa:	2200      	movs	r2, #0
 80070ac:	2300      	movs	r3, #0
 80070ae:	4650      	mov	r0, sl
 80070b0:	4659      	mov	r1, fp
 80070b2:	f7f9 fd09 	bl	8000ac8 <__aeabi_dcmpeq>
 80070b6:	2800      	cmp	r0, #0
 80070b8:	d1a2      	bne.n	8007000 <_strtod_l+0x578>
 80070ba:	9b07      	ldr	r3, [sp, #28]
 80070bc:	9300      	str	r3, [sp, #0]
 80070be:	9908      	ldr	r1, [sp, #32]
 80070c0:	462b      	mov	r3, r5
 80070c2:	463a      	mov	r2, r7
 80070c4:	4620      	mov	r0, r4
 80070c6:	f001 fe2d 	bl	8008d24 <__s2b>
 80070ca:	9007      	str	r0, [sp, #28]
 80070cc:	2800      	cmp	r0, #0
 80070ce:	f43f af1f 	beq.w	8006f10 <_strtod_l+0x488>
 80070d2:	9b05      	ldr	r3, [sp, #20]
 80070d4:	1b9e      	subs	r6, r3, r6
 80070d6:	9b06      	ldr	r3, [sp, #24]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	bfb4      	ite	lt
 80070dc:	4633      	movlt	r3, r6
 80070de:	2300      	movge	r3, #0
 80070e0:	930c      	str	r3, [sp, #48]	; 0x30
 80070e2:	9b06      	ldr	r3, [sp, #24]
 80070e4:	2500      	movs	r5, #0
 80070e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80070ea:	9312      	str	r3, [sp, #72]	; 0x48
 80070ec:	462e      	mov	r6, r5
 80070ee:	9b07      	ldr	r3, [sp, #28]
 80070f0:	4620      	mov	r0, r4
 80070f2:	6859      	ldr	r1, [r3, #4]
 80070f4:	f001 fd6e 	bl	8008bd4 <_Balloc>
 80070f8:	9005      	str	r0, [sp, #20]
 80070fa:	2800      	cmp	r0, #0
 80070fc:	f43f af0c 	beq.w	8006f18 <_strtod_l+0x490>
 8007100:	9b07      	ldr	r3, [sp, #28]
 8007102:	691a      	ldr	r2, [r3, #16]
 8007104:	3202      	adds	r2, #2
 8007106:	f103 010c 	add.w	r1, r3, #12
 800710a:	0092      	lsls	r2, r2, #2
 800710c:	300c      	adds	r0, #12
 800710e:	f001 fd53 	bl	8008bb8 <memcpy>
 8007112:	ec4b ab10 	vmov	d0, sl, fp
 8007116:	aa1a      	add	r2, sp, #104	; 0x68
 8007118:	a919      	add	r1, sp, #100	; 0x64
 800711a:	4620      	mov	r0, r4
 800711c:	f002 f948 	bl	80093b0 <__d2b>
 8007120:	ec4b ab18 	vmov	d8, sl, fp
 8007124:	9018      	str	r0, [sp, #96]	; 0x60
 8007126:	2800      	cmp	r0, #0
 8007128:	f43f aef6 	beq.w	8006f18 <_strtod_l+0x490>
 800712c:	2101      	movs	r1, #1
 800712e:	4620      	mov	r0, r4
 8007130:	f001 fe92 	bl	8008e58 <__i2b>
 8007134:	4606      	mov	r6, r0
 8007136:	2800      	cmp	r0, #0
 8007138:	f43f aeee 	beq.w	8006f18 <_strtod_l+0x490>
 800713c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800713e:	9904      	ldr	r1, [sp, #16]
 8007140:	2b00      	cmp	r3, #0
 8007142:	bfab      	itete	ge
 8007144:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007146:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007148:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800714a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800714e:	bfac      	ite	ge
 8007150:	eb03 0902 	addge.w	r9, r3, r2
 8007154:	1ad7      	sublt	r7, r2, r3
 8007156:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007158:	eba3 0801 	sub.w	r8, r3, r1
 800715c:	4490      	add	r8, r2
 800715e:	4ba1      	ldr	r3, [pc, #644]	; (80073e4 <_strtod_l+0x95c>)
 8007160:	f108 38ff 	add.w	r8, r8, #4294967295
 8007164:	4598      	cmp	r8, r3
 8007166:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800716a:	f280 80c7 	bge.w	80072fc <_strtod_l+0x874>
 800716e:	eba3 0308 	sub.w	r3, r3, r8
 8007172:	2b1f      	cmp	r3, #31
 8007174:	eba2 0203 	sub.w	r2, r2, r3
 8007178:	f04f 0101 	mov.w	r1, #1
 800717c:	f300 80b1 	bgt.w	80072e2 <_strtod_l+0x85a>
 8007180:	fa01 f303 	lsl.w	r3, r1, r3
 8007184:	930d      	str	r3, [sp, #52]	; 0x34
 8007186:	2300      	movs	r3, #0
 8007188:	9308      	str	r3, [sp, #32]
 800718a:	eb09 0802 	add.w	r8, r9, r2
 800718e:	9b04      	ldr	r3, [sp, #16]
 8007190:	45c1      	cmp	r9, r8
 8007192:	4417      	add	r7, r2
 8007194:	441f      	add	r7, r3
 8007196:	464b      	mov	r3, r9
 8007198:	bfa8      	it	ge
 800719a:	4643      	movge	r3, r8
 800719c:	42bb      	cmp	r3, r7
 800719e:	bfa8      	it	ge
 80071a0:	463b      	movge	r3, r7
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	bfc2      	ittt	gt
 80071a6:	eba8 0803 	subgt.w	r8, r8, r3
 80071aa:	1aff      	subgt	r7, r7, r3
 80071ac:	eba9 0903 	subgt.w	r9, r9, r3
 80071b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	dd17      	ble.n	80071e6 <_strtod_l+0x75e>
 80071b6:	4631      	mov	r1, r6
 80071b8:	461a      	mov	r2, r3
 80071ba:	4620      	mov	r0, r4
 80071bc:	f001 ff0c 	bl	8008fd8 <__pow5mult>
 80071c0:	4606      	mov	r6, r0
 80071c2:	2800      	cmp	r0, #0
 80071c4:	f43f aea8 	beq.w	8006f18 <_strtod_l+0x490>
 80071c8:	4601      	mov	r1, r0
 80071ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80071cc:	4620      	mov	r0, r4
 80071ce:	f001 fe59 	bl	8008e84 <__multiply>
 80071d2:	900b      	str	r0, [sp, #44]	; 0x2c
 80071d4:	2800      	cmp	r0, #0
 80071d6:	f43f ae9f 	beq.w	8006f18 <_strtod_l+0x490>
 80071da:	9918      	ldr	r1, [sp, #96]	; 0x60
 80071dc:	4620      	mov	r0, r4
 80071de:	f001 fd39 	bl	8008c54 <_Bfree>
 80071e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071e4:	9318      	str	r3, [sp, #96]	; 0x60
 80071e6:	f1b8 0f00 	cmp.w	r8, #0
 80071ea:	f300 808c 	bgt.w	8007306 <_strtod_l+0x87e>
 80071ee:	9b06      	ldr	r3, [sp, #24]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	dd08      	ble.n	8007206 <_strtod_l+0x77e>
 80071f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80071f6:	9905      	ldr	r1, [sp, #20]
 80071f8:	4620      	mov	r0, r4
 80071fa:	f001 feed 	bl	8008fd8 <__pow5mult>
 80071fe:	9005      	str	r0, [sp, #20]
 8007200:	2800      	cmp	r0, #0
 8007202:	f43f ae89 	beq.w	8006f18 <_strtod_l+0x490>
 8007206:	2f00      	cmp	r7, #0
 8007208:	dd08      	ble.n	800721c <_strtod_l+0x794>
 800720a:	9905      	ldr	r1, [sp, #20]
 800720c:	463a      	mov	r2, r7
 800720e:	4620      	mov	r0, r4
 8007210:	f001 ff3c 	bl	800908c <__lshift>
 8007214:	9005      	str	r0, [sp, #20]
 8007216:	2800      	cmp	r0, #0
 8007218:	f43f ae7e 	beq.w	8006f18 <_strtod_l+0x490>
 800721c:	f1b9 0f00 	cmp.w	r9, #0
 8007220:	dd08      	ble.n	8007234 <_strtod_l+0x7ac>
 8007222:	4631      	mov	r1, r6
 8007224:	464a      	mov	r2, r9
 8007226:	4620      	mov	r0, r4
 8007228:	f001 ff30 	bl	800908c <__lshift>
 800722c:	4606      	mov	r6, r0
 800722e:	2800      	cmp	r0, #0
 8007230:	f43f ae72 	beq.w	8006f18 <_strtod_l+0x490>
 8007234:	9a05      	ldr	r2, [sp, #20]
 8007236:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007238:	4620      	mov	r0, r4
 800723a:	f001 ffb3 	bl	80091a4 <__mdiff>
 800723e:	4605      	mov	r5, r0
 8007240:	2800      	cmp	r0, #0
 8007242:	f43f ae69 	beq.w	8006f18 <_strtod_l+0x490>
 8007246:	68c3      	ldr	r3, [r0, #12]
 8007248:	930b      	str	r3, [sp, #44]	; 0x2c
 800724a:	2300      	movs	r3, #0
 800724c:	60c3      	str	r3, [r0, #12]
 800724e:	4631      	mov	r1, r6
 8007250:	f001 ff8c 	bl	800916c <__mcmp>
 8007254:	2800      	cmp	r0, #0
 8007256:	da60      	bge.n	800731a <_strtod_l+0x892>
 8007258:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800725a:	ea53 030a 	orrs.w	r3, r3, sl
 800725e:	f040 8082 	bne.w	8007366 <_strtod_l+0x8de>
 8007262:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007266:	2b00      	cmp	r3, #0
 8007268:	d17d      	bne.n	8007366 <_strtod_l+0x8de>
 800726a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800726e:	0d1b      	lsrs	r3, r3, #20
 8007270:	051b      	lsls	r3, r3, #20
 8007272:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007276:	d976      	bls.n	8007366 <_strtod_l+0x8de>
 8007278:	696b      	ldr	r3, [r5, #20]
 800727a:	b913      	cbnz	r3, 8007282 <_strtod_l+0x7fa>
 800727c:	692b      	ldr	r3, [r5, #16]
 800727e:	2b01      	cmp	r3, #1
 8007280:	dd71      	ble.n	8007366 <_strtod_l+0x8de>
 8007282:	4629      	mov	r1, r5
 8007284:	2201      	movs	r2, #1
 8007286:	4620      	mov	r0, r4
 8007288:	f001 ff00 	bl	800908c <__lshift>
 800728c:	4631      	mov	r1, r6
 800728e:	4605      	mov	r5, r0
 8007290:	f001 ff6c 	bl	800916c <__mcmp>
 8007294:	2800      	cmp	r0, #0
 8007296:	dd66      	ble.n	8007366 <_strtod_l+0x8de>
 8007298:	9904      	ldr	r1, [sp, #16]
 800729a:	4a53      	ldr	r2, [pc, #332]	; (80073e8 <_strtod_l+0x960>)
 800729c:	465b      	mov	r3, fp
 800729e:	2900      	cmp	r1, #0
 80072a0:	f000 8081 	beq.w	80073a6 <_strtod_l+0x91e>
 80072a4:	ea02 010b 	and.w	r1, r2, fp
 80072a8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80072ac:	dc7b      	bgt.n	80073a6 <_strtod_l+0x91e>
 80072ae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80072b2:	f77f aea9 	ble.w	8007008 <_strtod_l+0x580>
 80072b6:	4b4d      	ldr	r3, [pc, #308]	; (80073ec <_strtod_l+0x964>)
 80072b8:	4650      	mov	r0, sl
 80072ba:	4659      	mov	r1, fp
 80072bc:	2200      	movs	r2, #0
 80072be:	f7f9 f99b 	bl	80005f8 <__aeabi_dmul>
 80072c2:	460b      	mov	r3, r1
 80072c4:	4303      	orrs	r3, r0
 80072c6:	bf08      	it	eq
 80072c8:	2322      	moveq	r3, #34	; 0x22
 80072ca:	4682      	mov	sl, r0
 80072cc:	468b      	mov	fp, r1
 80072ce:	bf08      	it	eq
 80072d0:	6023      	streq	r3, [r4, #0]
 80072d2:	e62b      	b.n	8006f2c <_strtod_l+0x4a4>
 80072d4:	f04f 32ff 	mov.w	r2, #4294967295
 80072d8:	fa02 f303 	lsl.w	r3, r2, r3
 80072dc:	ea03 0a0a 	and.w	sl, r3, sl
 80072e0:	e6e3      	b.n	80070aa <_strtod_l+0x622>
 80072e2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80072e6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80072ea:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80072ee:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80072f2:	fa01 f308 	lsl.w	r3, r1, r8
 80072f6:	9308      	str	r3, [sp, #32]
 80072f8:	910d      	str	r1, [sp, #52]	; 0x34
 80072fa:	e746      	b.n	800718a <_strtod_l+0x702>
 80072fc:	2300      	movs	r3, #0
 80072fe:	9308      	str	r3, [sp, #32]
 8007300:	2301      	movs	r3, #1
 8007302:	930d      	str	r3, [sp, #52]	; 0x34
 8007304:	e741      	b.n	800718a <_strtod_l+0x702>
 8007306:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007308:	4642      	mov	r2, r8
 800730a:	4620      	mov	r0, r4
 800730c:	f001 febe 	bl	800908c <__lshift>
 8007310:	9018      	str	r0, [sp, #96]	; 0x60
 8007312:	2800      	cmp	r0, #0
 8007314:	f47f af6b 	bne.w	80071ee <_strtod_l+0x766>
 8007318:	e5fe      	b.n	8006f18 <_strtod_l+0x490>
 800731a:	465f      	mov	r7, fp
 800731c:	d16e      	bne.n	80073fc <_strtod_l+0x974>
 800731e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007320:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007324:	b342      	cbz	r2, 8007378 <_strtod_l+0x8f0>
 8007326:	4a32      	ldr	r2, [pc, #200]	; (80073f0 <_strtod_l+0x968>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d128      	bne.n	800737e <_strtod_l+0x8f6>
 800732c:	9b04      	ldr	r3, [sp, #16]
 800732e:	4651      	mov	r1, sl
 8007330:	b1eb      	cbz	r3, 800736e <_strtod_l+0x8e6>
 8007332:	4b2d      	ldr	r3, [pc, #180]	; (80073e8 <_strtod_l+0x960>)
 8007334:	403b      	ands	r3, r7
 8007336:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800733a:	f04f 32ff 	mov.w	r2, #4294967295
 800733e:	d819      	bhi.n	8007374 <_strtod_l+0x8ec>
 8007340:	0d1b      	lsrs	r3, r3, #20
 8007342:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007346:	fa02 f303 	lsl.w	r3, r2, r3
 800734a:	4299      	cmp	r1, r3
 800734c:	d117      	bne.n	800737e <_strtod_l+0x8f6>
 800734e:	4b29      	ldr	r3, [pc, #164]	; (80073f4 <_strtod_l+0x96c>)
 8007350:	429f      	cmp	r7, r3
 8007352:	d102      	bne.n	800735a <_strtod_l+0x8d2>
 8007354:	3101      	adds	r1, #1
 8007356:	f43f addf 	beq.w	8006f18 <_strtod_l+0x490>
 800735a:	4b23      	ldr	r3, [pc, #140]	; (80073e8 <_strtod_l+0x960>)
 800735c:	403b      	ands	r3, r7
 800735e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007362:	f04f 0a00 	mov.w	sl, #0
 8007366:	9b04      	ldr	r3, [sp, #16]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d1a4      	bne.n	80072b6 <_strtod_l+0x82e>
 800736c:	e5de      	b.n	8006f2c <_strtod_l+0x4a4>
 800736e:	f04f 33ff 	mov.w	r3, #4294967295
 8007372:	e7ea      	b.n	800734a <_strtod_l+0x8c2>
 8007374:	4613      	mov	r3, r2
 8007376:	e7e8      	b.n	800734a <_strtod_l+0x8c2>
 8007378:	ea53 030a 	orrs.w	r3, r3, sl
 800737c:	d08c      	beq.n	8007298 <_strtod_l+0x810>
 800737e:	9b08      	ldr	r3, [sp, #32]
 8007380:	b1db      	cbz	r3, 80073ba <_strtod_l+0x932>
 8007382:	423b      	tst	r3, r7
 8007384:	d0ef      	beq.n	8007366 <_strtod_l+0x8de>
 8007386:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007388:	9a04      	ldr	r2, [sp, #16]
 800738a:	4650      	mov	r0, sl
 800738c:	4659      	mov	r1, fp
 800738e:	b1c3      	cbz	r3, 80073c2 <_strtod_l+0x93a>
 8007390:	f7ff fb5c 	bl	8006a4c <sulp>
 8007394:	4602      	mov	r2, r0
 8007396:	460b      	mov	r3, r1
 8007398:	ec51 0b18 	vmov	r0, r1, d8
 800739c:	f7f8 ff76 	bl	800028c <__adddf3>
 80073a0:	4682      	mov	sl, r0
 80073a2:	468b      	mov	fp, r1
 80073a4:	e7df      	b.n	8007366 <_strtod_l+0x8de>
 80073a6:	4013      	ands	r3, r2
 80073a8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80073ac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80073b0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80073b4:	f04f 3aff 	mov.w	sl, #4294967295
 80073b8:	e7d5      	b.n	8007366 <_strtod_l+0x8de>
 80073ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073bc:	ea13 0f0a 	tst.w	r3, sl
 80073c0:	e7e0      	b.n	8007384 <_strtod_l+0x8fc>
 80073c2:	f7ff fb43 	bl	8006a4c <sulp>
 80073c6:	4602      	mov	r2, r0
 80073c8:	460b      	mov	r3, r1
 80073ca:	ec51 0b18 	vmov	r0, r1, d8
 80073ce:	f7f8 ff5b 	bl	8000288 <__aeabi_dsub>
 80073d2:	2200      	movs	r2, #0
 80073d4:	2300      	movs	r3, #0
 80073d6:	4682      	mov	sl, r0
 80073d8:	468b      	mov	fp, r1
 80073da:	f7f9 fb75 	bl	8000ac8 <__aeabi_dcmpeq>
 80073de:	2800      	cmp	r0, #0
 80073e0:	d0c1      	beq.n	8007366 <_strtod_l+0x8de>
 80073e2:	e611      	b.n	8007008 <_strtod_l+0x580>
 80073e4:	fffffc02 	.word	0xfffffc02
 80073e8:	7ff00000 	.word	0x7ff00000
 80073ec:	39500000 	.word	0x39500000
 80073f0:	000fffff 	.word	0x000fffff
 80073f4:	7fefffff 	.word	0x7fefffff
 80073f8:	0800a6d0 	.word	0x0800a6d0
 80073fc:	4631      	mov	r1, r6
 80073fe:	4628      	mov	r0, r5
 8007400:	f002 f832 	bl	8009468 <__ratio>
 8007404:	ec59 8b10 	vmov	r8, r9, d0
 8007408:	ee10 0a10 	vmov	r0, s0
 800740c:	2200      	movs	r2, #0
 800740e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007412:	4649      	mov	r1, r9
 8007414:	f7f9 fb6c 	bl	8000af0 <__aeabi_dcmple>
 8007418:	2800      	cmp	r0, #0
 800741a:	d07a      	beq.n	8007512 <_strtod_l+0xa8a>
 800741c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800741e:	2b00      	cmp	r3, #0
 8007420:	d04a      	beq.n	80074b8 <_strtod_l+0xa30>
 8007422:	4b95      	ldr	r3, [pc, #596]	; (8007678 <_strtod_l+0xbf0>)
 8007424:	2200      	movs	r2, #0
 8007426:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800742a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007678 <_strtod_l+0xbf0>
 800742e:	f04f 0800 	mov.w	r8, #0
 8007432:	4b92      	ldr	r3, [pc, #584]	; (800767c <_strtod_l+0xbf4>)
 8007434:	403b      	ands	r3, r7
 8007436:	930d      	str	r3, [sp, #52]	; 0x34
 8007438:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800743a:	4b91      	ldr	r3, [pc, #580]	; (8007680 <_strtod_l+0xbf8>)
 800743c:	429a      	cmp	r2, r3
 800743e:	f040 80b0 	bne.w	80075a2 <_strtod_l+0xb1a>
 8007442:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007446:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800744a:	ec4b ab10 	vmov	d0, sl, fp
 800744e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007452:	f001 ff31 	bl	80092b8 <__ulp>
 8007456:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800745a:	ec53 2b10 	vmov	r2, r3, d0
 800745e:	f7f9 f8cb 	bl	80005f8 <__aeabi_dmul>
 8007462:	4652      	mov	r2, sl
 8007464:	465b      	mov	r3, fp
 8007466:	f7f8 ff11 	bl	800028c <__adddf3>
 800746a:	460b      	mov	r3, r1
 800746c:	4983      	ldr	r1, [pc, #524]	; (800767c <_strtod_l+0xbf4>)
 800746e:	4a85      	ldr	r2, [pc, #532]	; (8007684 <_strtod_l+0xbfc>)
 8007470:	4019      	ands	r1, r3
 8007472:	4291      	cmp	r1, r2
 8007474:	4682      	mov	sl, r0
 8007476:	d960      	bls.n	800753a <_strtod_l+0xab2>
 8007478:	ee18 3a90 	vmov	r3, s17
 800747c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007480:	4293      	cmp	r3, r2
 8007482:	d104      	bne.n	800748e <_strtod_l+0xa06>
 8007484:	ee18 3a10 	vmov	r3, s16
 8007488:	3301      	adds	r3, #1
 800748a:	f43f ad45 	beq.w	8006f18 <_strtod_l+0x490>
 800748e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007690 <_strtod_l+0xc08>
 8007492:	f04f 3aff 	mov.w	sl, #4294967295
 8007496:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007498:	4620      	mov	r0, r4
 800749a:	f001 fbdb 	bl	8008c54 <_Bfree>
 800749e:	9905      	ldr	r1, [sp, #20]
 80074a0:	4620      	mov	r0, r4
 80074a2:	f001 fbd7 	bl	8008c54 <_Bfree>
 80074a6:	4631      	mov	r1, r6
 80074a8:	4620      	mov	r0, r4
 80074aa:	f001 fbd3 	bl	8008c54 <_Bfree>
 80074ae:	4629      	mov	r1, r5
 80074b0:	4620      	mov	r0, r4
 80074b2:	f001 fbcf 	bl	8008c54 <_Bfree>
 80074b6:	e61a      	b.n	80070ee <_strtod_l+0x666>
 80074b8:	f1ba 0f00 	cmp.w	sl, #0
 80074bc:	d11b      	bne.n	80074f6 <_strtod_l+0xa6e>
 80074be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80074c2:	b9f3      	cbnz	r3, 8007502 <_strtod_l+0xa7a>
 80074c4:	4b6c      	ldr	r3, [pc, #432]	; (8007678 <_strtod_l+0xbf0>)
 80074c6:	2200      	movs	r2, #0
 80074c8:	4640      	mov	r0, r8
 80074ca:	4649      	mov	r1, r9
 80074cc:	f7f9 fb06 	bl	8000adc <__aeabi_dcmplt>
 80074d0:	b9d0      	cbnz	r0, 8007508 <_strtod_l+0xa80>
 80074d2:	4640      	mov	r0, r8
 80074d4:	4649      	mov	r1, r9
 80074d6:	4b6c      	ldr	r3, [pc, #432]	; (8007688 <_strtod_l+0xc00>)
 80074d8:	2200      	movs	r2, #0
 80074da:	f7f9 f88d 	bl	80005f8 <__aeabi_dmul>
 80074de:	4680      	mov	r8, r0
 80074e0:	4689      	mov	r9, r1
 80074e2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80074e6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80074ea:	9315      	str	r3, [sp, #84]	; 0x54
 80074ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80074f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80074f4:	e79d      	b.n	8007432 <_strtod_l+0x9aa>
 80074f6:	f1ba 0f01 	cmp.w	sl, #1
 80074fa:	d102      	bne.n	8007502 <_strtod_l+0xa7a>
 80074fc:	2f00      	cmp	r7, #0
 80074fe:	f43f ad83 	beq.w	8007008 <_strtod_l+0x580>
 8007502:	4b62      	ldr	r3, [pc, #392]	; (800768c <_strtod_l+0xc04>)
 8007504:	2200      	movs	r2, #0
 8007506:	e78e      	b.n	8007426 <_strtod_l+0x99e>
 8007508:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007688 <_strtod_l+0xc00>
 800750c:	f04f 0800 	mov.w	r8, #0
 8007510:	e7e7      	b.n	80074e2 <_strtod_l+0xa5a>
 8007512:	4b5d      	ldr	r3, [pc, #372]	; (8007688 <_strtod_l+0xc00>)
 8007514:	4640      	mov	r0, r8
 8007516:	4649      	mov	r1, r9
 8007518:	2200      	movs	r2, #0
 800751a:	f7f9 f86d 	bl	80005f8 <__aeabi_dmul>
 800751e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007520:	4680      	mov	r8, r0
 8007522:	4689      	mov	r9, r1
 8007524:	b933      	cbnz	r3, 8007534 <_strtod_l+0xaac>
 8007526:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800752a:	900e      	str	r0, [sp, #56]	; 0x38
 800752c:	930f      	str	r3, [sp, #60]	; 0x3c
 800752e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007532:	e7dd      	b.n	80074f0 <_strtod_l+0xa68>
 8007534:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007538:	e7f9      	b.n	800752e <_strtod_l+0xaa6>
 800753a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800753e:	9b04      	ldr	r3, [sp, #16]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d1a8      	bne.n	8007496 <_strtod_l+0xa0e>
 8007544:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007548:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800754a:	0d1b      	lsrs	r3, r3, #20
 800754c:	051b      	lsls	r3, r3, #20
 800754e:	429a      	cmp	r2, r3
 8007550:	d1a1      	bne.n	8007496 <_strtod_l+0xa0e>
 8007552:	4640      	mov	r0, r8
 8007554:	4649      	mov	r1, r9
 8007556:	f7f9 fbaf 	bl	8000cb8 <__aeabi_d2lz>
 800755a:	f7f9 f81f 	bl	800059c <__aeabi_l2d>
 800755e:	4602      	mov	r2, r0
 8007560:	460b      	mov	r3, r1
 8007562:	4640      	mov	r0, r8
 8007564:	4649      	mov	r1, r9
 8007566:	f7f8 fe8f 	bl	8000288 <__aeabi_dsub>
 800756a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800756c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007570:	ea43 030a 	orr.w	r3, r3, sl
 8007574:	4313      	orrs	r3, r2
 8007576:	4680      	mov	r8, r0
 8007578:	4689      	mov	r9, r1
 800757a:	d055      	beq.n	8007628 <_strtod_l+0xba0>
 800757c:	a336      	add	r3, pc, #216	; (adr r3, 8007658 <_strtod_l+0xbd0>)
 800757e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007582:	f7f9 faab 	bl	8000adc <__aeabi_dcmplt>
 8007586:	2800      	cmp	r0, #0
 8007588:	f47f acd0 	bne.w	8006f2c <_strtod_l+0x4a4>
 800758c:	a334      	add	r3, pc, #208	; (adr r3, 8007660 <_strtod_l+0xbd8>)
 800758e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007592:	4640      	mov	r0, r8
 8007594:	4649      	mov	r1, r9
 8007596:	f7f9 fabf 	bl	8000b18 <__aeabi_dcmpgt>
 800759a:	2800      	cmp	r0, #0
 800759c:	f43f af7b 	beq.w	8007496 <_strtod_l+0xa0e>
 80075a0:	e4c4      	b.n	8006f2c <_strtod_l+0x4a4>
 80075a2:	9b04      	ldr	r3, [sp, #16]
 80075a4:	b333      	cbz	r3, 80075f4 <_strtod_l+0xb6c>
 80075a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075a8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80075ac:	d822      	bhi.n	80075f4 <_strtod_l+0xb6c>
 80075ae:	a32e      	add	r3, pc, #184	; (adr r3, 8007668 <_strtod_l+0xbe0>)
 80075b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b4:	4640      	mov	r0, r8
 80075b6:	4649      	mov	r1, r9
 80075b8:	f7f9 fa9a 	bl	8000af0 <__aeabi_dcmple>
 80075bc:	b1a0      	cbz	r0, 80075e8 <_strtod_l+0xb60>
 80075be:	4649      	mov	r1, r9
 80075c0:	4640      	mov	r0, r8
 80075c2:	f7f9 faf1 	bl	8000ba8 <__aeabi_d2uiz>
 80075c6:	2801      	cmp	r0, #1
 80075c8:	bf38      	it	cc
 80075ca:	2001      	movcc	r0, #1
 80075cc:	f7f8 ff9a 	bl	8000504 <__aeabi_ui2d>
 80075d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075d2:	4680      	mov	r8, r0
 80075d4:	4689      	mov	r9, r1
 80075d6:	bb23      	cbnz	r3, 8007622 <_strtod_l+0xb9a>
 80075d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80075dc:	9010      	str	r0, [sp, #64]	; 0x40
 80075de:	9311      	str	r3, [sp, #68]	; 0x44
 80075e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80075e4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80075e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80075ec:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80075f0:	1a9b      	subs	r3, r3, r2
 80075f2:	9309      	str	r3, [sp, #36]	; 0x24
 80075f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80075f8:	eeb0 0a48 	vmov.f32	s0, s16
 80075fc:	eef0 0a68 	vmov.f32	s1, s17
 8007600:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007604:	f001 fe58 	bl	80092b8 <__ulp>
 8007608:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800760c:	ec53 2b10 	vmov	r2, r3, d0
 8007610:	f7f8 fff2 	bl	80005f8 <__aeabi_dmul>
 8007614:	ec53 2b18 	vmov	r2, r3, d8
 8007618:	f7f8 fe38 	bl	800028c <__adddf3>
 800761c:	4682      	mov	sl, r0
 800761e:	468b      	mov	fp, r1
 8007620:	e78d      	b.n	800753e <_strtod_l+0xab6>
 8007622:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007626:	e7db      	b.n	80075e0 <_strtod_l+0xb58>
 8007628:	a311      	add	r3, pc, #68	; (adr r3, 8007670 <_strtod_l+0xbe8>)
 800762a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762e:	f7f9 fa55 	bl	8000adc <__aeabi_dcmplt>
 8007632:	e7b2      	b.n	800759a <_strtod_l+0xb12>
 8007634:	2300      	movs	r3, #0
 8007636:	930a      	str	r3, [sp, #40]	; 0x28
 8007638:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800763a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800763c:	6013      	str	r3, [r2, #0]
 800763e:	f7ff ba6b 	b.w	8006b18 <_strtod_l+0x90>
 8007642:	2a65      	cmp	r2, #101	; 0x65
 8007644:	f43f ab5f 	beq.w	8006d06 <_strtod_l+0x27e>
 8007648:	2a45      	cmp	r2, #69	; 0x45
 800764a:	f43f ab5c 	beq.w	8006d06 <_strtod_l+0x27e>
 800764e:	2301      	movs	r3, #1
 8007650:	f7ff bb94 	b.w	8006d7c <_strtod_l+0x2f4>
 8007654:	f3af 8000 	nop.w
 8007658:	94a03595 	.word	0x94a03595
 800765c:	3fdfffff 	.word	0x3fdfffff
 8007660:	35afe535 	.word	0x35afe535
 8007664:	3fe00000 	.word	0x3fe00000
 8007668:	ffc00000 	.word	0xffc00000
 800766c:	41dfffff 	.word	0x41dfffff
 8007670:	94a03595 	.word	0x94a03595
 8007674:	3fcfffff 	.word	0x3fcfffff
 8007678:	3ff00000 	.word	0x3ff00000
 800767c:	7ff00000 	.word	0x7ff00000
 8007680:	7fe00000 	.word	0x7fe00000
 8007684:	7c9fffff 	.word	0x7c9fffff
 8007688:	3fe00000 	.word	0x3fe00000
 800768c:	bff00000 	.word	0xbff00000
 8007690:	7fefffff 	.word	0x7fefffff

08007694 <_strtod_r>:
 8007694:	4b01      	ldr	r3, [pc, #4]	; (800769c <_strtod_r+0x8>)
 8007696:	f7ff b9f7 	b.w	8006a88 <_strtod_l>
 800769a:	bf00      	nop
 800769c:	20000074 	.word	0x20000074

080076a0 <_strtol_l.constprop.0>:
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076a6:	d001      	beq.n	80076ac <_strtol_l.constprop.0+0xc>
 80076a8:	2b24      	cmp	r3, #36	; 0x24
 80076aa:	d906      	bls.n	80076ba <_strtol_l.constprop.0+0x1a>
 80076ac:	f7fe fafc 	bl	8005ca8 <__errno>
 80076b0:	2316      	movs	r3, #22
 80076b2:	6003      	str	r3, [r0, #0]
 80076b4:	2000      	movs	r0, #0
 80076b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80077a0 <_strtol_l.constprop.0+0x100>
 80076be:	460d      	mov	r5, r1
 80076c0:	462e      	mov	r6, r5
 80076c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80076c6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80076ca:	f017 0708 	ands.w	r7, r7, #8
 80076ce:	d1f7      	bne.n	80076c0 <_strtol_l.constprop.0+0x20>
 80076d0:	2c2d      	cmp	r4, #45	; 0x2d
 80076d2:	d132      	bne.n	800773a <_strtol_l.constprop.0+0x9a>
 80076d4:	782c      	ldrb	r4, [r5, #0]
 80076d6:	2701      	movs	r7, #1
 80076d8:	1cb5      	adds	r5, r6, #2
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d05b      	beq.n	8007796 <_strtol_l.constprop.0+0xf6>
 80076de:	2b10      	cmp	r3, #16
 80076e0:	d109      	bne.n	80076f6 <_strtol_l.constprop.0+0x56>
 80076e2:	2c30      	cmp	r4, #48	; 0x30
 80076e4:	d107      	bne.n	80076f6 <_strtol_l.constprop.0+0x56>
 80076e6:	782c      	ldrb	r4, [r5, #0]
 80076e8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80076ec:	2c58      	cmp	r4, #88	; 0x58
 80076ee:	d14d      	bne.n	800778c <_strtol_l.constprop.0+0xec>
 80076f0:	786c      	ldrb	r4, [r5, #1]
 80076f2:	2310      	movs	r3, #16
 80076f4:	3502      	adds	r5, #2
 80076f6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80076fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80076fe:	f04f 0c00 	mov.w	ip, #0
 8007702:	fbb8 f9f3 	udiv	r9, r8, r3
 8007706:	4666      	mov	r6, ip
 8007708:	fb03 8a19 	mls	sl, r3, r9, r8
 800770c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007710:	f1be 0f09 	cmp.w	lr, #9
 8007714:	d816      	bhi.n	8007744 <_strtol_l.constprop.0+0xa4>
 8007716:	4674      	mov	r4, lr
 8007718:	42a3      	cmp	r3, r4
 800771a:	dd24      	ble.n	8007766 <_strtol_l.constprop.0+0xc6>
 800771c:	f1bc 0f00 	cmp.w	ip, #0
 8007720:	db1e      	blt.n	8007760 <_strtol_l.constprop.0+0xc0>
 8007722:	45b1      	cmp	r9, r6
 8007724:	d31c      	bcc.n	8007760 <_strtol_l.constprop.0+0xc0>
 8007726:	d101      	bne.n	800772c <_strtol_l.constprop.0+0x8c>
 8007728:	45a2      	cmp	sl, r4
 800772a:	db19      	blt.n	8007760 <_strtol_l.constprop.0+0xc0>
 800772c:	fb06 4603 	mla	r6, r6, r3, r4
 8007730:	f04f 0c01 	mov.w	ip, #1
 8007734:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007738:	e7e8      	b.n	800770c <_strtol_l.constprop.0+0x6c>
 800773a:	2c2b      	cmp	r4, #43	; 0x2b
 800773c:	bf04      	itt	eq
 800773e:	782c      	ldrbeq	r4, [r5, #0]
 8007740:	1cb5      	addeq	r5, r6, #2
 8007742:	e7ca      	b.n	80076da <_strtol_l.constprop.0+0x3a>
 8007744:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007748:	f1be 0f19 	cmp.w	lr, #25
 800774c:	d801      	bhi.n	8007752 <_strtol_l.constprop.0+0xb2>
 800774e:	3c37      	subs	r4, #55	; 0x37
 8007750:	e7e2      	b.n	8007718 <_strtol_l.constprop.0+0x78>
 8007752:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007756:	f1be 0f19 	cmp.w	lr, #25
 800775a:	d804      	bhi.n	8007766 <_strtol_l.constprop.0+0xc6>
 800775c:	3c57      	subs	r4, #87	; 0x57
 800775e:	e7db      	b.n	8007718 <_strtol_l.constprop.0+0x78>
 8007760:	f04f 3cff 	mov.w	ip, #4294967295
 8007764:	e7e6      	b.n	8007734 <_strtol_l.constprop.0+0x94>
 8007766:	f1bc 0f00 	cmp.w	ip, #0
 800776a:	da05      	bge.n	8007778 <_strtol_l.constprop.0+0xd8>
 800776c:	2322      	movs	r3, #34	; 0x22
 800776e:	6003      	str	r3, [r0, #0]
 8007770:	4646      	mov	r6, r8
 8007772:	b942      	cbnz	r2, 8007786 <_strtol_l.constprop.0+0xe6>
 8007774:	4630      	mov	r0, r6
 8007776:	e79e      	b.n	80076b6 <_strtol_l.constprop.0+0x16>
 8007778:	b107      	cbz	r7, 800777c <_strtol_l.constprop.0+0xdc>
 800777a:	4276      	negs	r6, r6
 800777c:	2a00      	cmp	r2, #0
 800777e:	d0f9      	beq.n	8007774 <_strtol_l.constprop.0+0xd4>
 8007780:	f1bc 0f00 	cmp.w	ip, #0
 8007784:	d000      	beq.n	8007788 <_strtol_l.constprop.0+0xe8>
 8007786:	1e69      	subs	r1, r5, #1
 8007788:	6011      	str	r1, [r2, #0]
 800778a:	e7f3      	b.n	8007774 <_strtol_l.constprop.0+0xd4>
 800778c:	2430      	movs	r4, #48	; 0x30
 800778e:	2b00      	cmp	r3, #0
 8007790:	d1b1      	bne.n	80076f6 <_strtol_l.constprop.0+0x56>
 8007792:	2308      	movs	r3, #8
 8007794:	e7af      	b.n	80076f6 <_strtol_l.constprop.0+0x56>
 8007796:	2c30      	cmp	r4, #48	; 0x30
 8007798:	d0a5      	beq.n	80076e6 <_strtol_l.constprop.0+0x46>
 800779a:	230a      	movs	r3, #10
 800779c:	e7ab      	b.n	80076f6 <_strtol_l.constprop.0+0x56>
 800779e:	bf00      	nop
 80077a0:	0800a6f9 	.word	0x0800a6f9

080077a4 <_strtol_r>:
 80077a4:	f7ff bf7c 	b.w	80076a0 <_strtol_l.constprop.0>

080077a8 <quorem>:
 80077a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ac:	6903      	ldr	r3, [r0, #16]
 80077ae:	690c      	ldr	r4, [r1, #16]
 80077b0:	42a3      	cmp	r3, r4
 80077b2:	4607      	mov	r7, r0
 80077b4:	f2c0 8081 	blt.w	80078ba <quorem+0x112>
 80077b8:	3c01      	subs	r4, #1
 80077ba:	f101 0814 	add.w	r8, r1, #20
 80077be:	f100 0514 	add.w	r5, r0, #20
 80077c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80077c6:	9301      	str	r3, [sp, #4]
 80077c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80077cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80077d0:	3301      	adds	r3, #1
 80077d2:	429a      	cmp	r2, r3
 80077d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80077d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80077dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80077e0:	d331      	bcc.n	8007846 <quorem+0x9e>
 80077e2:	f04f 0e00 	mov.w	lr, #0
 80077e6:	4640      	mov	r0, r8
 80077e8:	46ac      	mov	ip, r5
 80077ea:	46f2      	mov	sl, lr
 80077ec:	f850 2b04 	ldr.w	r2, [r0], #4
 80077f0:	b293      	uxth	r3, r2
 80077f2:	fb06 e303 	mla	r3, r6, r3, lr
 80077f6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	ebaa 0303 	sub.w	r3, sl, r3
 8007800:	f8dc a000 	ldr.w	sl, [ip]
 8007804:	0c12      	lsrs	r2, r2, #16
 8007806:	fa13 f38a 	uxtah	r3, r3, sl
 800780a:	fb06 e202 	mla	r2, r6, r2, lr
 800780e:	9300      	str	r3, [sp, #0]
 8007810:	9b00      	ldr	r3, [sp, #0]
 8007812:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007816:	b292      	uxth	r2, r2
 8007818:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800781c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007820:	f8bd 3000 	ldrh.w	r3, [sp]
 8007824:	4581      	cmp	r9, r0
 8007826:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800782a:	f84c 3b04 	str.w	r3, [ip], #4
 800782e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007832:	d2db      	bcs.n	80077ec <quorem+0x44>
 8007834:	f855 300b 	ldr.w	r3, [r5, fp]
 8007838:	b92b      	cbnz	r3, 8007846 <quorem+0x9e>
 800783a:	9b01      	ldr	r3, [sp, #4]
 800783c:	3b04      	subs	r3, #4
 800783e:	429d      	cmp	r5, r3
 8007840:	461a      	mov	r2, r3
 8007842:	d32e      	bcc.n	80078a2 <quorem+0xfa>
 8007844:	613c      	str	r4, [r7, #16]
 8007846:	4638      	mov	r0, r7
 8007848:	f001 fc90 	bl	800916c <__mcmp>
 800784c:	2800      	cmp	r0, #0
 800784e:	db24      	blt.n	800789a <quorem+0xf2>
 8007850:	3601      	adds	r6, #1
 8007852:	4628      	mov	r0, r5
 8007854:	f04f 0c00 	mov.w	ip, #0
 8007858:	f858 2b04 	ldr.w	r2, [r8], #4
 800785c:	f8d0 e000 	ldr.w	lr, [r0]
 8007860:	b293      	uxth	r3, r2
 8007862:	ebac 0303 	sub.w	r3, ip, r3
 8007866:	0c12      	lsrs	r2, r2, #16
 8007868:	fa13 f38e 	uxtah	r3, r3, lr
 800786c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007870:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007874:	b29b      	uxth	r3, r3
 8007876:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800787a:	45c1      	cmp	r9, r8
 800787c:	f840 3b04 	str.w	r3, [r0], #4
 8007880:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007884:	d2e8      	bcs.n	8007858 <quorem+0xb0>
 8007886:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800788a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800788e:	b922      	cbnz	r2, 800789a <quorem+0xf2>
 8007890:	3b04      	subs	r3, #4
 8007892:	429d      	cmp	r5, r3
 8007894:	461a      	mov	r2, r3
 8007896:	d30a      	bcc.n	80078ae <quorem+0x106>
 8007898:	613c      	str	r4, [r7, #16]
 800789a:	4630      	mov	r0, r6
 800789c:	b003      	add	sp, #12
 800789e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078a2:	6812      	ldr	r2, [r2, #0]
 80078a4:	3b04      	subs	r3, #4
 80078a6:	2a00      	cmp	r2, #0
 80078a8:	d1cc      	bne.n	8007844 <quorem+0x9c>
 80078aa:	3c01      	subs	r4, #1
 80078ac:	e7c7      	b.n	800783e <quorem+0x96>
 80078ae:	6812      	ldr	r2, [r2, #0]
 80078b0:	3b04      	subs	r3, #4
 80078b2:	2a00      	cmp	r2, #0
 80078b4:	d1f0      	bne.n	8007898 <quorem+0xf0>
 80078b6:	3c01      	subs	r4, #1
 80078b8:	e7eb      	b.n	8007892 <quorem+0xea>
 80078ba:	2000      	movs	r0, #0
 80078bc:	e7ee      	b.n	800789c <quorem+0xf4>
	...

080078c0 <_dtoa_r>:
 80078c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078c4:	ed2d 8b04 	vpush	{d8-d9}
 80078c8:	ec57 6b10 	vmov	r6, r7, d0
 80078cc:	b093      	sub	sp, #76	; 0x4c
 80078ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80078d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80078d4:	9106      	str	r1, [sp, #24]
 80078d6:	ee10 aa10 	vmov	sl, s0
 80078da:	4604      	mov	r4, r0
 80078dc:	9209      	str	r2, [sp, #36]	; 0x24
 80078de:	930c      	str	r3, [sp, #48]	; 0x30
 80078e0:	46bb      	mov	fp, r7
 80078e2:	b975      	cbnz	r5, 8007902 <_dtoa_r+0x42>
 80078e4:	2010      	movs	r0, #16
 80078e6:	f001 f94d 	bl	8008b84 <malloc>
 80078ea:	4602      	mov	r2, r0
 80078ec:	6260      	str	r0, [r4, #36]	; 0x24
 80078ee:	b920      	cbnz	r0, 80078fa <_dtoa_r+0x3a>
 80078f0:	4ba7      	ldr	r3, [pc, #668]	; (8007b90 <_dtoa_r+0x2d0>)
 80078f2:	21ea      	movs	r1, #234	; 0xea
 80078f4:	48a7      	ldr	r0, [pc, #668]	; (8007b94 <_dtoa_r+0x2d4>)
 80078f6:	f002 f8bd 	bl	8009a74 <__assert_func>
 80078fa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80078fe:	6005      	str	r5, [r0, #0]
 8007900:	60c5      	str	r5, [r0, #12]
 8007902:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007904:	6819      	ldr	r1, [r3, #0]
 8007906:	b151      	cbz	r1, 800791e <_dtoa_r+0x5e>
 8007908:	685a      	ldr	r2, [r3, #4]
 800790a:	604a      	str	r2, [r1, #4]
 800790c:	2301      	movs	r3, #1
 800790e:	4093      	lsls	r3, r2
 8007910:	608b      	str	r3, [r1, #8]
 8007912:	4620      	mov	r0, r4
 8007914:	f001 f99e 	bl	8008c54 <_Bfree>
 8007918:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800791a:	2200      	movs	r2, #0
 800791c:	601a      	str	r2, [r3, #0]
 800791e:	1e3b      	subs	r3, r7, #0
 8007920:	bfaa      	itet	ge
 8007922:	2300      	movge	r3, #0
 8007924:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007928:	f8c8 3000 	strge.w	r3, [r8]
 800792c:	4b9a      	ldr	r3, [pc, #616]	; (8007b98 <_dtoa_r+0x2d8>)
 800792e:	bfbc      	itt	lt
 8007930:	2201      	movlt	r2, #1
 8007932:	f8c8 2000 	strlt.w	r2, [r8]
 8007936:	ea33 030b 	bics.w	r3, r3, fp
 800793a:	d11b      	bne.n	8007974 <_dtoa_r+0xb4>
 800793c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800793e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007942:	6013      	str	r3, [r2, #0]
 8007944:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007948:	4333      	orrs	r3, r6
 800794a:	f000 8592 	beq.w	8008472 <_dtoa_r+0xbb2>
 800794e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007950:	b963      	cbnz	r3, 800796c <_dtoa_r+0xac>
 8007952:	4b92      	ldr	r3, [pc, #584]	; (8007b9c <_dtoa_r+0x2dc>)
 8007954:	e022      	b.n	800799c <_dtoa_r+0xdc>
 8007956:	4b92      	ldr	r3, [pc, #584]	; (8007ba0 <_dtoa_r+0x2e0>)
 8007958:	9301      	str	r3, [sp, #4]
 800795a:	3308      	adds	r3, #8
 800795c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800795e:	6013      	str	r3, [r2, #0]
 8007960:	9801      	ldr	r0, [sp, #4]
 8007962:	b013      	add	sp, #76	; 0x4c
 8007964:	ecbd 8b04 	vpop	{d8-d9}
 8007968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800796c:	4b8b      	ldr	r3, [pc, #556]	; (8007b9c <_dtoa_r+0x2dc>)
 800796e:	9301      	str	r3, [sp, #4]
 8007970:	3303      	adds	r3, #3
 8007972:	e7f3      	b.n	800795c <_dtoa_r+0x9c>
 8007974:	2200      	movs	r2, #0
 8007976:	2300      	movs	r3, #0
 8007978:	4650      	mov	r0, sl
 800797a:	4659      	mov	r1, fp
 800797c:	f7f9 f8a4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007980:	ec4b ab19 	vmov	d9, sl, fp
 8007984:	4680      	mov	r8, r0
 8007986:	b158      	cbz	r0, 80079a0 <_dtoa_r+0xe0>
 8007988:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800798a:	2301      	movs	r3, #1
 800798c:	6013      	str	r3, [r2, #0]
 800798e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007990:	2b00      	cmp	r3, #0
 8007992:	f000 856b 	beq.w	800846c <_dtoa_r+0xbac>
 8007996:	4883      	ldr	r0, [pc, #524]	; (8007ba4 <_dtoa_r+0x2e4>)
 8007998:	6018      	str	r0, [r3, #0]
 800799a:	1e43      	subs	r3, r0, #1
 800799c:	9301      	str	r3, [sp, #4]
 800799e:	e7df      	b.n	8007960 <_dtoa_r+0xa0>
 80079a0:	ec4b ab10 	vmov	d0, sl, fp
 80079a4:	aa10      	add	r2, sp, #64	; 0x40
 80079a6:	a911      	add	r1, sp, #68	; 0x44
 80079a8:	4620      	mov	r0, r4
 80079aa:	f001 fd01 	bl	80093b0 <__d2b>
 80079ae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80079b2:	ee08 0a10 	vmov	s16, r0
 80079b6:	2d00      	cmp	r5, #0
 80079b8:	f000 8084 	beq.w	8007ac4 <_dtoa_r+0x204>
 80079bc:	ee19 3a90 	vmov	r3, s19
 80079c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079c4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80079c8:	4656      	mov	r6, sl
 80079ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80079ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80079d2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80079d6:	4b74      	ldr	r3, [pc, #464]	; (8007ba8 <_dtoa_r+0x2e8>)
 80079d8:	2200      	movs	r2, #0
 80079da:	4630      	mov	r0, r6
 80079dc:	4639      	mov	r1, r7
 80079de:	f7f8 fc53 	bl	8000288 <__aeabi_dsub>
 80079e2:	a365      	add	r3, pc, #404	; (adr r3, 8007b78 <_dtoa_r+0x2b8>)
 80079e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e8:	f7f8 fe06 	bl	80005f8 <__aeabi_dmul>
 80079ec:	a364      	add	r3, pc, #400	; (adr r3, 8007b80 <_dtoa_r+0x2c0>)
 80079ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f2:	f7f8 fc4b 	bl	800028c <__adddf3>
 80079f6:	4606      	mov	r6, r0
 80079f8:	4628      	mov	r0, r5
 80079fa:	460f      	mov	r7, r1
 80079fc:	f7f8 fd92 	bl	8000524 <__aeabi_i2d>
 8007a00:	a361      	add	r3, pc, #388	; (adr r3, 8007b88 <_dtoa_r+0x2c8>)
 8007a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a06:	f7f8 fdf7 	bl	80005f8 <__aeabi_dmul>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	4630      	mov	r0, r6
 8007a10:	4639      	mov	r1, r7
 8007a12:	f7f8 fc3b 	bl	800028c <__adddf3>
 8007a16:	4606      	mov	r6, r0
 8007a18:	460f      	mov	r7, r1
 8007a1a:	f7f9 f89d 	bl	8000b58 <__aeabi_d2iz>
 8007a1e:	2200      	movs	r2, #0
 8007a20:	9000      	str	r0, [sp, #0]
 8007a22:	2300      	movs	r3, #0
 8007a24:	4630      	mov	r0, r6
 8007a26:	4639      	mov	r1, r7
 8007a28:	f7f9 f858 	bl	8000adc <__aeabi_dcmplt>
 8007a2c:	b150      	cbz	r0, 8007a44 <_dtoa_r+0x184>
 8007a2e:	9800      	ldr	r0, [sp, #0]
 8007a30:	f7f8 fd78 	bl	8000524 <__aeabi_i2d>
 8007a34:	4632      	mov	r2, r6
 8007a36:	463b      	mov	r3, r7
 8007a38:	f7f9 f846 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a3c:	b910      	cbnz	r0, 8007a44 <_dtoa_r+0x184>
 8007a3e:	9b00      	ldr	r3, [sp, #0]
 8007a40:	3b01      	subs	r3, #1
 8007a42:	9300      	str	r3, [sp, #0]
 8007a44:	9b00      	ldr	r3, [sp, #0]
 8007a46:	2b16      	cmp	r3, #22
 8007a48:	d85a      	bhi.n	8007b00 <_dtoa_r+0x240>
 8007a4a:	9a00      	ldr	r2, [sp, #0]
 8007a4c:	4b57      	ldr	r3, [pc, #348]	; (8007bac <_dtoa_r+0x2ec>)
 8007a4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a56:	ec51 0b19 	vmov	r0, r1, d9
 8007a5a:	f7f9 f83f 	bl	8000adc <__aeabi_dcmplt>
 8007a5e:	2800      	cmp	r0, #0
 8007a60:	d050      	beq.n	8007b04 <_dtoa_r+0x244>
 8007a62:	9b00      	ldr	r3, [sp, #0]
 8007a64:	3b01      	subs	r3, #1
 8007a66:	9300      	str	r3, [sp, #0]
 8007a68:	2300      	movs	r3, #0
 8007a6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a6e:	1b5d      	subs	r5, r3, r5
 8007a70:	1e6b      	subs	r3, r5, #1
 8007a72:	9305      	str	r3, [sp, #20]
 8007a74:	bf45      	ittet	mi
 8007a76:	f1c5 0301 	rsbmi	r3, r5, #1
 8007a7a:	9304      	strmi	r3, [sp, #16]
 8007a7c:	2300      	movpl	r3, #0
 8007a7e:	2300      	movmi	r3, #0
 8007a80:	bf4c      	ite	mi
 8007a82:	9305      	strmi	r3, [sp, #20]
 8007a84:	9304      	strpl	r3, [sp, #16]
 8007a86:	9b00      	ldr	r3, [sp, #0]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	db3d      	blt.n	8007b08 <_dtoa_r+0x248>
 8007a8c:	9b05      	ldr	r3, [sp, #20]
 8007a8e:	9a00      	ldr	r2, [sp, #0]
 8007a90:	920a      	str	r2, [sp, #40]	; 0x28
 8007a92:	4413      	add	r3, r2
 8007a94:	9305      	str	r3, [sp, #20]
 8007a96:	2300      	movs	r3, #0
 8007a98:	9307      	str	r3, [sp, #28]
 8007a9a:	9b06      	ldr	r3, [sp, #24]
 8007a9c:	2b09      	cmp	r3, #9
 8007a9e:	f200 8089 	bhi.w	8007bb4 <_dtoa_r+0x2f4>
 8007aa2:	2b05      	cmp	r3, #5
 8007aa4:	bfc4      	itt	gt
 8007aa6:	3b04      	subgt	r3, #4
 8007aa8:	9306      	strgt	r3, [sp, #24]
 8007aaa:	9b06      	ldr	r3, [sp, #24]
 8007aac:	f1a3 0302 	sub.w	r3, r3, #2
 8007ab0:	bfcc      	ite	gt
 8007ab2:	2500      	movgt	r5, #0
 8007ab4:	2501      	movle	r5, #1
 8007ab6:	2b03      	cmp	r3, #3
 8007ab8:	f200 8087 	bhi.w	8007bca <_dtoa_r+0x30a>
 8007abc:	e8df f003 	tbb	[pc, r3]
 8007ac0:	59383a2d 	.word	0x59383a2d
 8007ac4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007ac8:	441d      	add	r5, r3
 8007aca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007ace:	2b20      	cmp	r3, #32
 8007ad0:	bfc1      	itttt	gt
 8007ad2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007ad6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007ada:	fa0b f303 	lslgt.w	r3, fp, r3
 8007ade:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007ae2:	bfda      	itte	le
 8007ae4:	f1c3 0320 	rsble	r3, r3, #32
 8007ae8:	fa06 f003 	lslle.w	r0, r6, r3
 8007aec:	4318      	orrgt	r0, r3
 8007aee:	f7f8 fd09 	bl	8000504 <__aeabi_ui2d>
 8007af2:	2301      	movs	r3, #1
 8007af4:	4606      	mov	r6, r0
 8007af6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007afa:	3d01      	subs	r5, #1
 8007afc:	930e      	str	r3, [sp, #56]	; 0x38
 8007afe:	e76a      	b.n	80079d6 <_dtoa_r+0x116>
 8007b00:	2301      	movs	r3, #1
 8007b02:	e7b2      	b.n	8007a6a <_dtoa_r+0x1aa>
 8007b04:	900b      	str	r0, [sp, #44]	; 0x2c
 8007b06:	e7b1      	b.n	8007a6c <_dtoa_r+0x1ac>
 8007b08:	9b04      	ldr	r3, [sp, #16]
 8007b0a:	9a00      	ldr	r2, [sp, #0]
 8007b0c:	1a9b      	subs	r3, r3, r2
 8007b0e:	9304      	str	r3, [sp, #16]
 8007b10:	4253      	negs	r3, r2
 8007b12:	9307      	str	r3, [sp, #28]
 8007b14:	2300      	movs	r3, #0
 8007b16:	930a      	str	r3, [sp, #40]	; 0x28
 8007b18:	e7bf      	b.n	8007a9a <_dtoa_r+0x1da>
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	9308      	str	r3, [sp, #32]
 8007b1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	dc55      	bgt.n	8007bd0 <_dtoa_r+0x310>
 8007b24:	2301      	movs	r3, #1
 8007b26:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	9209      	str	r2, [sp, #36]	; 0x24
 8007b2e:	e00c      	b.n	8007b4a <_dtoa_r+0x28a>
 8007b30:	2301      	movs	r3, #1
 8007b32:	e7f3      	b.n	8007b1c <_dtoa_r+0x25c>
 8007b34:	2300      	movs	r3, #0
 8007b36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b38:	9308      	str	r3, [sp, #32]
 8007b3a:	9b00      	ldr	r3, [sp, #0]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	9302      	str	r3, [sp, #8]
 8007b40:	3301      	adds	r3, #1
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	9303      	str	r3, [sp, #12]
 8007b46:	bfb8      	it	lt
 8007b48:	2301      	movlt	r3, #1
 8007b4a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	6042      	str	r2, [r0, #4]
 8007b50:	2204      	movs	r2, #4
 8007b52:	f102 0614 	add.w	r6, r2, #20
 8007b56:	429e      	cmp	r6, r3
 8007b58:	6841      	ldr	r1, [r0, #4]
 8007b5a:	d93d      	bls.n	8007bd8 <_dtoa_r+0x318>
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	f001 f839 	bl	8008bd4 <_Balloc>
 8007b62:	9001      	str	r0, [sp, #4]
 8007b64:	2800      	cmp	r0, #0
 8007b66:	d13b      	bne.n	8007be0 <_dtoa_r+0x320>
 8007b68:	4b11      	ldr	r3, [pc, #68]	; (8007bb0 <_dtoa_r+0x2f0>)
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007b70:	e6c0      	b.n	80078f4 <_dtoa_r+0x34>
 8007b72:	2301      	movs	r3, #1
 8007b74:	e7df      	b.n	8007b36 <_dtoa_r+0x276>
 8007b76:	bf00      	nop
 8007b78:	636f4361 	.word	0x636f4361
 8007b7c:	3fd287a7 	.word	0x3fd287a7
 8007b80:	8b60c8b3 	.word	0x8b60c8b3
 8007b84:	3fc68a28 	.word	0x3fc68a28
 8007b88:	509f79fb 	.word	0x509f79fb
 8007b8c:	3fd34413 	.word	0x3fd34413
 8007b90:	0800a806 	.word	0x0800a806
 8007b94:	0800a81d 	.word	0x0800a81d
 8007b98:	7ff00000 	.word	0x7ff00000
 8007b9c:	0800a802 	.word	0x0800a802
 8007ba0:	0800a7f9 	.word	0x0800a7f9
 8007ba4:	0800a67d 	.word	0x0800a67d
 8007ba8:	3ff80000 	.word	0x3ff80000
 8007bac:	0800a988 	.word	0x0800a988
 8007bb0:	0800a878 	.word	0x0800a878
 8007bb4:	2501      	movs	r5, #1
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	9306      	str	r3, [sp, #24]
 8007bba:	9508      	str	r5, [sp, #32]
 8007bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8007bc0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	2312      	movs	r3, #18
 8007bc8:	e7b0      	b.n	8007b2c <_dtoa_r+0x26c>
 8007bca:	2301      	movs	r3, #1
 8007bcc:	9308      	str	r3, [sp, #32]
 8007bce:	e7f5      	b.n	8007bbc <_dtoa_r+0x2fc>
 8007bd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bd2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007bd6:	e7b8      	b.n	8007b4a <_dtoa_r+0x28a>
 8007bd8:	3101      	adds	r1, #1
 8007bda:	6041      	str	r1, [r0, #4]
 8007bdc:	0052      	lsls	r2, r2, #1
 8007bde:	e7b8      	b.n	8007b52 <_dtoa_r+0x292>
 8007be0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007be2:	9a01      	ldr	r2, [sp, #4]
 8007be4:	601a      	str	r2, [r3, #0]
 8007be6:	9b03      	ldr	r3, [sp, #12]
 8007be8:	2b0e      	cmp	r3, #14
 8007bea:	f200 809d 	bhi.w	8007d28 <_dtoa_r+0x468>
 8007bee:	2d00      	cmp	r5, #0
 8007bf0:	f000 809a 	beq.w	8007d28 <_dtoa_r+0x468>
 8007bf4:	9b00      	ldr	r3, [sp, #0]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	dd32      	ble.n	8007c60 <_dtoa_r+0x3a0>
 8007bfa:	4ab7      	ldr	r2, [pc, #732]	; (8007ed8 <_dtoa_r+0x618>)
 8007bfc:	f003 030f 	and.w	r3, r3, #15
 8007c00:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007c04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c08:	9b00      	ldr	r3, [sp, #0]
 8007c0a:	05d8      	lsls	r0, r3, #23
 8007c0c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007c10:	d516      	bpl.n	8007c40 <_dtoa_r+0x380>
 8007c12:	4bb2      	ldr	r3, [pc, #712]	; (8007edc <_dtoa_r+0x61c>)
 8007c14:	ec51 0b19 	vmov	r0, r1, d9
 8007c18:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007c1c:	f7f8 fe16 	bl	800084c <__aeabi_ddiv>
 8007c20:	f007 070f 	and.w	r7, r7, #15
 8007c24:	4682      	mov	sl, r0
 8007c26:	468b      	mov	fp, r1
 8007c28:	2503      	movs	r5, #3
 8007c2a:	4eac      	ldr	r6, [pc, #688]	; (8007edc <_dtoa_r+0x61c>)
 8007c2c:	b957      	cbnz	r7, 8007c44 <_dtoa_r+0x384>
 8007c2e:	4642      	mov	r2, r8
 8007c30:	464b      	mov	r3, r9
 8007c32:	4650      	mov	r0, sl
 8007c34:	4659      	mov	r1, fp
 8007c36:	f7f8 fe09 	bl	800084c <__aeabi_ddiv>
 8007c3a:	4682      	mov	sl, r0
 8007c3c:	468b      	mov	fp, r1
 8007c3e:	e028      	b.n	8007c92 <_dtoa_r+0x3d2>
 8007c40:	2502      	movs	r5, #2
 8007c42:	e7f2      	b.n	8007c2a <_dtoa_r+0x36a>
 8007c44:	07f9      	lsls	r1, r7, #31
 8007c46:	d508      	bpl.n	8007c5a <_dtoa_r+0x39a>
 8007c48:	4640      	mov	r0, r8
 8007c4a:	4649      	mov	r1, r9
 8007c4c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007c50:	f7f8 fcd2 	bl	80005f8 <__aeabi_dmul>
 8007c54:	3501      	adds	r5, #1
 8007c56:	4680      	mov	r8, r0
 8007c58:	4689      	mov	r9, r1
 8007c5a:	107f      	asrs	r7, r7, #1
 8007c5c:	3608      	adds	r6, #8
 8007c5e:	e7e5      	b.n	8007c2c <_dtoa_r+0x36c>
 8007c60:	f000 809b 	beq.w	8007d9a <_dtoa_r+0x4da>
 8007c64:	9b00      	ldr	r3, [sp, #0]
 8007c66:	4f9d      	ldr	r7, [pc, #628]	; (8007edc <_dtoa_r+0x61c>)
 8007c68:	425e      	negs	r6, r3
 8007c6a:	4b9b      	ldr	r3, [pc, #620]	; (8007ed8 <_dtoa_r+0x618>)
 8007c6c:	f006 020f 	and.w	r2, r6, #15
 8007c70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c78:	ec51 0b19 	vmov	r0, r1, d9
 8007c7c:	f7f8 fcbc 	bl	80005f8 <__aeabi_dmul>
 8007c80:	1136      	asrs	r6, r6, #4
 8007c82:	4682      	mov	sl, r0
 8007c84:	468b      	mov	fp, r1
 8007c86:	2300      	movs	r3, #0
 8007c88:	2502      	movs	r5, #2
 8007c8a:	2e00      	cmp	r6, #0
 8007c8c:	d17a      	bne.n	8007d84 <_dtoa_r+0x4c4>
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d1d3      	bne.n	8007c3a <_dtoa_r+0x37a>
 8007c92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	f000 8082 	beq.w	8007d9e <_dtoa_r+0x4de>
 8007c9a:	4b91      	ldr	r3, [pc, #580]	; (8007ee0 <_dtoa_r+0x620>)
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	4650      	mov	r0, sl
 8007ca0:	4659      	mov	r1, fp
 8007ca2:	f7f8 ff1b 	bl	8000adc <__aeabi_dcmplt>
 8007ca6:	2800      	cmp	r0, #0
 8007ca8:	d079      	beq.n	8007d9e <_dtoa_r+0x4de>
 8007caa:	9b03      	ldr	r3, [sp, #12]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d076      	beq.n	8007d9e <_dtoa_r+0x4de>
 8007cb0:	9b02      	ldr	r3, [sp, #8]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	dd36      	ble.n	8007d24 <_dtoa_r+0x464>
 8007cb6:	9b00      	ldr	r3, [sp, #0]
 8007cb8:	4650      	mov	r0, sl
 8007cba:	4659      	mov	r1, fp
 8007cbc:	1e5f      	subs	r7, r3, #1
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	4b88      	ldr	r3, [pc, #544]	; (8007ee4 <_dtoa_r+0x624>)
 8007cc2:	f7f8 fc99 	bl	80005f8 <__aeabi_dmul>
 8007cc6:	9e02      	ldr	r6, [sp, #8]
 8007cc8:	4682      	mov	sl, r0
 8007cca:	468b      	mov	fp, r1
 8007ccc:	3501      	adds	r5, #1
 8007cce:	4628      	mov	r0, r5
 8007cd0:	f7f8 fc28 	bl	8000524 <__aeabi_i2d>
 8007cd4:	4652      	mov	r2, sl
 8007cd6:	465b      	mov	r3, fp
 8007cd8:	f7f8 fc8e 	bl	80005f8 <__aeabi_dmul>
 8007cdc:	4b82      	ldr	r3, [pc, #520]	; (8007ee8 <_dtoa_r+0x628>)
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f7f8 fad4 	bl	800028c <__adddf3>
 8007ce4:	46d0      	mov	r8, sl
 8007ce6:	46d9      	mov	r9, fp
 8007ce8:	4682      	mov	sl, r0
 8007cea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007cee:	2e00      	cmp	r6, #0
 8007cf0:	d158      	bne.n	8007da4 <_dtoa_r+0x4e4>
 8007cf2:	4b7e      	ldr	r3, [pc, #504]	; (8007eec <_dtoa_r+0x62c>)
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	4640      	mov	r0, r8
 8007cf8:	4649      	mov	r1, r9
 8007cfa:	f7f8 fac5 	bl	8000288 <__aeabi_dsub>
 8007cfe:	4652      	mov	r2, sl
 8007d00:	465b      	mov	r3, fp
 8007d02:	4680      	mov	r8, r0
 8007d04:	4689      	mov	r9, r1
 8007d06:	f7f8 ff07 	bl	8000b18 <__aeabi_dcmpgt>
 8007d0a:	2800      	cmp	r0, #0
 8007d0c:	f040 8295 	bne.w	800823a <_dtoa_r+0x97a>
 8007d10:	4652      	mov	r2, sl
 8007d12:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007d16:	4640      	mov	r0, r8
 8007d18:	4649      	mov	r1, r9
 8007d1a:	f7f8 fedf 	bl	8000adc <__aeabi_dcmplt>
 8007d1e:	2800      	cmp	r0, #0
 8007d20:	f040 8289 	bne.w	8008236 <_dtoa_r+0x976>
 8007d24:	ec5b ab19 	vmov	sl, fp, d9
 8007d28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	f2c0 8148 	blt.w	8007fc0 <_dtoa_r+0x700>
 8007d30:	9a00      	ldr	r2, [sp, #0]
 8007d32:	2a0e      	cmp	r2, #14
 8007d34:	f300 8144 	bgt.w	8007fc0 <_dtoa_r+0x700>
 8007d38:	4b67      	ldr	r3, [pc, #412]	; (8007ed8 <_dtoa_r+0x618>)
 8007d3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d3e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	f280 80d5 	bge.w	8007ef4 <_dtoa_r+0x634>
 8007d4a:	9b03      	ldr	r3, [sp, #12]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	f300 80d1 	bgt.w	8007ef4 <_dtoa_r+0x634>
 8007d52:	f040 826f 	bne.w	8008234 <_dtoa_r+0x974>
 8007d56:	4b65      	ldr	r3, [pc, #404]	; (8007eec <_dtoa_r+0x62c>)
 8007d58:	2200      	movs	r2, #0
 8007d5a:	4640      	mov	r0, r8
 8007d5c:	4649      	mov	r1, r9
 8007d5e:	f7f8 fc4b 	bl	80005f8 <__aeabi_dmul>
 8007d62:	4652      	mov	r2, sl
 8007d64:	465b      	mov	r3, fp
 8007d66:	f7f8 fecd 	bl	8000b04 <__aeabi_dcmpge>
 8007d6a:	9e03      	ldr	r6, [sp, #12]
 8007d6c:	4637      	mov	r7, r6
 8007d6e:	2800      	cmp	r0, #0
 8007d70:	f040 8245 	bne.w	80081fe <_dtoa_r+0x93e>
 8007d74:	9d01      	ldr	r5, [sp, #4]
 8007d76:	2331      	movs	r3, #49	; 0x31
 8007d78:	f805 3b01 	strb.w	r3, [r5], #1
 8007d7c:	9b00      	ldr	r3, [sp, #0]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	9300      	str	r3, [sp, #0]
 8007d82:	e240      	b.n	8008206 <_dtoa_r+0x946>
 8007d84:	07f2      	lsls	r2, r6, #31
 8007d86:	d505      	bpl.n	8007d94 <_dtoa_r+0x4d4>
 8007d88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d8c:	f7f8 fc34 	bl	80005f8 <__aeabi_dmul>
 8007d90:	3501      	adds	r5, #1
 8007d92:	2301      	movs	r3, #1
 8007d94:	1076      	asrs	r6, r6, #1
 8007d96:	3708      	adds	r7, #8
 8007d98:	e777      	b.n	8007c8a <_dtoa_r+0x3ca>
 8007d9a:	2502      	movs	r5, #2
 8007d9c:	e779      	b.n	8007c92 <_dtoa_r+0x3d2>
 8007d9e:	9f00      	ldr	r7, [sp, #0]
 8007da0:	9e03      	ldr	r6, [sp, #12]
 8007da2:	e794      	b.n	8007cce <_dtoa_r+0x40e>
 8007da4:	9901      	ldr	r1, [sp, #4]
 8007da6:	4b4c      	ldr	r3, [pc, #304]	; (8007ed8 <_dtoa_r+0x618>)
 8007da8:	4431      	add	r1, r6
 8007daa:	910d      	str	r1, [sp, #52]	; 0x34
 8007dac:	9908      	ldr	r1, [sp, #32]
 8007dae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007db2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007db6:	2900      	cmp	r1, #0
 8007db8:	d043      	beq.n	8007e42 <_dtoa_r+0x582>
 8007dba:	494d      	ldr	r1, [pc, #308]	; (8007ef0 <_dtoa_r+0x630>)
 8007dbc:	2000      	movs	r0, #0
 8007dbe:	f7f8 fd45 	bl	800084c <__aeabi_ddiv>
 8007dc2:	4652      	mov	r2, sl
 8007dc4:	465b      	mov	r3, fp
 8007dc6:	f7f8 fa5f 	bl	8000288 <__aeabi_dsub>
 8007dca:	9d01      	ldr	r5, [sp, #4]
 8007dcc:	4682      	mov	sl, r0
 8007dce:	468b      	mov	fp, r1
 8007dd0:	4649      	mov	r1, r9
 8007dd2:	4640      	mov	r0, r8
 8007dd4:	f7f8 fec0 	bl	8000b58 <__aeabi_d2iz>
 8007dd8:	4606      	mov	r6, r0
 8007dda:	f7f8 fba3 	bl	8000524 <__aeabi_i2d>
 8007dde:	4602      	mov	r2, r0
 8007de0:	460b      	mov	r3, r1
 8007de2:	4640      	mov	r0, r8
 8007de4:	4649      	mov	r1, r9
 8007de6:	f7f8 fa4f 	bl	8000288 <__aeabi_dsub>
 8007dea:	3630      	adds	r6, #48	; 0x30
 8007dec:	f805 6b01 	strb.w	r6, [r5], #1
 8007df0:	4652      	mov	r2, sl
 8007df2:	465b      	mov	r3, fp
 8007df4:	4680      	mov	r8, r0
 8007df6:	4689      	mov	r9, r1
 8007df8:	f7f8 fe70 	bl	8000adc <__aeabi_dcmplt>
 8007dfc:	2800      	cmp	r0, #0
 8007dfe:	d163      	bne.n	8007ec8 <_dtoa_r+0x608>
 8007e00:	4642      	mov	r2, r8
 8007e02:	464b      	mov	r3, r9
 8007e04:	4936      	ldr	r1, [pc, #216]	; (8007ee0 <_dtoa_r+0x620>)
 8007e06:	2000      	movs	r0, #0
 8007e08:	f7f8 fa3e 	bl	8000288 <__aeabi_dsub>
 8007e0c:	4652      	mov	r2, sl
 8007e0e:	465b      	mov	r3, fp
 8007e10:	f7f8 fe64 	bl	8000adc <__aeabi_dcmplt>
 8007e14:	2800      	cmp	r0, #0
 8007e16:	f040 80b5 	bne.w	8007f84 <_dtoa_r+0x6c4>
 8007e1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e1c:	429d      	cmp	r5, r3
 8007e1e:	d081      	beq.n	8007d24 <_dtoa_r+0x464>
 8007e20:	4b30      	ldr	r3, [pc, #192]	; (8007ee4 <_dtoa_r+0x624>)
 8007e22:	2200      	movs	r2, #0
 8007e24:	4650      	mov	r0, sl
 8007e26:	4659      	mov	r1, fp
 8007e28:	f7f8 fbe6 	bl	80005f8 <__aeabi_dmul>
 8007e2c:	4b2d      	ldr	r3, [pc, #180]	; (8007ee4 <_dtoa_r+0x624>)
 8007e2e:	4682      	mov	sl, r0
 8007e30:	468b      	mov	fp, r1
 8007e32:	4640      	mov	r0, r8
 8007e34:	4649      	mov	r1, r9
 8007e36:	2200      	movs	r2, #0
 8007e38:	f7f8 fbde 	bl	80005f8 <__aeabi_dmul>
 8007e3c:	4680      	mov	r8, r0
 8007e3e:	4689      	mov	r9, r1
 8007e40:	e7c6      	b.n	8007dd0 <_dtoa_r+0x510>
 8007e42:	4650      	mov	r0, sl
 8007e44:	4659      	mov	r1, fp
 8007e46:	f7f8 fbd7 	bl	80005f8 <__aeabi_dmul>
 8007e4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e4c:	9d01      	ldr	r5, [sp, #4]
 8007e4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e50:	4682      	mov	sl, r0
 8007e52:	468b      	mov	fp, r1
 8007e54:	4649      	mov	r1, r9
 8007e56:	4640      	mov	r0, r8
 8007e58:	f7f8 fe7e 	bl	8000b58 <__aeabi_d2iz>
 8007e5c:	4606      	mov	r6, r0
 8007e5e:	f7f8 fb61 	bl	8000524 <__aeabi_i2d>
 8007e62:	3630      	adds	r6, #48	; 0x30
 8007e64:	4602      	mov	r2, r0
 8007e66:	460b      	mov	r3, r1
 8007e68:	4640      	mov	r0, r8
 8007e6a:	4649      	mov	r1, r9
 8007e6c:	f7f8 fa0c 	bl	8000288 <__aeabi_dsub>
 8007e70:	f805 6b01 	strb.w	r6, [r5], #1
 8007e74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e76:	429d      	cmp	r5, r3
 8007e78:	4680      	mov	r8, r0
 8007e7a:	4689      	mov	r9, r1
 8007e7c:	f04f 0200 	mov.w	r2, #0
 8007e80:	d124      	bne.n	8007ecc <_dtoa_r+0x60c>
 8007e82:	4b1b      	ldr	r3, [pc, #108]	; (8007ef0 <_dtoa_r+0x630>)
 8007e84:	4650      	mov	r0, sl
 8007e86:	4659      	mov	r1, fp
 8007e88:	f7f8 fa00 	bl	800028c <__adddf3>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	460b      	mov	r3, r1
 8007e90:	4640      	mov	r0, r8
 8007e92:	4649      	mov	r1, r9
 8007e94:	f7f8 fe40 	bl	8000b18 <__aeabi_dcmpgt>
 8007e98:	2800      	cmp	r0, #0
 8007e9a:	d173      	bne.n	8007f84 <_dtoa_r+0x6c4>
 8007e9c:	4652      	mov	r2, sl
 8007e9e:	465b      	mov	r3, fp
 8007ea0:	4913      	ldr	r1, [pc, #76]	; (8007ef0 <_dtoa_r+0x630>)
 8007ea2:	2000      	movs	r0, #0
 8007ea4:	f7f8 f9f0 	bl	8000288 <__aeabi_dsub>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	460b      	mov	r3, r1
 8007eac:	4640      	mov	r0, r8
 8007eae:	4649      	mov	r1, r9
 8007eb0:	f7f8 fe14 	bl	8000adc <__aeabi_dcmplt>
 8007eb4:	2800      	cmp	r0, #0
 8007eb6:	f43f af35 	beq.w	8007d24 <_dtoa_r+0x464>
 8007eba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007ebc:	1e6b      	subs	r3, r5, #1
 8007ebe:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ec0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007ec4:	2b30      	cmp	r3, #48	; 0x30
 8007ec6:	d0f8      	beq.n	8007eba <_dtoa_r+0x5fa>
 8007ec8:	9700      	str	r7, [sp, #0]
 8007eca:	e049      	b.n	8007f60 <_dtoa_r+0x6a0>
 8007ecc:	4b05      	ldr	r3, [pc, #20]	; (8007ee4 <_dtoa_r+0x624>)
 8007ece:	f7f8 fb93 	bl	80005f8 <__aeabi_dmul>
 8007ed2:	4680      	mov	r8, r0
 8007ed4:	4689      	mov	r9, r1
 8007ed6:	e7bd      	b.n	8007e54 <_dtoa_r+0x594>
 8007ed8:	0800a988 	.word	0x0800a988
 8007edc:	0800a960 	.word	0x0800a960
 8007ee0:	3ff00000 	.word	0x3ff00000
 8007ee4:	40240000 	.word	0x40240000
 8007ee8:	401c0000 	.word	0x401c0000
 8007eec:	40140000 	.word	0x40140000
 8007ef0:	3fe00000 	.word	0x3fe00000
 8007ef4:	9d01      	ldr	r5, [sp, #4]
 8007ef6:	4656      	mov	r6, sl
 8007ef8:	465f      	mov	r7, fp
 8007efa:	4642      	mov	r2, r8
 8007efc:	464b      	mov	r3, r9
 8007efe:	4630      	mov	r0, r6
 8007f00:	4639      	mov	r1, r7
 8007f02:	f7f8 fca3 	bl	800084c <__aeabi_ddiv>
 8007f06:	f7f8 fe27 	bl	8000b58 <__aeabi_d2iz>
 8007f0a:	4682      	mov	sl, r0
 8007f0c:	f7f8 fb0a 	bl	8000524 <__aeabi_i2d>
 8007f10:	4642      	mov	r2, r8
 8007f12:	464b      	mov	r3, r9
 8007f14:	f7f8 fb70 	bl	80005f8 <__aeabi_dmul>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	4630      	mov	r0, r6
 8007f1e:	4639      	mov	r1, r7
 8007f20:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007f24:	f7f8 f9b0 	bl	8000288 <__aeabi_dsub>
 8007f28:	f805 6b01 	strb.w	r6, [r5], #1
 8007f2c:	9e01      	ldr	r6, [sp, #4]
 8007f2e:	9f03      	ldr	r7, [sp, #12]
 8007f30:	1bae      	subs	r6, r5, r6
 8007f32:	42b7      	cmp	r7, r6
 8007f34:	4602      	mov	r2, r0
 8007f36:	460b      	mov	r3, r1
 8007f38:	d135      	bne.n	8007fa6 <_dtoa_r+0x6e6>
 8007f3a:	f7f8 f9a7 	bl	800028c <__adddf3>
 8007f3e:	4642      	mov	r2, r8
 8007f40:	464b      	mov	r3, r9
 8007f42:	4606      	mov	r6, r0
 8007f44:	460f      	mov	r7, r1
 8007f46:	f7f8 fde7 	bl	8000b18 <__aeabi_dcmpgt>
 8007f4a:	b9d0      	cbnz	r0, 8007f82 <_dtoa_r+0x6c2>
 8007f4c:	4642      	mov	r2, r8
 8007f4e:	464b      	mov	r3, r9
 8007f50:	4630      	mov	r0, r6
 8007f52:	4639      	mov	r1, r7
 8007f54:	f7f8 fdb8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f58:	b110      	cbz	r0, 8007f60 <_dtoa_r+0x6a0>
 8007f5a:	f01a 0f01 	tst.w	sl, #1
 8007f5e:	d110      	bne.n	8007f82 <_dtoa_r+0x6c2>
 8007f60:	4620      	mov	r0, r4
 8007f62:	ee18 1a10 	vmov	r1, s16
 8007f66:	f000 fe75 	bl	8008c54 <_Bfree>
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	9800      	ldr	r0, [sp, #0]
 8007f6e:	702b      	strb	r3, [r5, #0]
 8007f70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f72:	3001      	adds	r0, #1
 8007f74:	6018      	str	r0, [r3, #0]
 8007f76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f43f acf1 	beq.w	8007960 <_dtoa_r+0xa0>
 8007f7e:	601d      	str	r5, [r3, #0]
 8007f80:	e4ee      	b.n	8007960 <_dtoa_r+0xa0>
 8007f82:	9f00      	ldr	r7, [sp, #0]
 8007f84:	462b      	mov	r3, r5
 8007f86:	461d      	mov	r5, r3
 8007f88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f8c:	2a39      	cmp	r2, #57	; 0x39
 8007f8e:	d106      	bne.n	8007f9e <_dtoa_r+0x6de>
 8007f90:	9a01      	ldr	r2, [sp, #4]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d1f7      	bne.n	8007f86 <_dtoa_r+0x6c6>
 8007f96:	9901      	ldr	r1, [sp, #4]
 8007f98:	2230      	movs	r2, #48	; 0x30
 8007f9a:	3701      	adds	r7, #1
 8007f9c:	700a      	strb	r2, [r1, #0]
 8007f9e:	781a      	ldrb	r2, [r3, #0]
 8007fa0:	3201      	adds	r2, #1
 8007fa2:	701a      	strb	r2, [r3, #0]
 8007fa4:	e790      	b.n	8007ec8 <_dtoa_r+0x608>
 8007fa6:	4ba6      	ldr	r3, [pc, #664]	; (8008240 <_dtoa_r+0x980>)
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f7f8 fb25 	bl	80005f8 <__aeabi_dmul>
 8007fae:	2200      	movs	r2, #0
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	4606      	mov	r6, r0
 8007fb4:	460f      	mov	r7, r1
 8007fb6:	f7f8 fd87 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fba:	2800      	cmp	r0, #0
 8007fbc:	d09d      	beq.n	8007efa <_dtoa_r+0x63a>
 8007fbe:	e7cf      	b.n	8007f60 <_dtoa_r+0x6a0>
 8007fc0:	9a08      	ldr	r2, [sp, #32]
 8007fc2:	2a00      	cmp	r2, #0
 8007fc4:	f000 80d7 	beq.w	8008176 <_dtoa_r+0x8b6>
 8007fc8:	9a06      	ldr	r2, [sp, #24]
 8007fca:	2a01      	cmp	r2, #1
 8007fcc:	f300 80ba 	bgt.w	8008144 <_dtoa_r+0x884>
 8007fd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007fd2:	2a00      	cmp	r2, #0
 8007fd4:	f000 80b2 	beq.w	800813c <_dtoa_r+0x87c>
 8007fd8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007fdc:	9e07      	ldr	r6, [sp, #28]
 8007fde:	9d04      	ldr	r5, [sp, #16]
 8007fe0:	9a04      	ldr	r2, [sp, #16]
 8007fe2:	441a      	add	r2, r3
 8007fe4:	9204      	str	r2, [sp, #16]
 8007fe6:	9a05      	ldr	r2, [sp, #20]
 8007fe8:	2101      	movs	r1, #1
 8007fea:	441a      	add	r2, r3
 8007fec:	4620      	mov	r0, r4
 8007fee:	9205      	str	r2, [sp, #20]
 8007ff0:	f000 ff32 	bl	8008e58 <__i2b>
 8007ff4:	4607      	mov	r7, r0
 8007ff6:	2d00      	cmp	r5, #0
 8007ff8:	dd0c      	ble.n	8008014 <_dtoa_r+0x754>
 8007ffa:	9b05      	ldr	r3, [sp, #20]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	dd09      	ble.n	8008014 <_dtoa_r+0x754>
 8008000:	42ab      	cmp	r3, r5
 8008002:	9a04      	ldr	r2, [sp, #16]
 8008004:	bfa8      	it	ge
 8008006:	462b      	movge	r3, r5
 8008008:	1ad2      	subs	r2, r2, r3
 800800a:	9204      	str	r2, [sp, #16]
 800800c:	9a05      	ldr	r2, [sp, #20]
 800800e:	1aed      	subs	r5, r5, r3
 8008010:	1ad3      	subs	r3, r2, r3
 8008012:	9305      	str	r3, [sp, #20]
 8008014:	9b07      	ldr	r3, [sp, #28]
 8008016:	b31b      	cbz	r3, 8008060 <_dtoa_r+0x7a0>
 8008018:	9b08      	ldr	r3, [sp, #32]
 800801a:	2b00      	cmp	r3, #0
 800801c:	f000 80af 	beq.w	800817e <_dtoa_r+0x8be>
 8008020:	2e00      	cmp	r6, #0
 8008022:	dd13      	ble.n	800804c <_dtoa_r+0x78c>
 8008024:	4639      	mov	r1, r7
 8008026:	4632      	mov	r2, r6
 8008028:	4620      	mov	r0, r4
 800802a:	f000 ffd5 	bl	8008fd8 <__pow5mult>
 800802e:	ee18 2a10 	vmov	r2, s16
 8008032:	4601      	mov	r1, r0
 8008034:	4607      	mov	r7, r0
 8008036:	4620      	mov	r0, r4
 8008038:	f000 ff24 	bl	8008e84 <__multiply>
 800803c:	ee18 1a10 	vmov	r1, s16
 8008040:	4680      	mov	r8, r0
 8008042:	4620      	mov	r0, r4
 8008044:	f000 fe06 	bl	8008c54 <_Bfree>
 8008048:	ee08 8a10 	vmov	s16, r8
 800804c:	9b07      	ldr	r3, [sp, #28]
 800804e:	1b9a      	subs	r2, r3, r6
 8008050:	d006      	beq.n	8008060 <_dtoa_r+0x7a0>
 8008052:	ee18 1a10 	vmov	r1, s16
 8008056:	4620      	mov	r0, r4
 8008058:	f000 ffbe 	bl	8008fd8 <__pow5mult>
 800805c:	ee08 0a10 	vmov	s16, r0
 8008060:	2101      	movs	r1, #1
 8008062:	4620      	mov	r0, r4
 8008064:	f000 fef8 	bl	8008e58 <__i2b>
 8008068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800806a:	2b00      	cmp	r3, #0
 800806c:	4606      	mov	r6, r0
 800806e:	f340 8088 	ble.w	8008182 <_dtoa_r+0x8c2>
 8008072:	461a      	mov	r2, r3
 8008074:	4601      	mov	r1, r0
 8008076:	4620      	mov	r0, r4
 8008078:	f000 ffae 	bl	8008fd8 <__pow5mult>
 800807c:	9b06      	ldr	r3, [sp, #24]
 800807e:	2b01      	cmp	r3, #1
 8008080:	4606      	mov	r6, r0
 8008082:	f340 8081 	ble.w	8008188 <_dtoa_r+0x8c8>
 8008086:	f04f 0800 	mov.w	r8, #0
 800808a:	6933      	ldr	r3, [r6, #16]
 800808c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008090:	6918      	ldr	r0, [r3, #16]
 8008092:	f000 fe91 	bl	8008db8 <__hi0bits>
 8008096:	f1c0 0020 	rsb	r0, r0, #32
 800809a:	9b05      	ldr	r3, [sp, #20]
 800809c:	4418      	add	r0, r3
 800809e:	f010 001f 	ands.w	r0, r0, #31
 80080a2:	f000 8092 	beq.w	80081ca <_dtoa_r+0x90a>
 80080a6:	f1c0 0320 	rsb	r3, r0, #32
 80080aa:	2b04      	cmp	r3, #4
 80080ac:	f340 808a 	ble.w	80081c4 <_dtoa_r+0x904>
 80080b0:	f1c0 001c 	rsb	r0, r0, #28
 80080b4:	9b04      	ldr	r3, [sp, #16]
 80080b6:	4403      	add	r3, r0
 80080b8:	9304      	str	r3, [sp, #16]
 80080ba:	9b05      	ldr	r3, [sp, #20]
 80080bc:	4403      	add	r3, r0
 80080be:	4405      	add	r5, r0
 80080c0:	9305      	str	r3, [sp, #20]
 80080c2:	9b04      	ldr	r3, [sp, #16]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	dd07      	ble.n	80080d8 <_dtoa_r+0x818>
 80080c8:	ee18 1a10 	vmov	r1, s16
 80080cc:	461a      	mov	r2, r3
 80080ce:	4620      	mov	r0, r4
 80080d0:	f000 ffdc 	bl	800908c <__lshift>
 80080d4:	ee08 0a10 	vmov	s16, r0
 80080d8:	9b05      	ldr	r3, [sp, #20]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	dd05      	ble.n	80080ea <_dtoa_r+0x82a>
 80080de:	4631      	mov	r1, r6
 80080e0:	461a      	mov	r2, r3
 80080e2:	4620      	mov	r0, r4
 80080e4:	f000 ffd2 	bl	800908c <__lshift>
 80080e8:	4606      	mov	r6, r0
 80080ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d06e      	beq.n	80081ce <_dtoa_r+0x90e>
 80080f0:	ee18 0a10 	vmov	r0, s16
 80080f4:	4631      	mov	r1, r6
 80080f6:	f001 f839 	bl	800916c <__mcmp>
 80080fa:	2800      	cmp	r0, #0
 80080fc:	da67      	bge.n	80081ce <_dtoa_r+0x90e>
 80080fe:	9b00      	ldr	r3, [sp, #0]
 8008100:	3b01      	subs	r3, #1
 8008102:	ee18 1a10 	vmov	r1, s16
 8008106:	9300      	str	r3, [sp, #0]
 8008108:	220a      	movs	r2, #10
 800810a:	2300      	movs	r3, #0
 800810c:	4620      	mov	r0, r4
 800810e:	f000 fdc3 	bl	8008c98 <__multadd>
 8008112:	9b08      	ldr	r3, [sp, #32]
 8008114:	ee08 0a10 	vmov	s16, r0
 8008118:	2b00      	cmp	r3, #0
 800811a:	f000 81b1 	beq.w	8008480 <_dtoa_r+0xbc0>
 800811e:	2300      	movs	r3, #0
 8008120:	4639      	mov	r1, r7
 8008122:	220a      	movs	r2, #10
 8008124:	4620      	mov	r0, r4
 8008126:	f000 fdb7 	bl	8008c98 <__multadd>
 800812a:	9b02      	ldr	r3, [sp, #8]
 800812c:	2b00      	cmp	r3, #0
 800812e:	4607      	mov	r7, r0
 8008130:	f300 808e 	bgt.w	8008250 <_dtoa_r+0x990>
 8008134:	9b06      	ldr	r3, [sp, #24]
 8008136:	2b02      	cmp	r3, #2
 8008138:	dc51      	bgt.n	80081de <_dtoa_r+0x91e>
 800813a:	e089      	b.n	8008250 <_dtoa_r+0x990>
 800813c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800813e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008142:	e74b      	b.n	8007fdc <_dtoa_r+0x71c>
 8008144:	9b03      	ldr	r3, [sp, #12]
 8008146:	1e5e      	subs	r6, r3, #1
 8008148:	9b07      	ldr	r3, [sp, #28]
 800814a:	42b3      	cmp	r3, r6
 800814c:	bfbf      	itttt	lt
 800814e:	9b07      	ldrlt	r3, [sp, #28]
 8008150:	9607      	strlt	r6, [sp, #28]
 8008152:	1af2      	sublt	r2, r6, r3
 8008154:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008156:	bfb6      	itet	lt
 8008158:	189b      	addlt	r3, r3, r2
 800815a:	1b9e      	subge	r6, r3, r6
 800815c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800815e:	9b03      	ldr	r3, [sp, #12]
 8008160:	bfb8      	it	lt
 8008162:	2600      	movlt	r6, #0
 8008164:	2b00      	cmp	r3, #0
 8008166:	bfb7      	itett	lt
 8008168:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800816c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008170:	1a9d      	sublt	r5, r3, r2
 8008172:	2300      	movlt	r3, #0
 8008174:	e734      	b.n	8007fe0 <_dtoa_r+0x720>
 8008176:	9e07      	ldr	r6, [sp, #28]
 8008178:	9d04      	ldr	r5, [sp, #16]
 800817a:	9f08      	ldr	r7, [sp, #32]
 800817c:	e73b      	b.n	8007ff6 <_dtoa_r+0x736>
 800817e:	9a07      	ldr	r2, [sp, #28]
 8008180:	e767      	b.n	8008052 <_dtoa_r+0x792>
 8008182:	9b06      	ldr	r3, [sp, #24]
 8008184:	2b01      	cmp	r3, #1
 8008186:	dc18      	bgt.n	80081ba <_dtoa_r+0x8fa>
 8008188:	f1ba 0f00 	cmp.w	sl, #0
 800818c:	d115      	bne.n	80081ba <_dtoa_r+0x8fa>
 800818e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008192:	b993      	cbnz	r3, 80081ba <_dtoa_r+0x8fa>
 8008194:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008198:	0d1b      	lsrs	r3, r3, #20
 800819a:	051b      	lsls	r3, r3, #20
 800819c:	b183      	cbz	r3, 80081c0 <_dtoa_r+0x900>
 800819e:	9b04      	ldr	r3, [sp, #16]
 80081a0:	3301      	adds	r3, #1
 80081a2:	9304      	str	r3, [sp, #16]
 80081a4:	9b05      	ldr	r3, [sp, #20]
 80081a6:	3301      	adds	r3, #1
 80081a8:	9305      	str	r3, [sp, #20]
 80081aa:	f04f 0801 	mov.w	r8, #1
 80081ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	f47f af6a 	bne.w	800808a <_dtoa_r+0x7ca>
 80081b6:	2001      	movs	r0, #1
 80081b8:	e76f      	b.n	800809a <_dtoa_r+0x7da>
 80081ba:	f04f 0800 	mov.w	r8, #0
 80081be:	e7f6      	b.n	80081ae <_dtoa_r+0x8ee>
 80081c0:	4698      	mov	r8, r3
 80081c2:	e7f4      	b.n	80081ae <_dtoa_r+0x8ee>
 80081c4:	f43f af7d 	beq.w	80080c2 <_dtoa_r+0x802>
 80081c8:	4618      	mov	r0, r3
 80081ca:	301c      	adds	r0, #28
 80081cc:	e772      	b.n	80080b4 <_dtoa_r+0x7f4>
 80081ce:	9b03      	ldr	r3, [sp, #12]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	dc37      	bgt.n	8008244 <_dtoa_r+0x984>
 80081d4:	9b06      	ldr	r3, [sp, #24]
 80081d6:	2b02      	cmp	r3, #2
 80081d8:	dd34      	ble.n	8008244 <_dtoa_r+0x984>
 80081da:	9b03      	ldr	r3, [sp, #12]
 80081dc:	9302      	str	r3, [sp, #8]
 80081de:	9b02      	ldr	r3, [sp, #8]
 80081e0:	b96b      	cbnz	r3, 80081fe <_dtoa_r+0x93e>
 80081e2:	4631      	mov	r1, r6
 80081e4:	2205      	movs	r2, #5
 80081e6:	4620      	mov	r0, r4
 80081e8:	f000 fd56 	bl	8008c98 <__multadd>
 80081ec:	4601      	mov	r1, r0
 80081ee:	4606      	mov	r6, r0
 80081f0:	ee18 0a10 	vmov	r0, s16
 80081f4:	f000 ffba 	bl	800916c <__mcmp>
 80081f8:	2800      	cmp	r0, #0
 80081fa:	f73f adbb 	bgt.w	8007d74 <_dtoa_r+0x4b4>
 80081fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008200:	9d01      	ldr	r5, [sp, #4]
 8008202:	43db      	mvns	r3, r3
 8008204:	9300      	str	r3, [sp, #0]
 8008206:	f04f 0800 	mov.w	r8, #0
 800820a:	4631      	mov	r1, r6
 800820c:	4620      	mov	r0, r4
 800820e:	f000 fd21 	bl	8008c54 <_Bfree>
 8008212:	2f00      	cmp	r7, #0
 8008214:	f43f aea4 	beq.w	8007f60 <_dtoa_r+0x6a0>
 8008218:	f1b8 0f00 	cmp.w	r8, #0
 800821c:	d005      	beq.n	800822a <_dtoa_r+0x96a>
 800821e:	45b8      	cmp	r8, r7
 8008220:	d003      	beq.n	800822a <_dtoa_r+0x96a>
 8008222:	4641      	mov	r1, r8
 8008224:	4620      	mov	r0, r4
 8008226:	f000 fd15 	bl	8008c54 <_Bfree>
 800822a:	4639      	mov	r1, r7
 800822c:	4620      	mov	r0, r4
 800822e:	f000 fd11 	bl	8008c54 <_Bfree>
 8008232:	e695      	b.n	8007f60 <_dtoa_r+0x6a0>
 8008234:	2600      	movs	r6, #0
 8008236:	4637      	mov	r7, r6
 8008238:	e7e1      	b.n	80081fe <_dtoa_r+0x93e>
 800823a:	9700      	str	r7, [sp, #0]
 800823c:	4637      	mov	r7, r6
 800823e:	e599      	b.n	8007d74 <_dtoa_r+0x4b4>
 8008240:	40240000 	.word	0x40240000
 8008244:	9b08      	ldr	r3, [sp, #32]
 8008246:	2b00      	cmp	r3, #0
 8008248:	f000 80ca 	beq.w	80083e0 <_dtoa_r+0xb20>
 800824c:	9b03      	ldr	r3, [sp, #12]
 800824e:	9302      	str	r3, [sp, #8]
 8008250:	2d00      	cmp	r5, #0
 8008252:	dd05      	ble.n	8008260 <_dtoa_r+0x9a0>
 8008254:	4639      	mov	r1, r7
 8008256:	462a      	mov	r2, r5
 8008258:	4620      	mov	r0, r4
 800825a:	f000 ff17 	bl	800908c <__lshift>
 800825e:	4607      	mov	r7, r0
 8008260:	f1b8 0f00 	cmp.w	r8, #0
 8008264:	d05b      	beq.n	800831e <_dtoa_r+0xa5e>
 8008266:	6879      	ldr	r1, [r7, #4]
 8008268:	4620      	mov	r0, r4
 800826a:	f000 fcb3 	bl	8008bd4 <_Balloc>
 800826e:	4605      	mov	r5, r0
 8008270:	b928      	cbnz	r0, 800827e <_dtoa_r+0x9be>
 8008272:	4b87      	ldr	r3, [pc, #540]	; (8008490 <_dtoa_r+0xbd0>)
 8008274:	4602      	mov	r2, r0
 8008276:	f240 21ea 	movw	r1, #746	; 0x2ea
 800827a:	f7ff bb3b 	b.w	80078f4 <_dtoa_r+0x34>
 800827e:	693a      	ldr	r2, [r7, #16]
 8008280:	3202      	adds	r2, #2
 8008282:	0092      	lsls	r2, r2, #2
 8008284:	f107 010c 	add.w	r1, r7, #12
 8008288:	300c      	adds	r0, #12
 800828a:	f000 fc95 	bl	8008bb8 <memcpy>
 800828e:	2201      	movs	r2, #1
 8008290:	4629      	mov	r1, r5
 8008292:	4620      	mov	r0, r4
 8008294:	f000 fefa 	bl	800908c <__lshift>
 8008298:	9b01      	ldr	r3, [sp, #4]
 800829a:	f103 0901 	add.w	r9, r3, #1
 800829e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80082a2:	4413      	add	r3, r2
 80082a4:	9305      	str	r3, [sp, #20]
 80082a6:	f00a 0301 	and.w	r3, sl, #1
 80082aa:	46b8      	mov	r8, r7
 80082ac:	9304      	str	r3, [sp, #16]
 80082ae:	4607      	mov	r7, r0
 80082b0:	4631      	mov	r1, r6
 80082b2:	ee18 0a10 	vmov	r0, s16
 80082b6:	f7ff fa77 	bl	80077a8 <quorem>
 80082ba:	4641      	mov	r1, r8
 80082bc:	9002      	str	r0, [sp, #8]
 80082be:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80082c2:	ee18 0a10 	vmov	r0, s16
 80082c6:	f000 ff51 	bl	800916c <__mcmp>
 80082ca:	463a      	mov	r2, r7
 80082cc:	9003      	str	r0, [sp, #12]
 80082ce:	4631      	mov	r1, r6
 80082d0:	4620      	mov	r0, r4
 80082d2:	f000 ff67 	bl	80091a4 <__mdiff>
 80082d6:	68c2      	ldr	r2, [r0, #12]
 80082d8:	f109 3bff 	add.w	fp, r9, #4294967295
 80082dc:	4605      	mov	r5, r0
 80082de:	bb02      	cbnz	r2, 8008322 <_dtoa_r+0xa62>
 80082e0:	4601      	mov	r1, r0
 80082e2:	ee18 0a10 	vmov	r0, s16
 80082e6:	f000 ff41 	bl	800916c <__mcmp>
 80082ea:	4602      	mov	r2, r0
 80082ec:	4629      	mov	r1, r5
 80082ee:	4620      	mov	r0, r4
 80082f0:	9207      	str	r2, [sp, #28]
 80082f2:	f000 fcaf 	bl	8008c54 <_Bfree>
 80082f6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80082fa:	ea43 0102 	orr.w	r1, r3, r2
 80082fe:	9b04      	ldr	r3, [sp, #16]
 8008300:	430b      	orrs	r3, r1
 8008302:	464d      	mov	r5, r9
 8008304:	d10f      	bne.n	8008326 <_dtoa_r+0xa66>
 8008306:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800830a:	d02a      	beq.n	8008362 <_dtoa_r+0xaa2>
 800830c:	9b03      	ldr	r3, [sp, #12]
 800830e:	2b00      	cmp	r3, #0
 8008310:	dd02      	ble.n	8008318 <_dtoa_r+0xa58>
 8008312:	9b02      	ldr	r3, [sp, #8]
 8008314:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008318:	f88b a000 	strb.w	sl, [fp]
 800831c:	e775      	b.n	800820a <_dtoa_r+0x94a>
 800831e:	4638      	mov	r0, r7
 8008320:	e7ba      	b.n	8008298 <_dtoa_r+0x9d8>
 8008322:	2201      	movs	r2, #1
 8008324:	e7e2      	b.n	80082ec <_dtoa_r+0xa2c>
 8008326:	9b03      	ldr	r3, [sp, #12]
 8008328:	2b00      	cmp	r3, #0
 800832a:	db04      	blt.n	8008336 <_dtoa_r+0xa76>
 800832c:	9906      	ldr	r1, [sp, #24]
 800832e:	430b      	orrs	r3, r1
 8008330:	9904      	ldr	r1, [sp, #16]
 8008332:	430b      	orrs	r3, r1
 8008334:	d122      	bne.n	800837c <_dtoa_r+0xabc>
 8008336:	2a00      	cmp	r2, #0
 8008338:	ddee      	ble.n	8008318 <_dtoa_r+0xa58>
 800833a:	ee18 1a10 	vmov	r1, s16
 800833e:	2201      	movs	r2, #1
 8008340:	4620      	mov	r0, r4
 8008342:	f000 fea3 	bl	800908c <__lshift>
 8008346:	4631      	mov	r1, r6
 8008348:	ee08 0a10 	vmov	s16, r0
 800834c:	f000 ff0e 	bl	800916c <__mcmp>
 8008350:	2800      	cmp	r0, #0
 8008352:	dc03      	bgt.n	800835c <_dtoa_r+0xa9c>
 8008354:	d1e0      	bne.n	8008318 <_dtoa_r+0xa58>
 8008356:	f01a 0f01 	tst.w	sl, #1
 800835a:	d0dd      	beq.n	8008318 <_dtoa_r+0xa58>
 800835c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008360:	d1d7      	bne.n	8008312 <_dtoa_r+0xa52>
 8008362:	2339      	movs	r3, #57	; 0x39
 8008364:	f88b 3000 	strb.w	r3, [fp]
 8008368:	462b      	mov	r3, r5
 800836a:	461d      	mov	r5, r3
 800836c:	3b01      	subs	r3, #1
 800836e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008372:	2a39      	cmp	r2, #57	; 0x39
 8008374:	d071      	beq.n	800845a <_dtoa_r+0xb9a>
 8008376:	3201      	adds	r2, #1
 8008378:	701a      	strb	r2, [r3, #0]
 800837a:	e746      	b.n	800820a <_dtoa_r+0x94a>
 800837c:	2a00      	cmp	r2, #0
 800837e:	dd07      	ble.n	8008390 <_dtoa_r+0xad0>
 8008380:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008384:	d0ed      	beq.n	8008362 <_dtoa_r+0xaa2>
 8008386:	f10a 0301 	add.w	r3, sl, #1
 800838a:	f88b 3000 	strb.w	r3, [fp]
 800838e:	e73c      	b.n	800820a <_dtoa_r+0x94a>
 8008390:	9b05      	ldr	r3, [sp, #20]
 8008392:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008396:	4599      	cmp	r9, r3
 8008398:	d047      	beq.n	800842a <_dtoa_r+0xb6a>
 800839a:	ee18 1a10 	vmov	r1, s16
 800839e:	2300      	movs	r3, #0
 80083a0:	220a      	movs	r2, #10
 80083a2:	4620      	mov	r0, r4
 80083a4:	f000 fc78 	bl	8008c98 <__multadd>
 80083a8:	45b8      	cmp	r8, r7
 80083aa:	ee08 0a10 	vmov	s16, r0
 80083ae:	f04f 0300 	mov.w	r3, #0
 80083b2:	f04f 020a 	mov.w	r2, #10
 80083b6:	4641      	mov	r1, r8
 80083b8:	4620      	mov	r0, r4
 80083ba:	d106      	bne.n	80083ca <_dtoa_r+0xb0a>
 80083bc:	f000 fc6c 	bl	8008c98 <__multadd>
 80083c0:	4680      	mov	r8, r0
 80083c2:	4607      	mov	r7, r0
 80083c4:	f109 0901 	add.w	r9, r9, #1
 80083c8:	e772      	b.n	80082b0 <_dtoa_r+0x9f0>
 80083ca:	f000 fc65 	bl	8008c98 <__multadd>
 80083ce:	4639      	mov	r1, r7
 80083d0:	4680      	mov	r8, r0
 80083d2:	2300      	movs	r3, #0
 80083d4:	220a      	movs	r2, #10
 80083d6:	4620      	mov	r0, r4
 80083d8:	f000 fc5e 	bl	8008c98 <__multadd>
 80083dc:	4607      	mov	r7, r0
 80083de:	e7f1      	b.n	80083c4 <_dtoa_r+0xb04>
 80083e0:	9b03      	ldr	r3, [sp, #12]
 80083e2:	9302      	str	r3, [sp, #8]
 80083e4:	9d01      	ldr	r5, [sp, #4]
 80083e6:	ee18 0a10 	vmov	r0, s16
 80083ea:	4631      	mov	r1, r6
 80083ec:	f7ff f9dc 	bl	80077a8 <quorem>
 80083f0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80083f4:	9b01      	ldr	r3, [sp, #4]
 80083f6:	f805 ab01 	strb.w	sl, [r5], #1
 80083fa:	1aea      	subs	r2, r5, r3
 80083fc:	9b02      	ldr	r3, [sp, #8]
 80083fe:	4293      	cmp	r3, r2
 8008400:	dd09      	ble.n	8008416 <_dtoa_r+0xb56>
 8008402:	ee18 1a10 	vmov	r1, s16
 8008406:	2300      	movs	r3, #0
 8008408:	220a      	movs	r2, #10
 800840a:	4620      	mov	r0, r4
 800840c:	f000 fc44 	bl	8008c98 <__multadd>
 8008410:	ee08 0a10 	vmov	s16, r0
 8008414:	e7e7      	b.n	80083e6 <_dtoa_r+0xb26>
 8008416:	9b02      	ldr	r3, [sp, #8]
 8008418:	2b00      	cmp	r3, #0
 800841a:	bfc8      	it	gt
 800841c:	461d      	movgt	r5, r3
 800841e:	9b01      	ldr	r3, [sp, #4]
 8008420:	bfd8      	it	le
 8008422:	2501      	movle	r5, #1
 8008424:	441d      	add	r5, r3
 8008426:	f04f 0800 	mov.w	r8, #0
 800842a:	ee18 1a10 	vmov	r1, s16
 800842e:	2201      	movs	r2, #1
 8008430:	4620      	mov	r0, r4
 8008432:	f000 fe2b 	bl	800908c <__lshift>
 8008436:	4631      	mov	r1, r6
 8008438:	ee08 0a10 	vmov	s16, r0
 800843c:	f000 fe96 	bl	800916c <__mcmp>
 8008440:	2800      	cmp	r0, #0
 8008442:	dc91      	bgt.n	8008368 <_dtoa_r+0xaa8>
 8008444:	d102      	bne.n	800844c <_dtoa_r+0xb8c>
 8008446:	f01a 0f01 	tst.w	sl, #1
 800844a:	d18d      	bne.n	8008368 <_dtoa_r+0xaa8>
 800844c:	462b      	mov	r3, r5
 800844e:	461d      	mov	r5, r3
 8008450:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008454:	2a30      	cmp	r2, #48	; 0x30
 8008456:	d0fa      	beq.n	800844e <_dtoa_r+0xb8e>
 8008458:	e6d7      	b.n	800820a <_dtoa_r+0x94a>
 800845a:	9a01      	ldr	r2, [sp, #4]
 800845c:	429a      	cmp	r2, r3
 800845e:	d184      	bne.n	800836a <_dtoa_r+0xaaa>
 8008460:	9b00      	ldr	r3, [sp, #0]
 8008462:	3301      	adds	r3, #1
 8008464:	9300      	str	r3, [sp, #0]
 8008466:	2331      	movs	r3, #49	; 0x31
 8008468:	7013      	strb	r3, [r2, #0]
 800846a:	e6ce      	b.n	800820a <_dtoa_r+0x94a>
 800846c:	4b09      	ldr	r3, [pc, #36]	; (8008494 <_dtoa_r+0xbd4>)
 800846e:	f7ff ba95 	b.w	800799c <_dtoa_r+0xdc>
 8008472:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008474:	2b00      	cmp	r3, #0
 8008476:	f47f aa6e 	bne.w	8007956 <_dtoa_r+0x96>
 800847a:	4b07      	ldr	r3, [pc, #28]	; (8008498 <_dtoa_r+0xbd8>)
 800847c:	f7ff ba8e 	b.w	800799c <_dtoa_r+0xdc>
 8008480:	9b02      	ldr	r3, [sp, #8]
 8008482:	2b00      	cmp	r3, #0
 8008484:	dcae      	bgt.n	80083e4 <_dtoa_r+0xb24>
 8008486:	9b06      	ldr	r3, [sp, #24]
 8008488:	2b02      	cmp	r3, #2
 800848a:	f73f aea8 	bgt.w	80081de <_dtoa_r+0x91e>
 800848e:	e7a9      	b.n	80083e4 <_dtoa_r+0xb24>
 8008490:	0800a878 	.word	0x0800a878
 8008494:	0800a67c 	.word	0x0800a67c
 8008498:	0800a7f9 	.word	0x0800a7f9

0800849c <rshift>:
 800849c:	6903      	ldr	r3, [r0, #16]
 800849e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80084a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80084a6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80084aa:	f100 0414 	add.w	r4, r0, #20
 80084ae:	dd45      	ble.n	800853c <rshift+0xa0>
 80084b0:	f011 011f 	ands.w	r1, r1, #31
 80084b4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80084b8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80084bc:	d10c      	bne.n	80084d8 <rshift+0x3c>
 80084be:	f100 0710 	add.w	r7, r0, #16
 80084c2:	4629      	mov	r1, r5
 80084c4:	42b1      	cmp	r1, r6
 80084c6:	d334      	bcc.n	8008532 <rshift+0x96>
 80084c8:	1a9b      	subs	r3, r3, r2
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	1eea      	subs	r2, r5, #3
 80084ce:	4296      	cmp	r6, r2
 80084d0:	bf38      	it	cc
 80084d2:	2300      	movcc	r3, #0
 80084d4:	4423      	add	r3, r4
 80084d6:	e015      	b.n	8008504 <rshift+0x68>
 80084d8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80084dc:	f1c1 0820 	rsb	r8, r1, #32
 80084e0:	40cf      	lsrs	r7, r1
 80084e2:	f105 0e04 	add.w	lr, r5, #4
 80084e6:	46a1      	mov	r9, r4
 80084e8:	4576      	cmp	r6, lr
 80084ea:	46f4      	mov	ip, lr
 80084ec:	d815      	bhi.n	800851a <rshift+0x7e>
 80084ee:	1a9a      	subs	r2, r3, r2
 80084f0:	0092      	lsls	r2, r2, #2
 80084f2:	3a04      	subs	r2, #4
 80084f4:	3501      	adds	r5, #1
 80084f6:	42ae      	cmp	r6, r5
 80084f8:	bf38      	it	cc
 80084fa:	2200      	movcc	r2, #0
 80084fc:	18a3      	adds	r3, r4, r2
 80084fe:	50a7      	str	r7, [r4, r2]
 8008500:	b107      	cbz	r7, 8008504 <rshift+0x68>
 8008502:	3304      	adds	r3, #4
 8008504:	1b1a      	subs	r2, r3, r4
 8008506:	42a3      	cmp	r3, r4
 8008508:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800850c:	bf08      	it	eq
 800850e:	2300      	moveq	r3, #0
 8008510:	6102      	str	r2, [r0, #16]
 8008512:	bf08      	it	eq
 8008514:	6143      	streq	r3, [r0, #20]
 8008516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800851a:	f8dc c000 	ldr.w	ip, [ip]
 800851e:	fa0c fc08 	lsl.w	ip, ip, r8
 8008522:	ea4c 0707 	orr.w	r7, ip, r7
 8008526:	f849 7b04 	str.w	r7, [r9], #4
 800852a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800852e:	40cf      	lsrs	r7, r1
 8008530:	e7da      	b.n	80084e8 <rshift+0x4c>
 8008532:	f851 cb04 	ldr.w	ip, [r1], #4
 8008536:	f847 cf04 	str.w	ip, [r7, #4]!
 800853a:	e7c3      	b.n	80084c4 <rshift+0x28>
 800853c:	4623      	mov	r3, r4
 800853e:	e7e1      	b.n	8008504 <rshift+0x68>

08008540 <__hexdig_fun>:
 8008540:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008544:	2b09      	cmp	r3, #9
 8008546:	d802      	bhi.n	800854e <__hexdig_fun+0xe>
 8008548:	3820      	subs	r0, #32
 800854a:	b2c0      	uxtb	r0, r0
 800854c:	4770      	bx	lr
 800854e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008552:	2b05      	cmp	r3, #5
 8008554:	d801      	bhi.n	800855a <__hexdig_fun+0x1a>
 8008556:	3847      	subs	r0, #71	; 0x47
 8008558:	e7f7      	b.n	800854a <__hexdig_fun+0xa>
 800855a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800855e:	2b05      	cmp	r3, #5
 8008560:	d801      	bhi.n	8008566 <__hexdig_fun+0x26>
 8008562:	3827      	subs	r0, #39	; 0x27
 8008564:	e7f1      	b.n	800854a <__hexdig_fun+0xa>
 8008566:	2000      	movs	r0, #0
 8008568:	4770      	bx	lr
	...

0800856c <__gethex>:
 800856c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008570:	ed2d 8b02 	vpush	{d8}
 8008574:	b089      	sub	sp, #36	; 0x24
 8008576:	ee08 0a10 	vmov	s16, r0
 800857a:	9304      	str	r3, [sp, #16]
 800857c:	4bb4      	ldr	r3, [pc, #720]	; (8008850 <__gethex+0x2e4>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	9301      	str	r3, [sp, #4]
 8008582:	4618      	mov	r0, r3
 8008584:	468b      	mov	fp, r1
 8008586:	4690      	mov	r8, r2
 8008588:	f7f7 fe22 	bl	80001d0 <strlen>
 800858c:	9b01      	ldr	r3, [sp, #4]
 800858e:	f8db 2000 	ldr.w	r2, [fp]
 8008592:	4403      	add	r3, r0
 8008594:	4682      	mov	sl, r0
 8008596:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800859a:	9305      	str	r3, [sp, #20]
 800859c:	1c93      	adds	r3, r2, #2
 800859e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80085a2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80085a6:	32fe      	adds	r2, #254	; 0xfe
 80085a8:	18d1      	adds	r1, r2, r3
 80085aa:	461f      	mov	r7, r3
 80085ac:	f813 0b01 	ldrb.w	r0, [r3], #1
 80085b0:	9100      	str	r1, [sp, #0]
 80085b2:	2830      	cmp	r0, #48	; 0x30
 80085b4:	d0f8      	beq.n	80085a8 <__gethex+0x3c>
 80085b6:	f7ff ffc3 	bl	8008540 <__hexdig_fun>
 80085ba:	4604      	mov	r4, r0
 80085bc:	2800      	cmp	r0, #0
 80085be:	d13a      	bne.n	8008636 <__gethex+0xca>
 80085c0:	9901      	ldr	r1, [sp, #4]
 80085c2:	4652      	mov	r2, sl
 80085c4:	4638      	mov	r0, r7
 80085c6:	f001 fa33 	bl	8009a30 <strncmp>
 80085ca:	4605      	mov	r5, r0
 80085cc:	2800      	cmp	r0, #0
 80085ce:	d168      	bne.n	80086a2 <__gethex+0x136>
 80085d0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80085d4:	eb07 060a 	add.w	r6, r7, sl
 80085d8:	f7ff ffb2 	bl	8008540 <__hexdig_fun>
 80085dc:	2800      	cmp	r0, #0
 80085de:	d062      	beq.n	80086a6 <__gethex+0x13a>
 80085e0:	4633      	mov	r3, r6
 80085e2:	7818      	ldrb	r0, [r3, #0]
 80085e4:	2830      	cmp	r0, #48	; 0x30
 80085e6:	461f      	mov	r7, r3
 80085e8:	f103 0301 	add.w	r3, r3, #1
 80085ec:	d0f9      	beq.n	80085e2 <__gethex+0x76>
 80085ee:	f7ff ffa7 	bl	8008540 <__hexdig_fun>
 80085f2:	2301      	movs	r3, #1
 80085f4:	fab0 f480 	clz	r4, r0
 80085f8:	0964      	lsrs	r4, r4, #5
 80085fa:	4635      	mov	r5, r6
 80085fc:	9300      	str	r3, [sp, #0]
 80085fe:	463a      	mov	r2, r7
 8008600:	4616      	mov	r6, r2
 8008602:	3201      	adds	r2, #1
 8008604:	7830      	ldrb	r0, [r6, #0]
 8008606:	f7ff ff9b 	bl	8008540 <__hexdig_fun>
 800860a:	2800      	cmp	r0, #0
 800860c:	d1f8      	bne.n	8008600 <__gethex+0x94>
 800860e:	9901      	ldr	r1, [sp, #4]
 8008610:	4652      	mov	r2, sl
 8008612:	4630      	mov	r0, r6
 8008614:	f001 fa0c 	bl	8009a30 <strncmp>
 8008618:	b980      	cbnz	r0, 800863c <__gethex+0xd0>
 800861a:	b94d      	cbnz	r5, 8008630 <__gethex+0xc4>
 800861c:	eb06 050a 	add.w	r5, r6, sl
 8008620:	462a      	mov	r2, r5
 8008622:	4616      	mov	r6, r2
 8008624:	3201      	adds	r2, #1
 8008626:	7830      	ldrb	r0, [r6, #0]
 8008628:	f7ff ff8a 	bl	8008540 <__hexdig_fun>
 800862c:	2800      	cmp	r0, #0
 800862e:	d1f8      	bne.n	8008622 <__gethex+0xb6>
 8008630:	1bad      	subs	r5, r5, r6
 8008632:	00ad      	lsls	r5, r5, #2
 8008634:	e004      	b.n	8008640 <__gethex+0xd4>
 8008636:	2400      	movs	r4, #0
 8008638:	4625      	mov	r5, r4
 800863a:	e7e0      	b.n	80085fe <__gethex+0x92>
 800863c:	2d00      	cmp	r5, #0
 800863e:	d1f7      	bne.n	8008630 <__gethex+0xc4>
 8008640:	7833      	ldrb	r3, [r6, #0]
 8008642:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008646:	2b50      	cmp	r3, #80	; 0x50
 8008648:	d13b      	bne.n	80086c2 <__gethex+0x156>
 800864a:	7873      	ldrb	r3, [r6, #1]
 800864c:	2b2b      	cmp	r3, #43	; 0x2b
 800864e:	d02c      	beq.n	80086aa <__gethex+0x13e>
 8008650:	2b2d      	cmp	r3, #45	; 0x2d
 8008652:	d02e      	beq.n	80086b2 <__gethex+0x146>
 8008654:	1c71      	adds	r1, r6, #1
 8008656:	f04f 0900 	mov.w	r9, #0
 800865a:	7808      	ldrb	r0, [r1, #0]
 800865c:	f7ff ff70 	bl	8008540 <__hexdig_fun>
 8008660:	1e43      	subs	r3, r0, #1
 8008662:	b2db      	uxtb	r3, r3
 8008664:	2b18      	cmp	r3, #24
 8008666:	d82c      	bhi.n	80086c2 <__gethex+0x156>
 8008668:	f1a0 0210 	sub.w	r2, r0, #16
 800866c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008670:	f7ff ff66 	bl	8008540 <__hexdig_fun>
 8008674:	1e43      	subs	r3, r0, #1
 8008676:	b2db      	uxtb	r3, r3
 8008678:	2b18      	cmp	r3, #24
 800867a:	d91d      	bls.n	80086b8 <__gethex+0x14c>
 800867c:	f1b9 0f00 	cmp.w	r9, #0
 8008680:	d000      	beq.n	8008684 <__gethex+0x118>
 8008682:	4252      	negs	r2, r2
 8008684:	4415      	add	r5, r2
 8008686:	f8cb 1000 	str.w	r1, [fp]
 800868a:	b1e4      	cbz	r4, 80086c6 <__gethex+0x15a>
 800868c:	9b00      	ldr	r3, [sp, #0]
 800868e:	2b00      	cmp	r3, #0
 8008690:	bf14      	ite	ne
 8008692:	2700      	movne	r7, #0
 8008694:	2706      	moveq	r7, #6
 8008696:	4638      	mov	r0, r7
 8008698:	b009      	add	sp, #36	; 0x24
 800869a:	ecbd 8b02 	vpop	{d8}
 800869e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086a2:	463e      	mov	r6, r7
 80086a4:	4625      	mov	r5, r4
 80086a6:	2401      	movs	r4, #1
 80086a8:	e7ca      	b.n	8008640 <__gethex+0xd4>
 80086aa:	f04f 0900 	mov.w	r9, #0
 80086ae:	1cb1      	adds	r1, r6, #2
 80086b0:	e7d3      	b.n	800865a <__gethex+0xee>
 80086b2:	f04f 0901 	mov.w	r9, #1
 80086b6:	e7fa      	b.n	80086ae <__gethex+0x142>
 80086b8:	230a      	movs	r3, #10
 80086ba:	fb03 0202 	mla	r2, r3, r2, r0
 80086be:	3a10      	subs	r2, #16
 80086c0:	e7d4      	b.n	800866c <__gethex+0x100>
 80086c2:	4631      	mov	r1, r6
 80086c4:	e7df      	b.n	8008686 <__gethex+0x11a>
 80086c6:	1bf3      	subs	r3, r6, r7
 80086c8:	3b01      	subs	r3, #1
 80086ca:	4621      	mov	r1, r4
 80086cc:	2b07      	cmp	r3, #7
 80086ce:	dc0b      	bgt.n	80086e8 <__gethex+0x17c>
 80086d0:	ee18 0a10 	vmov	r0, s16
 80086d4:	f000 fa7e 	bl	8008bd4 <_Balloc>
 80086d8:	4604      	mov	r4, r0
 80086da:	b940      	cbnz	r0, 80086ee <__gethex+0x182>
 80086dc:	4b5d      	ldr	r3, [pc, #372]	; (8008854 <__gethex+0x2e8>)
 80086de:	4602      	mov	r2, r0
 80086e0:	21de      	movs	r1, #222	; 0xde
 80086e2:	485d      	ldr	r0, [pc, #372]	; (8008858 <__gethex+0x2ec>)
 80086e4:	f001 f9c6 	bl	8009a74 <__assert_func>
 80086e8:	3101      	adds	r1, #1
 80086ea:	105b      	asrs	r3, r3, #1
 80086ec:	e7ee      	b.n	80086cc <__gethex+0x160>
 80086ee:	f100 0914 	add.w	r9, r0, #20
 80086f2:	f04f 0b00 	mov.w	fp, #0
 80086f6:	f1ca 0301 	rsb	r3, sl, #1
 80086fa:	f8cd 9008 	str.w	r9, [sp, #8]
 80086fe:	f8cd b000 	str.w	fp, [sp]
 8008702:	9306      	str	r3, [sp, #24]
 8008704:	42b7      	cmp	r7, r6
 8008706:	d340      	bcc.n	800878a <__gethex+0x21e>
 8008708:	9802      	ldr	r0, [sp, #8]
 800870a:	9b00      	ldr	r3, [sp, #0]
 800870c:	f840 3b04 	str.w	r3, [r0], #4
 8008710:	eba0 0009 	sub.w	r0, r0, r9
 8008714:	1080      	asrs	r0, r0, #2
 8008716:	0146      	lsls	r6, r0, #5
 8008718:	6120      	str	r0, [r4, #16]
 800871a:	4618      	mov	r0, r3
 800871c:	f000 fb4c 	bl	8008db8 <__hi0bits>
 8008720:	1a30      	subs	r0, r6, r0
 8008722:	f8d8 6000 	ldr.w	r6, [r8]
 8008726:	42b0      	cmp	r0, r6
 8008728:	dd63      	ble.n	80087f2 <__gethex+0x286>
 800872a:	1b87      	subs	r7, r0, r6
 800872c:	4639      	mov	r1, r7
 800872e:	4620      	mov	r0, r4
 8008730:	f000 fef0 	bl	8009514 <__any_on>
 8008734:	4682      	mov	sl, r0
 8008736:	b1a8      	cbz	r0, 8008764 <__gethex+0x1f8>
 8008738:	1e7b      	subs	r3, r7, #1
 800873a:	1159      	asrs	r1, r3, #5
 800873c:	f003 021f 	and.w	r2, r3, #31
 8008740:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008744:	f04f 0a01 	mov.w	sl, #1
 8008748:	fa0a f202 	lsl.w	r2, sl, r2
 800874c:	420a      	tst	r2, r1
 800874e:	d009      	beq.n	8008764 <__gethex+0x1f8>
 8008750:	4553      	cmp	r3, sl
 8008752:	dd05      	ble.n	8008760 <__gethex+0x1f4>
 8008754:	1eb9      	subs	r1, r7, #2
 8008756:	4620      	mov	r0, r4
 8008758:	f000 fedc 	bl	8009514 <__any_on>
 800875c:	2800      	cmp	r0, #0
 800875e:	d145      	bne.n	80087ec <__gethex+0x280>
 8008760:	f04f 0a02 	mov.w	sl, #2
 8008764:	4639      	mov	r1, r7
 8008766:	4620      	mov	r0, r4
 8008768:	f7ff fe98 	bl	800849c <rshift>
 800876c:	443d      	add	r5, r7
 800876e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008772:	42ab      	cmp	r3, r5
 8008774:	da4c      	bge.n	8008810 <__gethex+0x2a4>
 8008776:	ee18 0a10 	vmov	r0, s16
 800877a:	4621      	mov	r1, r4
 800877c:	f000 fa6a 	bl	8008c54 <_Bfree>
 8008780:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008782:	2300      	movs	r3, #0
 8008784:	6013      	str	r3, [r2, #0]
 8008786:	27a3      	movs	r7, #163	; 0xa3
 8008788:	e785      	b.n	8008696 <__gethex+0x12a>
 800878a:	1e73      	subs	r3, r6, #1
 800878c:	9a05      	ldr	r2, [sp, #20]
 800878e:	9303      	str	r3, [sp, #12]
 8008790:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008794:	4293      	cmp	r3, r2
 8008796:	d019      	beq.n	80087cc <__gethex+0x260>
 8008798:	f1bb 0f20 	cmp.w	fp, #32
 800879c:	d107      	bne.n	80087ae <__gethex+0x242>
 800879e:	9b02      	ldr	r3, [sp, #8]
 80087a0:	9a00      	ldr	r2, [sp, #0]
 80087a2:	f843 2b04 	str.w	r2, [r3], #4
 80087a6:	9302      	str	r3, [sp, #8]
 80087a8:	2300      	movs	r3, #0
 80087aa:	9300      	str	r3, [sp, #0]
 80087ac:	469b      	mov	fp, r3
 80087ae:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80087b2:	f7ff fec5 	bl	8008540 <__hexdig_fun>
 80087b6:	9b00      	ldr	r3, [sp, #0]
 80087b8:	f000 000f 	and.w	r0, r0, #15
 80087bc:	fa00 f00b 	lsl.w	r0, r0, fp
 80087c0:	4303      	orrs	r3, r0
 80087c2:	9300      	str	r3, [sp, #0]
 80087c4:	f10b 0b04 	add.w	fp, fp, #4
 80087c8:	9b03      	ldr	r3, [sp, #12]
 80087ca:	e00d      	b.n	80087e8 <__gethex+0x27c>
 80087cc:	9b03      	ldr	r3, [sp, #12]
 80087ce:	9a06      	ldr	r2, [sp, #24]
 80087d0:	4413      	add	r3, r2
 80087d2:	42bb      	cmp	r3, r7
 80087d4:	d3e0      	bcc.n	8008798 <__gethex+0x22c>
 80087d6:	4618      	mov	r0, r3
 80087d8:	9901      	ldr	r1, [sp, #4]
 80087da:	9307      	str	r3, [sp, #28]
 80087dc:	4652      	mov	r2, sl
 80087de:	f001 f927 	bl	8009a30 <strncmp>
 80087e2:	9b07      	ldr	r3, [sp, #28]
 80087e4:	2800      	cmp	r0, #0
 80087e6:	d1d7      	bne.n	8008798 <__gethex+0x22c>
 80087e8:	461e      	mov	r6, r3
 80087ea:	e78b      	b.n	8008704 <__gethex+0x198>
 80087ec:	f04f 0a03 	mov.w	sl, #3
 80087f0:	e7b8      	b.n	8008764 <__gethex+0x1f8>
 80087f2:	da0a      	bge.n	800880a <__gethex+0x29e>
 80087f4:	1a37      	subs	r7, r6, r0
 80087f6:	4621      	mov	r1, r4
 80087f8:	ee18 0a10 	vmov	r0, s16
 80087fc:	463a      	mov	r2, r7
 80087fe:	f000 fc45 	bl	800908c <__lshift>
 8008802:	1bed      	subs	r5, r5, r7
 8008804:	4604      	mov	r4, r0
 8008806:	f100 0914 	add.w	r9, r0, #20
 800880a:	f04f 0a00 	mov.w	sl, #0
 800880e:	e7ae      	b.n	800876e <__gethex+0x202>
 8008810:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008814:	42a8      	cmp	r0, r5
 8008816:	dd72      	ble.n	80088fe <__gethex+0x392>
 8008818:	1b45      	subs	r5, r0, r5
 800881a:	42ae      	cmp	r6, r5
 800881c:	dc36      	bgt.n	800888c <__gethex+0x320>
 800881e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008822:	2b02      	cmp	r3, #2
 8008824:	d02a      	beq.n	800887c <__gethex+0x310>
 8008826:	2b03      	cmp	r3, #3
 8008828:	d02c      	beq.n	8008884 <__gethex+0x318>
 800882a:	2b01      	cmp	r3, #1
 800882c:	d11c      	bne.n	8008868 <__gethex+0x2fc>
 800882e:	42ae      	cmp	r6, r5
 8008830:	d11a      	bne.n	8008868 <__gethex+0x2fc>
 8008832:	2e01      	cmp	r6, #1
 8008834:	d112      	bne.n	800885c <__gethex+0x2f0>
 8008836:	9a04      	ldr	r2, [sp, #16]
 8008838:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800883c:	6013      	str	r3, [r2, #0]
 800883e:	2301      	movs	r3, #1
 8008840:	6123      	str	r3, [r4, #16]
 8008842:	f8c9 3000 	str.w	r3, [r9]
 8008846:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008848:	2762      	movs	r7, #98	; 0x62
 800884a:	601c      	str	r4, [r3, #0]
 800884c:	e723      	b.n	8008696 <__gethex+0x12a>
 800884e:	bf00      	nop
 8008850:	0800a8f0 	.word	0x0800a8f0
 8008854:	0800a878 	.word	0x0800a878
 8008858:	0800a889 	.word	0x0800a889
 800885c:	1e71      	subs	r1, r6, #1
 800885e:	4620      	mov	r0, r4
 8008860:	f000 fe58 	bl	8009514 <__any_on>
 8008864:	2800      	cmp	r0, #0
 8008866:	d1e6      	bne.n	8008836 <__gethex+0x2ca>
 8008868:	ee18 0a10 	vmov	r0, s16
 800886c:	4621      	mov	r1, r4
 800886e:	f000 f9f1 	bl	8008c54 <_Bfree>
 8008872:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008874:	2300      	movs	r3, #0
 8008876:	6013      	str	r3, [r2, #0]
 8008878:	2750      	movs	r7, #80	; 0x50
 800887a:	e70c      	b.n	8008696 <__gethex+0x12a>
 800887c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800887e:	2b00      	cmp	r3, #0
 8008880:	d1f2      	bne.n	8008868 <__gethex+0x2fc>
 8008882:	e7d8      	b.n	8008836 <__gethex+0x2ca>
 8008884:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008886:	2b00      	cmp	r3, #0
 8008888:	d1d5      	bne.n	8008836 <__gethex+0x2ca>
 800888a:	e7ed      	b.n	8008868 <__gethex+0x2fc>
 800888c:	1e6f      	subs	r7, r5, #1
 800888e:	f1ba 0f00 	cmp.w	sl, #0
 8008892:	d131      	bne.n	80088f8 <__gethex+0x38c>
 8008894:	b127      	cbz	r7, 80088a0 <__gethex+0x334>
 8008896:	4639      	mov	r1, r7
 8008898:	4620      	mov	r0, r4
 800889a:	f000 fe3b 	bl	8009514 <__any_on>
 800889e:	4682      	mov	sl, r0
 80088a0:	117b      	asrs	r3, r7, #5
 80088a2:	2101      	movs	r1, #1
 80088a4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80088a8:	f007 071f 	and.w	r7, r7, #31
 80088ac:	fa01 f707 	lsl.w	r7, r1, r7
 80088b0:	421f      	tst	r7, r3
 80088b2:	4629      	mov	r1, r5
 80088b4:	4620      	mov	r0, r4
 80088b6:	bf18      	it	ne
 80088b8:	f04a 0a02 	orrne.w	sl, sl, #2
 80088bc:	1b76      	subs	r6, r6, r5
 80088be:	f7ff fded 	bl	800849c <rshift>
 80088c2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80088c6:	2702      	movs	r7, #2
 80088c8:	f1ba 0f00 	cmp.w	sl, #0
 80088cc:	d048      	beq.n	8008960 <__gethex+0x3f4>
 80088ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80088d2:	2b02      	cmp	r3, #2
 80088d4:	d015      	beq.n	8008902 <__gethex+0x396>
 80088d6:	2b03      	cmp	r3, #3
 80088d8:	d017      	beq.n	800890a <__gethex+0x39e>
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d109      	bne.n	80088f2 <__gethex+0x386>
 80088de:	f01a 0f02 	tst.w	sl, #2
 80088e2:	d006      	beq.n	80088f2 <__gethex+0x386>
 80088e4:	f8d9 0000 	ldr.w	r0, [r9]
 80088e8:	ea4a 0a00 	orr.w	sl, sl, r0
 80088ec:	f01a 0f01 	tst.w	sl, #1
 80088f0:	d10e      	bne.n	8008910 <__gethex+0x3a4>
 80088f2:	f047 0710 	orr.w	r7, r7, #16
 80088f6:	e033      	b.n	8008960 <__gethex+0x3f4>
 80088f8:	f04f 0a01 	mov.w	sl, #1
 80088fc:	e7d0      	b.n	80088a0 <__gethex+0x334>
 80088fe:	2701      	movs	r7, #1
 8008900:	e7e2      	b.n	80088c8 <__gethex+0x35c>
 8008902:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008904:	f1c3 0301 	rsb	r3, r3, #1
 8008908:	9315      	str	r3, [sp, #84]	; 0x54
 800890a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800890c:	2b00      	cmp	r3, #0
 800890e:	d0f0      	beq.n	80088f2 <__gethex+0x386>
 8008910:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008914:	f104 0314 	add.w	r3, r4, #20
 8008918:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800891c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008920:	f04f 0c00 	mov.w	ip, #0
 8008924:	4618      	mov	r0, r3
 8008926:	f853 2b04 	ldr.w	r2, [r3], #4
 800892a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800892e:	d01c      	beq.n	800896a <__gethex+0x3fe>
 8008930:	3201      	adds	r2, #1
 8008932:	6002      	str	r2, [r0, #0]
 8008934:	2f02      	cmp	r7, #2
 8008936:	f104 0314 	add.w	r3, r4, #20
 800893a:	d13f      	bne.n	80089bc <__gethex+0x450>
 800893c:	f8d8 2000 	ldr.w	r2, [r8]
 8008940:	3a01      	subs	r2, #1
 8008942:	42b2      	cmp	r2, r6
 8008944:	d10a      	bne.n	800895c <__gethex+0x3f0>
 8008946:	1171      	asrs	r1, r6, #5
 8008948:	2201      	movs	r2, #1
 800894a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800894e:	f006 061f 	and.w	r6, r6, #31
 8008952:	fa02 f606 	lsl.w	r6, r2, r6
 8008956:	421e      	tst	r6, r3
 8008958:	bf18      	it	ne
 800895a:	4617      	movne	r7, r2
 800895c:	f047 0720 	orr.w	r7, r7, #32
 8008960:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008962:	601c      	str	r4, [r3, #0]
 8008964:	9b04      	ldr	r3, [sp, #16]
 8008966:	601d      	str	r5, [r3, #0]
 8008968:	e695      	b.n	8008696 <__gethex+0x12a>
 800896a:	4299      	cmp	r1, r3
 800896c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008970:	d8d8      	bhi.n	8008924 <__gethex+0x3b8>
 8008972:	68a3      	ldr	r3, [r4, #8]
 8008974:	459b      	cmp	fp, r3
 8008976:	db19      	blt.n	80089ac <__gethex+0x440>
 8008978:	6861      	ldr	r1, [r4, #4]
 800897a:	ee18 0a10 	vmov	r0, s16
 800897e:	3101      	adds	r1, #1
 8008980:	f000 f928 	bl	8008bd4 <_Balloc>
 8008984:	4681      	mov	r9, r0
 8008986:	b918      	cbnz	r0, 8008990 <__gethex+0x424>
 8008988:	4b1a      	ldr	r3, [pc, #104]	; (80089f4 <__gethex+0x488>)
 800898a:	4602      	mov	r2, r0
 800898c:	2184      	movs	r1, #132	; 0x84
 800898e:	e6a8      	b.n	80086e2 <__gethex+0x176>
 8008990:	6922      	ldr	r2, [r4, #16]
 8008992:	3202      	adds	r2, #2
 8008994:	f104 010c 	add.w	r1, r4, #12
 8008998:	0092      	lsls	r2, r2, #2
 800899a:	300c      	adds	r0, #12
 800899c:	f000 f90c 	bl	8008bb8 <memcpy>
 80089a0:	4621      	mov	r1, r4
 80089a2:	ee18 0a10 	vmov	r0, s16
 80089a6:	f000 f955 	bl	8008c54 <_Bfree>
 80089aa:	464c      	mov	r4, r9
 80089ac:	6923      	ldr	r3, [r4, #16]
 80089ae:	1c5a      	adds	r2, r3, #1
 80089b0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80089b4:	6122      	str	r2, [r4, #16]
 80089b6:	2201      	movs	r2, #1
 80089b8:	615a      	str	r2, [r3, #20]
 80089ba:	e7bb      	b.n	8008934 <__gethex+0x3c8>
 80089bc:	6922      	ldr	r2, [r4, #16]
 80089be:	455a      	cmp	r2, fp
 80089c0:	dd0b      	ble.n	80089da <__gethex+0x46e>
 80089c2:	2101      	movs	r1, #1
 80089c4:	4620      	mov	r0, r4
 80089c6:	f7ff fd69 	bl	800849c <rshift>
 80089ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80089ce:	3501      	adds	r5, #1
 80089d0:	42ab      	cmp	r3, r5
 80089d2:	f6ff aed0 	blt.w	8008776 <__gethex+0x20a>
 80089d6:	2701      	movs	r7, #1
 80089d8:	e7c0      	b.n	800895c <__gethex+0x3f0>
 80089da:	f016 061f 	ands.w	r6, r6, #31
 80089de:	d0fa      	beq.n	80089d6 <__gethex+0x46a>
 80089e0:	4453      	add	r3, sl
 80089e2:	f1c6 0620 	rsb	r6, r6, #32
 80089e6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80089ea:	f000 f9e5 	bl	8008db8 <__hi0bits>
 80089ee:	42b0      	cmp	r0, r6
 80089f0:	dbe7      	blt.n	80089c2 <__gethex+0x456>
 80089f2:	e7f0      	b.n	80089d6 <__gethex+0x46a>
 80089f4:	0800a878 	.word	0x0800a878

080089f8 <L_shift>:
 80089f8:	f1c2 0208 	rsb	r2, r2, #8
 80089fc:	0092      	lsls	r2, r2, #2
 80089fe:	b570      	push	{r4, r5, r6, lr}
 8008a00:	f1c2 0620 	rsb	r6, r2, #32
 8008a04:	6843      	ldr	r3, [r0, #4]
 8008a06:	6804      	ldr	r4, [r0, #0]
 8008a08:	fa03 f506 	lsl.w	r5, r3, r6
 8008a0c:	432c      	orrs	r4, r5
 8008a0e:	40d3      	lsrs	r3, r2
 8008a10:	6004      	str	r4, [r0, #0]
 8008a12:	f840 3f04 	str.w	r3, [r0, #4]!
 8008a16:	4288      	cmp	r0, r1
 8008a18:	d3f4      	bcc.n	8008a04 <L_shift+0xc>
 8008a1a:	bd70      	pop	{r4, r5, r6, pc}

08008a1c <__match>:
 8008a1c:	b530      	push	{r4, r5, lr}
 8008a1e:	6803      	ldr	r3, [r0, #0]
 8008a20:	3301      	adds	r3, #1
 8008a22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a26:	b914      	cbnz	r4, 8008a2e <__match+0x12>
 8008a28:	6003      	str	r3, [r0, #0]
 8008a2a:	2001      	movs	r0, #1
 8008a2c:	bd30      	pop	{r4, r5, pc}
 8008a2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a32:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008a36:	2d19      	cmp	r5, #25
 8008a38:	bf98      	it	ls
 8008a3a:	3220      	addls	r2, #32
 8008a3c:	42a2      	cmp	r2, r4
 8008a3e:	d0f0      	beq.n	8008a22 <__match+0x6>
 8008a40:	2000      	movs	r0, #0
 8008a42:	e7f3      	b.n	8008a2c <__match+0x10>

08008a44 <__hexnan>:
 8008a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a48:	680b      	ldr	r3, [r1, #0]
 8008a4a:	115e      	asrs	r6, r3, #5
 8008a4c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008a50:	f013 031f 	ands.w	r3, r3, #31
 8008a54:	b087      	sub	sp, #28
 8008a56:	bf18      	it	ne
 8008a58:	3604      	addne	r6, #4
 8008a5a:	2500      	movs	r5, #0
 8008a5c:	1f37      	subs	r7, r6, #4
 8008a5e:	4690      	mov	r8, r2
 8008a60:	6802      	ldr	r2, [r0, #0]
 8008a62:	9301      	str	r3, [sp, #4]
 8008a64:	4682      	mov	sl, r0
 8008a66:	f846 5c04 	str.w	r5, [r6, #-4]
 8008a6a:	46b9      	mov	r9, r7
 8008a6c:	463c      	mov	r4, r7
 8008a6e:	9502      	str	r5, [sp, #8]
 8008a70:	46ab      	mov	fp, r5
 8008a72:	7851      	ldrb	r1, [r2, #1]
 8008a74:	1c53      	adds	r3, r2, #1
 8008a76:	9303      	str	r3, [sp, #12]
 8008a78:	b341      	cbz	r1, 8008acc <__hexnan+0x88>
 8008a7a:	4608      	mov	r0, r1
 8008a7c:	9205      	str	r2, [sp, #20]
 8008a7e:	9104      	str	r1, [sp, #16]
 8008a80:	f7ff fd5e 	bl	8008540 <__hexdig_fun>
 8008a84:	2800      	cmp	r0, #0
 8008a86:	d14f      	bne.n	8008b28 <__hexnan+0xe4>
 8008a88:	9904      	ldr	r1, [sp, #16]
 8008a8a:	9a05      	ldr	r2, [sp, #20]
 8008a8c:	2920      	cmp	r1, #32
 8008a8e:	d818      	bhi.n	8008ac2 <__hexnan+0x7e>
 8008a90:	9b02      	ldr	r3, [sp, #8]
 8008a92:	459b      	cmp	fp, r3
 8008a94:	dd13      	ble.n	8008abe <__hexnan+0x7a>
 8008a96:	454c      	cmp	r4, r9
 8008a98:	d206      	bcs.n	8008aa8 <__hexnan+0x64>
 8008a9a:	2d07      	cmp	r5, #7
 8008a9c:	dc04      	bgt.n	8008aa8 <__hexnan+0x64>
 8008a9e:	462a      	mov	r2, r5
 8008aa0:	4649      	mov	r1, r9
 8008aa2:	4620      	mov	r0, r4
 8008aa4:	f7ff ffa8 	bl	80089f8 <L_shift>
 8008aa8:	4544      	cmp	r4, r8
 8008aaa:	d950      	bls.n	8008b4e <__hexnan+0x10a>
 8008aac:	2300      	movs	r3, #0
 8008aae:	f1a4 0904 	sub.w	r9, r4, #4
 8008ab2:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ab6:	f8cd b008 	str.w	fp, [sp, #8]
 8008aba:	464c      	mov	r4, r9
 8008abc:	461d      	mov	r5, r3
 8008abe:	9a03      	ldr	r2, [sp, #12]
 8008ac0:	e7d7      	b.n	8008a72 <__hexnan+0x2e>
 8008ac2:	2929      	cmp	r1, #41	; 0x29
 8008ac4:	d156      	bne.n	8008b74 <__hexnan+0x130>
 8008ac6:	3202      	adds	r2, #2
 8008ac8:	f8ca 2000 	str.w	r2, [sl]
 8008acc:	f1bb 0f00 	cmp.w	fp, #0
 8008ad0:	d050      	beq.n	8008b74 <__hexnan+0x130>
 8008ad2:	454c      	cmp	r4, r9
 8008ad4:	d206      	bcs.n	8008ae4 <__hexnan+0xa0>
 8008ad6:	2d07      	cmp	r5, #7
 8008ad8:	dc04      	bgt.n	8008ae4 <__hexnan+0xa0>
 8008ada:	462a      	mov	r2, r5
 8008adc:	4649      	mov	r1, r9
 8008ade:	4620      	mov	r0, r4
 8008ae0:	f7ff ff8a 	bl	80089f8 <L_shift>
 8008ae4:	4544      	cmp	r4, r8
 8008ae6:	d934      	bls.n	8008b52 <__hexnan+0x10e>
 8008ae8:	f1a8 0204 	sub.w	r2, r8, #4
 8008aec:	4623      	mov	r3, r4
 8008aee:	f853 1b04 	ldr.w	r1, [r3], #4
 8008af2:	f842 1f04 	str.w	r1, [r2, #4]!
 8008af6:	429f      	cmp	r7, r3
 8008af8:	d2f9      	bcs.n	8008aee <__hexnan+0xaa>
 8008afa:	1b3b      	subs	r3, r7, r4
 8008afc:	f023 0303 	bic.w	r3, r3, #3
 8008b00:	3304      	adds	r3, #4
 8008b02:	3401      	adds	r4, #1
 8008b04:	3e03      	subs	r6, #3
 8008b06:	42b4      	cmp	r4, r6
 8008b08:	bf88      	it	hi
 8008b0a:	2304      	movhi	r3, #4
 8008b0c:	4443      	add	r3, r8
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f843 2b04 	str.w	r2, [r3], #4
 8008b14:	429f      	cmp	r7, r3
 8008b16:	d2fb      	bcs.n	8008b10 <__hexnan+0xcc>
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	b91b      	cbnz	r3, 8008b24 <__hexnan+0xe0>
 8008b1c:	4547      	cmp	r7, r8
 8008b1e:	d127      	bne.n	8008b70 <__hexnan+0x12c>
 8008b20:	2301      	movs	r3, #1
 8008b22:	603b      	str	r3, [r7, #0]
 8008b24:	2005      	movs	r0, #5
 8008b26:	e026      	b.n	8008b76 <__hexnan+0x132>
 8008b28:	3501      	adds	r5, #1
 8008b2a:	2d08      	cmp	r5, #8
 8008b2c:	f10b 0b01 	add.w	fp, fp, #1
 8008b30:	dd06      	ble.n	8008b40 <__hexnan+0xfc>
 8008b32:	4544      	cmp	r4, r8
 8008b34:	d9c3      	bls.n	8008abe <__hexnan+0x7a>
 8008b36:	2300      	movs	r3, #0
 8008b38:	f844 3c04 	str.w	r3, [r4, #-4]
 8008b3c:	2501      	movs	r5, #1
 8008b3e:	3c04      	subs	r4, #4
 8008b40:	6822      	ldr	r2, [r4, #0]
 8008b42:	f000 000f 	and.w	r0, r0, #15
 8008b46:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008b4a:	6022      	str	r2, [r4, #0]
 8008b4c:	e7b7      	b.n	8008abe <__hexnan+0x7a>
 8008b4e:	2508      	movs	r5, #8
 8008b50:	e7b5      	b.n	8008abe <__hexnan+0x7a>
 8008b52:	9b01      	ldr	r3, [sp, #4]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d0df      	beq.n	8008b18 <__hexnan+0xd4>
 8008b58:	f04f 32ff 	mov.w	r2, #4294967295
 8008b5c:	f1c3 0320 	rsb	r3, r3, #32
 8008b60:	fa22 f303 	lsr.w	r3, r2, r3
 8008b64:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008b68:	401a      	ands	r2, r3
 8008b6a:	f846 2c04 	str.w	r2, [r6, #-4]
 8008b6e:	e7d3      	b.n	8008b18 <__hexnan+0xd4>
 8008b70:	3f04      	subs	r7, #4
 8008b72:	e7d1      	b.n	8008b18 <__hexnan+0xd4>
 8008b74:	2004      	movs	r0, #4
 8008b76:	b007      	add	sp, #28
 8008b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008b7c <_localeconv_r>:
 8008b7c:	4800      	ldr	r0, [pc, #0]	; (8008b80 <_localeconv_r+0x4>)
 8008b7e:	4770      	bx	lr
 8008b80:	20000164 	.word	0x20000164

08008b84 <malloc>:
 8008b84:	4b02      	ldr	r3, [pc, #8]	; (8008b90 <malloc+0xc>)
 8008b86:	4601      	mov	r1, r0
 8008b88:	6818      	ldr	r0, [r3, #0]
 8008b8a:	f000 bd67 	b.w	800965c <_malloc_r>
 8008b8e:	bf00      	nop
 8008b90:	2000000c 	.word	0x2000000c

08008b94 <__ascii_mbtowc>:
 8008b94:	b082      	sub	sp, #8
 8008b96:	b901      	cbnz	r1, 8008b9a <__ascii_mbtowc+0x6>
 8008b98:	a901      	add	r1, sp, #4
 8008b9a:	b142      	cbz	r2, 8008bae <__ascii_mbtowc+0x1a>
 8008b9c:	b14b      	cbz	r3, 8008bb2 <__ascii_mbtowc+0x1e>
 8008b9e:	7813      	ldrb	r3, [r2, #0]
 8008ba0:	600b      	str	r3, [r1, #0]
 8008ba2:	7812      	ldrb	r2, [r2, #0]
 8008ba4:	1e10      	subs	r0, r2, #0
 8008ba6:	bf18      	it	ne
 8008ba8:	2001      	movne	r0, #1
 8008baa:	b002      	add	sp, #8
 8008bac:	4770      	bx	lr
 8008bae:	4610      	mov	r0, r2
 8008bb0:	e7fb      	b.n	8008baa <__ascii_mbtowc+0x16>
 8008bb2:	f06f 0001 	mvn.w	r0, #1
 8008bb6:	e7f8      	b.n	8008baa <__ascii_mbtowc+0x16>

08008bb8 <memcpy>:
 8008bb8:	440a      	add	r2, r1
 8008bba:	4291      	cmp	r1, r2
 8008bbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008bc0:	d100      	bne.n	8008bc4 <memcpy+0xc>
 8008bc2:	4770      	bx	lr
 8008bc4:	b510      	push	{r4, lr}
 8008bc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bce:	4291      	cmp	r1, r2
 8008bd0:	d1f9      	bne.n	8008bc6 <memcpy+0xe>
 8008bd2:	bd10      	pop	{r4, pc}

08008bd4 <_Balloc>:
 8008bd4:	b570      	push	{r4, r5, r6, lr}
 8008bd6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008bd8:	4604      	mov	r4, r0
 8008bda:	460d      	mov	r5, r1
 8008bdc:	b976      	cbnz	r6, 8008bfc <_Balloc+0x28>
 8008bde:	2010      	movs	r0, #16
 8008be0:	f7ff ffd0 	bl	8008b84 <malloc>
 8008be4:	4602      	mov	r2, r0
 8008be6:	6260      	str	r0, [r4, #36]	; 0x24
 8008be8:	b920      	cbnz	r0, 8008bf4 <_Balloc+0x20>
 8008bea:	4b18      	ldr	r3, [pc, #96]	; (8008c4c <_Balloc+0x78>)
 8008bec:	4818      	ldr	r0, [pc, #96]	; (8008c50 <_Balloc+0x7c>)
 8008bee:	2166      	movs	r1, #102	; 0x66
 8008bf0:	f000 ff40 	bl	8009a74 <__assert_func>
 8008bf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008bf8:	6006      	str	r6, [r0, #0]
 8008bfa:	60c6      	str	r6, [r0, #12]
 8008bfc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008bfe:	68f3      	ldr	r3, [r6, #12]
 8008c00:	b183      	cbz	r3, 8008c24 <_Balloc+0x50>
 8008c02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008c0a:	b9b8      	cbnz	r0, 8008c3c <_Balloc+0x68>
 8008c0c:	2101      	movs	r1, #1
 8008c0e:	fa01 f605 	lsl.w	r6, r1, r5
 8008c12:	1d72      	adds	r2, r6, #5
 8008c14:	0092      	lsls	r2, r2, #2
 8008c16:	4620      	mov	r0, r4
 8008c18:	f000 fc9d 	bl	8009556 <_calloc_r>
 8008c1c:	b160      	cbz	r0, 8008c38 <_Balloc+0x64>
 8008c1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008c22:	e00e      	b.n	8008c42 <_Balloc+0x6e>
 8008c24:	2221      	movs	r2, #33	; 0x21
 8008c26:	2104      	movs	r1, #4
 8008c28:	4620      	mov	r0, r4
 8008c2a:	f000 fc94 	bl	8009556 <_calloc_r>
 8008c2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c30:	60f0      	str	r0, [r6, #12]
 8008c32:	68db      	ldr	r3, [r3, #12]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d1e4      	bne.n	8008c02 <_Balloc+0x2e>
 8008c38:	2000      	movs	r0, #0
 8008c3a:	bd70      	pop	{r4, r5, r6, pc}
 8008c3c:	6802      	ldr	r2, [r0, #0]
 8008c3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008c42:	2300      	movs	r3, #0
 8008c44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008c48:	e7f7      	b.n	8008c3a <_Balloc+0x66>
 8008c4a:	bf00      	nop
 8008c4c:	0800a806 	.word	0x0800a806
 8008c50:	0800a904 	.word	0x0800a904

08008c54 <_Bfree>:
 8008c54:	b570      	push	{r4, r5, r6, lr}
 8008c56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008c58:	4605      	mov	r5, r0
 8008c5a:	460c      	mov	r4, r1
 8008c5c:	b976      	cbnz	r6, 8008c7c <_Bfree+0x28>
 8008c5e:	2010      	movs	r0, #16
 8008c60:	f7ff ff90 	bl	8008b84 <malloc>
 8008c64:	4602      	mov	r2, r0
 8008c66:	6268      	str	r0, [r5, #36]	; 0x24
 8008c68:	b920      	cbnz	r0, 8008c74 <_Bfree+0x20>
 8008c6a:	4b09      	ldr	r3, [pc, #36]	; (8008c90 <_Bfree+0x3c>)
 8008c6c:	4809      	ldr	r0, [pc, #36]	; (8008c94 <_Bfree+0x40>)
 8008c6e:	218a      	movs	r1, #138	; 0x8a
 8008c70:	f000 ff00 	bl	8009a74 <__assert_func>
 8008c74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c78:	6006      	str	r6, [r0, #0]
 8008c7a:	60c6      	str	r6, [r0, #12]
 8008c7c:	b13c      	cbz	r4, 8008c8e <_Bfree+0x3a>
 8008c7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008c80:	6862      	ldr	r2, [r4, #4]
 8008c82:	68db      	ldr	r3, [r3, #12]
 8008c84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c88:	6021      	str	r1, [r4, #0]
 8008c8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008c8e:	bd70      	pop	{r4, r5, r6, pc}
 8008c90:	0800a806 	.word	0x0800a806
 8008c94:	0800a904 	.word	0x0800a904

08008c98 <__multadd>:
 8008c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c9c:	690d      	ldr	r5, [r1, #16]
 8008c9e:	4607      	mov	r7, r0
 8008ca0:	460c      	mov	r4, r1
 8008ca2:	461e      	mov	r6, r3
 8008ca4:	f101 0c14 	add.w	ip, r1, #20
 8008ca8:	2000      	movs	r0, #0
 8008caa:	f8dc 3000 	ldr.w	r3, [ip]
 8008cae:	b299      	uxth	r1, r3
 8008cb0:	fb02 6101 	mla	r1, r2, r1, r6
 8008cb4:	0c1e      	lsrs	r6, r3, #16
 8008cb6:	0c0b      	lsrs	r3, r1, #16
 8008cb8:	fb02 3306 	mla	r3, r2, r6, r3
 8008cbc:	b289      	uxth	r1, r1
 8008cbe:	3001      	adds	r0, #1
 8008cc0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008cc4:	4285      	cmp	r5, r0
 8008cc6:	f84c 1b04 	str.w	r1, [ip], #4
 8008cca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008cce:	dcec      	bgt.n	8008caa <__multadd+0x12>
 8008cd0:	b30e      	cbz	r6, 8008d16 <__multadd+0x7e>
 8008cd2:	68a3      	ldr	r3, [r4, #8]
 8008cd4:	42ab      	cmp	r3, r5
 8008cd6:	dc19      	bgt.n	8008d0c <__multadd+0x74>
 8008cd8:	6861      	ldr	r1, [r4, #4]
 8008cda:	4638      	mov	r0, r7
 8008cdc:	3101      	adds	r1, #1
 8008cde:	f7ff ff79 	bl	8008bd4 <_Balloc>
 8008ce2:	4680      	mov	r8, r0
 8008ce4:	b928      	cbnz	r0, 8008cf2 <__multadd+0x5a>
 8008ce6:	4602      	mov	r2, r0
 8008ce8:	4b0c      	ldr	r3, [pc, #48]	; (8008d1c <__multadd+0x84>)
 8008cea:	480d      	ldr	r0, [pc, #52]	; (8008d20 <__multadd+0x88>)
 8008cec:	21b5      	movs	r1, #181	; 0xb5
 8008cee:	f000 fec1 	bl	8009a74 <__assert_func>
 8008cf2:	6922      	ldr	r2, [r4, #16]
 8008cf4:	3202      	adds	r2, #2
 8008cf6:	f104 010c 	add.w	r1, r4, #12
 8008cfa:	0092      	lsls	r2, r2, #2
 8008cfc:	300c      	adds	r0, #12
 8008cfe:	f7ff ff5b 	bl	8008bb8 <memcpy>
 8008d02:	4621      	mov	r1, r4
 8008d04:	4638      	mov	r0, r7
 8008d06:	f7ff ffa5 	bl	8008c54 <_Bfree>
 8008d0a:	4644      	mov	r4, r8
 8008d0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008d10:	3501      	adds	r5, #1
 8008d12:	615e      	str	r6, [r3, #20]
 8008d14:	6125      	str	r5, [r4, #16]
 8008d16:	4620      	mov	r0, r4
 8008d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d1c:	0800a878 	.word	0x0800a878
 8008d20:	0800a904 	.word	0x0800a904

08008d24 <__s2b>:
 8008d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d28:	460c      	mov	r4, r1
 8008d2a:	4615      	mov	r5, r2
 8008d2c:	461f      	mov	r7, r3
 8008d2e:	2209      	movs	r2, #9
 8008d30:	3308      	adds	r3, #8
 8008d32:	4606      	mov	r6, r0
 8008d34:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d38:	2100      	movs	r1, #0
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	db09      	blt.n	8008d54 <__s2b+0x30>
 8008d40:	4630      	mov	r0, r6
 8008d42:	f7ff ff47 	bl	8008bd4 <_Balloc>
 8008d46:	b940      	cbnz	r0, 8008d5a <__s2b+0x36>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	4b19      	ldr	r3, [pc, #100]	; (8008db0 <__s2b+0x8c>)
 8008d4c:	4819      	ldr	r0, [pc, #100]	; (8008db4 <__s2b+0x90>)
 8008d4e:	21ce      	movs	r1, #206	; 0xce
 8008d50:	f000 fe90 	bl	8009a74 <__assert_func>
 8008d54:	0052      	lsls	r2, r2, #1
 8008d56:	3101      	adds	r1, #1
 8008d58:	e7f0      	b.n	8008d3c <__s2b+0x18>
 8008d5a:	9b08      	ldr	r3, [sp, #32]
 8008d5c:	6143      	str	r3, [r0, #20]
 8008d5e:	2d09      	cmp	r5, #9
 8008d60:	f04f 0301 	mov.w	r3, #1
 8008d64:	6103      	str	r3, [r0, #16]
 8008d66:	dd16      	ble.n	8008d96 <__s2b+0x72>
 8008d68:	f104 0909 	add.w	r9, r4, #9
 8008d6c:	46c8      	mov	r8, r9
 8008d6e:	442c      	add	r4, r5
 8008d70:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008d74:	4601      	mov	r1, r0
 8008d76:	3b30      	subs	r3, #48	; 0x30
 8008d78:	220a      	movs	r2, #10
 8008d7a:	4630      	mov	r0, r6
 8008d7c:	f7ff ff8c 	bl	8008c98 <__multadd>
 8008d80:	45a0      	cmp	r8, r4
 8008d82:	d1f5      	bne.n	8008d70 <__s2b+0x4c>
 8008d84:	f1a5 0408 	sub.w	r4, r5, #8
 8008d88:	444c      	add	r4, r9
 8008d8a:	1b2d      	subs	r5, r5, r4
 8008d8c:	1963      	adds	r3, r4, r5
 8008d8e:	42bb      	cmp	r3, r7
 8008d90:	db04      	blt.n	8008d9c <__s2b+0x78>
 8008d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d96:	340a      	adds	r4, #10
 8008d98:	2509      	movs	r5, #9
 8008d9a:	e7f6      	b.n	8008d8a <__s2b+0x66>
 8008d9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008da0:	4601      	mov	r1, r0
 8008da2:	3b30      	subs	r3, #48	; 0x30
 8008da4:	220a      	movs	r2, #10
 8008da6:	4630      	mov	r0, r6
 8008da8:	f7ff ff76 	bl	8008c98 <__multadd>
 8008dac:	e7ee      	b.n	8008d8c <__s2b+0x68>
 8008dae:	bf00      	nop
 8008db0:	0800a878 	.word	0x0800a878
 8008db4:	0800a904 	.word	0x0800a904

08008db8 <__hi0bits>:
 8008db8:	0c03      	lsrs	r3, r0, #16
 8008dba:	041b      	lsls	r3, r3, #16
 8008dbc:	b9d3      	cbnz	r3, 8008df4 <__hi0bits+0x3c>
 8008dbe:	0400      	lsls	r0, r0, #16
 8008dc0:	2310      	movs	r3, #16
 8008dc2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008dc6:	bf04      	itt	eq
 8008dc8:	0200      	lsleq	r0, r0, #8
 8008dca:	3308      	addeq	r3, #8
 8008dcc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008dd0:	bf04      	itt	eq
 8008dd2:	0100      	lsleq	r0, r0, #4
 8008dd4:	3304      	addeq	r3, #4
 8008dd6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008dda:	bf04      	itt	eq
 8008ddc:	0080      	lsleq	r0, r0, #2
 8008dde:	3302      	addeq	r3, #2
 8008de0:	2800      	cmp	r0, #0
 8008de2:	db05      	blt.n	8008df0 <__hi0bits+0x38>
 8008de4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008de8:	f103 0301 	add.w	r3, r3, #1
 8008dec:	bf08      	it	eq
 8008dee:	2320      	moveq	r3, #32
 8008df0:	4618      	mov	r0, r3
 8008df2:	4770      	bx	lr
 8008df4:	2300      	movs	r3, #0
 8008df6:	e7e4      	b.n	8008dc2 <__hi0bits+0xa>

08008df8 <__lo0bits>:
 8008df8:	6803      	ldr	r3, [r0, #0]
 8008dfa:	f013 0207 	ands.w	r2, r3, #7
 8008dfe:	4601      	mov	r1, r0
 8008e00:	d00b      	beq.n	8008e1a <__lo0bits+0x22>
 8008e02:	07da      	lsls	r2, r3, #31
 8008e04:	d423      	bmi.n	8008e4e <__lo0bits+0x56>
 8008e06:	0798      	lsls	r0, r3, #30
 8008e08:	bf49      	itett	mi
 8008e0a:	085b      	lsrmi	r3, r3, #1
 8008e0c:	089b      	lsrpl	r3, r3, #2
 8008e0e:	2001      	movmi	r0, #1
 8008e10:	600b      	strmi	r3, [r1, #0]
 8008e12:	bf5c      	itt	pl
 8008e14:	600b      	strpl	r3, [r1, #0]
 8008e16:	2002      	movpl	r0, #2
 8008e18:	4770      	bx	lr
 8008e1a:	b298      	uxth	r0, r3
 8008e1c:	b9a8      	cbnz	r0, 8008e4a <__lo0bits+0x52>
 8008e1e:	0c1b      	lsrs	r3, r3, #16
 8008e20:	2010      	movs	r0, #16
 8008e22:	b2da      	uxtb	r2, r3
 8008e24:	b90a      	cbnz	r2, 8008e2a <__lo0bits+0x32>
 8008e26:	3008      	adds	r0, #8
 8008e28:	0a1b      	lsrs	r3, r3, #8
 8008e2a:	071a      	lsls	r2, r3, #28
 8008e2c:	bf04      	itt	eq
 8008e2e:	091b      	lsreq	r3, r3, #4
 8008e30:	3004      	addeq	r0, #4
 8008e32:	079a      	lsls	r2, r3, #30
 8008e34:	bf04      	itt	eq
 8008e36:	089b      	lsreq	r3, r3, #2
 8008e38:	3002      	addeq	r0, #2
 8008e3a:	07da      	lsls	r2, r3, #31
 8008e3c:	d403      	bmi.n	8008e46 <__lo0bits+0x4e>
 8008e3e:	085b      	lsrs	r3, r3, #1
 8008e40:	f100 0001 	add.w	r0, r0, #1
 8008e44:	d005      	beq.n	8008e52 <__lo0bits+0x5a>
 8008e46:	600b      	str	r3, [r1, #0]
 8008e48:	4770      	bx	lr
 8008e4a:	4610      	mov	r0, r2
 8008e4c:	e7e9      	b.n	8008e22 <__lo0bits+0x2a>
 8008e4e:	2000      	movs	r0, #0
 8008e50:	4770      	bx	lr
 8008e52:	2020      	movs	r0, #32
 8008e54:	4770      	bx	lr
	...

08008e58 <__i2b>:
 8008e58:	b510      	push	{r4, lr}
 8008e5a:	460c      	mov	r4, r1
 8008e5c:	2101      	movs	r1, #1
 8008e5e:	f7ff feb9 	bl	8008bd4 <_Balloc>
 8008e62:	4602      	mov	r2, r0
 8008e64:	b928      	cbnz	r0, 8008e72 <__i2b+0x1a>
 8008e66:	4b05      	ldr	r3, [pc, #20]	; (8008e7c <__i2b+0x24>)
 8008e68:	4805      	ldr	r0, [pc, #20]	; (8008e80 <__i2b+0x28>)
 8008e6a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008e6e:	f000 fe01 	bl	8009a74 <__assert_func>
 8008e72:	2301      	movs	r3, #1
 8008e74:	6144      	str	r4, [r0, #20]
 8008e76:	6103      	str	r3, [r0, #16]
 8008e78:	bd10      	pop	{r4, pc}
 8008e7a:	bf00      	nop
 8008e7c:	0800a878 	.word	0x0800a878
 8008e80:	0800a904 	.word	0x0800a904

08008e84 <__multiply>:
 8008e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e88:	4691      	mov	r9, r2
 8008e8a:	690a      	ldr	r2, [r1, #16]
 8008e8c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	bfb8      	it	lt
 8008e94:	460b      	movlt	r3, r1
 8008e96:	460c      	mov	r4, r1
 8008e98:	bfbc      	itt	lt
 8008e9a:	464c      	movlt	r4, r9
 8008e9c:	4699      	movlt	r9, r3
 8008e9e:	6927      	ldr	r7, [r4, #16]
 8008ea0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008ea4:	68a3      	ldr	r3, [r4, #8]
 8008ea6:	6861      	ldr	r1, [r4, #4]
 8008ea8:	eb07 060a 	add.w	r6, r7, sl
 8008eac:	42b3      	cmp	r3, r6
 8008eae:	b085      	sub	sp, #20
 8008eb0:	bfb8      	it	lt
 8008eb2:	3101      	addlt	r1, #1
 8008eb4:	f7ff fe8e 	bl	8008bd4 <_Balloc>
 8008eb8:	b930      	cbnz	r0, 8008ec8 <__multiply+0x44>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	4b44      	ldr	r3, [pc, #272]	; (8008fd0 <__multiply+0x14c>)
 8008ebe:	4845      	ldr	r0, [pc, #276]	; (8008fd4 <__multiply+0x150>)
 8008ec0:	f240 115d 	movw	r1, #349	; 0x15d
 8008ec4:	f000 fdd6 	bl	8009a74 <__assert_func>
 8008ec8:	f100 0514 	add.w	r5, r0, #20
 8008ecc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008ed0:	462b      	mov	r3, r5
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	4543      	cmp	r3, r8
 8008ed6:	d321      	bcc.n	8008f1c <__multiply+0x98>
 8008ed8:	f104 0314 	add.w	r3, r4, #20
 8008edc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008ee0:	f109 0314 	add.w	r3, r9, #20
 8008ee4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008ee8:	9202      	str	r2, [sp, #8]
 8008eea:	1b3a      	subs	r2, r7, r4
 8008eec:	3a15      	subs	r2, #21
 8008eee:	f022 0203 	bic.w	r2, r2, #3
 8008ef2:	3204      	adds	r2, #4
 8008ef4:	f104 0115 	add.w	r1, r4, #21
 8008ef8:	428f      	cmp	r7, r1
 8008efa:	bf38      	it	cc
 8008efc:	2204      	movcc	r2, #4
 8008efe:	9201      	str	r2, [sp, #4]
 8008f00:	9a02      	ldr	r2, [sp, #8]
 8008f02:	9303      	str	r3, [sp, #12]
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d80c      	bhi.n	8008f22 <__multiply+0x9e>
 8008f08:	2e00      	cmp	r6, #0
 8008f0a:	dd03      	ble.n	8008f14 <__multiply+0x90>
 8008f0c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d05a      	beq.n	8008fca <__multiply+0x146>
 8008f14:	6106      	str	r6, [r0, #16]
 8008f16:	b005      	add	sp, #20
 8008f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f1c:	f843 2b04 	str.w	r2, [r3], #4
 8008f20:	e7d8      	b.n	8008ed4 <__multiply+0x50>
 8008f22:	f8b3 a000 	ldrh.w	sl, [r3]
 8008f26:	f1ba 0f00 	cmp.w	sl, #0
 8008f2a:	d024      	beq.n	8008f76 <__multiply+0xf2>
 8008f2c:	f104 0e14 	add.w	lr, r4, #20
 8008f30:	46a9      	mov	r9, r5
 8008f32:	f04f 0c00 	mov.w	ip, #0
 8008f36:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008f3a:	f8d9 1000 	ldr.w	r1, [r9]
 8008f3e:	fa1f fb82 	uxth.w	fp, r2
 8008f42:	b289      	uxth	r1, r1
 8008f44:	fb0a 110b 	mla	r1, sl, fp, r1
 8008f48:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008f4c:	f8d9 2000 	ldr.w	r2, [r9]
 8008f50:	4461      	add	r1, ip
 8008f52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008f56:	fb0a c20b 	mla	r2, sl, fp, ip
 8008f5a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008f5e:	b289      	uxth	r1, r1
 8008f60:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008f64:	4577      	cmp	r7, lr
 8008f66:	f849 1b04 	str.w	r1, [r9], #4
 8008f6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008f6e:	d8e2      	bhi.n	8008f36 <__multiply+0xb2>
 8008f70:	9a01      	ldr	r2, [sp, #4]
 8008f72:	f845 c002 	str.w	ip, [r5, r2]
 8008f76:	9a03      	ldr	r2, [sp, #12]
 8008f78:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008f7c:	3304      	adds	r3, #4
 8008f7e:	f1b9 0f00 	cmp.w	r9, #0
 8008f82:	d020      	beq.n	8008fc6 <__multiply+0x142>
 8008f84:	6829      	ldr	r1, [r5, #0]
 8008f86:	f104 0c14 	add.w	ip, r4, #20
 8008f8a:	46ae      	mov	lr, r5
 8008f8c:	f04f 0a00 	mov.w	sl, #0
 8008f90:	f8bc b000 	ldrh.w	fp, [ip]
 8008f94:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008f98:	fb09 220b 	mla	r2, r9, fp, r2
 8008f9c:	4492      	add	sl, r2
 8008f9e:	b289      	uxth	r1, r1
 8008fa0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008fa4:	f84e 1b04 	str.w	r1, [lr], #4
 8008fa8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008fac:	f8be 1000 	ldrh.w	r1, [lr]
 8008fb0:	0c12      	lsrs	r2, r2, #16
 8008fb2:	fb09 1102 	mla	r1, r9, r2, r1
 8008fb6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008fba:	4567      	cmp	r7, ip
 8008fbc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008fc0:	d8e6      	bhi.n	8008f90 <__multiply+0x10c>
 8008fc2:	9a01      	ldr	r2, [sp, #4]
 8008fc4:	50a9      	str	r1, [r5, r2]
 8008fc6:	3504      	adds	r5, #4
 8008fc8:	e79a      	b.n	8008f00 <__multiply+0x7c>
 8008fca:	3e01      	subs	r6, #1
 8008fcc:	e79c      	b.n	8008f08 <__multiply+0x84>
 8008fce:	bf00      	nop
 8008fd0:	0800a878 	.word	0x0800a878
 8008fd4:	0800a904 	.word	0x0800a904

08008fd8 <__pow5mult>:
 8008fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fdc:	4615      	mov	r5, r2
 8008fde:	f012 0203 	ands.w	r2, r2, #3
 8008fe2:	4606      	mov	r6, r0
 8008fe4:	460f      	mov	r7, r1
 8008fe6:	d007      	beq.n	8008ff8 <__pow5mult+0x20>
 8008fe8:	4c25      	ldr	r4, [pc, #148]	; (8009080 <__pow5mult+0xa8>)
 8008fea:	3a01      	subs	r2, #1
 8008fec:	2300      	movs	r3, #0
 8008fee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008ff2:	f7ff fe51 	bl	8008c98 <__multadd>
 8008ff6:	4607      	mov	r7, r0
 8008ff8:	10ad      	asrs	r5, r5, #2
 8008ffa:	d03d      	beq.n	8009078 <__pow5mult+0xa0>
 8008ffc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008ffe:	b97c      	cbnz	r4, 8009020 <__pow5mult+0x48>
 8009000:	2010      	movs	r0, #16
 8009002:	f7ff fdbf 	bl	8008b84 <malloc>
 8009006:	4602      	mov	r2, r0
 8009008:	6270      	str	r0, [r6, #36]	; 0x24
 800900a:	b928      	cbnz	r0, 8009018 <__pow5mult+0x40>
 800900c:	4b1d      	ldr	r3, [pc, #116]	; (8009084 <__pow5mult+0xac>)
 800900e:	481e      	ldr	r0, [pc, #120]	; (8009088 <__pow5mult+0xb0>)
 8009010:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009014:	f000 fd2e 	bl	8009a74 <__assert_func>
 8009018:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800901c:	6004      	str	r4, [r0, #0]
 800901e:	60c4      	str	r4, [r0, #12]
 8009020:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009024:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009028:	b94c      	cbnz	r4, 800903e <__pow5mult+0x66>
 800902a:	f240 2171 	movw	r1, #625	; 0x271
 800902e:	4630      	mov	r0, r6
 8009030:	f7ff ff12 	bl	8008e58 <__i2b>
 8009034:	2300      	movs	r3, #0
 8009036:	f8c8 0008 	str.w	r0, [r8, #8]
 800903a:	4604      	mov	r4, r0
 800903c:	6003      	str	r3, [r0, #0]
 800903e:	f04f 0900 	mov.w	r9, #0
 8009042:	07eb      	lsls	r3, r5, #31
 8009044:	d50a      	bpl.n	800905c <__pow5mult+0x84>
 8009046:	4639      	mov	r1, r7
 8009048:	4622      	mov	r2, r4
 800904a:	4630      	mov	r0, r6
 800904c:	f7ff ff1a 	bl	8008e84 <__multiply>
 8009050:	4639      	mov	r1, r7
 8009052:	4680      	mov	r8, r0
 8009054:	4630      	mov	r0, r6
 8009056:	f7ff fdfd 	bl	8008c54 <_Bfree>
 800905a:	4647      	mov	r7, r8
 800905c:	106d      	asrs	r5, r5, #1
 800905e:	d00b      	beq.n	8009078 <__pow5mult+0xa0>
 8009060:	6820      	ldr	r0, [r4, #0]
 8009062:	b938      	cbnz	r0, 8009074 <__pow5mult+0x9c>
 8009064:	4622      	mov	r2, r4
 8009066:	4621      	mov	r1, r4
 8009068:	4630      	mov	r0, r6
 800906a:	f7ff ff0b 	bl	8008e84 <__multiply>
 800906e:	6020      	str	r0, [r4, #0]
 8009070:	f8c0 9000 	str.w	r9, [r0]
 8009074:	4604      	mov	r4, r0
 8009076:	e7e4      	b.n	8009042 <__pow5mult+0x6a>
 8009078:	4638      	mov	r0, r7
 800907a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800907e:	bf00      	nop
 8009080:	0800aa50 	.word	0x0800aa50
 8009084:	0800a806 	.word	0x0800a806
 8009088:	0800a904 	.word	0x0800a904

0800908c <__lshift>:
 800908c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009090:	460c      	mov	r4, r1
 8009092:	6849      	ldr	r1, [r1, #4]
 8009094:	6923      	ldr	r3, [r4, #16]
 8009096:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800909a:	68a3      	ldr	r3, [r4, #8]
 800909c:	4607      	mov	r7, r0
 800909e:	4691      	mov	r9, r2
 80090a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80090a4:	f108 0601 	add.w	r6, r8, #1
 80090a8:	42b3      	cmp	r3, r6
 80090aa:	db0b      	blt.n	80090c4 <__lshift+0x38>
 80090ac:	4638      	mov	r0, r7
 80090ae:	f7ff fd91 	bl	8008bd4 <_Balloc>
 80090b2:	4605      	mov	r5, r0
 80090b4:	b948      	cbnz	r0, 80090ca <__lshift+0x3e>
 80090b6:	4602      	mov	r2, r0
 80090b8:	4b2a      	ldr	r3, [pc, #168]	; (8009164 <__lshift+0xd8>)
 80090ba:	482b      	ldr	r0, [pc, #172]	; (8009168 <__lshift+0xdc>)
 80090bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80090c0:	f000 fcd8 	bl	8009a74 <__assert_func>
 80090c4:	3101      	adds	r1, #1
 80090c6:	005b      	lsls	r3, r3, #1
 80090c8:	e7ee      	b.n	80090a8 <__lshift+0x1c>
 80090ca:	2300      	movs	r3, #0
 80090cc:	f100 0114 	add.w	r1, r0, #20
 80090d0:	f100 0210 	add.w	r2, r0, #16
 80090d4:	4618      	mov	r0, r3
 80090d6:	4553      	cmp	r3, sl
 80090d8:	db37      	blt.n	800914a <__lshift+0xbe>
 80090da:	6920      	ldr	r0, [r4, #16]
 80090dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80090e0:	f104 0314 	add.w	r3, r4, #20
 80090e4:	f019 091f 	ands.w	r9, r9, #31
 80090e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80090ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80090f0:	d02f      	beq.n	8009152 <__lshift+0xc6>
 80090f2:	f1c9 0e20 	rsb	lr, r9, #32
 80090f6:	468a      	mov	sl, r1
 80090f8:	f04f 0c00 	mov.w	ip, #0
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	fa02 f209 	lsl.w	r2, r2, r9
 8009102:	ea42 020c 	orr.w	r2, r2, ip
 8009106:	f84a 2b04 	str.w	r2, [sl], #4
 800910a:	f853 2b04 	ldr.w	r2, [r3], #4
 800910e:	4298      	cmp	r0, r3
 8009110:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009114:	d8f2      	bhi.n	80090fc <__lshift+0x70>
 8009116:	1b03      	subs	r3, r0, r4
 8009118:	3b15      	subs	r3, #21
 800911a:	f023 0303 	bic.w	r3, r3, #3
 800911e:	3304      	adds	r3, #4
 8009120:	f104 0215 	add.w	r2, r4, #21
 8009124:	4290      	cmp	r0, r2
 8009126:	bf38      	it	cc
 8009128:	2304      	movcc	r3, #4
 800912a:	f841 c003 	str.w	ip, [r1, r3]
 800912e:	f1bc 0f00 	cmp.w	ip, #0
 8009132:	d001      	beq.n	8009138 <__lshift+0xac>
 8009134:	f108 0602 	add.w	r6, r8, #2
 8009138:	3e01      	subs	r6, #1
 800913a:	4638      	mov	r0, r7
 800913c:	612e      	str	r6, [r5, #16]
 800913e:	4621      	mov	r1, r4
 8009140:	f7ff fd88 	bl	8008c54 <_Bfree>
 8009144:	4628      	mov	r0, r5
 8009146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800914a:	f842 0f04 	str.w	r0, [r2, #4]!
 800914e:	3301      	adds	r3, #1
 8009150:	e7c1      	b.n	80090d6 <__lshift+0x4a>
 8009152:	3904      	subs	r1, #4
 8009154:	f853 2b04 	ldr.w	r2, [r3], #4
 8009158:	f841 2f04 	str.w	r2, [r1, #4]!
 800915c:	4298      	cmp	r0, r3
 800915e:	d8f9      	bhi.n	8009154 <__lshift+0xc8>
 8009160:	e7ea      	b.n	8009138 <__lshift+0xac>
 8009162:	bf00      	nop
 8009164:	0800a878 	.word	0x0800a878
 8009168:	0800a904 	.word	0x0800a904

0800916c <__mcmp>:
 800916c:	b530      	push	{r4, r5, lr}
 800916e:	6902      	ldr	r2, [r0, #16]
 8009170:	690c      	ldr	r4, [r1, #16]
 8009172:	1b12      	subs	r2, r2, r4
 8009174:	d10e      	bne.n	8009194 <__mcmp+0x28>
 8009176:	f100 0314 	add.w	r3, r0, #20
 800917a:	3114      	adds	r1, #20
 800917c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009180:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009184:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009188:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800918c:	42a5      	cmp	r5, r4
 800918e:	d003      	beq.n	8009198 <__mcmp+0x2c>
 8009190:	d305      	bcc.n	800919e <__mcmp+0x32>
 8009192:	2201      	movs	r2, #1
 8009194:	4610      	mov	r0, r2
 8009196:	bd30      	pop	{r4, r5, pc}
 8009198:	4283      	cmp	r3, r0
 800919a:	d3f3      	bcc.n	8009184 <__mcmp+0x18>
 800919c:	e7fa      	b.n	8009194 <__mcmp+0x28>
 800919e:	f04f 32ff 	mov.w	r2, #4294967295
 80091a2:	e7f7      	b.n	8009194 <__mcmp+0x28>

080091a4 <__mdiff>:
 80091a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091a8:	460c      	mov	r4, r1
 80091aa:	4606      	mov	r6, r0
 80091ac:	4611      	mov	r1, r2
 80091ae:	4620      	mov	r0, r4
 80091b0:	4690      	mov	r8, r2
 80091b2:	f7ff ffdb 	bl	800916c <__mcmp>
 80091b6:	1e05      	subs	r5, r0, #0
 80091b8:	d110      	bne.n	80091dc <__mdiff+0x38>
 80091ba:	4629      	mov	r1, r5
 80091bc:	4630      	mov	r0, r6
 80091be:	f7ff fd09 	bl	8008bd4 <_Balloc>
 80091c2:	b930      	cbnz	r0, 80091d2 <__mdiff+0x2e>
 80091c4:	4b3a      	ldr	r3, [pc, #232]	; (80092b0 <__mdiff+0x10c>)
 80091c6:	4602      	mov	r2, r0
 80091c8:	f240 2132 	movw	r1, #562	; 0x232
 80091cc:	4839      	ldr	r0, [pc, #228]	; (80092b4 <__mdiff+0x110>)
 80091ce:	f000 fc51 	bl	8009a74 <__assert_func>
 80091d2:	2301      	movs	r3, #1
 80091d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80091d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091dc:	bfa4      	itt	ge
 80091de:	4643      	movge	r3, r8
 80091e0:	46a0      	movge	r8, r4
 80091e2:	4630      	mov	r0, r6
 80091e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80091e8:	bfa6      	itte	ge
 80091ea:	461c      	movge	r4, r3
 80091ec:	2500      	movge	r5, #0
 80091ee:	2501      	movlt	r5, #1
 80091f0:	f7ff fcf0 	bl	8008bd4 <_Balloc>
 80091f4:	b920      	cbnz	r0, 8009200 <__mdiff+0x5c>
 80091f6:	4b2e      	ldr	r3, [pc, #184]	; (80092b0 <__mdiff+0x10c>)
 80091f8:	4602      	mov	r2, r0
 80091fa:	f44f 7110 	mov.w	r1, #576	; 0x240
 80091fe:	e7e5      	b.n	80091cc <__mdiff+0x28>
 8009200:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009204:	6926      	ldr	r6, [r4, #16]
 8009206:	60c5      	str	r5, [r0, #12]
 8009208:	f104 0914 	add.w	r9, r4, #20
 800920c:	f108 0514 	add.w	r5, r8, #20
 8009210:	f100 0e14 	add.w	lr, r0, #20
 8009214:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009218:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800921c:	f108 0210 	add.w	r2, r8, #16
 8009220:	46f2      	mov	sl, lr
 8009222:	2100      	movs	r1, #0
 8009224:	f859 3b04 	ldr.w	r3, [r9], #4
 8009228:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800922c:	fa1f f883 	uxth.w	r8, r3
 8009230:	fa11 f18b 	uxtah	r1, r1, fp
 8009234:	0c1b      	lsrs	r3, r3, #16
 8009236:	eba1 0808 	sub.w	r8, r1, r8
 800923a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800923e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009242:	fa1f f888 	uxth.w	r8, r8
 8009246:	1419      	asrs	r1, r3, #16
 8009248:	454e      	cmp	r6, r9
 800924a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800924e:	f84a 3b04 	str.w	r3, [sl], #4
 8009252:	d8e7      	bhi.n	8009224 <__mdiff+0x80>
 8009254:	1b33      	subs	r3, r6, r4
 8009256:	3b15      	subs	r3, #21
 8009258:	f023 0303 	bic.w	r3, r3, #3
 800925c:	3304      	adds	r3, #4
 800925e:	3415      	adds	r4, #21
 8009260:	42a6      	cmp	r6, r4
 8009262:	bf38      	it	cc
 8009264:	2304      	movcc	r3, #4
 8009266:	441d      	add	r5, r3
 8009268:	4473      	add	r3, lr
 800926a:	469e      	mov	lr, r3
 800926c:	462e      	mov	r6, r5
 800926e:	4566      	cmp	r6, ip
 8009270:	d30e      	bcc.n	8009290 <__mdiff+0xec>
 8009272:	f10c 0203 	add.w	r2, ip, #3
 8009276:	1b52      	subs	r2, r2, r5
 8009278:	f022 0203 	bic.w	r2, r2, #3
 800927c:	3d03      	subs	r5, #3
 800927e:	45ac      	cmp	ip, r5
 8009280:	bf38      	it	cc
 8009282:	2200      	movcc	r2, #0
 8009284:	441a      	add	r2, r3
 8009286:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800928a:	b17b      	cbz	r3, 80092ac <__mdiff+0x108>
 800928c:	6107      	str	r7, [r0, #16]
 800928e:	e7a3      	b.n	80091d8 <__mdiff+0x34>
 8009290:	f856 8b04 	ldr.w	r8, [r6], #4
 8009294:	fa11 f288 	uxtah	r2, r1, r8
 8009298:	1414      	asrs	r4, r2, #16
 800929a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800929e:	b292      	uxth	r2, r2
 80092a0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80092a4:	f84e 2b04 	str.w	r2, [lr], #4
 80092a8:	1421      	asrs	r1, r4, #16
 80092aa:	e7e0      	b.n	800926e <__mdiff+0xca>
 80092ac:	3f01      	subs	r7, #1
 80092ae:	e7ea      	b.n	8009286 <__mdiff+0xe2>
 80092b0:	0800a878 	.word	0x0800a878
 80092b4:	0800a904 	.word	0x0800a904

080092b8 <__ulp>:
 80092b8:	b082      	sub	sp, #8
 80092ba:	ed8d 0b00 	vstr	d0, [sp]
 80092be:	9b01      	ldr	r3, [sp, #4]
 80092c0:	4912      	ldr	r1, [pc, #72]	; (800930c <__ulp+0x54>)
 80092c2:	4019      	ands	r1, r3
 80092c4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80092c8:	2900      	cmp	r1, #0
 80092ca:	dd05      	ble.n	80092d8 <__ulp+0x20>
 80092cc:	2200      	movs	r2, #0
 80092ce:	460b      	mov	r3, r1
 80092d0:	ec43 2b10 	vmov	d0, r2, r3
 80092d4:	b002      	add	sp, #8
 80092d6:	4770      	bx	lr
 80092d8:	4249      	negs	r1, r1
 80092da:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80092de:	ea4f 5021 	mov.w	r0, r1, asr #20
 80092e2:	f04f 0200 	mov.w	r2, #0
 80092e6:	f04f 0300 	mov.w	r3, #0
 80092ea:	da04      	bge.n	80092f6 <__ulp+0x3e>
 80092ec:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80092f0:	fa41 f300 	asr.w	r3, r1, r0
 80092f4:	e7ec      	b.n	80092d0 <__ulp+0x18>
 80092f6:	f1a0 0114 	sub.w	r1, r0, #20
 80092fa:	291e      	cmp	r1, #30
 80092fc:	bfda      	itte	le
 80092fe:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009302:	fa20 f101 	lsrle.w	r1, r0, r1
 8009306:	2101      	movgt	r1, #1
 8009308:	460a      	mov	r2, r1
 800930a:	e7e1      	b.n	80092d0 <__ulp+0x18>
 800930c:	7ff00000 	.word	0x7ff00000

08009310 <__b2d>:
 8009310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009312:	6905      	ldr	r5, [r0, #16]
 8009314:	f100 0714 	add.w	r7, r0, #20
 8009318:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800931c:	1f2e      	subs	r6, r5, #4
 800931e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009322:	4620      	mov	r0, r4
 8009324:	f7ff fd48 	bl	8008db8 <__hi0bits>
 8009328:	f1c0 0320 	rsb	r3, r0, #32
 800932c:	280a      	cmp	r0, #10
 800932e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80093ac <__b2d+0x9c>
 8009332:	600b      	str	r3, [r1, #0]
 8009334:	dc14      	bgt.n	8009360 <__b2d+0x50>
 8009336:	f1c0 0e0b 	rsb	lr, r0, #11
 800933a:	fa24 f10e 	lsr.w	r1, r4, lr
 800933e:	42b7      	cmp	r7, r6
 8009340:	ea41 030c 	orr.w	r3, r1, ip
 8009344:	bf34      	ite	cc
 8009346:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800934a:	2100      	movcs	r1, #0
 800934c:	3015      	adds	r0, #21
 800934e:	fa04 f000 	lsl.w	r0, r4, r0
 8009352:	fa21 f10e 	lsr.w	r1, r1, lr
 8009356:	ea40 0201 	orr.w	r2, r0, r1
 800935a:	ec43 2b10 	vmov	d0, r2, r3
 800935e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009360:	42b7      	cmp	r7, r6
 8009362:	bf3a      	itte	cc
 8009364:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009368:	f1a5 0608 	subcc.w	r6, r5, #8
 800936c:	2100      	movcs	r1, #0
 800936e:	380b      	subs	r0, #11
 8009370:	d017      	beq.n	80093a2 <__b2d+0x92>
 8009372:	f1c0 0c20 	rsb	ip, r0, #32
 8009376:	fa04 f500 	lsl.w	r5, r4, r0
 800937a:	42be      	cmp	r6, r7
 800937c:	fa21 f40c 	lsr.w	r4, r1, ip
 8009380:	ea45 0504 	orr.w	r5, r5, r4
 8009384:	bf8c      	ite	hi
 8009386:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800938a:	2400      	movls	r4, #0
 800938c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009390:	fa01 f000 	lsl.w	r0, r1, r0
 8009394:	fa24 f40c 	lsr.w	r4, r4, ip
 8009398:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800939c:	ea40 0204 	orr.w	r2, r0, r4
 80093a0:	e7db      	b.n	800935a <__b2d+0x4a>
 80093a2:	ea44 030c 	orr.w	r3, r4, ip
 80093a6:	460a      	mov	r2, r1
 80093a8:	e7d7      	b.n	800935a <__b2d+0x4a>
 80093aa:	bf00      	nop
 80093ac:	3ff00000 	.word	0x3ff00000

080093b0 <__d2b>:
 80093b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80093b4:	4689      	mov	r9, r1
 80093b6:	2101      	movs	r1, #1
 80093b8:	ec57 6b10 	vmov	r6, r7, d0
 80093bc:	4690      	mov	r8, r2
 80093be:	f7ff fc09 	bl	8008bd4 <_Balloc>
 80093c2:	4604      	mov	r4, r0
 80093c4:	b930      	cbnz	r0, 80093d4 <__d2b+0x24>
 80093c6:	4602      	mov	r2, r0
 80093c8:	4b25      	ldr	r3, [pc, #148]	; (8009460 <__d2b+0xb0>)
 80093ca:	4826      	ldr	r0, [pc, #152]	; (8009464 <__d2b+0xb4>)
 80093cc:	f240 310a 	movw	r1, #778	; 0x30a
 80093d0:	f000 fb50 	bl	8009a74 <__assert_func>
 80093d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80093d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80093dc:	bb35      	cbnz	r5, 800942c <__d2b+0x7c>
 80093de:	2e00      	cmp	r6, #0
 80093e0:	9301      	str	r3, [sp, #4]
 80093e2:	d028      	beq.n	8009436 <__d2b+0x86>
 80093e4:	4668      	mov	r0, sp
 80093e6:	9600      	str	r6, [sp, #0]
 80093e8:	f7ff fd06 	bl	8008df8 <__lo0bits>
 80093ec:	9900      	ldr	r1, [sp, #0]
 80093ee:	b300      	cbz	r0, 8009432 <__d2b+0x82>
 80093f0:	9a01      	ldr	r2, [sp, #4]
 80093f2:	f1c0 0320 	rsb	r3, r0, #32
 80093f6:	fa02 f303 	lsl.w	r3, r2, r3
 80093fa:	430b      	orrs	r3, r1
 80093fc:	40c2      	lsrs	r2, r0
 80093fe:	6163      	str	r3, [r4, #20]
 8009400:	9201      	str	r2, [sp, #4]
 8009402:	9b01      	ldr	r3, [sp, #4]
 8009404:	61a3      	str	r3, [r4, #24]
 8009406:	2b00      	cmp	r3, #0
 8009408:	bf14      	ite	ne
 800940a:	2202      	movne	r2, #2
 800940c:	2201      	moveq	r2, #1
 800940e:	6122      	str	r2, [r4, #16]
 8009410:	b1d5      	cbz	r5, 8009448 <__d2b+0x98>
 8009412:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009416:	4405      	add	r5, r0
 8009418:	f8c9 5000 	str.w	r5, [r9]
 800941c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009420:	f8c8 0000 	str.w	r0, [r8]
 8009424:	4620      	mov	r0, r4
 8009426:	b003      	add	sp, #12
 8009428:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800942c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009430:	e7d5      	b.n	80093de <__d2b+0x2e>
 8009432:	6161      	str	r1, [r4, #20]
 8009434:	e7e5      	b.n	8009402 <__d2b+0x52>
 8009436:	a801      	add	r0, sp, #4
 8009438:	f7ff fcde 	bl	8008df8 <__lo0bits>
 800943c:	9b01      	ldr	r3, [sp, #4]
 800943e:	6163      	str	r3, [r4, #20]
 8009440:	2201      	movs	r2, #1
 8009442:	6122      	str	r2, [r4, #16]
 8009444:	3020      	adds	r0, #32
 8009446:	e7e3      	b.n	8009410 <__d2b+0x60>
 8009448:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800944c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009450:	f8c9 0000 	str.w	r0, [r9]
 8009454:	6918      	ldr	r0, [r3, #16]
 8009456:	f7ff fcaf 	bl	8008db8 <__hi0bits>
 800945a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800945e:	e7df      	b.n	8009420 <__d2b+0x70>
 8009460:	0800a878 	.word	0x0800a878
 8009464:	0800a904 	.word	0x0800a904

08009468 <__ratio>:
 8009468:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800946c:	4688      	mov	r8, r1
 800946e:	4669      	mov	r1, sp
 8009470:	4681      	mov	r9, r0
 8009472:	f7ff ff4d 	bl	8009310 <__b2d>
 8009476:	a901      	add	r1, sp, #4
 8009478:	4640      	mov	r0, r8
 800947a:	ec55 4b10 	vmov	r4, r5, d0
 800947e:	f7ff ff47 	bl	8009310 <__b2d>
 8009482:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009486:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800948a:	eba3 0c02 	sub.w	ip, r3, r2
 800948e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009492:	1a9b      	subs	r3, r3, r2
 8009494:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009498:	ec51 0b10 	vmov	r0, r1, d0
 800949c:	2b00      	cmp	r3, #0
 800949e:	bfd6      	itet	le
 80094a0:	460a      	movle	r2, r1
 80094a2:	462a      	movgt	r2, r5
 80094a4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80094a8:	468b      	mov	fp, r1
 80094aa:	462f      	mov	r7, r5
 80094ac:	bfd4      	ite	le
 80094ae:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80094b2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80094b6:	4620      	mov	r0, r4
 80094b8:	ee10 2a10 	vmov	r2, s0
 80094bc:	465b      	mov	r3, fp
 80094be:	4639      	mov	r1, r7
 80094c0:	f7f7 f9c4 	bl	800084c <__aeabi_ddiv>
 80094c4:	ec41 0b10 	vmov	d0, r0, r1
 80094c8:	b003      	add	sp, #12
 80094ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080094ce <__copybits>:
 80094ce:	3901      	subs	r1, #1
 80094d0:	b570      	push	{r4, r5, r6, lr}
 80094d2:	1149      	asrs	r1, r1, #5
 80094d4:	6914      	ldr	r4, [r2, #16]
 80094d6:	3101      	adds	r1, #1
 80094d8:	f102 0314 	add.w	r3, r2, #20
 80094dc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80094e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80094e4:	1f05      	subs	r5, r0, #4
 80094e6:	42a3      	cmp	r3, r4
 80094e8:	d30c      	bcc.n	8009504 <__copybits+0x36>
 80094ea:	1aa3      	subs	r3, r4, r2
 80094ec:	3b11      	subs	r3, #17
 80094ee:	f023 0303 	bic.w	r3, r3, #3
 80094f2:	3211      	adds	r2, #17
 80094f4:	42a2      	cmp	r2, r4
 80094f6:	bf88      	it	hi
 80094f8:	2300      	movhi	r3, #0
 80094fa:	4418      	add	r0, r3
 80094fc:	2300      	movs	r3, #0
 80094fe:	4288      	cmp	r0, r1
 8009500:	d305      	bcc.n	800950e <__copybits+0x40>
 8009502:	bd70      	pop	{r4, r5, r6, pc}
 8009504:	f853 6b04 	ldr.w	r6, [r3], #4
 8009508:	f845 6f04 	str.w	r6, [r5, #4]!
 800950c:	e7eb      	b.n	80094e6 <__copybits+0x18>
 800950e:	f840 3b04 	str.w	r3, [r0], #4
 8009512:	e7f4      	b.n	80094fe <__copybits+0x30>

08009514 <__any_on>:
 8009514:	f100 0214 	add.w	r2, r0, #20
 8009518:	6900      	ldr	r0, [r0, #16]
 800951a:	114b      	asrs	r3, r1, #5
 800951c:	4298      	cmp	r0, r3
 800951e:	b510      	push	{r4, lr}
 8009520:	db11      	blt.n	8009546 <__any_on+0x32>
 8009522:	dd0a      	ble.n	800953a <__any_on+0x26>
 8009524:	f011 011f 	ands.w	r1, r1, #31
 8009528:	d007      	beq.n	800953a <__any_on+0x26>
 800952a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800952e:	fa24 f001 	lsr.w	r0, r4, r1
 8009532:	fa00 f101 	lsl.w	r1, r0, r1
 8009536:	428c      	cmp	r4, r1
 8009538:	d10b      	bne.n	8009552 <__any_on+0x3e>
 800953a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800953e:	4293      	cmp	r3, r2
 8009540:	d803      	bhi.n	800954a <__any_on+0x36>
 8009542:	2000      	movs	r0, #0
 8009544:	bd10      	pop	{r4, pc}
 8009546:	4603      	mov	r3, r0
 8009548:	e7f7      	b.n	800953a <__any_on+0x26>
 800954a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800954e:	2900      	cmp	r1, #0
 8009550:	d0f5      	beq.n	800953e <__any_on+0x2a>
 8009552:	2001      	movs	r0, #1
 8009554:	e7f6      	b.n	8009544 <__any_on+0x30>

08009556 <_calloc_r>:
 8009556:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009558:	fba1 2402 	umull	r2, r4, r1, r2
 800955c:	b94c      	cbnz	r4, 8009572 <_calloc_r+0x1c>
 800955e:	4611      	mov	r1, r2
 8009560:	9201      	str	r2, [sp, #4]
 8009562:	f000 f87b 	bl	800965c <_malloc_r>
 8009566:	9a01      	ldr	r2, [sp, #4]
 8009568:	4605      	mov	r5, r0
 800956a:	b930      	cbnz	r0, 800957a <_calloc_r+0x24>
 800956c:	4628      	mov	r0, r5
 800956e:	b003      	add	sp, #12
 8009570:	bd30      	pop	{r4, r5, pc}
 8009572:	220c      	movs	r2, #12
 8009574:	6002      	str	r2, [r0, #0]
 8009576:	2500      	movs	r5, #0
 8009578:	e7f8      	b.n	800956c <_calloc_r+0x16>
 800957a:	4621      	mov	r1, r4
 800957c:	f7fc fbbe 	bl	8005cfc <memset>
 8009580:	e7f4      	b.n	800956c <_calloc_r+0x16>
	...

08009584 <_free_r>:
 8009584:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009586:	2900      	cmp	r1, #0
 8009588:	d044      	beq.n	8009614 <_free_r+0x90>
 800958a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800958e:	9001      	str	r0, [sp, #4]
 8009590:	2b00      	cmp	r3, #0
 8009592:	f1a1 0404 	sub.w	r4, r1, #4
 8009596:	bfb8      	it	lt
 8009598:	18e4      	addlt	r4, r4, r3
 800959a:	f000 fab5 	bl	8009b08 <__malloc_lock>
 800959e:	4a1e      	ldr	r2, [pc, #120]	; (8009618 <_free_r+0x94>)
 80095a0:	9801      	ldr	r0, [sp, #4]
 80095a2:	6813      	ldr	r3, [r2, #0]
 80095a4:	b933      	cbnz	r3, 80095b4 <_free_r+0x30>
 80095a6:	6063      	str	r3, [r4, #4]
 80095a8:	6014      	str	r4, [r2, #0]
 80095aa:	b003      	add	sp, #12
 80095ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80095b0:	f000 bab0 	b.w	8009b14 <__malloc_unlock>
 80095b4:	42a3      	cmp	r3, r4
 80095b6:	d908      	bls.n	80095ca <_free_r+0x46>
 80095b8:	6825      	ldr	r5, [r4, #0]
 80095ba:	1961      	adds	r1, r4, r5
 80095bc:	428b      	cmp	r3, r1
 80095be:	bf01      	itttt	eq
 80095c0:	6819      	ldreq	r1, [r3, #0]
 80095c2:	685b      	ldreq	r3, [r3, #4]
 80095c4:	1949      	addeq	r1, r1, r5
 80095c6:	6021      	streq	r1, [r4, #0]
 80095c8:	e7ed      	b.n	80095a6 <_free_r+0x22>
 80095ca:	461a      	mov	r2, r3
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	b10b      	cbz	r3, 80095d4 <_free_r+0x50>
 80095d0:	42a3      	cmp	r3, r4
 80095d2:	d9fa      	bls.n	80095ca <_free_r+0x46>
 80095d4:	6811      	ldr	r1, [r2, #0]
 80095d6:	1855      	adds	r5, r2, r1
 80095d8:	42a5      	cmp	r5, r4
 80095da:	d10b      	bne.n	80095f4 <_free_r+0x70>
 80095dc:	6824      	ldr	r4, [r4, #0]
 80095de:	4421      	add	r1, r4
 80095e0:	1854      	adds	r4, r2, r1
 80095e2:	42a3      	cmp	r3, r4
 80095e4:	6011      	str	r1, [r2, #0]
 80095e6:	d1e0      	bne.n	80095aa <_free_r+0x26>
 80095e8:	681c      	ldr	r4, [r3, #0]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	6053      	str	r3, [r2, #4]
 80095ee:	4421      	add	r1, r4
 80095f0:	6011      	str	r1, [r2, #0]
 80095f2:	e7da      	b.n	80095aa <_free_r+0x26>
 80095f4:	d902      	bls.n	80095fc <_free_r+0x78>
 80095f6:	230c      	movs	r3, #12
 80095f8:	6003      	str	r3, [r0, #0]
 80095fa:	e7d6      	b.n	80095aa <_free_r+0x26>
 80095fc:	6825      	ldr	r5, [r4, #0]
 80095fe:	1961      	adds	r1, r4, r5
 8009600:	428b      	cmp	r3, r1
 8009602:	bf04      	itt	eq
 8009604:	6819      	ldreq	r1, [r3, #0]
 8009606:	685b      	ldreq	r3, [r3, #4]
 8009608:	6063      	str	r3, [r4, #4]
 800960a:	bf04      	itt	eq
 800960c:	1949      	addeq	r1, r1, r5
 800960e:	6021      	streq	r1, [r4, #0]
 8009610:	6054      	str	r4, [r2, #4]
 8009612:	e7ca      	b.n	80095aa <_free_r+0x26>
 8009614:	b003      	add	sp, #12
 8009616:	bd30      	pop	{r4, r5, pc}
 8009618:	20001b5c 	.word	0x20001b5c

0800961c <sbrk_aligned>:
 800961c:	b570      	push	{r4, r5, r6, lr}
 800961e:	4e0e      	ldr	r6, [pc, #56]	; (8009658 <sbrk_aligned+0x3c>)
 8009620:	460c      	mov	r4, r1
 8009622:	6831      	ldr	r1, [r6, #0]
 8009624:	4605      	mov	r5, r0
 8009626:	b911      	cbnz	r1, 800962e <sbrk_aligned+0x12>
 8009628:	f000 f9f2 	bl	8009a10 <_sbrk_r>
 800962c:	6030      	str	r0, [r6, #0]
 800962e:	4621      	mov	r1, r4
 8009630:	4628      	mov	r0, r5
 8009632:	f000 f9ed 	bl	8009a10 <_sbrk_r>
 8009636:	1c43      	adds	r3, r0, #1
 8009638:	d00a      	beq.n	8009650 <sbrk_aligned+0x34>
 800963a:	1cc4      	adds	r4, r0, #3
 800963c:	f024 0403 	bic.w	r4, r4, #3
 8009640:	42a0      	cmp	r0, r4
 8009642:	d007      	beq.n	8009654 <sbrk_aligned+0x38>
 8009644:	1a21      	subs	r1, r4, r0
 8009646:	4628      	mov	r0, r5
 8009648:	f000 f9e2 	bl	8009a10 <_sbrk_r>
 800964c:	3001      	adds	r0, #1
 800964e:	d101      	bne.n	8009654 <sbrk_aligned+0x38>
 8009650:	f04f 34ff 	mov.w	r4, #4294967295
 8009654:	4620      	mov	r0, r4
 8009656:	bd70      	pop	{r4, r5, r6, pc}
 8009658:	20001b60 	.word	0x20001b60

0800965c <_malloc_r>:
 800965c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009660:	1ccd      	adds	r5, r1, #3
 8009662:	f025 0503 	bic.w	r5, r5, #3
 8009666:	3508      	adds	r5, #8
 8009668:	2d0c      	cmp	r5, #12
 800966a:	bf38      	it	cc
 800966c:	250c      	movcc	r5, #12
 800966e:	2d00      	cmp	r5, #0
 8009670:	4607      	mov	r7, r0
 8009672:	db01      	blt.n	8009678 <_malloc_r+0x1c>
 8009674:	42a9      	cmp	r1, r5
 8009676:	d905      	bls.n	8009684 <_malloc_r+0x28>
 8009678:	230c      	movs	r3, #12
 800967a:	603b      	str	r3, [r7, #0]
 800967c:	2600      	movs	r6, #0
 800967e:	4630      	mov	r0, r6
 8009680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009684:	4e2e      	ldr	r6, [pc, #184]	; (8009740 <_malloc_r+0xe4>)
 8009686:	f000 fa3f 	bl	8009b08 <__malloc_lock>
 800968a:	6833      	ldr	r3, [r6, #0]
 800968c:	461c      	mov	r4, r3
 800968e:	bb34      	cbnz	r4, 80096de <_malloc_r+0x82>
 8009690:	4629      	mov	r1, r5
 8009692:	4638      	mov	r0, r7
 8009694:	f7ff ffc2 	bl	800961c <sbrk_aligned>
 8009698:	1c43      	adds	r3, r0, #1
 800969a:	4604      	mov	r4, r0
 800969c:	d14d      	bne.n	800973a <_malloc_r+0xde>
 800969e:	6834      	ldr	r4, [r6, #0]
 80096a0:	4626      	mov	r6, r4
 80096a2:	2e00      	cmp	r6, #0
 80096a4:	d140      	bne.n	8009728 <_malloc_r+0xcc>
 80096a6:	6823      	ldr	r3, [r4, #0]
 80096a8:	4631      	mov	r1, r6
 80096aa:	4638      	mov	r0, r7
 80096ac:	eb04 0803 	add.w	r8, r4, r3
 80096b0:	f000 f9ae 	bl	8009a10 <_sbrk_r>
 80096b4:	4580      	cmp	r8, r0
 80096b6:	d13a      	bne.n	800972e <_malloc_r+0xd2>
 80096b8:	6821      	ldr	r1, [r4, #0]
 80096ba:	3503      	adds	r5, #3
 80096bc:	1a6d      	subs	r5, r5, r1
 80096be:	f025 0503 	bic.w	r5, r5, #3
 80096c2:	3508      	adds	r5, #8
 80096c4:	2d0c      	cmp	r5, #12
 80096c6:	bf38      	it	cc
 80096c8:	250c      	movcc	r5, #12
 80096ca:	4629      	mov	r1, r5
 80096cc:	4638      	mov	r0, r7
 80096ce:	f7ff ffa5 	bl	800961c <sbrk_aligned>
 80096d2:	3001      	adds	r0, #1
 80096d4:	d02b      	beq.n	800972e <_malloc_r+0xd2>
 80096d6:	6823      	ldr	r3, [r4, #0]
 80096d8:	442b      	add	r3, r5
 80096da:	6023      	str	r3, [r4, #0]
 80096dc:	e00e      	b.n	80096fc <_malloc_r+0xa0>
 80096de:	6822      	ldr	r2, [r4, #0]
 80096e0:	1b52      	subs	r2, r2, r5
 80096e2:	d41e      	bmi.n	8009722 <_malloc_r+0xc6>
 80096e4:	2a0b      	cmp	r2, #11
 80096e6:	d916      	bls.n	8009716 <_malloc_r+0xba>
 80096e8:	1961      	adds	r1, r4, r5
 80096ea:	42a3      	cmp	r3, r4
 80096ec:	6025      	str	r5, [r4, #0]
 80096ee:	bf18      	it	ne
 80096f0:	6059      	strne	r1, [r3, #4]
 80096f2:	6863      	ldr	r3, [r4, #4]
 80096f4:	bf08      	it	eq
 80096f6:	6031      	streq	r1, [r6, #0]
 80096f8:	5162      	str	r2, [r4, r5]
 80096fa:	604b      	str	r3, [r1, #4]
 80096fc:	4638      	mov	r0, r7
 80096fe:	f104 060b 	add.w	r6, r4, #11
 8009702:	f000 fa07 	bl	8009b14 <__malloc_unlock>
 8009706:	f026 0607 	bic.w	r6, r6, #7
 800970a:	1d23      	adds	r3, r4, #4
 800970c:	1af2      	subs	r2, r6, r3
 800970e:	d0b6      	beq.n	800967e <_malloc_r+0x22>
 8009710:	1b9b      	subs	r3, r3, r6
 8009712:	50a3      	str	r3, [r4, r2]
 8009714:	e7b3      	b.n	800967e <_malloc_r+0x22>
 8009716:	6862      	ldr	r2, [r4, #4]
 8009718:	42a3      	cmp	r3, r4
 800971a:	bf0c      	ite	eq
 800971c:	6032      	streq	r2, [r6, #0]
 800971e:	605a      	strne	r2, [r3, #4]
 8009720:	e7ec      	b.n	80096fc <_malloc_r+0xa0>
 8009722:	4623      	mov	r3, r4
 8009724:	6864      	ldr	r4, [r4, #4]
 8009726:	e7b2      	b.n	800968e <_malloc_r+0x32>
 8009728:	4634      	mov	r4, r6
 800972a:	6876      	ldr	r6, [r6, #4]
 800972c:	e7b9      	b.n	80096a2 <_malloc_r+0x46>
 800972e:	230c      	movs	r3, #12
 8009730:	603b      	str	r3, [r7, #0]
 8009732:	4638      	mov	r0, r7
 8009734:	f000 f9ee 	bl	8009b14 <__malloc_unlock>
 8009738:	e7a1      	b.n	800967e <_malloc_r+0x22>
 800973a:	6025      	str	r5, [r4, #0]
 800973c:	e7de      	b.n	80096fc <_malloc_r+0xa0>
 800973e:	bf00      	nop
 8009740:	20001b5c 	.word	0x20001b5c

08009744 <__ssputs_r>:
 8009744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009748:	688e      	ldr	r6, [r1, #8]
 800974a:	429e      	cmp	r6, r3
 800974c:	4682      	mov	sl, r0
 800974e:	460c      	mov	r4, r1
 8009750:	4690      	mov	r8, r2
 8009752:	461f      	mov	r7, r3
 8009754:	d838      	bhi.n	80097c8 <__ssputs_r+0x84>
 8009756:	898a      	ldrh	r2, [r1, #12]
 8009758:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800975c:	d032      	beq.n	80097c4 <__ssputs_r+0x80>
 800975e:	6825      	ldr	r5, [r4, #0]
 8009760:	6909      	ldr	r1, [r1, #16]
 8009762:	eba5 0901 	sub.w	r9, r5, r1
 8009766:	6965      	ldr	r5, [r4, #20]
 8009768:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800976c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009770:	3301      	adds	r3, #1
 8009772:	444b      	add	r3, r9
 8009774:	106d      	asrs	r5, r5, #1
 8009776:	429d      	cmp	r5, r3
 8009778:	bf38      	it	cc
 800977a:	461d      	movcc	r5, r3
 800977c:	0553      	lsls	r3, r2, #21
 800977e:	d531      	bpl.n	80097e4 <__ssputs_r+0xa0>
 8009780:	4629      	mov	r1, r5
 8009782:	f7ff ff6b 	bl	800965c <_malloc_r>
 8009786:	4606      	mov	r6, r0
 8009788:	b950      	cbnz	r0, 80097a0 <__ssputs_r+0x5c>
 800978a:	230c      	movs	r3, #12
 800978c:	f8ca 3000 	str.w	r3, [sl]
 8009790:	89a3      	ldrh	r3, [r4, #12]
 8009792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009796:	81a3      	strh	r3, [r4, #12]
 8009798:	f04f 30ff 	mov.w	r0, #4294967295
 800979c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097a0:	6921      	ldr	r1, [r4, #16]
 80097a2:	464a      	mov	r2, r9
 80097a4:	f7ff fa08 	bl	8008bb8 <memcpy>
 80097a8:	89a3      	ldrh	r3, [r4, #12]
 80097aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80097ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097b2:	81a3      	strh	r3, [r4, #12]
 80097b4:	6126      	str	r6, [r4, #16]
 80097b6:	6165      	str	r5, [r4, #20]
 80097b8:	444e      	add	r6, r9
 80097ba:	eba5 0509 	sub.w	r5, r5, r9
 80097be:	6026      	str	r6, [r4, #0]
 80097c0:	60a5      	str	r5, [r4, #8]
 80097c2:	463e      	mov	r6, r7
 80097c4:	42be      	cmp	r6, r7
 80097c6:	d900      	bls.n	80097ca <__ssputs_r+0x86>
 80097c8:	463e      	mov	r6, r7
 80097ca:	6820      	ldr	r0, [r4, #0]
 80097cc:	4632      	mov	r2, r6
 80097ce:	4641      	mov	r1, r8
 80097d0:	f000 f980 	bl	8009ad4 <memmove>
 80097d4:	68a3      	ldr	r3, [r4, #8]
 80097d6:	1b9b      	subs	r3, r3, r6
 80097d8:	60a3      	str	r3, [r4, #8]
 80097da:	6823      	ldr	r3, [r4, #0]
 80097dc:	4433      	add	r3, r6
 80097de:	6023      	str	r3, [r4, #0]
 80097e0:	2000      	movs	r0, #0
 80097e2:	e7db      	b.n	800979c <__ssputs_r+0x58>
 80097e4:	462a      	mov	r2, r5
 80097e6:	f000 f99b 	bl	8009b20 <_realloc_r>
 80097ea:	4606      	mov	r6, r0
 80097ec:	2800      	cmp	r0, #0
 80097ee:	d1e1      	bne.n	80097b4 <__ssputs_r+0x70>
 80097f0:	6921      	ldr	r1, [r4, #16]
 80097f2:	4650      	mov	r0, sl
 80097f4:	f7ff fec6 	bl	8009584 <_free_r>
 80097f8:	e7c7      	b.n	800978a <__ssputs_r+0x46>
	...

080097fc <_svfiprintf_r>:
 80097fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009800:	4698      	mov	r8, r3
 8009802:	898b      	ldrh	r3, [r1, #12]
 8009804:	061b      	lsls	r3, r3, #24
 8009806:	b09d      	sub	sp, #116	; 0x74
 8009808:	4607      	mov	r7, r0
 800980a:	460d      	mov	r5, r1
 800980c:	4614      	mov	r4, r2
 800980e:	d50e      	bpl.n	800982e <_svfiprintf_r+0x32>
 8009810:	690b      	ldr	r3, [r1, #16]
 8009812:	b963      	cbnz	r3, 800982e <_svfiprintf_r+0x32>
 8009814:	2140      	movs	r1, #64	; 0x40
 8009816:	f7ff ff21 	bl	800965c <_malloc_r>
 800981a:	6028      	str	r0, [r5, #0]
 800981c:	6128      	str	r0, [r5, #16]
 800981e:	b920      	cbnz	r0, 800982a <_svfiprintf_r+0x2e>
 8009820:	230c      	movs	r3, #12
 8009822:	603b      	str	r3, [r7, #0]
 8009824:	f04f 30ff 	mov.w	r0, #4294967295
 8009828:	e0d1      	b.n	80099ce <_svfiprintf_r+0x1d2>
 800982a:	2340      	movs	r3, #64	; 0x40
 800982c:	616b      	str	r3, [r5, #20]
 800982e:	2300      	movs	r3, #0
 8009830:	9309      	str	r3, [sp, #36]	; 0x24
 8009832:	2320      	movs	r3, #32
 8009834:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009838:	f8cd 800c 	str.w	r8, [sp, #12]
 800983c:	2330      	movs	r3, #48	; 0x30
 800983e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80099e8 <_svfiprintf_r+0x1ec>
 8009842:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009846:	f04f 0901 	mov.w	r9, #1
 800984a:	4623      	mov	r3, r4
 800984c:	469a      	mov	sl, r3
 800984e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009852:	b10a      	cbz	r2, 8009858 <_svfiprintf_r+0x5c>
 8009854:	2a25      	cmp	r2, #37	; 0x25
 8009856:	d1f9      	bne.n	800984c <_svfiprintf_r+0x50>
 8009858:	ebba 0b04 	subs.w	fp, sl, r4
 800985c:	d00b      	beq.n	8009876 <_svfiprintf_r+0x7a>
 800985e:	465b      	mov	r3, fp
 8009860:	4622      	mov	r2, r4
 8009862:	4629      	mov	r1, r5
 8009864:	4638      	mov	r0, r7
 8009866:	f7ff ff6d 	bl	8009744 <__ssputs_r>
 800986a:	3001      	adds	r0, #1
 800986c:	f000 80aa 	beq.w	80099c4 <_svfiprintf_r+0x1c8>
 8009870:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009872:	445a      	add	r2, fp
 8009874:	9209      	str	r2, [sp, #36]	; 0x24
 8009876:	f89a 3000 	ldrb.w	r3, [sl]
 800987a:	2b00      	cmp	r3, #0
 800987c:	f000 80a2 	beq.w	80099c4 <_svfiprintf_r+0x1c8>
 8009880:	2300      	movs	r3, #0
 8009882:	f04f 32ff 	mov.w	r2, #4294967295
 8009886:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800988a:	f10a 0a01 	add.w	sl, sl, #1
 800988e:	9304      	str	r3, [sp, #16]
 8009890:	9307      	str	r3, [sp, #28]
 8009892:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009896:	931a      	str	r3, [sp, #104]	; 0x68
 8009898:	4654      	mov	r4, sl
 800989a:	2205      	movs	r2, #5
 800989c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098a0:	4851      	ldr	r0, [pc, #324]	; (80099e8 <_svfiprintf_r+0x1ec>)
 80098a2:	f7f6 fc9d 	bl	80001e0 <memchr>
 80098a6:	9a04      	ldr	r2, [sp, #16]
 80098a8:	b9d8      	cbnz	r0, 80098e2 <_svfiprintf_r+0xe6>
 80098aa:	06d0      	lsls	r0, r2, #27
 80098ac:	bf44      	itt	mi
 80098ae:	2320      	movmi	r3, #32
 80098b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098b4:	0711      	lsls	r1, r2, #28
 80098b6:	bf44      	itt	mi
 80098b8:	232b      	movmi	r3, #43	; 0x2b
 80098ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098be:	f89a 3000 	ldrb.w	r3, [sl]
 80098c2:	2b2a      	cmp	r3, #42	; 0x2a
 80098c4:	d015      	beq.n	80098f2 <_svfiprintf_r+0xf6>
 80098c6:	9a07      	ldr	r2, [sp, #28]
 80098c8:	4654      	mov	r4, sl
 80098ca:	2000      	movs	r0, #0
 80098cc:	f04f 0c0a 	mov.w	ip, #10
 80098d0:	4621      	mov	r1, r4
 80098d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098d6:	3b30      	subs	r3, #48	; 0x30
 80098d8:	2b09      	cmp	r3, #9
 80098da:	d94e      	bls.n	800997a <_svfiprintf_r+0x17e>
 80098dc:	b1b0      	cbz	r0, 800990c <_svfiprintf_r+0x110>
 80098de:	9207      	str	r2, [sp, #28]
 80098e0:	e014      	b.n	800990c <_svfiprintf_r+0x110>
 80098e2:	eba0 0308 	sub.w	r3, r0, r8
 80098e6:	fa09 f303 	lsl.w	r3, r9, r3
 80098ea:	4313      	orrs	r3, r2
 80098ec:	9304      	str	r3, [sp, #16]
 80098ee:	46a2      	mov	sl, r4
 80098f0:	e7d2      	b.n	8009898 <_svfiprintf_r+0x9c>
 80098f2:	9b03      	ldr	r3, [sp, #12]
 80098f4:	1d19      	adds	r1, r3, #4
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	9103      	str	r1, [sp, #12]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	bfbb      	ittet	lt
 80098fe:	425b      	neglt	r3, r3
 8009900:	f042 0202 	orrlt.w	r2, r2, #2
 8009904:	9307      	strge	r3, [sp, #28]
 8009906:	9307      	strlt	r3, [sp, #28]
 8009908:	bfb8      	it	lt
 800990a:	9204      	strlt	r2, [sp, #16]
 800990c:	7823      	ldrb	r3, [r4, #0]
 800990e:	2b2e      	cmp	r3, #46	; 0x2e
 8009910:	d10c      	bne.n	800992c <_svfiprintf_r+0x130>
 8009912:	7863      	ldrb	r3, [r4, #1]
 8009914:	2b2a      	cmp	r3, #42	; 0x2a
 8009916:	d135      	bne.n	8009984 <_svfiprintf_r+0x188>
 8009918:	9b03      	ldr	r3, [sp, #12]
 800991a:	1d1a      	adds	r2, r3, #4
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	9203      	str	r2, [sp, #12]
 8009920:	2b00      	cmp	r3, #0
 8009922:	bfb8      	it	lt
 8009924:	f04f 33ff 	movlt.w	r3, #4294967295
 8009928:	3402      	adds	r4, #2
 800992a:	9305      	str	r3, [sp, #20]
 800992c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80099f8 <_svfiprintf_r+0x1fc>
 8009930:	7821      	ldrb	r1, [r4, #0]
 8009932:	2203      	movs	r2, #3
 8009934:	4650      	mov	r0, sl
 8009936:	f7f6 fc53 	bl	80001e0 <memchr>
 800993a:	b140      	cbz	r0, 800994e <_svfiprintf_r+0x152>
 800993c:	2340      	movs	r3, #64	; 0x40
 800993e:	eba0 000a 	sub.w	r0, r0, sl
 8009942:	fa03 f000 	lsl.w	r0, r3, r0
 8009946:	9b04      	ldr	r3, [sp, #16]
 8009948:	4303      	orrs	r3, r0
 800994a:	3401      	adds	r4, #1
 800994c:	9304      	str	r3, [sp, #16]
 800994e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009952:	4826      	ldr	r0, [pc, #152]	; (80099ec <_svfiprintf_r+0x1f0>)
 8009954:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009958:	2206      	movs	r2, #6
 800995a:	f7f6 fc41 	bl	80001e0 <memchr>
 800995e:	2800      	cmp	r0, #0
 8009960:	d038      	beq.n	80099d4 <_svfiprintf_r+0x1d8>
 8009962:	4b23      	ldr	r3, [pc, #140]	; (80099f0 <_svfiprintf_r+0x1f4>)
 8009964:	bb1b      	cbnz	r3, 80099ae <_svfiprintf_r+0x1b2>
 8009966:	9b03      	ldr	r3, [sp, #12]
 8009968:	3307      	adds	r3, #7
 800996a:	f023 0307 	bic.w	r3, r3, #7
 800996e:	3308      	adds	r3, #8
 8009970:	9303      	str	r3, [sp, #12]
 8009972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009974:	4433      	add	r3, r6
 8009976:	9309      	str	r3, [sp, #36]	; 0x24
 8009978:	e767      	b.n	800984a <_svfiprintf_r+0x4e>
 800997a:	fb0c 3202 	mla	r2, ip, r2, r3
 800997e:	460c      	mov	r4, r1
 8009980:	2001      	movs	r0, #1
 8009982:	e7a5      	b.n	80098d0 <_svfiprintf_r+0xd4>
 8009984:	2300      	movs	r3, #0
 8009986:	3401      	adds	r4, #1
 8009988:	9305      	str	r3, [sp, #20]
 800998a:	4619      	mov	r1, r3
 800998c:	f04f 0c0a 	mov.w	ip, #10
 8009990:	4620      	mov	r0, r4
 8009992:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009996:	3a30      	subs	r2, #48	; 0x30
 8009998:	2a09      	cmp	r2, #9
 800999a:	d903      	bls.n	80099a4 <_svfiprintf_r+0x1a8>
 800999c:	2b00      	cmp	r3, #0
 800999e:	d0c5      	beq.n	800992c <_svfiprintf_r+0x130>
 80099a0:	9105      	str	r1, [sp, #20]
 80099a2:	e7c3      	b.n	800992c <_svfiprintf_r+0x130>
 80099a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80099a8:	4604      	mov	r4, r0
 80099aa:	2301      	movs	r3, #1
 80099ac:	e7f0      	b.n	8009990 <_svfiprintf_r+0x194>
 80099ae:	ab03      	add	r3, sp, #12
 80099b0:	9300      	str	r3, [sp, #0]
 80099b2:	462a      	mov	r2, r5
 80099b4:	4b0f      	ldr	r3, [pc, #60]	; (80099f4 <_svfiprintf_r+0x1f8>)
 80099b6:	a904      	add	r1, sp, #16
 80099b8:	4638      	mov	r0, r7
 80099ba:	f7fc fa47 	bl	8005e4c <_printf_float>
 80099be:	1c42      	adds	r2, r0, #1
 80099c0:	4606      	mov	r6, r0
 80099c2:	d1d6      	bne.n	8009972 <_svfiprintf_r+0x176>
 80099c4:	89ab      	ldrh	r3, [r5, #12]
 80099c6:	065b      	lsls	r3, r3, #25
 80099c8:	f53f af2c 	bmi.w	8009824 <_svfiprintf_r+0x28>
 80099cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099ce:	b01d      	add	sp, #116	; 0x74
 80099d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099d4:	ab03      	add	r3, sp, #12
 80099d6:	9300      	str	r3, [sp, #0]
 80099d8:	462a      	mov	r2, r5
 80099da:	4b06      	ldr	r3, [pc, #24]	; (80099f4 <_svfiprintf_r+0x1f8>)
 80099dc:	a904      	add	r1, sp, #16
 80099de:	4638      	mov	r0, r7
 80099e0:	f7fc fcd8 	bl	8006394 <_printf_i>
 80099e4:	e7eb      	b.n	80099be <_svfiprintf_r+0x1c2>
 80099e6:	bf00      	nop
 80099e8:	0800aa5c 	.word	0x0800aa5c
 80099ec:	0800aa66 	.word	0x0800aa66
 80099f0:	08005e4d 	.word	0x08005e4d
 80099f4:	08009745 	.word	0x08009745
 80099f8:	0800aa62 	.word	0x0800aa62
 80099fc:	00000000 	.word	0x00000000

08009a00 <nan>:
 8009a00:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009a08 <nan+0x8>
 8009a04:	4770      	bx	lr
 8009a06:	bf00      	nop
 8009a08:	00000000 	.word	0x00000000
 8009a0c:	7ff80000 	.word	0x7ff80000

08009a10 <_sbrk_r>:
 8009a10:	b538      	push	{r3, r4, r5, lr}
 8009a12:	4d06      	ldr	r5, [pc, #24]	; (8009a2c <_sbrk_r+0x1c>)
 8009a14:	2300      	movs	r3, #0
 8009a16:	4604      	mov	r4, r0
 8009a18:	4608      	mov	r0, r1
 8009a1a:	602b      	str	r3, [r5, #0]
 8009a1c:	f7f7 feb6 	bl	800178c <_sbrk>
 8009a20:	1c43      	adds	r3, r0, #1
 8009a22:	d102      	bne.n	8009a2a <_sbrk_r+0x1a>
 8009a24:	682b      	ldr	r3, [r5, #0]
 8009a26:	b103      	cbz	r3, 8009a2a <_sbrk_r+0x1a>
 8009a28:	6023      	str	r3, [r4, #0]
 8009a2a:	bd38      	pop	{r3, r4, r5, pc}
 8009a2c:	20001b64 	.word	0x20001b64

08009a30 <strncmp>:
 8009a30:	b510      	push	{r4, lr}
 8009a32:	b17a      	cbz	r2, 8009a54 <strncmp+0x24>
 8009a34:	4603      	mov	r3, r0
 8009a36:	3901      	subs	r1, #1
 8009a38:	1884      	adds	r4, r0, r2
 8009a3a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009a3e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009a42:	4290      	cmp	r0, r2
 8009a44:	d101      	bne.n	8009a4a <strncmp+0x1a>
 8009a46:	42a3      	cmp	r3, r4
 8009a48:	d101      	bne.n	8009a4e <strncmp+0x1e>
 8009a4a:	1a80      	subs	r0, r0, r2
 8009a4c:	bd10      	pop	{r4, pc}
 8009a4e:	2800      	cmp	r0, #0
 8009a50:	d1f3      	bne.n	8009a3a <strncmp+0xa>
 8009a52:	e7fa      	b.n	8009a4a <strncmp+0x1a>
 8009a54:	4610      	mov	r0, r2
 8009a56:	e7f9      	b.n	8009a4c <strncmp+0x1c>

08009a58 <__ascii_wctomb>:
 8009a58:	b149      	cbz	r1, 8009a6e <__ascii_wctomb+0x16>
 8009a5a:	2aff      	cmp	r2, #255	; 0xff
 8009a5c:	bf85      	ittet	hi
 8009a5e:	238a      	movhi	r3, #138	; 0x8a
 8009a60:	6003      	strhi	r3, [r0, #0]
 8009a62:	700a      	strbls	r2, [r1, #0]
 8009a64:	f04f 30ff 	movhi.w	r0, #4294967295
 8009a68:	bf98      	it	ls
 8009a6a:	2001      	movls	r0, #1
 8009a6c:	4770      	bx	lr
 8009a6e:	4608      	mov	r0, r1
 8009a70:	4770      	bx	lr
	...

08009a74 <__assert_func>:
 8009a74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a76:	4614      	mov	r4, r2
 8009a78:	461a      	mov	r2, r3
 8009a7a:	4b09      	ldr	r3, [pc, #36]	; (8009aa0 <__assert_func+0x2c>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4605      	mov	r5, r0
 8009a80:	68d8      	ldr	r0, [r3, #12]
 8009a82:	b14c      	cbz	r4, 8009a98 <__assert_func+0x24>
 8009a84:	4b07      	ldr	r3, [pc, #28]	; (8009aa4 <__assert_func+0x30>)
 8009a86:	9100      	str	r1, [sp, #0]
 8009a88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a8c:	4906      	ldr	r1, [pc, #24]	; (8009aa8 <__assert_func+0x34>)
 8009a8e:	462b      	mov	r3, r5
 8009a90:	f000 f80e 	bl	8009ab0 <fiprintf>
 8009a94:	f000 fa8c 	bl	8009fb0 <abort>
 8009a98:	4b04      	ldr	r3, [pc, #16]	; (8009aac <__assert_func+0x38>)
 8009a9a:	461c      	mov	r4, r3
 8009a9c:	e7f3      	b.n	8009a86 <__assert_func+0x12>
 8009a9e:	bf00      	nop
 8009aa0:	2000000c 	.word	0x2000000c
 8009aa4:	0800aa6d 	.word	0x0800aa6d
 8009aa8:	0800aa7a 	.word	0x0800aa7a
 8009aac:	0800aaa8 	.word	0x0800aaa8

08009ab0 <fiprintf>:
 8009ab0:	b40e      	push	{r1, r2, r3}
 8009ab2:	b503      	push	{r0, r1, lr}
 8009ab4:	4601      	mov	r1, r0
 8009ab6:	ab03      	add	r3, sp, #12
 8009ab8:	4805      	ldr	r0, [pc, #20]	; (8009ad0 <fiprintf+0x20>)
 8009aba:	f853 2b04 	ldr.w	r2, [r3], #4
 8009abe:	6800      	ldr	r0, [r0, #0]
 8009ac0:	9301      	str	r3, [sp, #4]
 8009ac2:	f000 f885 	bl	8009bd0 <_vfiprintf_r>
 8009ac6:	b002      	add	sp, #8
 8009ac8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009acc:	b003      	add	sp, #12
 8009ace:	4770      	bx	lr
 8009ad0:	2000000c 	.word	0x2000000c

08009ad4 <memmove>:
 8009ad4:	4288      	cmp	r0, r1
 8009ad6:	b510      	push	{r4, lr}
 8009ad8:	eb01 0402 	add.w	r4, r1, r2
 8009adc:	d902      	bls.n	8009ae4 <memmove+0x10>
 8009ade:	4284      	cmp	r4, r0
 8009ae0:	4623      	mov	r3, r4
 8009ae2:	d807      	bhi.n	8009af4 <memmove+0x20>
 8009ae4:	1e43      	subs	r3, r0, #1
 8009ae6:	42a1      	cmp	r1, r4
 8009ae8:	d008      	beq.n	8009afc <memmove+0x28>
 8009aea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009aee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009af2:	e7f8      	b.n	8009ae6 <memmove+0x12>
 8009af4:	4402      	add	r2, r0
 8009af6:	4601      	mov	r1, r0
 8009af8:	428a      	cmp	r2, r1
 8009afa:	d100      	bne.n	8009afe <memmove+0x2a>
 8009afc:	bd10      	pop	{r4, pc}
 8009afe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b06:	e7f7      	b.n	8009af8 <memmove+0x24>

08009b08 <__malloc_lock>:
 8009b08:	4801      	ldr	r0, [pc, #4]	; (8009b10 <__malloc_lock+0x8>)
 8009b0a:	f000 bc11 	b.w	800a330 <__retarget_lock_acquire_recursive>
 8009b0e:	bf00      	nop
 8009b10:	20001b68 	.word	0x20001b68

08009b14 <__malloc_unlock>:
 8009b14:	4801      	ldr	r0, [pc, #4]	; (8009b1c <__malloc_unlock+0x8>)
 8009b16:	f000 bc0c 	b.w	800a332 <__retarget_lock_release_recursive>
 8009b1a:	bf00      	nop
 8009b1c:	20001b68 	.word	0x20001b68

08009b20 <_realloc_r>:
 8009b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b24:	4680      	mov	r8, r0
 8009b26:	4614      	mov	r4, r2
 8009b28:	460e      	mov	r6, r1
 8009b2a:	b921      	cbnz	r1, 8009b36 <_realloc_r+0x16>
 8009b2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b30:	4611      	mov	r1, r2
 8009b32:	f7ff bd93 	b.w	800965c <_malloc_r>
 8009b36:	b92a      	cbnz	r2, 8009b44 <_realloc_r+0x24>
 8009b38:	f7ff fd24 	bl	8009584 <_free_r>
 8009b3c:	4625      	mov	r5, r4
 8009b3e:	4628      	mov	r0, r5
 8009b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b44:	f000 fc5c 	bl	800a400 <_malloc_usable_size_r>
 8009b48:	4284      	cmp	r4, r0
 8009b4a:	4607      	mov	r7, r0
 8009b4c:	d802      	bhi.n	8009b54 <_realloc_r+0x34>
 8009b4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009b52:	d812      	bhi.n	8009b7a <_realloc_r+0x5a>
 8009b54:	4621      	mov	r1, r4
 8009b56:	4640      	mov	r0, r8
 8009b58:	f7ff fd80 	bl	800965c <_malloc_r>
 8009b5c:	4605      	mov	r5, r0
 8009b5e:	2800      	cmp	r0, #0
 8009b60:	d0ed      	beq.n	8009b3e <_realloc_r+0x1e>
 8009b62:	42bc      	cmp	r4, r7
 8009b64:	4622      	mov	r2, r4
 8009b66:	4631      	mov	r1, r6
 8009b68:	bf28      	it	cs
 8009b6a:	463a      	movcs	r2, r7
 8009b6c:	f7ff f824 	bl	8008bb8 <memcpy>
 8009b70:	4631      	mov	r1, r6
 8009b72:	4640      	mov	r0, r8
 8009b74:	f7ff fd06 	bl	8009584 <_free_r>
 8009b78:	e7e1      	b.n	8009b3e <_realloc_r+0x1e>
 8009b7a:	4635      	mov	r5, r6
 8009b7c:	e7df      	b.n	8009b3e <_realloc_r+0x1e>

08009b7e <__sfputc_r>:
 8009b7e:	6893      	ldr	r3, [r2, #8]
 8009b80:	3b01      	subs	r3, #1
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	b410      	push	{r4}
 8009b86:	6093      	str	r3, [r2, #8]
 8009b88:	da08      	bge.n	8009b9c <__sfputc_r+0x1e>
 8009b8a:	6994      	ldr	r4, [r2, #24]
 8009b8c:	42a3      	cmp	r3, r4
 8009b8e:	db01      	blt.n	8009b94 <__sfputc_r+0x16>
 8009b90:	290a      	cmp	r1, #10
 8009b92:	d103      	bne.n	8009b9c <__sfputc_r+0x1e>
 8009b94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b98:	f000 b94a 	b.w	8009e30 <__swbuf_r>
 8009b9c:	6813      	ldr	r3, [r2, #0]
 8009b9e:	1c58      	adds	r0, r3, #1
 8009ba0:	6010      	str	r0, [r2, #0]
 8009ba2:	7019      	strb	r1, [r3, #0]
 8009ba4:	4608      	mov	r0, r1
 8009ba6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009baa:	4770      	bx	lr

08009bac <__sfputs_r>:
 8009bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bae:	4606      	mov	r6, r0
 8009bb0:	460f      	mov	r7, r1
 8009bb2:	4614      	mov	r4, r2
 8009bb4:	18d5      	adds	r5, r2, r3
 8009bb6:	42ac      	cmp	r4, r5
 8009bb8:	d101      	bne.n	8009bbe <__sfputs_r+0x12>
 8009bba:	2000      	movs	r0, #0
 8009bbc:	e007      	b.n	8009bce <__sfputs_r+0x22>
 8009bbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bc2:	463a      	mov	r2, r7
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	f7ff ffda 	bl	8009b7e <__sfputc_r>
 8009bca:	1c43      	adds	r3, r0, #1
 8009bcc:	d1f3      	bne.n	8009bb6 <__sfputs_r+0xa>
 8009bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009bd0 <_vfiprintf_r>:
 8009bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bd4:	460d      	mov	r5, r1
 8009bd6:	b09d      	sub	sp, #116	; 0x74
 8009bd8:	4614      	mov	r4, r2
 8009bda:	4698      	mov	r8, r3
 8009bdc:	4606      	mov	r6, r0
 8009bde:	b118      	cbz	r0, 8009be8 <_vfiprintf_r+0x18>
 8009be0:	6983      	ldr	r3, [r0, #24]
 8009be2:	b90b      	cbnz	r3, 8009be8 <_vfiprintf_r+0x18>
 8009be4:	f000 fb06 	bl	800a1f4 <__sinit>
 8009be8:	4b89      	ldr	r3, [pc, #548]	; (8009e10 <_vfiprintf_r+0x240>)
 8009bea:	429d      	cmp	r5, r3
 8009bec:	d11b      	bne.n	8009c26 <_vfiprintf_r+0x56>
 8009bee:	6875      	ldr	r5, [r6, #4]
 8009bf0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009bf2:	07d9      	lsls	r1, r3, #31
 8009bf4:	d405      	bmi.n	8009c02 <_vfiprintf_r+0x32>
 8009bf6:	89ab      	ldrh	r3, [r5, #12]
 8009bf8:	059a      	lsls	r2, r3, #22
 8009bfa:	d402      	bmi.n	8009c02 <_vfiprintf_r+0x32>
 8009bfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009bfe:	f000 fb97 	bl	800a330 <__retarget_lock_acquire_recursive>
 8009c02:	89ab      	ldrh	r3, [r5, #12]
 8009c04:	071b      	lsls	r3, r3, #28
 8009c06:	d501      	bpl.n	8009c0c <_vfiprintf_r+0x3c>
 8009c08:	692b      	ldr	r3, [r5, #16]
 8009c0a:	b9eb      	cbnz	r3, 8009c48 <_vfiprintf_r+0x78>
 8009c0c:	4629      	mov	r1, r5
 8009c0e:	4630      	mov	r0, r6
 8009c10:	f000 f960 	bl	8009ed4 <__swsetup_r>
 8009c14:	b1c0      	cbz	r0, 8009c48 <_vfiprintf_r+0x78>
 8009c16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c18:	07dc      	lsls	r4, r3, #31
 8009c1a:	d50e      	bpl.n	8009c3a <_vfiprintf_r+0x6a>
 8009c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c20:	b01d      	add	sp, #116	; 0x74
 8009c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c26:	4b7b      	ldr	r3, [pc, #492]	; (8009e14 <_vfiprintf_r+0x244>)
 8009c28:	429d      	cmp	r5, r3
 8009c2a:	d101      	bne.n	8009c30 <_vfiprintf_r+0x60>
 8009c2c:	68b5      	ldr	r5, [r6, #8]
 8009c2e:	e7df      	b.n	8009bf0 <_vfiprintf_r+0x20>
 8009c30:	4b79      	ldr	r3, [pc, #484]	; (8009e18 <_vfiprintf_r+0x248>)
 8009c32:	429d      	cmp	r5, r3
 8009c34:	bf08      	it	eq
 8009c36:	68f5      	ldreq	r5, [r6, #12]
 8009c38:	e7da      	b.n	8009bf0 <_vfiprintf_r+0x20>
 8009c3a:	89ab      	ldrh	r3, [r5, #12]
 8009c3c:	0598      	lsls	r0, r3, #22
 8009c3e:	d4ed      	bmi.n	8009c1c <_vfiprintf_r+0x4c>
 8009c40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c42:	f000 fb76 	bl	800a332 <__retarget_lock_release_recursive>
 8009c46:	e7e9      	b.n	8009c1c <_vfiprintf_r+0x4c>
 8009c48:	2300      	movs	r3, #0
 8009c4a:	9309      	str	r3, [sp, #36]	; 0x24
 8009c4c:	2320      	movs	r3, #32
 8009c4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c52:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c56:	2330      	movs	r3, #48	; 0x30
 8009c58:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009e1c <_vfiprintf_r+0x24c>
 8009c5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c60:	f04f 0901 	mov.w	r9, #1
 8009c64:	4623      	mov	r3, r4
 8009c66:	469a      	mov	sl, r3
 8009c68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c6c:	b10a      	cbz	r2, 8009c72 <_vfiprintf_r+0xa2>
 8009c6e:	2a25      	cmp	r2, #37	; 0x25
 8009c70:	d1f9      	bne.n	8009c66 <_vfiprintf_r+0x96>
 8009c72:	ebba 0b04 	subs.w	fp, sl, r4
 8009c76:	d00b      	beq.n	8009c90 <_vfiprintf_r+0xc0>
 8009c78:	465b      	mov	r3, fp
 8009c7a:	4622      	mov	r2, r4
 8009c7c:	4629      	mov	r1, r5
 8009c7e:	4630      	mov	r0, r6
 8009c80:	f7ff ff94 	bl	8009bac <__sfputs_r>
 8009c84:	3001      	adds	r0, #1
 8009c86:	f000 80aa 	beq.w	8009dde <_vfiprintf_r+0x20e>
 8009c8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c8c:	445a      	add	r2, fp
 8009c8e:	9209      	str	r2, [sp, #36]	; 0x24
 8009c90:	f89a 3000 	ldrb.w	r3, [sl]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	f000 80a2 	beq.w	8009dde <_vfiprintf_r+0x20e>
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8009ca0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ca4:	f10a 0a01 	add.w	sl, sl, #1
 8009ca8:	9304      	str	r3, [sp, #16]
 8009caa:	9307      	str	r3, [sp, #28]
 8009cac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009cb0:	931a      	str	r3, [sp, #104]	; 0x68
 8009cb2:	4654      	mov	r4, sl
 8009cb4:	2205      	movs	r2, #5
 8009cb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cba:	4858      	ldr	r0, [pc, #352]	; (8009e1c <_vfiprintf_r+0x24c>)
 8009cbc:	f7f6 fa90 	bl	80001e0 <memchr>
 8009cc0:	9a04      	ldr	r2, [sp, #16]
 8009cc2:	b9d8      	cbnz	r0, 8009cfc <_vfiprintf_r+0x12c>
 8009cc4:	06d1      	lsls	r1, r2, #27
 8009cc6:	bf44      	itt	mi
 8009cc8:	2320      	movmi	r3, #32
 8009cca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cce:	0713      	lsls	r3, r2, #28
 8009cd0:	bf44      	itt	mi
 8009cd2:	232b      	movmi	r3, #43	; 0x2b
 8009cd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cd8:	f89a 3000 	ldrb.w	r3, [sl]
 8009cdc:	2b2a      	cmp	r3, #42	; 0x2a
 8009cde:	d015      	beq.n	8009d0c <_vfiprintf_r+0x13c>
 8009ce0:	9a07      	ldr	r2, [sp, #28]
 8009ce2:	4654      	mov	r4, sl
 8009ce4:	2000      	movs	r0, #0
 8009ce6:	f04f 0c0a 	mov.w	ip, #10
 8009cea:	4621      	mov	r1, r4
 8009cec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cf0:	3b30      	subs	r3, #48	; 0x30
 8009cf2:	2b09      	cmp	r3, #9
 8009cf4:	d94e      	bls.n	8009d94 <_vfiprintf_r+0x1c4>
 8009cf6:	b1b0      	cbz	r0, 8009d26 <_vfiprintf_r+0x156>
 8009cf8:	9207      	str	r2, [sp, #28]
 8009cfa:	e014      	b.n	8009d26 <_vfiprintf_r+0x156>
 8009cfc:	eba0 0308 	sub.w	r3, r0, r8
 8009d00:	fa09 f303 	lsl.w	r3, r9, r3
 8009d04:	4313      	orrs	r3, r2
 8009d06:	9304      	str	r3, [sp, #16]
 8009d08:	46a2      	mov	sl, r4
 8009d0a:	e7d2      	b.n	8009cb2 <_vfiprintf_r+0xe2>
 8009d0c:	9b03      	ldr	r3, [sp, #12]
 8009d0e:	1d19      	adds	r1, r3, #4
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	9103      	str	r1, [sp, #12]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	bfbb      	ittet	lt
 8009d18:	425b      	neglt	r3, r3
 8009d1a:	f042 0202 	orrlt.w	r2, r2, #2
 8009d1e:	9307      	strge	r3, [sp, #28]
 8009d20:	9307      	strlt	r3, [sp, #28]
 8009d22:	bfb8      	it	lt
 8009d24:	9204      	strlt	r2, [sp, #16]
 8009d26:	7823      	ldrb	r3, [r4, #0]
 8009d28:	2b2e      	cmp	r3, #46	; 0x2e
 8009d2a:	d10c      	bne.n	8009d46 <_vfiprintf_r+0x176>
 8009d2c:	7863      	ldrb	r3, [r4, #1]
 8009d2e:	2b2a      	cmp	r3, #42	; 0x2a
 8009d30:	d135      	bne.n	8009d9e <_vfiprintf_r+0x1ce>
 8009d32:	9b03      	ldr	r3, [sp, #12]
 8009d34:	1d1a      	adds	r2, r3, #4
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	9203      	str	r2, [sp, #12]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	bfb8      	it	lt
 8009d3e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d42:	3402      	adds	r4, #2
 8009d44:	9305      	str	r3, [sp, #20]
 8009d46:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009e2c <_vfiprintf_r+0x25c>
 8009d4a:	7821      	ldrb	r1, [r4, #0]
 8009d4c:	2203      	movs	r2, #3
 8009d4e:	4650      	mov	r0, sl
 8009d50:	f7f6 fa46 	bl	80001e0 <memchr>
 8009d54:	b140      	cbz	r0, 8009d68 <_vfiprintf_r+0x198>
 8009d56:	2340      	movs	r3, #64	; 0x40
 8009d58:	eba0 000a 	sub.w	r0, r0, sl
 8009d5c:	fa03 f000 	lsl.w	r0, r3, r0
 8009d60:	9b04      	ldr	r3, [sp, #16]
 8009d62:	4303      	orrs	r3, r0
 8009d64:	3401      	adds	r4, #1
 8009d66:	9304      	str	r3, [sp, #16]
 8009d68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d6c:	482c      	ldr	r0, [pc, #176]	; (8009e20 <_vfiprintf_r+0x250>)
 8009d6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d72:	2206      	movs	r2, #6
 8009d74:	f7f6 fa34 	bl	80001e0 <memchr>
 8009d78:	2800      	cmp	r0, #0
 8009d7a:	d03f      	beq.n	8009dfc <_vfiprintf_r+0x22c>
 8009d7c:	4b29      	ldr	r3, [pc, #164]	; (8009e24 <_vfiprintf_r+0x254>)
 8009d7e:	bb1b      	cbnz	r3, 8009dc8 <_vfiprintf_r+0x1f8>
 8009d80:	9b03      	ldr	r3, [sp, #12]
 8009d82:	3307      	adds	r3, #7
 8009d84:	f023 0307 	bic.w	r3, r3, #7
 8009d88:	3308      	adds	r3, #8
 8009d8a:	9303      	str	r3, [sp, #12]
 8009d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d8e:	443b      	add	r3, r7
 8009d90:	9309      	str	r3, [sp, #36]	; 0x24
 8009d92:	e767      	b.n	8009c64 <_vfiprintf_r+0x94>
 8009d94:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d98:	460c      	mov	r4, r1
 8009d9a:	2001      	movs	r0, #1
 8009d9c:	e7a5      	b.n	8009cea <_vfiprintf_r+0x11a>
 8009d9e:	2300      	movs	r3, #0
 8009da0:	3401      	adds	r4, #1
 8009da2:	9305      	str	r3, [sp, #20]
 8009da4:	4619      	mov	r1, r3
 8009da6:	f04f 0c0a 	mov.w	ip, #10
 8009daa:	4620      	mov	r0, r4
 8009dac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009db0:	3a30      	subs	r2, #48	; 0x30
 8009db2:	2a09      	cmp	r2, #9
 8009db4:	d903      	bls.n	8009dbe <_vfiprintf_r+0x1ee>
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d0c5      	beq.n	8009d46 <_vfiprintf_r+0x176>
 8009dba:	9105      	str	r1, [sp, #20]
 8009dbc:	e7c3      	b.n	8009d46 <_vfiprintf_r+0x176>
 8009dbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8009dc2:	4604      	mov	r4, r0
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	e7f0      	b.n	8009daa <_vfiprintf_r+0x1da>
 8009dc8:	ab03      	add	r3, sp, #12
 8009dca:	9300      	str	r3, [sp, #0]
 8009dcc:	462a      	mov	r2, r5
 8009dce:	4b16      	ldr	r3, [pc, #88]	; (8009e28 <_vfiprintf_r+0x258>)
 8009dd0:	a904      	add	r1, sp, #16
 8009dd2:	4630      	mov	r0, r6
 8009dd4:	f7fc f83a 	bl	8005e4c <_printf_float>
 8009dd8:	4607      	mov	r7, r0
 8009dda:	1c78      	adds	r0, r7, #1
 8009ddc:	d1d6      	bne.n	8009d8c <_vfiprintf_r+0x1bc>
 8009dde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009de0:	07d9      	lsls	r1, r3, #31
 8009de2:	d405      	bmi.n	8009df0 <_vfiprintf_r+0x220>
 8009de4:	89ab      	ldrh	r3, [r5, #12]
 8009de6:	059a      	lsls	r2, r3, #22
 8009de8:	d402      	bmi.n	8009df0 <_vfiprintf_r+0x220>
 8009dea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009dec:	f000 faa1 	bl	800a332 <__retarget_lock_release_recursive>
 8009df0:	89ab      	ldrh	r3, [r5, #12]
 8009df2:	065b      	lsls	r3, r3, #25
 8009df4:	f53f af12 	bmi.w	8009c1c <_vfiprintf_r+0x4c>
 8009df8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009dfa:	e711      	b.n	8009c20 <_vfiprintf_r+0x50>
 8009dfc:	ab03      	add	r3, sp, #12
 8009dfe:	9300      	str	r3, [sp, #0]
 8009e00:	462a      	mov	r2, r5
 8009e02:	4b09      	ldr	r3, [pc, #36]	; (8009e28 <_vfiprintf_r+0x258>)
 8009e04:	a904      	add	r1, sp, #16
 8009e06:	4630      	mov	r0, r6
 8009e08:	f7fc fac4 	bl	8006394 <_printf_i>
 8009e0c:	e7e4      	b.n	8009dd8 <_vfiprintf_r+0x208>
 8009e0e:	bf00      	nop
 8009e10:	0800aacc 	.word	0x0800aacc
 8009e14:	0800aaec 	.word	0x0800aaec
 8009e18:	0800aaac 	.word	0x0800aaac
 8009e1c:	0800aa5c 	.word	0x0800aa5c
 8009e20:	0800aa66 	.word	0x0800aa66
 8009e24:	08005e4d 	.word	0x08005e4d
 8009e28:	08009bad 	.word	0x08009bad
 8009e2c:	0800aa62 	.word	0x0800aa62

08009e30 <__swbuf_r>:
 8009e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e32:	460e      	mov	r6, r1
 8009e34:	4614      	mov	r4, r2
 8009e36:	4605      	mov	r5, r0
 8009e38:	b118      	cbz	r0, 8009e42 <__swbuf_r+0x12>
 8009e3a:	6983      	ldr	r3, [r0, #24]
 8009e3c:	b90b      	cbnz	r3, 8009e42 <__swbuf_r+0x12>
 8009e3e:	f000 f9d9 	bl	800a1f4 <__sinit>
 8009e42:	4b21      	ldr	r3, [pc, #132]	; (8009ec8 <__swbuf_r+0x98>)
 8009e44:	429c      	cmp	r4, r3
 8009e46:	d12b      	bne.n	8009ea0 <__swbuf_r+0x70>
 8009e48:	686c      	ldr	r4, [r5, #4]
 8009e4a:	69a3      	ldr	r3, [r4, #24]
 8009e4c:	60a3      	str	r3, [r4, #8]
 8009e4e:	89a3      	ldrh	r3, [r4, #12]
 8009e50:	071a      	lsls	r2, r3, #28
 8009e52:	d52f      	bpl.n	8009eb4 <__swbuf_r+0x84>
 8009e54:	6923      	ldr	r3, [r4, #16]
 8009e56:	b36b      	cbz	r3, 8009eb4 <__swbuf_r+0x84>
 8009e58:	6923      	ldr	r3, [r4, #16]
 8009e5a:	6820      	ldr	r0, [r4, #0]
 8009e5c:	1ac0      	subs	r0, r0, r3
 8009e5e:	6963      	ldr	r3, [r4, #20]
 8009e60:	b2f6      	uxtb	r6, r6
 8009e62:	4283      	cmp	r3, r0
 8009e64:	4637      	mov	r7, r6
 8009e66:	dc04      	bgt.n	8009e72 <__swbuf_r+0x42>
 8009e68:	4621      	mov	r1, r4
 8009e6a:	4628      	mov	r0, r5
 8009e6c:	f000 f92e 	bl	800a0cc <_fflush_r>
 8009e70:	bb30      	cbnz	r0, 8009ec0 <__swbuf_r+0x90>
 8009e72:	68a3      	ldr	r3, [r4, #8]
 8009e74:	3b01      	subs	r3, #1
 8009e76:	60a3      	str	r3, [r4, #8]
 8009e78:	6823      	ldr	r3, [r4, #0]
 8009e7a:	1c5a      	adds	r2, r3, #1
 8009e7c:	6022      	str	r2, [r4, #0]
 8009e7e:	701e      	strb	r6, [r3, #0]
 8009e80:	6963      	ldr	r3, [r4, #20]
 8009e82:	3001      	adds	r0, #1
 8009e84:	4283      	cmp	r3, r0
 8009e86:	d004      	beq.n	8009e92 <__swbuf_r+0x62>
 8009e88:	89a3      	ldrh	r3, [r4, #12]
 8009e8a:	07db      	lsls	r3, r3, #31
 8009e8c:	d506      	bpl.n	8009e9c <__swbuf_r+0x6c>
 8009e8e:	2e0a      	cmp	r6, #10
 8009e90:	d104      	bne.n	8009e9c <__swbuf_r+0x6c>
 8009e92:	4621      	mov	r1, r4
 8009e94:	4628      	mov	r0, r5
 8009e96:	f000 f919 	bl	800a0cc <_fflush_r>
 8009e9a:	b988      	cbnz	r0, 8009ec0 <__swbuf_r+0x90>
 8009e9c:	4638      	mov	r0, r7
 8009e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ea0:	4b0a      	ldr	r3, [pc, #40]	; (8009ecc <__swbuf_r+0x9c>)
 8009ea2:	429c      	cmp	r4, r3
 8009ea4:	d101      	bne.n	8009eaa <__swbuf_r+0x7a>
 8009ea6:	68ac      	ldr	r4, [r5, #8]
 8009ea8:	e7cf      	b.n	8009e4a <__swbuf_r+0x1a>
 8009eaa:	4b09      	ldr	r3, [pc, #36]	; (8009ed0 <__swbuf_r+0xa0>)
 8009eac:	429c      	cmp	r4, r3
 8009eae:	bf08      	it	eq
 8009eb0:	68ec      	ldreq	r4, [r5, #12]
 8009eb2:	e7ca      	b.n	8009e4a <__swbuf_r+0x1a>
 8009eb4:	4621      	mov	r1, r4
 8009eb6:	4628      	mov	r0, r5
 8009eb8:	f000 f80c 	bl	8009ed4 <__swsetup_r>
 8009ebc:	2800      	cmp	r0, #0
 8009ebe:	d0cb      	beq.n	8009e58 <__swbuf_r+0x28>
 8009ec0:	f04f 37ff 	mov.w	r7, #4294967295
 8009ec4:	e7ea      	b.n	8009e9c <__swbuf_r+0x6c>
 8009ec6:	bf00      	nop
 8009ec8:	0800aacc 	.word	0x0800aacc
 8009ecc:	0800aaec 	.word	0x0800aaec
 8009ed0:	0800aaac 	.word	0x0800aaac

08009ed4 <__swsetup_r>:
 8009ed4:	4b32      	ldr	r3, [pc, #200]	; (8009fa0 <__swsetup_r+0xcc>)
 8009ed6:	b570      	push	{r4, r5, r6, lr}
 8009ed8:	681d      	ldr	r5, [r3, #0]
 8009eda:	4606      	mov	r6, r0
 8009edc:	460c      	mov	r4, r1
 8009ede:	b125      	cbz	r5, 8009eea <__swsetup_r+0x16>
 8009ee0:	69ab      	ldr	r3, [r5, #24]
 8009ee2:	b913      	cbnz	r3, 8009eea <__swsetup_r+0x16>
 8009ee4:	4628      	mov	r0, r5
 8009ee6:	f000 f985 	bl	800a1f4 <__sinit>
 8009eea:	4b2e      	ldr	r3, [pc, #184]	; (8009fa4 <__swsetup_r+0xd0>)
 8009eec:	429c      	cmp	r4, r3
 8009eee:	d10f      	bne.n	8009f10 <__swsetup_r+0x3c>
 8009ef0:	686c      	ldr	r4, [r5, #4]
 8009ef2:	89a3      	ldrh	r3, [r4, #12]
 8009ef4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ef8:	0719      	lsls	r1, r3, #28
 8009efa:	d42c      	bmi.n	8009f56 <__swsetup_r+0x82>
 8009efc:	06dd      	lsls	r5, r3, #27
 8009efe:	d411      	bmi.n	8009f24 <__swsetup_r+0x50>
 8009f00:	2309      	movs	r3, #9
 8009f02:	6033      	str	r3, [r6, #0]
 8009f04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009f08:	81a3      	strh	r3, [r4, #12]
 8009f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f0e:	e03e      	b.n	8009f8e <__swsetup_r+0xba>
 8009f10:	4b25      	ldr	r3, [pc, #148]	; (8009fa8 <__swsetup_r+0xd4>)
 8009f12:	429c      	cmp	r4, r3
 8009f14:	d101      	bne.n	8009f1a <__swsetup_r+0x46>
 8009f16:	68ac      	ldr	r4, [r5, #8]
 8009f18:	e7eb      	b.n	8009ef2 <__swsetup_r+0x1e>
 8009f1a:	4b24      	ldr	r3, [pc, #144]	; (8009fac <__swsetup_r+0xd8>)
 8009f1c:	429c      	cmp	r4, r3
 8009f1e:	bf08      	it	eq
 8009f20:	68ec      	ldreq	r4, [r5, #12]
 8009f22:	e7e6      	b.n	8009ef2 <__swsetup_r+0x1e>
 8009f24:	0758      	lsls	r0, r3, #29
 8009f26:	d512      	bpl.n	8009f4e <__swsetup_r+0x7a>
 8009f28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f2a:	b141      	cbz	r1, 8009f3e <__swsetup_r+0x6a>
 8009f2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f30:	4299      	cmp	r1, r3
 8009f32:	d002      	beq.n	8009f3a <__swsetup_r+0x66>
 8009f34:	4630      	mov	r0, r6
 8009f36:	f7ff fb25 	bl	8009584 <_free_r>
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	6363      	str	r3, [r4, #52]	; 0x34
 8009f3e:	89a3      	ldrh	r3, [r4, #12]
 8009f40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f44:	81a3      	strh	r3, [r4, #12]
 8009f46:	2300      	movs	r3, #0
 8009f48:	6063      	str	r3, [r4, #4]
 8009f4a:	6923      	ldr	r3, [r4, #16]
 8009f4c:	6023      	str	r3, [r4, #0]
 8009f4e:	89a3      	ldrh	r3, [r4, #12]
 8009f50:	f043 0308 	orr.w	r3, r3, #8
 8009f54:	81a3      	strh	r3, [r4, #12]
 8009f56:	6923      	ldr	r3, [r4, #16]
 8009f58:	b94b      	cbnz	r3, 8009f6e <__swsetup_r+0x9a>
 8009f5a:	89a3      	ldrh	r3, [r4, #12]
 8009f5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f64:	d003      	beq.n	8009f6e <__swsetup_r+0x9a>
 8009f66:	4621      	mov	r1, r4
 8009f68:	4630      	mov	r0, r6
 8009f6a:	f000 fa09 	bl	800a380 <__smakebuf_r>
 8009f6e:	89a0      	ldrh	r0, [r4, #12]
 8009f70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f74:	f010 0301 	ands.w	r3, r0, #1
 8009f78:	d00a      	beq.n	8009f90 <__swsetup_r+0xbc>
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	60a3      	str	r3, [r4, #8]
 8009f7e:	6963      	ldr	r3, [r4, #20]
 8009f80:	425b      	negs	r3, r3
 8009f82:	61a3      	str	r3, [r4, #24]
 8009f84:	6923      	ldr	r3, [r4, #16]
 8009f86:	b943      	cbnz	r3, 8009f9a <__swsetup_r+0xc6>
 8009f88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009f8c:	d1ba      	bne.n	8009f04 <__swsetup_r+0x30>
 8009f8e:	bd70      	pop	{r4, r5, r6, pc}
 8009f90:	0781      	lsls	r1, r0, #30
 8009f92:	bf58      	it	pl
 8009f94:	6963      	ldrpl	r3, [r4, #20]
 8009f96:	60a3      	str	r3, [r4, #8]
 8009f98:	e7f4      	b.n	8009f84 <__swsetup_r+0xb0>
 8009f9a:	2000      	movs	r0, #0
 8009f9c:	e7f7      	b.n	8009f8e <__swsetup_r+0xba>
 8009f9e:	bf00      	nop
 8009fa0:	2000000c 	.word	0x2000000c
 8009fa4:	0800aacc 	.word	0x0800aacc
 8009fa8:	0800aaec 	.word	0x0800aaec
 8009fac:	0800aaac 	.word	0x0800aaac

08009fb0 <abort>:
 8009fb0:	b508      	push	{r3, lr}
 8009fb2:	2006      	movs	r0, #6
 8009fb4:	f000 fa54 	bl	800a460 <raise>
 8009fb8:	2001      	movs	r0, #1
 8009fba:	f7f7 fb6f 	bl	800169c <_exit>
	...

08009fc0 <__sflush_r>:
 8009fc0:	898a      	ldrh	r2, [r1, #12]
 8009fc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fc6:	4605      	mov	r5, r0
 8009fc8:	0710      	lsls	r0, r2, #28
 8009fca:	460c      	mov	r4, r1
 8009fcc:	d458      	bmi.n	800a080 <__sflush_r+0xc0>
 8009fce:	684b      	ldr	r3, [r1, #4]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	dc05      	bgt.n	8009fe0 <__sflush_r+0x20>
 8009fd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	dc02      	bgt.n	8009fe0 <__sflush_r+0x20>
 8009fda:	2000      	movs	r0, #0
 8009fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fe0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009fe2:	2e00      	cmp	r6, #0
 8009fe4:	d0f9      	beq.n	8009fda <__sflush_r+0x1a>
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009fec:	682f      	ldr	r7, [r5, #0]
 8009fee:	602b      	str	r3, [r5, #0]
 8009ff0:	d032      	beq.n	800a058 <__sflush_r+0x98>
 8009ff2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009ff4:	89a3      	ldrh	r3, [r4, #12]
 8009ff6:	075a      	lsls	r2, r3, #29
 8009ff8:	d505      	bpl.n	800a006 <__sflush_r+0x46>
 8009ffa:	6863      	ldr	r3, [r4, #4]
 8009ffc:	1ac0      	subs	r0, r0, r3
 8009ffe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a000:	b10b      	cbz	r3, 800a006 <__sflush_r+0x46>
 800a002:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a004:	1ac0      	subs	r0, r0, r3
 800a006:	2300      	movs	r3, #0
 800a008:	4602      	mov	r2, r0
 800a00a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a00c:	6a21      	ldr	r1, [r4, #32]
 800a00e:	4628      	mov	r0, r5
 800a010:	47b0      	blx	r6
 800a012:	1c43      	adds	r3, r0, #1
 800a014:	89a3      	ldrh	r3, [r4, #12]
 800a016:	d106      	bne.n	800a026 <__sflush_r+0x66>
 800a018:	6829      	ldr	r1, [r5, #0]
 800a01a:	291d      	cmp	r1, #29
 800a01c:	d82c      	bhi.n	800a078 <__sflush_r+0xb8>
 800a01e:	4a2a      	ldr	r2, [pc, #168]	; (800a0c8 <__sflush_r+0x108>)
 800a020:	40ca      	lsrs	r2, r1
 800a022:	07d6      	lsls	r6, r2, #31
 800a024:	d528      	bpl.n	800a078 <__sflush_r+0xb8>
 800a026:	2200      	movs	r2, #0
 800a028:	6062      	str	r2, [r4, #4]
 800a02a:	04d9      	lsls	r1, r3, #19
 800a02c:	6922      	ldr	r2, [r4, #16]
 800a02e:	6022      	str	r2, [r4, #0]
 800a030:	d504      	bpl.n	800a03c <__sflush_r+0x7c>
 800a032:	1c42      	adds	r2, r0, #1
 800a034:	d101      	bne.n	800a03a <__sflush_r+0x7a>
 800a036:	682b      	ldr	r3, [r5, #0]
 800a038:	b903      	cbnz	r3, 800a03c <__sflush_r+0x7c>
 800a03a:	6560      	str	r0, [r4, #84]	; 0x54
 800a03c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a03e:	602f      	str	r7, [r5, #0]
 800a040:	2900      	cmp	r1, #0
 800a042:	d0ca      	beq.n	8009fda <__sflush_r+0x1a>
 800a044:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a048:	4299      	cmp	r1, r3
 800a04a:	d002      	beq.n	800a052 <__sflush_r+0x92>
 800a04c:	4628      	mov	r0, r5
 800a04e:	f7ff fa99 	bl	8009584 <_free_r>
 800a052:	2000      	movs	r0, #0
 800a054:	6360      	str	r0, [r4, #52]	; 0x34
 800a056:	e7c1      	b.n	8009fdc <__sflush_r+0x1c>
 800a058:	6a21      	ldr	r1, [r4, #32]
 800a05a:	2301      	movs	r3, #1
 800a05c:	4628      	mov	r0, r5
 800a05e:	47b0      	blx	r6
 800a060:	1c41      	adds	r1, r0, #1
 800a062:	d1c7      	bne.n	8009ff4 <__sflush_r+0x34>
 800a064:	682b      	ldr	r3, [r5, #0]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d0c4      	beq.n	8009ff4 <__sflush_r+0x34>
 800a06a:	2b1d      	cmp	r3, #29
 800a06c:	d001      	beq.n	800a072 <__sflush_r+0xb2>
 800a06e:	2b16      	cmp	r3, #22
 800a070:	d101      	bne.n	800a076 <__sflush_r+0xb6>
 800a072:	602f      	str	r7, [r5, #0]
 800a074:	e7b1      	b.n	8009fda <__sflush_r+0x1a>
 800a076:	89a3      	ldrh	r3, [r4, #12]
 800a078:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a07c:	81a3      	strh	r3, [r4, #12]
 800a07e:	e7ad      	b.n	8009fdc <__sflush_r+0x1c>
 800a080:	690f      	ldr	r7, [r1, #16]
 800a082:	2f00      	cmp	r7, #0
 800a084:	d0a9      	beq.n	8009fda <__sflush_r+0x1a>
 800a086:	0793      	lsls	r3, r2, #30
 800a088:	680e      	ldr	r6, [r1, #0]
 800a08a:	bf08      	it	eq
 800a08c:	694b      	ldreq	r3, [r1, #20]
 800a08e:	600f      	str	r7, [r1, #0]
 800a090:	bf18      	it	ne
 800a092:	2300      	movne	r3, #0
 800a094:	eba6 0807 	sub.w	r8, r6, r7
 800a098:	608b      	str	r3, [r1, #8]
 800a09a:	f1b8 0f00 	cmp.w	r8, #0
 800a09e:	dd9c      	ble.n	8009fda <__sflush_r+0x1a>
 800a0a0:	6a21      	ldr	r1, [r4, #32]
 800a0a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a0a4:	4643      	mov	r3, r8
 800a0a6:	463a      	mov	r2, r7
 800a0a8:	4628      	mov	r0, r5
 800a0aa:	47b0      	blx	r6
 800a0ac:	2800      	cmp	r0, #0
 800a0ae:	dc06      	bgt.n	800a0be <__sflush_r+0xfe>
 800a0b0:	89a3      	ldrh	r3, [r4, #12]
 800a0b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0b6:	81a3      	strh	r3, [r4, #12]
 800a0b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0bc:	e78e      	b.n	8009fdc <__sflush_r+0x1c>
 800a0be:	4407      	add	r7, r0
 800a0c0:	eba8 0800 	sub.w	r8, r8, r0
 800a0c4:	e7e9      	b.n	800a09a <__sflush_r+0xda>
 800a0c6:	bf00      	nop
 800a0c8:	20400001 	.word	0x20400001

0800a0cc <_fflush_r>:
 800a0cc:	b538      	push	{r3, r4, r5, lr}
 800a0ce:	690b      	ldr	r3, [r1, #16]
 800a0d0:	4605      	mov	r5, r0
 800a0d2:	460c      	mov	r4, r1
 800a0d4:	b913      	cbnz	r3, 800a0dc <_fflush_r+0x10>
 800a0d6:	2500      	movs	r5, #0
 800a0d8:	4628      	mov	r0, r5
 800a0da:	bd38      	pop	{r3, r4, r5, pc}
 800a0dc:	b118      	cbz	r0, 800a0e6 <_fflush_r+0x1a>
 800a0de:	6983      	ldr	r3, [r0, #24]
 800a0e0:	b90b      	cbnz	r3, 800a0e6 <_fflush_r+0x1a>
 800a0e2:	f000 f887 	bl	800a1f4 <__sinit>
 800a0e6:	4b14      	ldr	r3, [pc, #80]	; (800a138 <_fflush_r+0x6c>)
 800a0e8:	429c      	cmp	r4, r3
 800a0ea:	d11b      	bne.n	800a124 <_fflush_r+0x58>
 800a0ec:	686c      	ldr	r4, [r5, #4]
 800a0ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d0ef      	beq.n	800a0d6 <_fflush_r+0xa>
 800a0f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a0f8:	07d0      	lsls	r0, r2, #31
 800a0fa:	d404      	bmi.n	800a106 <_fflush_r+0x3a>
 800a0fc:	0599      	lsls	r1, r3, #22
 800a0fe:	d402      	bmi.n	800a106 <_fflush_r+0x3a>
 800a100:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a102:	f000 f915 	bl	800a330 <__retarget_lock_acquire_recursive>
 800a106:	4628      	mov	r0, r5
 800a108:	4621      	mov	r1, r4
 800a10a:	f7ff ff59 	bl	8009fc0 <__sflush_r>
 800a10e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a110:	07da      	lsls	r2, r3, #31
 800a112:	4605      	mov	r5, r0
 800a114:	d4e0      	bmi.n	800a0d8 <_fflush_r+0xc>
 800a116:	89a3      	ldrh	r3, [r4, #12]
 800a118:	059b      	lsls	r3, r3, #22
 800a11a:	d4dd      	bmi.n	800a0d8 <_fflush_r+0xc>
 800a11c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a11e:	f000 f908 	bl	800a332 <__retarget_lock_release_recursive>
 800a122:	e7d9      	b.n	800a0d8 <_fflush_r+0xc>
 800a124:	4b05      	ldr	r3, [pc, #20]	; (800a13c <_fflush_r+0x70>)
 800a126:	429c      	cmp	r4, r3
 800a128:	d101      	bne.n	800a12e <_fflush_r+0x62>
 800a12a:	68ac      	ldr	r4, [r5, #8]
 800a12c:	e7df      	b.n	800a0ee <_fflush_r+0x22>
 800a12e:	4b04      	ldr	r3, [pc, #16]	; (800a140 <_fflush_r+0x74>)
 800a130:	429c      	cmp	r4, r3
 800a132:	bf08      	it	eq
 800a134:	68ec      	ldreq	r4, [r5, #12]
 800a136:	e7da      	b.n	800a0ee <_fflush_r+0x22>
 800a138:	0800aacc 	.word	0x0800aacc
 800a13c:	0800aaec 	.word	0x0800aaec
 800a140:	0800aaac 	.word	0x0800aaac

0800a144 <std>:
 800a144:	2300      	movs	r3, #0
 800a146:	b510      	push	{r4, lr}
 800a148:	4604      	mov	r4, r0
 800a14a:	e9c0 3300 	strd	r3, r3, [r0]
 800a14e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a152:	6083      	str	r3, [r0, #8]
 800a154:	8181      	strh	r1, [r0, #12]
 800a156:	6643      	str	r3, [r0, #100]	; 0x64
 800a158:	81c2      	strh	r2, [r0, #14]
 800a15a:	6183      	str	r3, [r0, #24]
 800a15c:	4619      	mov	r1, r3
 800a15e:	2208      	movs	r2, #8
 800a160:	305c      	adds	r0, #92	; 0x5c
 800a162:	f7fb fdcb 	bl	8005cfc <memset>
 800a166:	4b05      	ldr	r3, [pc, #20]	; (800a17c <std+0x38>)
 800a168:	6263      	str	r3, [r4, #36]	; 0x24
 800a16a:	4b05      	ldr	r3, [pc, #20]	; (800a180 <std+0x3c>)
 800a16c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a16e:	4b05      	ldr	r3, [pc, #20]	; (800a184 <std+0x40>)
 800a170:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a172:	4b05      	ldr	r3, [pc, #20]	; (800a188 <std+0x44>)
 800a174:	6224      	str	r4, [r4, #32]
 800a176:	6323      	str	r3, [r4, #48]	; 0x30
 800a178:	bd10      	pop	{r4, pc}
 800a17a:	bf00      	nop
 800a17c:	0800a499 	.word	0x0800a499
 800a180:	0800a4bb 	.word	0x0800a4bb
 800a184:	0800a4f3 	.word	0x0800a4f3
 800a188:	0800a517 	.word	0x0800a517

0800a18c <_cleanup_r>:
 800a18c:	4901      	ldr	r1, [pc, #4]	; (800a194 <_cleanup_r+0x8>)
 800a18e:	f000 b8af 	b.w	800a2f0 <_fwalk_reent>
 800a192:	bf00      	nop
 800a194:	0800a0cd 	.word	0x0800a0cd

0800a198 <__sfmoreglue>:
 800a198:	b570      	push	{r4, r5, r6, lr}
 800a19a:	2268      	movs	r2, #104	; 0x68
 800a19c:	1e4d      	subs	r5, r1, #1
 800a19e:	4355      	muls	r5, r2
 800a1a0:	460e      	mov	r6, r1
 800a1a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a1a6:	f7ff fa59 	bl	800965c <_malloc_r>
 800a1aa:	4604      	mov	r4, r0
 800a1ac:	b140      	cbz	r0, 800a1c0 <__sfmoreglue+0x28>
 800a1ae:	2100      	movs	r1, #0
 800a1b0:	e9c0 1600 	strd	r1, r6, [r0]
 800a1b4:	300c      	adds	r0, #12
 800a1b6:	60a0      	str	r0, [r4, #8]
 800a1b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a1bc:	f7fb fd9e 	bl	8005cfc <memset>
 800a1c0:	4620      	mov	r0, r4
 800a1c2:	bd70      	pop	{r4, r5, r6, pc}

0800a1c4 <__sfp_lock_acquire>:
 800a1c4:	4801      	ldr	r0, [pc, #4]	; (800a1cc <__sfp_lock_acquire+0x8>)
 800a1c6:	f000 b8b3 	b.w	800a330 <__retarget_lock_acquire_recursive>
 800a1ca:	bf00      	nop
 800a1cc:	20001b69 	.word	0x20001b69

0800a1d0 <__sfp_lock_release>:
 800a1d0:	4801      	ldr	r0, [pc, #4]	; (800a1d8 <__sfp_lock_release+0x8>)
 800a1d2:	f000 b8ae 	b.w	800a332 <__retarget_lock_release_recursive>
 800a1d6:	bf00      	nop
 800a1d8:	20001b69 	.word	0x20001b69

0800a1dc <__sinit_lock_acquire>:
 800a1dc:	4801      	ldr	r0, [pc, #4]	; (800a1e4 <__sinit_lock_acquire+0x8>)
 800a1de:	f000 b8a7 	b.w	800a330 <__retarget_lock_acquire_recursive>
 800a1e2:	bf00      	nop
 800a1e4:	20001b6a 	.word	0x20001b6a

0800a1e8 <__sinit_lock_release>:
 800a1e8:	4801      	ldr	r0, [pc, #4]	; (800a1f0 <__sinit_lock_release+0x8>)
 800a1ea:	f000 b8a2 	b.w	800a332 <__retarget_lock_release_recursive>
 800a1ee:	bf00      	nop
 800a1f0:	20001b6a 	.word	0x20001b6a

0800a1f4 <__sinit>:
 800a1f4:	b510      	push	{r4, lr}
 800a1f6:	4604      	mov	r4, r0
 800a1f8:	f7ff fff0 	bl	800a1dc <__sinit_lock_acquire>
 800a1fc:	69a3      	ldr	r3, [r4, #24]
 800a1fe:	b11b      	cbz	r3, 800a208 <__sinit+0x14>
 800a200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a204:	f7ff bff0 	b.w	800a1e8 <__sinit_lock_release>
 800a208:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a20c:	6523      	str	r3, [r4, #80]	; 0x50
 800a20e:	4b13      	ldr	r3, [pc, #76]	; (800a25c <__sinit+0x68>)
 800a210:	4a13      	ldr	r2, [pc, #76]	; (800a260 <__sinit+0x6c>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	62a2      	str	r2, [r4, #40]	; 0x28
 800a216:	42a3      	cmp	r3, r4
 800a218:	bf04      	itt	eq
 800a21a:	2301      	moveq	r3, #1
 800a21c:	61a3      	streq	r3, [r4, #24]
 800a21e:	4620      	mov	r0, r4
 800a220:	f000 f820 	bl	800a264 <__sfp>
 800a224:	6060      	str	r0, [r4, #4]
 800a226:	4620      	mov	r0, r4
 800a228:	f000 f81c 	bl	800a264 <__sfp>
 800a22c:	60a0      	str	r0, [r4, #8]
 800a22e:	4620      	mov	r0, r4
 800a230:	f000 f818 	bl	800a264 <__sfp>
 800a234:	2200      	movs	r2, #0
 800a236:	60e0      	str	r0, [r4, #12]
 800a238:	2104      	movs	r1, #4
 800a23a:	6860      	ldr	r0, [r4, #4]
 800a23c:	f7ff ff82 	bl	800a144 <std>
 800a240:	68a0      	ldr	r0, [r4, #8]
 800a242:	2201      	movs	r2, #1
 800a244:	2109      	movs	r1, #9
 800a246:	f7ff ff7d 	bl	800a144 <std>
 800a24a:	68e0      	ldr	r0, [r4, #12]
 800a24c:	2202      	movs	r2, #2
 800a24e:	2112      	movs	r1, #18
 800a250:	f7ff ff78 	bl	800a144 <std>
 800a254:	2301      	movs	r3, #1
 800a256:	61a3      	str	r3, [r4, #24]
 800a258:	e7d2      	b.n	800a200 <__sinit+0xc>
 800a25a:	bf00      	nop
 800a25c:	0800a668 	.word	0x0800a668
 800a260:	0800a18d 	.word	0x0800a18d

0800a264 <__sfp>:
 800a264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a266:	4607      	mov	r7, r0
 800a268:	f7ff ffac 	bl	800a1c4 <__sfp_lock_acquire>
 800a26c:	4b1e      	ldr	r3, [pc, #120]	; (800a2e8 <__sfp+0x84>)
 800a26e:	681e      	ldr	r6, [r3, #0]
 800a270:	69b3      	ldr	r3, [r6, #24]
 800a272:	b913      	cbnz	r3, 800a27a <__sfp+0x16>
 800a274:	4630      	mov	r0, r6
 800a276:	f7ff ffbd 	bl	800a1f4 <__sinit>
 800a27a:	3648      	adds	r6, #72	; 0x48
 800a27c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a280:	3b01      	subs	r3, #1
 800a282:	d503      	bpl.n	800a28c <__sfp+0x28>
 800a284:	6833      	ldr	r3, [r6, #0]
 800a286:	b30b      	cbz	r3, 800a2cc <__sfp+0x68>
 800a288:	6836      	ldr	r6, [r6, #0]
 800a28a:	e7f7      	b.n	800a27c <__sfp+0x18>
 800a28c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a290:	b9d5      	cbnz	r5, 800a2c8 <__sfp+0x64>
 800a292:	4b16      	ldr	r3, [pc, #88]	; (800a2ec <__sfp+0x88>)
 800a294:	60e3      	str	r3, [r4, #12]
 800a296:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a29a:	6665      	str	r5, [r4, #100]	; 0x64
 800a29c:	f000 f847 	bl	800a32e <__retarget_lock_init_recursive>
 800a2a0:	f7ff ff96 	bl	800a1d0 <__sfp_lock_release>
 800a2a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a2a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a2ac:	6025      	str	r5, [r4, #0]
 800a2ae:	61a5      	str	r5, [r4, #24]
 800a2b0:	2208      	movs	r2, #8
 800a2b2:	4629      	mov	r1, r5
 800a2b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a2b8:	f7fb fd20 	bl	8005cfc <memset>
 800a2bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a2c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a2c4:	4620      	mov	r0, r4
 800a2c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2c8:	3468      	adds	r4, #104	; 0x68
 800a2ca:	e7d9      	b.n	800a280 <__sfp+0x1c>
 800a2cc:	2104      	movs	r1, #4
 800a2ce:	4638      	mov	r0, r7
 800a2d0:	f7ff ff62 	bl	800a198 <__sfmoreglue>
 800a2d4:	4604      	mov	r4, r0
 800a2d6:	6030      	str	r0, [r6, #0]
 800a2d8:	2800      	cmp	r0, #0
 800a2da:	d1d5      	bne.n	800a288 <__sfp+0x24>
 800a2dc:	f7ff ff78 	bl	800a1d0 <__sfp_lock_release>
 800a2e0:	230c      	movs	r3, #12
 800a2e2:	603b      	str	r3, [r7, #0]
 800a2e4:	e7ee      	b.n	800a2c4 <__sfp+0x60>
 800a2e6:	bf00      	nop
 800a2e8:	0800a668 	.word	0x0800a668
 800a2ec:	ffff0001 	.word	0xffff0001

0800a2f0 <_fwalk_reent>:
 800a2f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2f4:	4606      	mov	r6, r0
 800a2f6:	4688      	mov	r8, r1
 800a2f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a2fc:	2700      	movs	r7, #0
 800a2fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a302:	f1b9 0901 	subs.w	r9, r9, #1
 800a306:	d505      	bpl.n	800a314 <_fwalk_reent+0x24>
 800a308:	6824      	ldr	r4, [r4, #0]
 800a30a:	2c00      	cmp	r4, #0
 800a30c:	d1f7      	bne.n	800a2fe <_fwalk_reent+0xe>
 800a30e:	4638      	mov	r0, r7
 800a310:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a314:	89ab      	ldrh	r3, [r5, #12]
 800a316:	2b01      	cmp	r3, #1
 800a318:	d907      	bls.n	800a32a <_fwalk_reent+0x3a>
 800a31a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a31e:	3301      	adds	r3, #1
 800a320:	d003      	beq.n	800a32a <_fwalk_reent+0x3a>
 800a322:	4629      	mov	r1, r5
 800a324:	4630      	mov	r0, r6
 800a326:	47c0      	blx	r8
 800a328:	4307      	orrs	r7, r0
 800a32a:	3568      	adds	r5, #104	; 0x68
 800a32c:	e7e9      	b.n	800a302 <_fwalk_reent+0x12>

0800a32e <__retarget_lock_init_recursive>:
 800a32e:	4770      	bx	lr

0800a330 <__retarget_lock_acquire_recursive>:
 800a330:	4770      	bx	lr

0800a332 <__retarget_lock_release_recursive>:
 800a332:	4770      	bx	lr

0800a334 <__swhatbuf_r>:
 800a334:	b570      	push	{r4, r5, r6, lr}
 800a336:	460e      	mov	r6, r1
 800a338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a33c:	2900      	cmp	r1, #0
 800a33e:	b096      	sub	sp, #88	; 0x58
 800a340:	4614      	mov	r4, r2
 800a342:	461d      	mov	r5, r3
 800a344:	da08      	bge.n	800a358 <__swhatbuf_r+0x24>
 800a346:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a34a:	2200      	movs	r2, #0
 800a34c:	602a      	str	r2, [r5, #0]
 800a34e:	061a      	lsls	r2, r3, #24
 800a350:	d410      	bmi.n	800a374 <__swhatbuf_r+0x40>
 800a352:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a356:	e00e      	b.n	800a376 <__swhatbuf_r+0x42>
 800a358:	466a      	mov	r2, sp
 800a35a:	f000 f903 	bl	800a564 <_fstat_r>
 800a35e:	2800      	cmp	r0, #0
 800a360:	dbf1      	blt.n	800a346 <__swhatbuf_r+0x12>
 800a362:	9a01      	ldr	r2, [sp, #4]
 800a364:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a368:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a36c:	425a      	negs	r2, r3
 800a36e:	415a      	adcs	r2, r3
 800a370:	602a      	str	r2, [r5, #0]
 800a372:	e7ee      	b.n	800a352 <__swhatbuf_r+0x1e>
 800a374:	2340      	movs	r3, #64	; 0x40
 800a376:	2000      	movs	r0, #0
 800a378:	6023      	str	r3, [r4, #0]
 800a37a:	b016      	add	sp, #88	; 0x58
 800a37c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a380 <__smakebuf_r>:
 800a380:	898b      	ldrh	r3, [r1, #12]
 800a382:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a384:	079d      	lsls	r5, r3, #30
 800a386:	4606      	mov	r6, r0
 800a388:	460c      	mov	r4, r1
 800a38a:	d507      	bpl.n	800a39c <__smakebuf_r+0x1c>
 800a38c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a390:	6023      	str	r3, [r4, #0]
 800a392:	6123      	str	r3, [r4, #16]
 800a394:	2301      	movs	r3, #1
 800a396:	6163      	str	r3, [r4, #20]
 800a398:	b002      	add	sp, #8
 800a39a:	bd70      	pop	{r4, r5, r6, pc}
 800a39c:	ab01      	add	r3, sp, #4
 800a39e:	466a      	mov	r2, sp
 800a3a0:	f7ff ffc8 	bl	800a334 <__swhatbuf_r>
 800a3a4:	9900      	ldr	r1, [sp, #0]
 800a3a6:	4605      	mov	r5, r0
 800a3a8:	4630      	mov	r0, r6
 800a3aa:	f7ff f957 	bl	800965c <_malloc_r>
 800a3ae:	b948      	cbnz	r0, 800a3c4 <__smakebuf_r+0x44>
 800a3b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3b4:	059a      	lsls	r2, r3, #22
 800a3b6:	d4ef      	bmi.n	800a398 <__smakebuf_r+0x18>
 800a3b8:	f023 0303 	bic.w	r3, r3, #3
 800a3bc:	f043 0302 	orr.w	r3, r3, #2
 800a3c0:	81a3      	strh	r3, [r4, #12]
 800a3c2:	e7e3      	b.n	800a38c <__smakebuf_r+0xc>
 800a3c4:	4b0d      	ldr	r3, [pc, #52]	; (800a3fc <__smakebuf_r+0x7c>)
 800a3c6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a3c8:	89a3      	ldrh	r3, [r4, #12]
 800a3ca:	6020      	str	r0, [r4, #0]
 800a3cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3d0:	81a3      	strh	r3, [r4, #12]
 800a3d2:	9b00      	ldr	r3, [sp, #0]
 800a3d4:	6163      	str	r3, [r4, #20]
 800a3d6:	9b01      	ldr	r3, [sp, #4]
 800a3d8:	6120      	str	r0, [r4, #16]
 800a3da:	b15b      	cbz	r3, 800a3f4 <__smakebuf_r+0x74>
 800a3dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3e0:	4630      	mov	r0, r6
 800a3e2:	f000 f8d1 	bl	800a588 <_isatty_r>
 800a3e6:	b128      	cbz	r0, 800a3f4 <__smakebuf_r+0x74>
 800a3e8:	89a3      	ldrh	r3, [r4, #12]
 800a3ea:	f023 0303 	bic.w	r3, r3, #3
 800a3ee:	f043 0301 	orr.w	r3, r3, #1
 800a3f2:	81a3      	strh	r3, [r4, #12]
 800a3f4:	89a0      	ldrh	r0, [r4, #12]
 800a3f6:	4305      	orrs	r5, r0
 800a3f8:	81a5      	strh	r5, [r4, #12]
 800a3fa:	e7cd      	b.n	800a398 <__smakebuf_r+0x18>
 800a3fc:	0800a18d 	.word	0x0800a18d

0800a400 <_malloc_usable_size_r>:
 800a400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a404:	1f18      	subs	r0, r3, #4
 800a406:	2b00      	cmp	r3, #0
 800a408:	bfbc      	itt	lt
 800a40a:	580b      	ldrlt	r3, [r1, r0]
 800a40c:	18c0      	addlt	r0, r0, r3
 800a40e:	4770      	bx	lr

0800a410 <_raise_r>:
 800a410:	291f      	cmp	r1, #31
 800a412:	b538      	push	{r3, r4, r5, lr}
 800a414:	4604      	mov	r4, r0
 800a416:	460d      	mov	r5, r1
 800a418:	d904      	bls.n	800a424 <_raise_r+0x14>
 800a41a:	2316      	movs	r3, #22
 800a41c:	6003      	str	r3, [r0, #0]
 800a41e:	f04f 30ff 	mov.w	r0, #4294967295
 800a422:	bd38      	pop	{r3, r4, r5, pc}
 800a424:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a426:	b112      	cbz	r2, 800a42e <_raise_r+0x1e>
 800a428:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a42c:	b94b      	cbnz	r3, 800a442 <_raise_r+0x32>
 800a42e:	4620      	mov	r0, r4
 800a430:	f000 f830 	bl	800a494 <_getpid_r>
 800a434:	462a      	mov	r2, r5
 800a436:	4601      	mov	r1, r0
 800a438:	4620      	mov	r0, r4
 800a43a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a43e:	f000 b817 	b.w	800a470 <_kill_r>
 800a442:	2b01      	cmp	r3, #1
 800a444:	d00a      	beq.n	800a45c <_raise_r+0x4c>
 800a446:	1c59      	adds	r1, r3, #1
 800a448:	d103      	bne.n	800a452 <_raise_r+0x42>
 800a44a:	2316      	movs	r3, #22
 800a44c:	6003      	str	r3, [r0, #0]
 800a44e:	2001      	movs	r0, #1
 800a450:	e7e7      	b.n	800a422 <_raise_r+0x12>
 800a452:	2400      	movs	r4, #0
 800a454:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a458:	4628      	mov	r0, r5
 800a45a:	4798      	blx	r3
 800a45c:	2000      	movs	r0, #0
 800a45e:	e7e0      	b.n	800a422 <_raise_r+0x12>

0800a460 <raise>:
 800a460:	4b02      	ldr	r3, [pc, #8]	; (800a46c <raise+0xc>)
 800a462:	4601      	mov	r1, r0
 800a464:	6818      	ldr	r0, [r3, #0]
 800a466:	f7ff bfd3 	b.w	800a410 <_raise_r>
 800a46a:	bf00      	nop
 800a46c:	2000000c 	.word	0x2000000c

0800a470 <_kill_r>:
 800a470:	b538      	push	{r3, r4, r5, lr}
 800a472:	4d07      	ldr	r5, [pc, #28]	; (800a490 <_kill_r+0x20>)
 800a474:	2300      	movs	r3, #0
 800a476:	4604      	mov	r4, r0
 800a478:	4608      	mov	r0, r1
 800a47a:	4611      	mov	r1, r2
 800a47c:	602b      	str	r3, [r5, #0]
 800a47e:	f7f7 f8fd 	bl	800167c <_kill>
 800a482:	1c43      	adds	r3, r0, #1
 800a484:	d102      	bne.n	800a48c <_kill_r+0x1c>
 800a486:	682b      	ldr	r3, [r5, #0]
 800a488:	b103      	cbz	r3, 800a48c <_kill_r+0x1c>
 800a48a:	6023      	str	r3, [r4, #0]
 800a48c:	bd38      	pop	{r3, r4, r5, pc}
 800a48e:	bf00      	nop
 800a490:	20001b64 	.word	0x20001b64

0800a494 <_getpid_r>:
 800a494:	f7f7 b8ea 	b.w	800166c <_getpid>

0800a498 <__sread>:
 800a498:	b510      	push	{r4, lr}
 800a49a:	460c      	mov	r4, r1
 800a49c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4a0:	f000 f894 	bl	800a5cc <_read_r>
 800a4a4:	2800      	cmp	r0, #0
 800a4a6:	bfab      	itete	ge
 800a4a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a4aa:	89a3      	ldrhlt	r3, [r4, #12]
 800a4ac:	181b      	addge	r3, r3, r0
 800a4ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a4b2:	bfac      	ite	ge
 800a4b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a4b6:	81a3      	strhlt	r3, [r4, #12]
 800a4b8:	bd10      	pop	{r4, pc}

0800a4ba <__swrite>:
 800a4ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4be:	461f      	mov	r7, r3
 800a4c0:	898b      	ldrh	r3, [r1, #12]
 800a4c2:	05db      	lsls	r3, r3, #23
 800a4c4:	4605      	mov	r5, r0
 800a4c6:	460c      	mov	r4, r1
 800a4c8:	4616      	mov	r6, r2
 800a4ca:	d505      	bpl.n	800a4d8 <__swrite+0x1e>
 800a4cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4d0:	2302      	movs	r3, #2
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	f000 f868 	bl	800a5a8 <_lseek_r>
 800a4d8:	89a3      	ldrh	r3, [r4, #12]
 800a4da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4e2:	81a3      	strh	r3, [r4, #12]
 800a4e4:	4632      	mov	r2, r6
 800a4e6:	463b      	mov	r3, r7
 800a4e8:	4628      	mov	r0, r5
 800a4ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4ee:	f000 b817 	b.w	800a520 <_write_r>

0800a4f2 <__sseek>:
 800a4f2:	b510      	push	{r4, lr}
 800a4f4:	460c      	mov	r4, r1
 800a4f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4fa:	f000 f855 	bl	800a5a8 <_lseek_r>
 800a4fe:	1c43      	adds	r3, r0, #1
 800a500:	89a3      	ldrh	r3, [r4, #12]
 800a502:	bf15      	itete	ne
 800a504:	6560      	strne	r0, [r4, #84]	; 0x54
 800a506:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a50a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a50e:	81a3      	strheq	r3, [r4, #12]
 800a510:	bf18      	it	ne
 800a512:	81a3      	strhne	r3, [r4, #12]
 800a514:	bd10      	pop	{r4, pc}

0800a516 <__sclose>:
 800a516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a51a:	f000 b813 	b.w	800a544 <_close_r>
	...

0800a520 <_write_r>:
 800a520:	b538      	push	{r3, r4, r5, lr}
 800a522:	4d07      	ldr	r5, [pc, #28]	; (800a540 <_write_r+0x20>)
 800a524:	4604      	mov	r4, r0
 800a526:	4608      	mov	r0, r1
 800a528:	4611      	mov	r1, r2
 800a52a:	2200      	movs	r2, #0
 800a52c:	602a      	str	r2, [r5, #0]
 800a52e:	461a      	mov	r2, r3
 800a530:	f7f7 f8db 	bl	80016ea <_write>
 800a534:	1c43      	adds	r3, r0, #1
 800a536:	d102      	bne.n	800a53e <_write_r+0x1e>
 800a538:	682b      	ldr	r3, [r5, #0]
 800a53a:	b103      	cbz	r3, 800a53e <_write_r+0x1e>
 800a53c:	6023      	str	r3, [r4, #0]
 800a53e:	bd38      	pop	{r3, r4, r5, pc}
 800a540:	20001b64 	.word	0x20001b64

0800a544 <_close_r>:
 800a544:	b538      	push	{r3, r4, r5, lr}
 800a546:	4d06      	ldr	r5, [pc, #24]	; (800a560 <_close_r+0x1c>)
 800a548:	2300      	movs	r3, #0
 800a54a:	4604      	mov	r4, r0
 800a54c:	4608      	mov	r0, r1
 800a54e:	602b      	str	r3, [r5, #0]
 800a550:	f7f7 f8e7 	bl	8001722 <_close>
 800a554:	1c43      	adds	r3, r0, #1
 800a556:	d102      	bne.n	800a55e <_close_r+0x1a>
 800a558:	682b      	ldr	r3, [r5, #0]
 800a55a:	b103      	cbz	r3, 800a55e <_close_r+0x1a>
 800a55c:	6023      	str	r3, [r4, #0]
 800a55e:	bd38      	pop	{r3, r4, r5, pc}
 800a560:	20001b64 	.word	0x20001b64

0800a564 <_fstat_r>:
 800a564:	b538      	push	{r3, r4, r5, lr}
 800a566:	4d07      	ldr	r5, [pc, #28]	; (800a584 <_fstat_r+0x20>)
 800a568:	2300      	movs	r3, #0
 800a56a:	4604      	mov	r4, r0
 800a56c:	4608      	mov	r0, r1
 800a56e:	4611      	mov	r1, r2
 800a570:	602b      	str	r3, [r5, #0]
 800a572:	f7f7 f8e2 	bl	800173a <_fstat>
 800a576:	1c43      	adds	r3, r0, #1
 800a578:	d102      	bne.n	800a580 <_fstat_r+0x1c>
 800a57a:	682b      	ldr	r3, [r5, #0]
 800a57c:	b103      	cbz	r3, 800a580 <_fstat_r+0x1c>
 800a57e:	6023      	str	r3, [r4, #0]
 800a580:	bd38      	pop	{r3, r4, r5, pc}
 800a582:	bf00      	nop
 800a584:	20001b64 	.word	0x20001b64

0800a588 <_isatty_r>:
 800a588:	b538      	push	{r3, r4, r5, lr}
 800a58a:	4d06      	ldr	r5, [pc, #24]	; (800a5a4 <_isatty_r+0x1c>)
 800a58c:	2300      	movs	r3, #0
 800a58e:	4604      	mov	r4, r0
 800a590:	4608      	mov	r0, r1
 800a592:	602b      	str	r3, [r5, #0]
 800a594:	f7f7 f8e1 	bl	800175a <_isatty>
 800a598:	1c43      	adds	r3, r0, #1
 800a59a:	d102      	bne.n	800a5a2 <_isatty_r+0x1a>
 800a59c:	682b      	ldr	r3, [r5, #0]
 800a59e:	b103      	cbz	r3, 800a5a2 <_isatty_r+0x1a>
 800a5a0:	6023      	str	r3, [r4, #0]
 800a5a2:	bd38      	pop	{r3, r4, r5, pc}
 800a5a4:	20001b64 	.word	0x20001b64

0800a5a8 <_lseek_r>:
 800a5a8:	b538      	push	{r3, r4, r5, lr}
 800a5aa:	4d07      	ldr	r5, [pc, #28]	; (800a5c8 <_lseek_r+0x20>)
 800a5ac:	4604      	mov	r4, r0
 800a5ae:	4608      	mov	r0, r1
 800a5b0:	4611      	mov	r1, r2
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	602a      	str	r2, [r5, #0]
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	f7f7 f8da 	bl	8001770 <_lseek>
 800a5bc:	1c43      	adds	r3, r0, #1
 800a5be:	d102      	bne.n	800a5c6 <_lseek_r+0x1e>
 800a5c0:	682b      	ldr	r3, [r5, #0]
 800a5c2:	b103      	cbz	r3, 800a5c6 <_lseek_r+0x1e>
 800a5c4:	6023      	str	r3, [r4, #0]
 800a5c6:	bd38      	pop	{r3, r4, r5, pc}
 800a5c8:	20001b64 	.word	0x20001b64

0800a5cc <_read_r>:
 800a5cc:	b538      	push	{r3, r4, r5, lr}
 800a5ce:	4d07      	ldr	r5, [pc, #28]	; (800a5ec <_read_r+0x20>)
 800a5d0:	4604      	mov	r4, r0
 800a5d2:	4608      	mov	r0, r1
 800a5d4:	4611      	mov	r1, r2
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	602a      	str	r2, [r5, #0]
 800a5da:	461a      	mov	r2, r3
 800a5dc:	f7f7 f868 	bl	80016b0 <_read>
 800a5e0:	1c43      	adds	r3, r0, #1
 800a5e2:	d102      	bne.n	800a5ea <_read_r+0x1e>
 800a5e4:	682b      	ldr	r3, [r5, #0]
 800a5e6:	b103      	cbz	r3, 800a5ea <_read_r+0x1e>
 800a5e8:	6023      	str	r3, [r4, #0]
 800a5ea:	bd38      	pop	{r3, r4, r5, pc}
 800a5ec:	20001b64 	.word	0x20001b64

0800a5f0 <_init>:
 800a5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5f2:	bf00      	nop
 800a5f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5f6:	bc08      	pop	{r3}
 800a5f8:	469e      	mov	lr, r3
 800a5fa:	4770      	bx	lr

0800a5fc <_fini>:
 800a5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5fe:	bf00      	nop
 800a600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a602:	bc08      	pop	{r3}
 800a604:	469e      	mov	lr, r3
 800a606:	4770      	bx	lr
