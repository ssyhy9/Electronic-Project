
Project_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000335c  0800c540  0800c540  0001c540  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f89c  0800f89c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f89c  0800f89c  0001f89c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f8a4  0800f8a4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f8a4  0800f8a4  0001f8a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f8a8  0800f8a8  0001f8a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800f8ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004274  200001e0  0800fa8c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004454  0800fa8c  00024454  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000215fc  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040bf  00000000  00000000  0004180c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d0  00000000  00000000  000458d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014b8  00000000  00000000  00046ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c229  00000000  00000000  00048358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e3c7  00000000  00000000  00074581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001120d3  00000000  00000000  00092948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  001a4a1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007030  00000000  00000000  001a4ae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000284c  00000000  00000000  001abb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c524 	.word	0x0800c524

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800c524 	.word	0x0800c524

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ffe:	f107 031c 	add.w	r3, r7, #28
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
 8001018:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800101a:	4b2f      	ldr	r3, [pc, #188]	; (80010d8 <MX_ADC1_Init+0xe0>)
 800101c:	4a2f      	ldr	r2, [pc, #188]	; (80010dc <MX_ADC1_Init+0xe4>)
 800101e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001020:	4b2d      	ldr	r3, [pc, #180]	; (80010d8 <MX_ADC1_Init+0xe0>)
 8001022:	2200      	movs	r2, #0
 8001024:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001026:	4b2c      	ldr	r3, [pc, #176]	; (80010d8 <MX_ADC1_Init+0xe0>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800102c:	4b2a      	ldr	r3, [pc, #168]	; (80010d8 <MX_ADC1_Init+0xe0>)
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001032:	4b29      	ldr	r3, [pc, #164]	; (80010d8 <MX_ADC1_Init+0xe0>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001038:	4b27      	ldr	r3, [pc, #156]	; (80010d8 <MX_ADC1_Init+0xe0>)
 800103a:	2204      	movs	r2, #4
 800103c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800103e:	4b26      	ldr	r3, [pc, #152]	; (80010d8 <MX_ADC1_Init+0xe0>)
 8001040:	2200      	movs	r2, #0
 8001042:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001044:	4b24      	ldr	r3, [pc, #144]	; (80010d8 <MX_ADC1_Init+0xe0>)
 8001046:	2200      	movs	r2, #0
 8001048:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800104a:	4b23      	ldr	r3, [pc, #140]	; (80010d8 <MX_ADC1_Init+0xe0>)
 800104c:	2201      	movs	r2, #1
 800104e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001050:	4b21      	ldr	r3, [pc, #132]	; (80010d8 <MX_ADC1_Init+0xe0>)
 8001052:	2200      	movs	r2, #0
 8001054:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001058:	4b1f      	ldr	r3, [pc, #124]	; (80010d8 <MX_ADC1_Init+0xe0>)
 800105a:	2200      	movs	r2, #0
 800105c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800105e:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <MX_ADC1_Init+0xe0>)
 8001060:	2200      	movs	r2, #0
 8001062:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001064:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <MX_ADC1_Init+0xe0>)
 8001066:	2200      	movs	r2, #0
 8001068:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800106c:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <MX_ADC1_Init+0xe0>)
 800106e:	2200      	movs	r2, #0
 8001070:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001072:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <MX_ADC1_Init+0xe0>)
 8001074:	2200      	movs	r2, #0
 8001076:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800107a:	4817      	ldr	r0, [pc, #92]	; (80010d8 <MX_ADC1_Init+0xe0>)
 800107c:	f001 faa4 	bl	80025c8 <HAL_ADC_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001086:	f000 fc81 	bl	800198c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800108e:	f107 031c 	add.w	r3, r7, #28
 8001092:	4619      	mov	r1, r3
 8001094:	4810      	ldr	r0, [pc, #64]	; (80010d8 <MX_ADC1_Init+0xe0>)
 8001096:	f002 fa35 	bl	8003504 <HAL_ADCEx_MultiModeConfigChannel>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80010a0:	f000 fc74 	bl	800198c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80010a4:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <MX_ADC1_Init+0xe8>)
 80010a6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010a8:	2306      	movs	r3, #6
 80010aa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010b0:	237f      	movs	r3, #127	; 0x7f
 80010b2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010b4:	2304      	movs	r3, #4
 80010b6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	4619      	mov	r1, r3
 80010c0:	4805      	ldr	r0, [pc, #20]	; (80010d8 <MX_ADC1_Init+0xe0>)
 80010c2:	f001 fd77 	bl	8002bb4 <HAL_ADC_ConfigChannel>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80010cc:	f000 fc5e 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010d0:	bf00      	nop
 80010d2:	3728      	adds	r7, #40	; 0x28
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200001fc 	.word	0x200001fc
 80010dc:	50040000 	.word	0x50040000
 80010e0:	08600004 	.word	0x08600004

080010e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b0ac      	sub	sp, #176	; 0xb0
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	2288      	movs	r2, #136	; 0x88
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f006 fd71 	bl	8007bec <memset>
  if(adcHandle->Instance==ADC1)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a27      	ldr	r2, [pc, #156]	; (80011ac <HAL_ADC_MspInit+0xc8>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d146      	bne.n	80011a2 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001114:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001118:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800111a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800111e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001122:	2302      	movs	r3, #2
 8001124:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001126:	2301      	movs	r3, #1
 8001128:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800112a:	2308      	movs	r3, #8
 800112c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800112e:	2307      	movs	r3, #7
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001132:	2302      	movs	r3, #2
 8001134:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001136:	2302      	movs	r3, #2
 8001138:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800113a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800113e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	4618      	mov	r0, r3
 8001146:	f003 fbf5 	bl	8004934 <HAL_RCCEx_PeriphCLKConfig>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001150:	f000 fc1c 	bl	800198c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001154:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <HAL_ADC_MspInit+0xcc>)
 8001156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001158:	4a15      	ldr	r2, [pc, #84]	; (80011b0 <HAL_ADC_MspInit+0xcc>)
 800115a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800115e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001160:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <HAL_ADC_MspInit+0xcc>)
 8001162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001164:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800116c:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <HAL_ADC_MspInit+0xcc>)
 800116e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001170:	4a0f      	ldr	r2, [pc, #60]	; (80011b0 <HAL_ADC_MspInit+0xcc>)
 8001172:	f043 0304 	orr.w	r3, r3, #4
 8001176:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001178:	4b0d      	ldr	r3, [pc, #52]	; (80011b0 <HAL_ADC_MspInit+0xcc>)
 800117a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117c:	f003 0304 	and.w	r3, r3, #4
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001184:	2302      	movs	r3, #2
 8001186:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800118a:	230b      	movs	r3, #11
 800118c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001196:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800119a:	4619      	mov	r1, r3
 800119c:	4805      	ldr	r0, [pc, #20]	; (80011b4 <HAL_ADC_MspInit+0xd0>)
 800119e:	f002 fb73 	bl	8003888 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011a2:	bf00      	nop
 80011a4:	37b0      	adds	r7, #176	; 0xb0
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	50040000 	.word	0x50040000
 80011b0:	40021000 	.word	0x40021000
 80011b4:	48000800 	.word	0x48000800

080011b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	; 0x28
 80011bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ce:	4b51      	ldr	r3, [pc, #324]	; (8001314 <MX_GPIO_Init+0x15c>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d2:	4a50      	ldr	r2, [pc, #320]	; (8001314 <MX_GPIO_Init+0x15c>)
 80011d4:	f043 0304 	orr.w	r3, r3, #4
 80011d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011da:	4b4e      	ldr	r3, [pc, #312]	; (8001314 <MX_GPIO_Init+0x15c>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011de:	f003 0304 	and.w	r3, r3, #4
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011e6:	4b4b      	ldr	r3, [pc, #300]	; (8001314 <MX_GPIO_Init+0x15c>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ea:	4a4a      	ldr	r2, [pc, #296]	; (8001314 <MX_GPIO_Init+0x15c>)
 80011ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011f2:	4b48      	ldr	r3, [pc, #288]	; (8001314 <MX_GPIO_Init+0x15c>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	4b45      	ldr	r3, [pc, #276]	; (8001314 <MX_GPIO_Init+0x15c>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001202:	4a44      	ldr	r2, [pc, #272]	; (8001314 <MX_GPIO_Init+0x15c>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	64d3      	str	r3, [r2, #76]	; 0x4c
 800120a:	4b42      	ldr	r3, [pc, #264]	; (8001314 <MX_GPIO_Init+0x15c>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001216:	4b3f      	ldr	r3, [pc, #252]	; (8001314 <MX_GPIO_Init+0x15c>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121a:	4a3e      	ldr	r2, [pc, #248]	; (8001314 <MX_GPIO_Init+0x15c>)
 800121c:	f043 0302 	orr.w	r3, r3, #2
 8001220:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001222:	4b3c      	ldr	r3, [pc, #240]	; (8001314 <MX_GPIO_Init+0x15c>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_12, GPIO_PIN_RESET);
 800122e:	2200      	movs	r2, #0
 8001230:	f44f 518b 	mov.w	r1, #4448	; 0x1160
 8001234:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001238:	f002 fce8 	bl	8003c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 800123c:	2200      	movs	r2, #0
 800123e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8001242:	4835      	ldr	r0, [pc, #212]	; (8001318 <MX_GPIO_Init+0x160>)
 8001244:	f002 fce2 	bl	8003c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001248:	2200      	movs	r2, #0
 800124a:	2170      	movs	r1, #112	; 0x70
 800124c:	4833      	ldr	r0, [pc, #204]	; (800131c <MX_GPIO_Init+0x164>)
 800124e:	f002 fcdd 	bl	8003c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001252:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001256:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001258:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800125c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	4619      	mov	r1, r3
 8001268:	482b      	ldr	r0, [pc, #172]	; (8001318 <MX_GPIO_Init+0x160>)
 800126a:	f002 fb0d 	bl	8003888 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800126e:	2308      	movs	r3, #8
 8001270:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001272:	2300      	movs	r3, #0
 8001274:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	4619      	mov	r1, r3
 8001280:	4825      	ldr	r0, [pc, #148]	; (8001318 <MX_GPIO_Init+0x160>)
 8001282:	f002 fb01 	bl	8003888 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA6 PA8 PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_12;
 8001286:	f44f 538b 	mov.w	r3, #4448	; 0x1160
 800128a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128c:	2301      	movs	r3, #1
 800128e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001294:	2300      	movs	r3, #0
 8001296:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	4619      	mov	r1, r3
 800129e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a2:	f002 faf1 	bl	8003888 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80012a6:	f44f 7320 	mov.w	r3, #640	; 0x280
 80012aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ac:	2301      	movs	r3, #1
 80012ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b4:	2300      	movs	r3, #0
 80012b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	4619      	mov	r1, r3
 80012be:	4816      	ldr	r0, [pc, #88]	; (8001318 <MX_GPIO_Init+0x160>)
 80012c0:	f002 fae2 	bl	8003888 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80012c4:	2370      	movs	r3, #112	; 0x70
 80012c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c8:	2301      	movs	r3, #1
 80012ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d0:	2300      	movs	r3, #0
 80012d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	4619      	mov	r1, r3
 80012da:	4810      	ldr	r0, [pc, #64]	; (800131c <MX_GPIO_Init+0x164>)
 80012dc:	f002 fad4 	bl	8003888 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	4619      	mov	r1, r3
 80012f4:	4809      	ldr	r0, [pc, #36]	; (800131c <MX_GPIO_Init+0x164>)
 80012f6:	f002 fac7 	bl	8003888 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2100      	movs	r1, #0
 80012fe:	2028      	movs	r0, #40	; 0x28
 8001300:	f002 fa8b 	bl	800381a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001304:	2028      	movs	r0, #40	; 0x28
 8001306:	f002 faa4 	bl	8003852 <HAL_NVIC_EnableIRQ>

}
 800130a:	bf00      	nop
 800130c:	3728      	adds	r7, #40	; 0x28
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40021000 	.word	0x40021000
 8001318:	48000800 	.word	0x48000800
 800131c:	48000400 	.word	0x48000400

08001320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001320:	b5b0      	push	{r4, r5, r7, lr}
 8001322:	b0c2      	sub	sp, #264	; 0x108
 8001324:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8001326:	f000 fecb 	bl	80020c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800132a:	f000 fac1 	bl	80018b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800132e:	f7ff ff43 	bl	80011b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001332:	f000 fdc9 	bl	8001ec8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001336:	f7ff fe5f 	bl	8000ff8 <MX_ADC1_Init>
  MX_RTC_Init();
 800133a:	f000 fb2d 	bl	8001998 <MX_RTC_Init>
  MX_TIM2_Init();
 800133e:	f000 fcbd 	bl	8001cbc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001342:	f000 fd09 	bl	8001d58 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001346:	f000 fd8f 	bl	8001e68 <MX_USART1_UART_Init>
  UART_HandleTypeDef huart1;

  //HAL_ADCEx_Calibration_Start(&hdac1);
  //HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC_Value, FFT_LENGTH);
  //HAL_TIM_Base_Start_IT(&htim2);
  HAL_TIM_Base_Start_IT(&htim3);
 800134a:	48a8      	ldr	r0, [pc, #672]	; (80015ec <main+0x2cc>)
 800134c:	f004 f918 	bl	8005580 <HAL_TIM_Base_Start_IT>
  int timer3Val = __HAL_TIM_GET_COUNTER(&htim3);
 8001350:	4ba6      	ldr	r3, [pc, #664]	; (80015ec <main+0x2cc>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001356:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

  	//LCD initialization
    Lcd_PortType ports[] = { GPIOC, GPIOB, GPIOA, GPIOA };
 800135a:	4ba5      	ldr	r3, [pc, #660]	; (80015f0 <main+0x2d0>)
 800135c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001360:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001362:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    Lcd_PinType pins[] = {GPIO_PIN_9, GPIO_PIN_6, GPIO_PIN_12, GPIO_PIN_6};
 8001366:	4aa3      	ldr	r2, [pc, #652]	; (80015f4 <main+0x2d4>)
 8001368:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800136c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001370:	e883 0003 	stmia.w	r3, {r0, r1}
    Lcd_HandleTypeDef lcd;

    lcd = Lcd_create(ports, pins, GPIOB, GPIO_PIN_5, GPIOB, GPIO_PIN_4, LCD_4_BIT_MODE);
 8001374:	4638      	mov	r0, r7
 8001376:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800137a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800137e:	2300      	movs	r3, #0
 8001380:	9303      	str	r3, [sp, #12]
 8001382:	2310      	movs	r3, #16
 8001384:	9302      	str	r3, [sp, #8]
 8001386:	4b9c      	ldr	r3, [pc, #624]	; (80015f8 <main+0x2d8>)
 8001388:	9301      	str	r3, [sp, #4]
 800138a:	2320      	movs	r3, #32
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	4b9a      	ldr	r3, [pc, #616]	; (80015f8 <main+0x2d8>)
 8001390:	f005 faa3 	bl	80068da <Lcd_create>
 8001394:	f107 041c 	add.w	r4, r7, #28
 8001398:	463d      	mov	r5, r7
 800139a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800139c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800139e:	e895 0003 	ldmia.w	r5, {r0, r1}
 80013a2:	e884 0003 	stmia.w	r4, {r0, r1}

    Lcd_cursor(&lcd, 0,1);
 80013a6:	f107 031c 	add.w	r3, r7, #28
 80013aa:	2201      	movs	r2, #1
 80013ac:	2100      	movs	r1, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f005 fb20 	bl	80069f4 <Lcd_cursor>
    Lcd_string(&lcd, "$$$$$$$$$$$$$$");
 80013b4:	f107 031c 	add.w	r3, r7, #28
 80013b8:	4990      	ldr	r1, [pc, #576]	; (80015fc <main+0x2dc>)
 80013ba:	4618      	mov	r0, r3
 80013bc:	f005 fafa 	bl	80069b4 <Lcd_string>
      for ( int x = 1; x <= 50 ; x++ )
 80013c0:	2301      	movs	r3, #1
 80013c2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80013c6:	e015      	b.n	80013f4 <main+0xd4>
      {
        Lcd_cursor(&lcd, 1,7);
 80013c8:	f107 031c 	add.w	r3, r7, #28
 80013cc:	2207      	movs	r2, #7
 80013ce:	2101      	movs	r1, #1
 80013d0:	4618      	mov	r0, r3
 80013d2:	f005 fb0f 	bl	80069f4 <Lcd_cursor>
        Lcd_int(&lcd, x);
 80013d6:	f107 031c 	add.w	r3, r7, #28
 80013da:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80013de:	4618      	mov	r0, r3
 80013e0:	f005 fad0 	bl	8006984 <Lcd_int>
        HAL_Delay (100);
 80013e4:	2064      	movs	r0, #100	; 0x64
 80013e6:	f000 fee7 	bl	80021b8 <HAL_Delay>
      for ( int x = 1; x <= 50 ; x++ )
 80013ea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80013ee:	3301      	adds	r3, #1
 80013f0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80013f4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80013f8:	2b32      	cmp	r3, #50	; 0x32
 80013fa:	dde5      	ble.n	80013c8 <main+0xa8>
      }

      Lcd_clear(&lcd);
 80013fc:	f107 031c 	add.w	r3, r7, #28
 8001400:	4618      	mov	r0, r3
 8001402:	f005 fb11 	bl	8006a28 <Lcd_clear>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  if(buttonState == 0){
 8001406:	4b7e      	ldr	r3, [pc, #504]	; (8001600 <main+0x2e0>)
 8001408:	881b      	ldrh	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d11b      	bne.n	8001446 <main+0x126>
		  if(buttonState != previousState){
 800140e:	4b7c      	ldr	r3, [pc, #496]	; (8001600 <main+0x2e0>)
 8001410:	881a      	ldrh	r2, [r3, #0]
 8001412:	4b7c      	ldr	r3, [pc, #496]	; (8001604 <main+0x2e4>)
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	429a      	cmp	r2, r3
 8001418:	d008      	beq.n	800142c <main+0x10c>
			  Lcd_clear(&lcd);
 800141a:	f107 031c 	add.w	r3, r7, #28
 800141e:	4618      	mov	r0, r3
 8001420:	f005 fb02 	bl	8006a28 <Lcd_clear>
		  	  previousState = buttonState;
 8001424:	4b76      	ldr	r3, [pc, #472]	; (8001600 <main+0x2e0>)
 8001426:	881a      	ldrh	r2, [r3, #0]
 8001428:	4b76      	ldr	r3, [pc, #472]	; (8001604 <main+0x2e4>)
 800142a:	801a      	strh	r2, [r3, #0]
		  }
		  Lcd_cursor(&lcd, 0, 5);
 800142c:	f107 031c 	add.w	r3, r7, #28
 8001430:	2205      	movs	r2, #5
 8001432:	2100      	movs	r1, #0
 8001434:	4618      	mov	r0, r3
 8001436:	f005 fadd 	bl	80069f4 <Lcd_cursor>
		  Lcd_string(&lcd, "WELCOME!");
 800143a:	f107 031c 	add.w	r3, r7, #28
 800143e:	4972      	ldr	r1, [pc, #456]	; (8001608 <main+0x2e8>)
 8001440:	4618      	mov	r0, r3
 8001442:	f005 fab7 	bl	80069b4 <Lcd_string>
	  }

	  //$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ comparator code $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
	  if(buttonState == 1){
 8001446:	4b6e      	ldr	r3, [pc, #440]	; (8001600 <main+0x2e0>)
 8001448:	881b      	ldrh	r3, [r3, #0]
 800144a:	2b01      	cmp	r3, #1
 800144c:	f040 8093 	bne.w	8001576 <main+0x256>
		  if(buttonState != previousState){
 8001450:	4b6b      	ldr	r3, [pc, #428]	; (8001600 <main+0x2e0>)
 8001452:	881a      	ldrh	r2, [r3, #0]
 8001454:	4b6b      	ldr	r3, [pc, #428]	; (8001604 <main+0x2e4>)
 8001456:	881b      	ldrh	r3, [r3, #0]
 8001458:	429a      	cmp	r2, r3
 800145a:	d033      	beq.n	80014c4 <main+0x1a4>
			  Lcd_clear(&lcd);
 800145c:	f107 031c 	add.w	r3, r7, #28
 8001460:	4618      	mov	r0, r3
 8001462:	f005 fae1 	bl	8006a28 <Lcd_clear>
		  	  previousState = buttonState;
 8001466:	4b66      	ldr	r3, [pc, #408]	; (8001600 <main+0x2e0>)
 8001468:	881a      	ldrh	r2, [r3, #0]
 800146a:	4b66      	ldr	r3, [pc, #408]	; (8001604 <main+0x2e4>)
 800146c:	801a      	strh	r2, [r3, #0]
		  }
	  	  while(__HAL_TIM_GET_COUNTER(&htim3) - timer3Val < 10000){
 800146e:	e029      	b.n	80014c4 <main+0x1a4>
			  comparatorFlag = 1;
 8001470:	4b66      	ldr	r3, [pc, #408]	; (800160c <main+0x2ec>)
 8001472:	2201      	movs	r2, #1
 8001474:	801a      	strh	r2, [r3, #0]
			  uint16_t current_state;
			  current_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3);  //PB8 -> PC3
 8001476:	2108      	movs	r1, #8
 8001478:	4865      	ldr	r0, [pc, #404]	; (8001610 <main+0x2f0>)
 800147a:	f002 fbaf 	bl	8003bdc <HAL_GPIO_ReadPin>
 800147e:	4603      	mov	r3, r0
 8001480:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2

			  if(current_state != previous_state){
 8001484:	4b63      	ldr	r3, [pc, #396]	; (8001614 <main+0x2f4>)
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	f8b7 20d2 	ldrh.w	r2, [r7, #210]	; 0xd2
 800148c:	429a      	cmp	r2, r3
 800148e:	d003      	beq.n	8001498 <main+0x178>
				  pin_flag = 1;
 8001490:	4b61      	ldr	r3, [pc, #388]	; (8001618 <main+0x2f8>)
 8001492:	2201      	movs	r2, #1
 8001494:	801a      	strh	r2, [r3, #0]
 8001496:	e002      	b.n	800149e <main+0x17e>
			  }
			  else
				  pin_flag = 0;
 8001498:	4b5f      	ldr	r3, [pc, #380]	; (8001618 <main+0x2f8>)
 800149a:	2200      	movs	r2, #0
 800149c:	801a      	strh	r2, [r3, #0]

			  if(pin_flag == 1){
 800149e:	4b5e      	ldr	r3, [pc, #376]	; (8001618 <main+0x2f8>)
 80014a0:	881b      	ldrh	r3, [r3, #0]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d10a      	bne.n	80014bc <main+0x19c>
				  cnt ++;
 80014a6:	4b5d      	ldr	r3, [pc, #372]	; (800161c <main+0x2fc>)
 80014a8:	881b      	ldrh	r3, [r3, #0]
 80014aa:	3301      	adds	r3, #1
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	4b5b      	ldr	r3, [pc, #364]	; (800161c <main+0x2fc>)
 80014b0:	801a      	strh	r2, [r3, #0]
				  previous_state = current_state;
 80014b2:	4a58      	ldr	r2, [pc, #352]	; (8001614 <main+0x2f4>)
 80014b4:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 80014b8:	8013      	strh	r3, [r2, #0]
 80014ba:	e003      	b.n	80014c4 <main+0x1a4>
			  }
			  else
				  previous_state = current_state;
 80014bc:	4a55      	ldr	r2, [pc, #340]	; (8001614 <main+0x2f4>)
 80014be:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 80014c2:	8013      	strh	r3, [r2, #0]
	  	  while(__HAL_TIM_GET_COUNTER(&htim3) - timer3Val < 10000){
 80014c4:	4b49      	ldr	r3, [pc, #292]	; (80015ec <main+0x2cc>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	f242 720f 	movw	r2, #9999	; 0x270f
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d9cb      	bls.n	8001470 <main+0x150>
	  	  }

	  	  int freq = 0, spd = 0;
 80014d8:	2300      	movs	r3, #0
 80014da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80014de:	2300      	movs	r3, #0
 80014e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	  	  freq = cnt/2;
 80014e4:	4b4d      	ldr	r3, [pc, #308]	; (800161c <main+0x2fc>)
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	085b      	lsrs	r3, r3, #1
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	  	  //printf("Comp Freq: %d\r\n", freq);

		  Lcd_cursor(&lcd, 0, 1);
 80014f0:	f107 031c 	add.w	r3, r7, #28
 80014f4:	2201      	movs	r2, #1
 80014f6:	2100      	movs	r1, #0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f005 fa7b 	bl	80069f4 <Lcd_cursor>
		  Lcd_string(&lcd, "Freq:");
 80014fe:	f107 031c 	add.w	r3, r7, #28
 8001502:	4947      	ldr	r1, [pc, #284]	; (8001620 <main+0x300>)
 8001504:	4618      	mov	r0, r3
 8001506:	f005 fa55 	bl	80069b4 <Lcd_string>
		  Lcd_cursor(&lcd, 0, 7);
 800150a:	f107 031c 	add.w	r3, r7, #28
 800150e:	2207      	movs	r2, #7
 8001510:	2100      	movs	r1, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f005 fa6e 	bl	80069f4 <Lcd_cursor>
		  Lcd_int(&lcd, freq);
 8001518:	f107 031c 	add.w	r3, r7, #28
 800151c:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8001520:	4618      	mov	r0, r3
 8001522:	f005 fa2f 	bl	8006984 <Lcd_int>
		  Lcd_cursor(&lcd, 1, 1);
 8001526:	f107 031c 	add.w	r3, r7, #28
 800152a:	2201      	movs	r2, #1
 800152c:	2101      	movs	r1, #1
 800152e:	4618      	mov	r0, r3
 8001530:	f005 fa60 	bl	80069f4 <Lcd_cursor>
		  Lcd_string(&lcd, "Speed:");
 8001534:	f107 031c 	add.w	r3, r7, #28
 8001538:	493a      	ldr	r1, [pc, #232]	; (8001624 <main+0x304>)
 800153a:	4618      	mov	r0, r3
 800153c:	f005 fa3a 	bl	80069b4 <Lcd_string>
		  Lcd_cursor(&lcd, 0, 8);
 8001540:	f107 031c 	add.w	r3, r7, #28
 8001544:	2208      	movs	r2, #8
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f005 fa53 	bl	80069f4 <Lcd_cursor>
		  Lcd_int(&lcd, spd);
 800154e:	f107 031c 	add.w	r3, r7, #28
 8001552:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8001556:	4618      	mov	r0, r3
 8001558:	f005 fa14 	bl	8006984 <Lcd_int>

		  RS485_Data_Transmit(spd, trans_data);
 800155c:	4932      	ldr	r1, [pc, #200]	; (8001628 <main+0x308>)
 800155e:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8001562:	f005 fb09 	bl	8006b78 <RS485_Data_Transmit>

	  	  cnt = 0;
 8001566:	4b2d      	ldr	r3, [pc, #180]	; (800161c <main+0x2fc>)
 8001568:	2200      	movs	r2, #0
 800156a:	801a      	strh	r2, [r3, #0]
	  	  timer3Val = __HAL_TIM_GET_COUNTER(&htim3);
 800156c:	4b1f      	ldr	r3, [pc, #124]	; (80015ec <main+0x2cc>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001572:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4


	  }

	  //$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ ADC code $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
	  if(buttonState == 2){
 8001576:	4b22      	ldr	r3, [pc, #136]	; (8001600 <main+0x2e0>)
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	2b02      	cmp	r3, #2
 800157c:	f47f af43 	bne.w	8001406 <main+0xe6>
		  if(buttonState != previousState){
 8001580:	4b1f      	ldr	r3, [pc, #124]	; (8001600 <main+0x2e0>)
 8001582:	881a      	ldrh	r2, [r3, #0]
 8001584:	4b1f      	ldr	r3, [pc, #124]	; (8001604 <main+0x2e4>)
 8001586:	881b      	ldrh	r3, [r3, #0]
 8001588:	429a      	cmp	r2, r3
 800158a:	d008      	beq.n	800159e <main+0x27e>
			  Lcd_clear(&lcd);
 800158c:	f107 031c 	add.w	r3, r7, #28
 8001590:	4618      	mov	r0, r3
 8001592:	f005 fa49 	bl	8006a28 <Lcd_clear>
			  previousState = buttonState;
 8001596:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <main+0x2e0>)
 8001598:	881a      	ldrh	r2, [r3, #0]
 800159a:	4b1a      	ldr	r3, [pc, #104]	; (8001604 <main+0x2e4>)
 800159c:	801a      	strh	r2, [r3, #0]
		  }
	  	  for(int i = 0; i < FFT_LENGTH; i++){
 800159e:	2300      	movs	r3, #0
 80015a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80015a4:	e012      	b.n	80015cc <main+0x2ac>
	  		ADC_In[i] = Get_Adc();
 80015a6:	f005 fb37 	bl	8006c18 <Get_Adc>
 80015aa:	4603      	mov	r3, r0
 80015ac:	ee07 3a90 	vmov	s15, r3
 80015b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015b4:	4a1d      	ldr	r2, [pc, #116]	; (800162c <main+0x30c>)
 80015b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4413      	add	r3, r2
 80015be:	edc3 7a00 	vstr	s15, [r3]
	  	  for(int i = 0; i < FFT_LENGTH; i++){
 80015c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80015c6:	3301      	adds	r3, #1
 80015c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80015cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80015d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015d4:	dbe7      	blt.n	80015a6 <main+0x286>
	  	  }

	  	 // if(i == FFT_LENGTH){
	  		  comparatorFlag = 0;
 80015d6:	4b0d      	ldr	r3, [pc, #52]	; (800160c <main+0x2ec>)
 80015d8:	2200      	movs	r2, #0
 80015da:	801a      	strh	r2, [r3, #0]
	  		  cnt = 0;
 80015dc:	4b0f      	ldr	r3, [pc, #60]	; (800161c <main+0x2fc>)
 80015de:	2200      	movs	r2, #0
 80015e0:	801a      	strh	r2, [r3, #0]
	  		  //Initialize Buff_In
	  		  for (int i = 0; i < FFT_LENGTH; i++)
 80015e2:	2300      	movs	r3, #0
 80015e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80015e8:	e056      	b.n	8001698 <main+0x378>
 80015ea:	bf00      	nop
 80015ec:	200042ec 	.word	0x200042ec
 80015f0:	0800c56c 	.word	0x0800c56c
 80015f4:	0800c57c 	.word	0x0800c57c
 80015f8:	48000400 	.word	0x48000400
 80015fc:	0800c540 	.word	0x0800c540
 8001600:	2000426c 	.word	0x2000426c
 8001604:	2000426e 	.word	0x2000426e
 8001608:	0800c550 	.word	0x0800c550
 800160c:	20004266 	.word	0x20004266
 8001610:	48000800 	.word	0x48000800
 8001614:	20004262 	.word	0x20004262
 8001618:	20004264 	.word	0x20004264
 800161c:	20004260 	.word	0x20004260
 8001620:	0800c55c 	.word	0x0800c55c
 8001624:	0800c564 	.word	0x0800c564
 8001628:	20004270 	.word	0x20004270
 800162c:	20000260 	.word	0x20000260
	  		  {
	  			  Buff_In[i * 2] = ADC_In[i]*3.3/4096;
 8001630:	4a8f      	ldr	r2, [pc, #572]	; (8001870 <main+0x550>)
 8001632:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f7fe ff83 	bl	8000548 <__aeabi_f2d>
 8001642:	a387      	add	r3, pc, #540	; (adr r3, 8001860 <main+0x540>)
 8001644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001648:	f7fe ffd6 	bl	80005f8 <__aeabi_dmul>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4610      	mov	r0, r2
 8001652:	4619      	mov	r1, r3
 8001654:	f04f 0200 	mov.w	r2, #0
 8001658:	4b86      	ldr	r3, [pc, #536]	; (8001874 <main+0x554>)
 800165a:	f7ff f8f7 	bl	800084c <__aeabi_ddiv>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4610      	mov	r0, r2
 8001664:	4619      	mov	r1, r3
 8001666:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800166a:	005c      	lsls	r4, r3, #1
 800166c:	f7ff fabc 	bl	8000be8 <__aeabi_d2f>
 8001670:	4602      	mov	r2, r0
 8001672:	4981      	ldr	r1, [pc, #516]	; (8001878 <main+0x558>)
 8001674:	00a3      	lsls	r3, r4, #2
 8001676:	440b      	add	r3, r1
 8001678:	601a      	str	r2, [r3, #0]
	  			  Buff_In[i * 2 + 1] = 0;
 800167a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	3301      	adds	r3, #1
 8001682:	4a7d      	ldr	r2, [pc, #500]	; (8001878 <main+0x558>)
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4413      	add	r3, r2
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
	  		  for (int i = 0; i < FFT_LENGTH; i++)
 800168e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001692:	3301      	adds	r3, #1
 8001694:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001698:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800169c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016a0:	dbc6      	blt.n	8001630 <main+0x310>
	  		  }

	  		  //Perform FFT
	  		  arm_cfft_f32(&arm_cfft_sR_f32_len1024, Buff_In, 0, 1);
 80016a2:	2301      	movs	r3, #1
 80016a4:	2200      	movs	r2, #0
 80016a6:	4974      	ldr	r1, [pc, #464]	; (8001878 <main+0x558>)
 80016a8:	4874      	ldr	r0, [pc, #464]	; (800187c <main+0x55c>)
 80016aa:	f005 fdf9 	bl	80072a0 <arm_cfft_f32>
	  		  arm_cmplx_mag_f32(Buff_In, Buff_Out, FFT_LENGTH);
 80016ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016b2:	4973      	ldr	r1, [pc, #460]	; (8001880 <main+0x560>)
 80016b4:	4870      	ldr	r0, [pc, #448]	; (8001878 <main+0x558>)
 80016b6:	f005 fe8b 	bl	80073d0 <arm_cmplx_mag_f32>

	  		  //FFT output regulation
	  		  Buff_Out[0] /= 1024;
 80016ba:	4b71      	ldr	r3, [pc, #452]	; (8001880 <main+0x560>)
 80016bc:	ed93 7a00 	vldr	s14, [r3]
 80016c0:	eddf 6a70 	vldr	s13, [pc, #448]	; 8001884 <main+0x564>
 80016c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016c8:	4b6d      	ldr	r3, [pc, #436]	; (8001880 <main+0x560>)
 80016ca:	edc3 7a00 	vstr	s15, [r3]
	  		  for(int i = 0; i < FFT_LENGTH; i++){
 80016ce:	2300      	movs	r3, #0
 80016d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80016d4:	e016      	b.n	8001704 <main+0x3e4>
	  			  Buff_Out[i] /= 512;
 80016d6:	4a6a      	ldr	r2, [pc, #424]	; (8001880 <main+0x560>)
 80016d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	ed93 7a00 	vldr	s14, [r3]
 80016e4:	eddf 6a68 	vldr	s13, [pc, #416]	; 8001888 <main+0x568>
 80016e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016ec:	4a64      	ldr	r2, [pc, #400]	; (8001880 <main+0x560>)
 80016ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	edc3 7a00 	vstr	s15, [r3]
	  		  for(int i = 0; i < FFT_LENGTH; i++){
 80016fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80016fe:	3301      	adds	r3, #1
 8001700:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800170c:	dbe3      	blt.n	80016d6 <main+0x3b6>
	  		  }

	  		  //Find the maximum magnitude and its index
	  		  uint32_t index = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	  		  for(int i = 1; i < FFT_LENGTH; i++){
 8001714:	2301      	movs	r3, #1
 8001716:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800171a:	e01b      	b.n	8001754 <main+0x434>
	  			 if(Buff_Out[i] > Buff_Out[index]){
 800171c:	4a58      	ldr	r2, [pc, #352]	; (8001880 <main+0x560>)
 800171e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	ed93 7a00 	vldr	s14, [r3]
 800172a:	4a55      	ldr	r2, [pc, #340]	; (8001880 <main+0x560>)
 800172c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	edd3 7a00 	vldr	s15, [r3]
 8001738:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800173c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001740:	dd03      	ble.n	800174a <main+0x42a>
	  			   index = i;
 8001742:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001746:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	  		  for(int i = 1; i < FFT_LENGTH; i++){
 800174a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800174e:	3301      	adds	r3, #1
 8001750:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001754:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001758:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800175c:	dbde      	blt.n	800171c <main+0x3fc>
	  			 }
	  		  }
	  		  //printf("%.4f %d\r\n", Buff_Out[index], index);

	  		  frequency = index * 250000.0 / FFT_LENGTH / 2.5;
 800175e:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8001762:	f7fe fecf 	bl	8000504 <__aeabi_ui2d>
 8001766:	a340      	add	r3, pc, #256	; (adr r3, 8001868 <main+0x548>)
 8001768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176c:	f7fe ff44 	bl	80005f8 <__aeabi_dmul>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4610      	mov	r0, r2
 8001776:	4619      	mov	r1, r3
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	4b43      	ldr	r3, [pc, #268]	; (800188c <main+0x56c>)
 800177e:	f7ff f865 	bl	800084c <__aeabi_ddiv>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	4610      	mov	r0, r2
 8001788:	4619      	mov	r1, r3
 800178a:	f04f 0200 	mov.w	r2, #0
 800178e:	4b40      	ldr	r3, [pc, #256]	; (8001890 <main+0x570>)
 8001790:	f7ff f85c 	bl	800084c <__aeabi_ddiv>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4610      	mov	r0, r2
 800179a:	4619      	mov	r1, r3
 800179c:	f7ff fa24 	bl	8000be8 <__aeabi_d2f>
 80017a0:	4603      	mov	r3, r0
 80017a2:	4a3c      	ldr	r2, [pc, #240]	; (8001894 <main+0x574>)
 80017a4:	6013      	str	r3, [r2, #0]
	  		  speed = frequency / 70;
 80017a6:	4b3b      	ldr	r3, [pc, #236]	; (8001894 <main+0x574>)
 80017a8:	ed93 7a00 	vldr	s14, [r3]
 80017ac:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001898 <main+0x578>
 80017b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017b8:	ee17 2a90 	vmov	r2, s15
 80017bc:	4b37      	ldr	r3, [pc, #220]	; (800189c <main+0x57c>)
 80017be:	601a      	str	r2, [r3, #0]

	  		  //Display frequency on LCD
	  		  if(frequency < 3000){
 80017c0:	4b34      	ldr	r3, [pc, #208]	; (8001894 <main+0x574>)
 80017c2:	edd3 7a00 	vldr	s15, [r3]
 80017c6:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80018a0 <main+0x580>
 80017ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d2:	d541      	bpl.n	8001858 <main+0x538>
	  			  //printf("FFT: %d    ||    ", (int)frequency);
	  			  Lcd_cursor(&lcd, 0, 1);
 80017d4:	f107 031c 	add.w	r3, r7, #28
 80017d8:	2201      	movs	r2, #1
 80017da:	2100      	movs	r1, #0
 80017dc:	4618      	mov	r0, r3
 80017de:	f005 f909 	bl	80069f4 <Lcd_cursor>
	  			  Lcd_string(&lcd, "Freq:");
 80017e2:	f107 031c 	add.w	r3, r7, #28
 80017e6:	492f      	ldr	r1, [pc, #188]	; (80018a4 <main+0x584>)
 80017e8:	4618      	mov	r0, r3
 80017ea:	f005 f8e3 	bl	80069b4 <Lcd_string>
	  			  Lcd_cursor(&lcd, 0, 7);
 80017ee:	f107 031c 	add.w	r3, r7, #28
 80017f2:	2207      	movs	r2, #7
 80017f4:	2100      	movs	r1, #0
 80017f6:	4618      	mov	r0, r3
 80017f8:	f005 f8fc 	bl	80069f4 <Lcd_cursor>
	  			  Lcd_int(&lcd, (int)frequency);
 80017fc:	4b25      	ldr	r3, [pc, #148]	; (8001894 <main+0x574>)
 80017fe:	edd3 7a00 	vldr	s15, [r3]
 8001802:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001806:	f107 031c 	add.w	r3, r7, #28
 800180a:	ee17 1a90 	vmov	r1, s15
 800180e:	4618      	mov	r0, r3
 8001810:	f005 f8b8 	bl	8006984 <Lcd_int>
	  			  Lcd_cursor(&lcd, 1, 1);
 8001814:	f107 031c 	add.w	r3, r7, #28
 8001818:	2201      	movs	r2, #1
 800181a:	2101      	movs	r1, #1
 800181c:	4618      	mov	r0, r3
 800181e:	f005 f8e9 	bl	80069f4 <Lcd_cursor>
	  			  Lcd_string(&lcd, "Speed:");
 8001822:	f107 031c 	add.w	r3, r7, #28
 8001826:	4920      	ldr	r1, [pc, #128]	; (80018a8 <main+0x588>)
 8001828:	4618      	mov	r0, r3
 800182a:	f005 f8c3 	bl	80069b4 <Lcd_string>
	  			  Lcd_cursor(&lcd, 0, 8);
 800182e:	f107 031c 	add.w	r3, r7, #28
 8001832:	2208      	movs	r2, #8
 8001834:	2100      	movs	r1, #0
 8001836:	4618      	mov	r0, r3
 8001838:	f005 f8dc 	bl	80069f4 <Lcd_cursor>
	  			  Lcd_int(&lcd, (int)speed);
 800183c:	4b17      	ldr	r3, [pc, #92]	; (800189c <main+0x57c>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	f107 031c 	add.w	r3, r7, #28
 8001844:	4611      	mov	r1, r2
 8001846:	4618      	mov	r0, r3
 8001848:	f005 f89c 	bl	8006984 <Lcd_int>

	  			  //Transmit RS485 data
	  			  RS485_Data_Transmit(speed, trans_data);
 800184c:	4b13      	ldr	r3, [pc, #76]	; (800189c <main+0x57c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4916      	ldr	r1, [pc, #88]	; (80018ac <main+0x58c>)
 8001852:	4618      	mov	r0, r3
 8001854:	f005 f990 	bl	8006b78 <RS485_Data_Transmit>
	  if(buttonState == 0){
 8001858:	e5d5      	b.n	8001406 <main+0xe6>
 800185a:	bf00      	nop
 800185c:	f3af 8000 	nop.w
 8001860:	66666666 	.word	0x66666666
 8001864:	400a6666 	.word	0x400a6666
 8001868:	00000000 	.word	0x00000000
 800186c:	410e8480 	.word	0x410e8480
 8001870:	20000260 	.word	0x20000260
 8001874:	40b00000 	.word	0x40b00000
 8001878:	20001260 	.word	0x20001260
 800187c:	0800c5d4 	.word	0x0800c5d4
 8001880:	20003260 	.word	0x20003260
 8001884:	44800000 	.word	0x44800000
 8001888:	44000000 	.word	0x44000000
 800188c:	40900000 	.word	0x40900000
 8001890:	40040000 	.word	0x40040000
 8001894:	20004268 	.word	0x20004268
 8001898:	428c0000 	.word	0x428c0000
 800189c:	20004274 	.word	0x20004274
 80018a0:	453b8000 	.word	0x453b8000
 80018a4:	0800c55c 	.word	0x0800c55c
 80018a8:	0800c564 	.word	0x0800c564
 80018ac:	20004270 	.word	0x20004270

080018b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b096      	sub	sp, #88	; 0x58
 80018b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018b6:	f107 0314 	add.w	r3, r7, #20
 80018ba:	2244      	movs	r2, #68	; 0x44
 80018bc:	2100      	movs	r1, #0
 80018be:	4618      	mov	r0, r3
 80018c0:	f006 f994 	bl	8007bec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018c4:	463b      	mov	r3, r7
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	60da      	str	r2, [r3, #12]
 80018d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80018d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80018d6:	f002 f9d7 	bl	8003c88 <HAL_PWREx_ControlVoltageScaling>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80018e0:	f000 f854 	bl	800198c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80018e4:	230a      	movs	r3, #10
 80018e6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018ee:	2310      	movs	r3, #16
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80018f2:	2301      	movs	r3, #1
 80018f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018f6:	2302      	movs	r3, #2
 80018f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018fa:	2302      	movs	r3, #2
 80018fc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80018fe:	2301      	movs	r3, #1
 8001900:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001902:	230a      	movs	r3, #10
 8001904:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001906:	2307      	movs	r3, #7
 8001908:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800190a:	2302      	movs	r3, #2
 800190c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800190e:	2302      	movs	r3, #2
 8001910:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	4618      	mov	r0, r3
 8001918:	f002 fa0c 	bl	8003d34 <HAL_RCC_OscConfig>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8001922:	f000 f833 	bl	800198c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001926:	230f      	movs	r3, #15
 8001928:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800192a:	2303      	movs	r3, #3
 800192c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800192e:	2300      	movs	r3, #0
 8001930:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001936:	2300      	movs	r3, #0
 8001938:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800193a:	463b      	mov	r3, r7
 800193c:	2104      	movs	r1, #4
 800193e:	4618      	mov	r0, r3
 8001940:	f002 fdd4 	bl	80044ec <HAL_RCC_ClockConfig>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800194a:	f000 f81f 	bl	800198c <Error_Handler>
  }
}
 800194e:	bf00      	nop
 8001950:	3758      	adds	r7, #88	; 0x58
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	80fb      	strh	r3, [r7, #6]
		buttonState++;
 8001962:	4b09      	ldr	r3, [pc, #36]	; (8001988 <HAL_GPIO_EXTI_Callback+0x30>)
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	3301      	adds	r3, #1
 8001968:	b29a      	uxth	r2, r3
 800196a:	4b07      	ldr	r3, [pc, #28]	; (8001988 <HAL_GPIO_EXTI_Callback+0x30>)
 800196c:	801a      	strh	r2, [r3, #0]
		if(buttonState > 2){
 800196e:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_GPIO_EXTI_Callback+0x30>)
 8001970:	881b      	ldrh	r3, [r3, #0]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d902      	bls.n	800197c <HAL_GPIO_EXTI_Callback+0x24>
			buttonState = 0;
 8001976:	4b04      	ldr	r3, [pc, #16]	; (8001988 <HAL_GPIO_EXTI_Callback+0x30>)
 8001978:	2200      	movs	r2, #0
 800197a:	801a      	strh	r2, [r3, #0]
		}
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	2000426c 	.word	0x2000426c

0800198c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001990:	b672      	cpsid	i
}
 8001992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001994:	e7fe      	b.n	8001994 <Error_Handler+0x8>
	...

08001998 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800199c:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <MX_RTC_Init+0x48>)
 800199e:	4a11      	ldr	r2, [pc, #68]	; (80019e4 <MX_RTC_Init+0x4c>)
 80019a0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80019a2:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <MX_RTC_Init+0x48>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80019a8:	4b0d      	ldr	r3, [pc, #52]	; (80019e0 <MX_RTC_Init+0x48>)
 80019aa:	227f      	movs	r2, #127	; 0x7f
 80019ac:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80019ae:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <MX_RTC_Init+0x48>)
 80019b0:	22ff      	movs	r2, #255	; 0xff
 80019b2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80019b4:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <MX_RTC_Init+0x48>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80019ba:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <MX_RTC_Init+0x48>)
 80019bc:	2200      	movs	r2, #0
 80019be:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80019c0:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <MX_RTC_Init+0x48>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <MX_RTC_Init+0x48>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80019cc:	4804      	ldr	r0, [pc, #16]	; (80019e0 <MX_RTC_Init+0x48>)
 80019ce:	f003 fc6d 	bl	80052ac <HAL_RTC_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80019d8:	f7ff ffd8 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80019dc:	bf00      	nop
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20004278 	.word	0x20004278
 80019e4:	40002800 	.word	0x40002800

080019e8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b0a4      	sub	sp, #144	; 0x90
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019f0:	f107 0308 	add.w	r3, r7, #8
 80019f4:	2288      	movs	r2, #136	; 0x88
 80019f6:	2100      	movs	r1, #0
 80019f8:	4618      	mov	r0, r3
 80019fa:	f006 f8f7 	bl	8007bec <memset>
  if(rtcHandle->Instance==RTC)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a10      	ldr	r2, [pc, #64]	; (8001a44 <HAL_RTC_MspInit+0x5c>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d118      	bne.n	8001a3a <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001a08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a0c:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001a0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a16:	f107 0308 	add.w	r3, r7, #8
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f002 ff8a 	bl	8004934 <HAL_RCCEx_PeriphCLKConfig>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001a26:	f7ff ffb1 	bl	800198c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a2a:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <HAL_RTC_MspInit+0x60>)
 8001a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a30:	4a05      	ldr	r2, [pc, #20]	; (8001a48 <HAL_RTC_MspInit+0x60>)
 8001a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001a3a:	bf00      	nop
 8001a3c:	3790      	adds	r7, #144	; 0x90
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40002800 	.word	0x40002800
 8001a48:	40021000 	.word	0x40021000

08001a4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a52:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <HAL_MspInit+0x44>)
 8001a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a56:	4a0e      	ldr	r2, [pc, #56]	; (8001a90 <HAL_MspInit+0x44>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	6613      	str	r3, [r2, #96]	; 0x60
 8001a5e:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <HAL_MspInit+0x44>)
 8001a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	607b      	str	r3, [r7, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a6a:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <HAL_MspInit+0x44>)
 8001a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6e:	4a08      	ldr	r2, [pc, #32]	; (8001a90 <HAL_MspInit+0x44>)
 8001a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a74:	6593      	str	r3, [r2, #88]	; 0x58
 8001a76:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <HAL_MspInit+0x44>)
 8001a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7e:	603b      	str	r3, [r7, #0]
 8001a80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	40021000 	.word	0x40021000

08001a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a98:	e7fe      	b.n	8001a98 <NMI_Handler+0x4>

08001a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a9e:	e7fe      	b.n	8001a9e <HardFault_Handler+0x4>

08001aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <MemManage_Handler+0x4>

08001aa6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aaa:	e7fe      	b.n	8001aaa <BusFault_Handler+0x4>

08001aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab0:	e7fe      	b.n	8001ab0 <UsageFault_Handler+0x4>

08001ab2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ae0:	f000 fb4a 	bl	8002178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001aec:	4802      	ldr	r0, [pc, #8]	; (8001af8 <TIM2_IRQHandler+0x10>)
 8001aee:	f003 fdb7 	bl	8005660 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	200042a0 	.word	0x200042a0

08001afc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001b00:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b04:	f002 f89a 	bl	8003c3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b08:	bf00      	nop
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
	return 1;
 8001b10:	2301      	movs	r3, #1
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <_kill>:

int _kill(int pid, int sig)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b26:	f006 f837 	bl	8007b98 <__errno>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2216      	movs	r2, #22
 8001b2e:	601a      	str	r2, [r3, #0]
	return -1;
 8001b30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <_exit>:

void _exit (int status)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b44:	f04f 31ff 	mov.w	r1, #4294967295
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff ffe7 	bl	8001b1c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b4e:	e7fe      	b.n	8001b4e <_exit+0x12>

08001b50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	e00a      	b.n	8001b78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b62:	f3af 8000 	nop.w
 8001b66:	4601      	mov	r1, r0
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	1c5a      	adds	r2, r3, #1
 8001b6c:	60ba      	str	r2, [r7, #8]
 8001b6e:	b2ca      	uxtb	r2, r1
 8001b70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	3301      	adds	r3, #1
 8001b76:	617b      	str	r3, [r7, #20]
 8001b78:	697a      	ldr	r2, [r7, #20]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	dbf0      	blt.n	8001b62 <_read+0x12>
	}

return len;
 8001b80:	687b      	ldr	r3, [r7, #4]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3718      	adds	r7, #24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b086      	sub	sp, #24
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	60f8      	str	r0, [r7, #12]
 8001b92:	60b9      	str	r1, [r7, #8]
 8001b94:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
 8001b9a:	e009      	b.n	8001bb0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	1c5a      	adds	r2, r3, #1
 8001ba0:	60ba      	str	r2, [r7, #8]
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	3301      	adds	r3, #1
 8001bae:	617b      	str	r3, [r7, #20]
 8001bb0:	697a      	ldr	r2, [r7, #20]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	dbf1      	blt.n	8001b9c <_write+0x12>
	}
	return len;
 8001bb8:	687b      	ldr	r3, [r7, #4]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3718      	adds	r7, #24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <_close>:

int _close(int file)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
	return -1;
 8001bca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
 8001be2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bea:	605a      	str	r2, [r3, #4]
	return 0;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <_isatty>:

int _isatty(int file)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
	return 1;
 8001c02:	2301      	movs	r3, #1
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
	return 0;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
	...

08001c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c34:	4a14      	ldr	r2, [pc, #80]	; (8001c88 <_sbrk+0x5c>)
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <_sbrk+0x60>)
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c40:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <_sbrk+0x64>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d102      	bne.n	8001c4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c48:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <_sbrk+0x64>)
 8001c4a:	4a12      	ldr	r2, [pc, #72]	; (8001c94 <_sbrk+0x68>)
 8001c4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c4e:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <_sbrk+0x64>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d207      	bcs.n	8001c6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c5c:	f005 ff9c 	bl	8007b98 <__errno>
 8001c60:	4603      	mov	r3, r0
 8001c62:	220c      	movs	r2, #12
 8001c64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c66:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6a:	e009      	b.n	8001c80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c6c:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <_sbrk+0x64>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c72:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <_sbrk+0x64>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4413      	add	r3, r2
 8001c7a:	4a05      	ldr	r2, [pc, #20]	; (8001c90 <_sbrk+0x64>)
 8001c7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20018000 	.word	0x20018000
 8001c8c:	00000400 	.word	0x00000400
 8001c90:	2000429c 	.word	0x2000429c
 8001c94:	20004458 	.word	0x20004458

08001c98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c9c:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <SystemInit+0x20>)
 8001c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ca2:	4a05      	ldr	r2, [pc, #20]	; (8001cb8 <SystemInit+0x20>)
 8001ca4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ca8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b088      	sub	sp, #32
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cc2:	f107 0310 	add.w	r3, r7, #16
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	605a      	str	r2, [r3, #4]
 8001ccc:	609a      	str	r2, [r3, #8]
 8001cce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd0:	1d3b      	adds	r3, r7, #4
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cda:	4b1e      	ldr	r3, [pc, #120]	; (8001d54 <MX_TIM2_Init+0x98>)
 8001cdc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ce0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8001ce2:	4b1c      	ldr	r3, [pc, #112]	; (8001d54 <MX_TIM2_Init+0x98>)
 8001ce4:	2207      	movs	r2, #7
 8001ce6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce8:	4b1a      	ldr	r3, [pc, #104]	; (8001d54 <MX_TIM2_Init+0x98>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001cee:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <MX_TIM2_Init+0x98>)
 8001cf0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cf4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cf6:	4b17      	ldr	r3, [pc, #92]	; (8001d54 <MX_TIM2_Init+0x98>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cfc:	4b15      	ldr	r3, [pc, #84]	; (8001d54 <MX_TIM2_Init+0x98>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d02:	4814      	ldr	r0, [pc, #80]	; (8001d54 <MX_TIM2_Init+0x98>)
 8001d04:	f003 fbe4 	bl	80054d0 <HAL_TIM_Base_Init>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001d0e:	f7ff fe3d 	bl	800198c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d18:	f107 0310 	add.w	r3, r7, #16
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	480d      	ldr	r0, [pc, #52]	; (8001d54 <MX_TIM2_Init+0x98>)
 8001d20:	f003 fdbd 	bl	800589e <HAL_TIM_ConfigClockSource>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001d2a:	f7ff fe2f 	bl	800198c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d32:	2300      	movs	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d36:	1d3b      	adds	r3, r7, #4
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4806      	ldr	r0, [pc, #24]	; (8001d54 <MX_TIM2_Init+0x98>)
 8001d3c:	f003 ffde 	bl	8005cfc <HAL_TIMEx_MasterConfigSynchronization>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001d46:	f7ff fe21 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d4a:	bf00      	nop
 8001d4c:	3720      	adds	r7, #32
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	200042a0 	.word	0x200042a0

08001d58 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b088      	sub	sp, #32
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d5e:	f107 0310 	add.w	r3, r7, #16
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]
 8001d68:	609a      	str	r2, [r3, #8]
 8001d6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d6c:	1d3b      	adds	r3, r7, #4
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d76:	4b1e      	ldr	r3, [pc, #120]	; (8001df0 <MX_TIM3_Init+0x98>)
 8001d78:	4a1e      	ldr	r2, [pc, #120]	; (8001df4 <MX_TIM3_Init+0x9c>)
 8001d7a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8000-1;
 8001d7c:	4b1c      	ldr	r3, [pc, #112]	; (8001df0 <MX_TIM3_Init+0x98>)
 8001d7e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001d82:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d84:	4b1a      	ldr	r3, [pc, #104]	; (8001df0 <MX_TIM3_Init+0x98>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8001d8a:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <MX_TIM3_Init+0x98>)
 8001d8c:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001d90:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d92:	4b17      	ldr	r3, [pc, #92]	; (8001df0 <MX_TIM3_Init+0x98>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d98:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <MX_TIM3_Init+0x98>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d9e:	4814      	ldr	r0, [pc, #80]	; (8001df0 <MX_TIM3_Init+0x98>)
 8001da0:	f003 fb96 	bl	80054d0 <HAL_TIM_Base_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001daa:	f7ff fdef 	bl	800198c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001db2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001db4:	f107 0310 	add.w	r3, r7, #16
 8001db8:	4619      	mov	r1, r3
 8001dba:	480d      	ldr	r0, [pc, #52]	; (8001df0 <MX_TIM3_Init+0x98>)
 8001dbc:	f003 fd6f 	bl	800589e <HAL_TIM_ConfigClockSource>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001dc6:	f7ff fde1 	bl	800198c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001dd2:	1d3b      	adds	r3, r7, #4
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4806      	ldr	r0, [pc, #24]	; (8001df0 <MX_TIM3_Init+0x98>)
 8001dd8:	f003 ff90 	bl	8005cfc <HAL_TIMEx_MasterConfigSynchronization>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001de2:	f7ff fdd3 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001de6:	bf00      	nop
 8001de8:	3720      	adds	r7, #32
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	200042ec 	.word	0x200042ec
 8001df4:	40000400 	.word	0x40000400

08001df8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e08:	d114      	bne.n	8001e34 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e0a:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <HAL_TIM_Base_MspInit+0x68>)
 8001e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0e:	4a14      	ldr	r2, [pc, #80]	; (8001e60 <HAL_TIM_Base_MspInit+0x68>)
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	6593      	str	r3, [r2, #88]	; 0x58
 8001e16:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <HAL_TIM_Base_MspInit+0x68>)
 8001e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2100      	movs	r1, #0
 8001e26:	201c      	movs	r0, #28
 8001e28:	f001 fcf7 	bl	800381a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e2c:	201c      	movs	r0, #28
 8001e2e:	f001 fd10 	bl	8003852 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001e32:	e010      	b.n	8001e56 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a0a      	ldr	r2, [pc, #40]	; (8001e64 <HAL_TIM_Base_MspInit+0x6c>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d10b      	bne.n	8001e56 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e3e:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <HAL_TIM_Base_MspInit+0x68>)
 8001e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e42:	4a07      	ldr	r2, [pc, #28]	; (8001e60 <HAL_TIM_Base_MspInit+0x68>)
 8001e44:	f043 0302 	orr.w	r3, r3, #2
 8001e48:	6593      	str	r3, [r2, #88]	; 0x58
 8001e4a:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <HAL_TIM_Base_MspInit+0x68>)
 8001e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	60bb      	str	r3, [r7, #8]
 8001e54:	68bb      	ldr	r3, [r7, #8]
}
 8001e56:	bf00      	nop
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40000400 	.word	0x40000400

08001e68 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e6c:	4b14      	ldr	r3, [pc, #80]	; (8001ec0 <MX_USART1_UART_Init+0x58>)
 8001e6e:	4a15      	ldr	r2, [pc, #84]	; (8001ec4 <MX_USART1_UART_Init+0x5c>)
 8001e70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001e72:	4b13      	ldr	r3, [pc, #76]	; (8001ec0 <MX_USART1_UART_Init+0x58>)
 8001e74:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001e78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e7a:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <MX_USART1_UART_Init+0x58>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e80:	4b0f      	ldr	r3, [pc, #60]	; (8001ec0 <MX_USART1_UART_Init+0x58>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e86:	4b0e      	ldr	r3, [pc, #56]	; (8001ec0 <MX_USART1_UART_Init+0x58>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ec0 <MX_USART1_UART_Init+0x58>)
 8001e8e:	220c      	movs	r2, #12
 8001e90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e92:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <MX_USART1_UART_Init+0x58>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e98:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <MX_USART1_UART_Init+0x58>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e9e:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <MX_USART1_UART_Init+0x58>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ea4:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <MX_USART1_UART_Init+0x58>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001eaa:	4805      	ldr	r0, [pc, #20]	; (8001ec0 <MX_USART1_UART_Init+0x58>)
 8001eac:	f003 ffcc 	bl	8005e48 <HAL_UART_Init>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001eb6:	f7ff fd69 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20004338 	.word	0x20004338
 8001ec4:	40013800 	.word	0x40013800

08001ec8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ecc:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <MX_USART2_UART_Init+0x58>)
 8001ece:	4a15      	ldr	r2, [pc, #84]	; (8001f24 <MX_USART2_UART_Init+0x5c>)
 8001ed0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8001ed2:	4b13      	ldr	r3, [pc, #76]	; (8001f20 <MX_USART2_UART_Init+0x58>)
 8001ed4:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001ed8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001eda:	4b11      	ldr	r3, [pc, #68]	; (8001f20 <MX_USART2_UART_Init+0x58>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <MX_USART2_UART_Init+0x58>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ee6:	4b0e      	ldr	r3, [pc, #56]	; (8001f20 <MX_USART2_UART_Init+0x58>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8001eec:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <MX_USART2_UART_Init+0x58>)
 8001eee:	2208      	movs	r2, #8
 8001ef0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ef2:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <MX_USART2_UART_Init+0x58>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ef8:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <MX_USART2_UART_Init+0x58>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001efe:	4b08      	ldr	r3, [pc, #32]	; (8001f20 <MX_USART2_UART_Init+0x58>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f04:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <MX_USART2_UART_Init+0x58>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f0a:	4805      	ldr	r0, [pc, #20]	; (8001f20 <MX_USART2_UART_Init+0x58>)
 8001f0c:	f003 ff9c 	bl	8005e48 <HAL_UART_Init>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001f16:	f7ff fd39 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	200043bc 	.word	0x200043bc
 8001f24:	40004400 	.word	0x40004400

08001f28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b0ae      	sub	sp, #184	; 0xb8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f30:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
 8001f3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f40:	f107 031c 	add.w	r3, r7, #28
 8001f44:	2288      	movs	r2, #136	; 0x88
 8001f46:	2100      	movs	r1, #0
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f005 fe4f 	bl	8007bec <memset>
  if(uartHandle->Instance==USART1)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a43      	ldr	r2, [pc, #268]	; (8002060 <HAL_UART_MspInit+0x138>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d13d      	bne.n	8001fd4 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f60:	f107 031c 	add.w	r3, r7, #28
 8001f64:	4618      	mov	r0, r3
 8001f66:	f002 fce5 	bl	8004934 <HAL_RCCEx_PeriphCLKConfig>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f70:	f7ff fd0c 	bl	800198c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f74:	4b3b      	ldr	r3, [pc, #236]	; (8002064 <HAL_UART_MspInit+0x13c>)
 8001f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f78:	4a3a      	ldr	r2, [pc, #232]	; (8002064 <HAL_UART_MspInit+0x13c>)
 8001f7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f7e:	6613      	str	r3, [r2, #96]	; 0x60
 8001f80:	4b38      	ldr	r3, [pc, #224]	; (8002064 <HAL_UART_MspInit+0x13c>)
 8001f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f88:	61bb      	str	r3, [r7, #24]
 8001f8a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8c:	4b35      	ldr	r3, [pc, #212]	; (8002064 <HAL_UART_MspInit+0x13c>)
 8001f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f90:	4a34      	ldr	r2, [pc, #208]	; (8002064 <HAL_UART_MspInit+0x13c>)
 8001f92:	f043 0301 	orr.w	r3, r3, #1
 8001f96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f98:	4b32      	ldr	r3, [pc, #200]	; (8002064 <HAL_UART_MspInit+0x13c>)
 8001f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001fa4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001fa8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fac:	2302      	movs	r3, #2
 8001fae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fbe:	2307      	movs	r3, #7
 8001fc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001fc8:	4619      	mov	r1, r3
 8001fca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fce:	f001 fc5b 	bl	8003888 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001fd2:	e040      	b.n	8002056 <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART2)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a23      	ldr	r2, [pc, #140]	; (8002068 <HAL_UART_MspInit+0x140>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d13b      	bne.n	8002056 <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fe6:	f107 031c 	add.w	r3, r7, #28
 8001fea:	4618      	mov	r0, r3
 8001fec:	f002 fca2 	bl	8004934 <HAL_RCCEx_PeriphCLKConfig>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8001ff6:	f7ff fcc9 	bl	800198c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ffa:	4b1a      	ldr	r3, [pc, #104]	; (8002064 <HAL_UART_MspInit+0x13c>)
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffe:	4a19      	ldr	r2, [pc, #100]	; (8002064 <HAL_UART_MspInit+0x13c>)
 8002000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002004:	6593      	str	r3, [r2, #88]	; 0x58
 8002006:	4b17      	ldr	r3, [pc, #92]	; (8002064 <HAL_UART_MspInit+0x13c>)
 8002008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200e:	613b      	str	r3, [r7, #16]
 8002010:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002012:	4b14      	ldr	r3, [pc, #80]	; (8002064 <HAL_UART_MspInit+0x13c>)
 8002014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002016:	4a13      	ldr	r2, [pc, #76]	; (8002064 <HAL_UART_MspInit+0x13c>)
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800201e:	4b11      	ldr	r3, [pc, #68]	; (8002064 <HAL_UART_MspInit+0x13c>)
 8002020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800202a:	230c      	movs	r3, #12
 800202c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002030:	2302      	movs	r3, #2
 8002032:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203c:	2303      	movs	r3, #3
 800203e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002042:	2307      	movs	r3, #7
 8002044:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002048:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800204c:	4619      	mov	r1, r3
 800204e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002052:	f001 fc19 	bl	8003888 <HAL_GPIO_Init>
}
 8002056:	bf00      	nop
 8002058:	37b8      	adds	r7, #184	; 0xb8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40013800 	.word	0x40013800
 8002064:	40021000 	.word	0x40021000
 8002068:	40004400 	.word	0x40004400

0800206c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800206c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002070:	f7ff fe12 	bl	8001c98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002074:	480c      	ldr	r0, [pc, #48]	; (80020a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002076:	490d      	ldr	r1, [pc, #52]	; (80020ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8002078:	4a0d      	ldr	r2, [pc, #52]	; (80020b0 <LoopForever+0xe>)
  movs r3, #0
 800207a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800207c:	e002      	b.n	8002084 <LoopCopyDataInit>

0800207e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800207e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002080:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002082:	3304      	adds	r3, #4

08002084 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002084:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002086:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002088:	d3f9      	bcc.n	800207e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800208a:	4a0a      	ldr	r2, [pc, #40]	; (80020b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800208c:	4c0a      	ldr	r4, [pc, #40]	; (80020b8 <LoopForever+0x16>)
  movs r3, #0
 800208e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002090:	e001      	b.n	8002096 <LoopFillZerobss>

08002092 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002092:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002094:	3204      	adds	r2, #4

08002096 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002096:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002098:	d3fb      	bcc.n	8002092 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800209a:	f005 fd83 	bl	8007ba4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800209e:	f7ff f93f 	bl	8001320 <main>

080020a2 <LoopForever>:

LoopForever:
    b LoopForever
 80020a2:	e7fe      	b.n	80020a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80020a4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80020a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020ac:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80020b0:	0800f8ac 	.word	0x0800f8ac
  ldr r2, =_sbss
 80020b4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80020b8:	20004454 	.word	0x20004454

080020bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020bc:	e7fe      	b.n	80020bc <ADC1_2_IRQHandler>
	...

080020c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020c6:	2300      	movs	r3, #0
 80020c8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020ca:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <HAL_Init+0x3c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a0b      	ldr	r2, [pc, #44]	; (80020fc <HAL_Init+0x3c>)
 80020d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020d6:	2003      	movs	r0, #3
 80020d8:	f001 fb94 	bl	8003804 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020dc:	2000      	movs	r0, #0
 80020de:	f000 f80f 	bl	8002100 <HAL_InitTick>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d002      	beq.n	80020ee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	71fb      	strb	r3, [r7, #7]
 80020ec:	e001      	b.n	80020f2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020ee:	f7ff fcad 	bl	8001a4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020f2:	79fb      	ldrb	r3, [r7, #7]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40022000 	.word	0x40022000

08002100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002108:	2300      	movs	r3, #0
 800210a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800210c:	4b17      	ldr	r3, [pc, #92]	; (800216c <HAL_InitTick+0x6c>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d023      	beq.n	800215c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002114:	4b16      	ldr	r3, [pc, #88]	; (8002170 <HAL_InitTick+0x70>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4b14      	ldr	r3, [pc, #80]	; (800216c <HAL_InitTick+0x6c>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	4619      	mov	r1, r3
 800211e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002122:	fbb3 f3f1 	udiv	r3, r3, r1
 8002126:	fbb2 f3f3 	udiv	r3, r2, r3
 800212a:	4618      	mov	r0, r3
 800212c:	f001 fb9f 	bl	800386e <HAL_SYSTICK_Config>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10f      	bne.n	8002156 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b0f      	cmp	r3, #15
 800213a:	d809      	bhi.n	8002150 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800213c:	2200      	movs	r2, #0
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	f04f 30ff 	mov.w	r0, #4294967295
 8002144:	f001 fb69 	bl	800381a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002148:	4a0a      	ldr	r2, [pc, #40]	; (8002174 <HAL_InitTick+0x74>)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	e007      	b.n	8002160 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	73fb      	strb	r3, [r7, #15]
 8002154:	e004      	b.n	8002160 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	73fb      	strb	r3, [r7, #15]
 800215a:	e001      	b.n	8002160 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002160:	7bfb      	ldrb	r3, [r7, #15]
}
 8002162:	4618      	mov	r0, r3
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000008 	.word	0x20000008
 8002170:	20000000 	.word	0x20000000
 8002174:	20000004 	.word	0x20000004

08002178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800217c:	4b06      	ldr	r3, [pc, #24]	; (8002198 <HAL_IncTick+0x20>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	461a      	mov	r2, r3
 8002182:	4b06      	ldr	r3, [pc, #24]	; (800219c <HAL_IncTick+0x24>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4413      	add	r3, r2
 8002188:	4a04      	ldr	r2, [pc, #16]	; (800219c <HAL_IncTick+0x24>)
 800218a:	6013      	str	r3, [r2, #0]
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	20000008 	.word	0x20000008
 800219c:	20004440 	.word	0x20004440

080021a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return uwTick;
 80021a4:	4b03      	ldr	r3, [pc, #12]	; (80021b4 <HAL_GetTick+0x14>)
 80021a6:	681b      	ldr	r3, [r3, #0]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	20004440 	.word	0x20004440

080021b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021c0:	f7ff ffee 	bl	80021a0 <HAL_GetTick>
 80021c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d0:	d005      	beq.n	80021de <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80021d2:	4b0a      	ldr	r3, [pc, #40]	; (80021fc <HAL_Delay+0x44>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	461a      	mov	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4413      	add	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021de:	bf00      	nop
 80021e0:	f7ff ffde 	bl	80021a0 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d8f7      	bhi.n	80021e0 <HAL_Delay+0x28>
  {

  }
}
 80021f0:	bf00      	nop
 80021f2:	bf00      	nop
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20000008 	.word	0x20000008

08002200 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	431a      	orrs	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	609a      	str	r2, [r3, #8]
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	609a      	str	r2, [r3, #8]
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800225c:	4618      	mov	r0, r3
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002268:	b480      	push	{r7}
 800226a:	b087      	sub	sp, #28
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
 8002274:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	3360      	adds	r3, #96	; 0x60
 800227a:	461a      	mov	r2, r3
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4b08      	ldr	r3, [pc, #32]	; (80022ac <LL_ADC_SetOffset+0x44>)
 800228a:	4013      	ands	r3, r2
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	430a      	orrs	r2, r1
 8002296:	4313      	orrs	r3, r2
 8002298:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80022a0:	bf00      	nop
 80022a2:	371c      	adds	r7, #28
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	03fff000 	.word	0x03fff000

080022b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3360      	adds	r3, #96	; 0x60
 80022be:	461a      	mov	r2, r3
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3714      	adds	r7, #20
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80022dc:	b480      	push	{r7}
 80022de:	b087      	sub	sp, #28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	3360      	adds	r3, #96	; 0x60
 80022ec:	461a      	mov	r2, r3
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	4413      	add	r3, r2
 80022f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	431a      	orrs	r2, r3
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002306:	bf00      	nop
 8002308:	371c      	adds	r7, #28
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002326:	2301      	movs	r3, #1
 8002328:	e000      	b.n	800232c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002338:	b480      	push	{r7}
 800233a:	b087      	sub	sp, #28
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	3330      	adds	r3, #48	; 0x30
 8002348:	461a      	mov	r2, r3
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	0a1b      	lsrs	r3, r3, #8
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	f003 030c 	and.w	r3, r3, #12
 8002354:	4413      	add	r3, r2
 8002356:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	f003 031f 	and.w	r3, r3, #31
 8002362:	211f      	movs	r1, #31
 8002364:	fa01 f303 	lsl.w	r3, r1, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	401a      	ands	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	0e9b      	lsrs	r3, r3, #26
 8002370:	f003 011f 	and.w	r1, r3, #31
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	f003 031f 	and.w	r3, r3, #31
 800237a:	fa01 f303 	lsl.w	r3, r1, r3
 800237e:	431a      	orrs	r2, r3
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002384:	bf00      	nop
 8002386:	371c      	adds	r7, #28
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002390:	b480      	push	{r7}
 8002392:	b087      	sub	sp, #28
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	3314      	adds	r3, #20
 80023a0:	461a      	mov	r2, r3
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	0e5b      	lsrs	r3, r3, #25
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	4413      	add	r3, r2
 80023ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	0d1b      	lsrs	r3, r3, #20
 80023b8:	f003 031f 	and.w	r3, r3, #31
 80023bc:	2107      	movs	r1, #7
 80023be:	fa01 f303 	lsl.w	r3, r1, r3
 80023c2:	43db      	mvns	r3, r3
 80023c4:	401a      	ands	r2, r3
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	0d1b      	lsrs	r3, r3, #20
 80023ca:	f003 031f 	and.w	r3, r3, #31
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	fa01 f303 	lsl.w	r3, r1, r3
 80023d4:	431a      	orrs	r2, r3
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80023da:	bf00      	nop
 80023dc:	371c      	adds	r7, #28
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
	...

080023e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002400:	43db      	mvns	r3, r3
 8002402:	401a      	ands	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f003 0318 	and.w	r3, r3, #24
 800240a:	4908      	ldr	r1, [pc, #32]	; (800242c <LL_ADC_SetChannelSingleDiff+0x44>)
 800240c:	40d9      	lsrs	r1, r3
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	400b      	ands	r3, r1
 8002412:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002416:	431a      	orrs	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800241e:	bf00      	nop
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	0007ffff 	.word	0x0007ffff

08002430 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 031f 	and.w	r3, r3, #31
}
 8002440:	4618      	mov	r0, r3
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800245c:	4618      	mov	r0, r3
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002478:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6093      	str	r3, [r2, #8]
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800249c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024a0:	d101      	bne.n	80024a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80024a2:	2301      	movs	r3, #1
 80024a4:	e000      	b.n	80024a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80024c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024f0:	d101      	bne.n	80024f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80024f2:	2301      	movs	r3, #1
 80024f4:	e000      	b.n	80024f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002514:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002518:	f043 0201 	orr.w	r2, r3, #1
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	2b01      	cmp	r3, #1
 800253e:	d101      	bne.n	8002544 <LL_ADC_IsEnabled+0x18>
 8002540:	2301      	movs	r3, #1
 8002542:	e000      	b.n	8002546 <LL_ADC_IsEnabled+0x1a>
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002562:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002566:	f043 0204 	orr.w	r2, r3, #4
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 0304 	and.w	r3, r3, #4
 800258a:	2b04      	cmp	r3, #4
 800258c:	d101      	bne.n	8002592 <LL_ADC_REG_IsConversionOngoing+0x18>
 800258e:	2301      	movs	r3, #1
 8002590:	e000      	b.n	8002594 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f003 0308 	and.w	r3, r3, #8
 80025b0:	2b08      	cmp	r3, #8
 80025b2:	d101      	bne.n	80025b8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80025b4:	2301      	movs	r3, #1
 80025b6:	e000      	b.n	80025ba <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
	...

080025c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025c8:	b590      	push	{r4, r7, lr}
 80025ca:	b089      	sub	sp, #36	; 0x24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025d0:	2300      	movs	r3, #0
 80025d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e136      	b.n	8002850 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d109      	bne.n	8002604 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f7fe fd77 	bl	80010e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff ff3f 	bl	800248c <LL_ADC_IsDeepPowerDownEnabled>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d004      	beq.n	800261e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff ff25 	bl	8002468 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff ff5a 	bl	80024dc <LL_ADC_IsInternalRegulatorEnabled>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d115      	bne.n	800265a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff ff3e 	bl	80024b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002638:	4b87      	ldr	r3, [pc, #540]	; (8002858 <HAL_ADC_Init+0x290>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	099b      	lsrs	r3, r3, #6
 800263e:	4a87      	ldr	r2, [pc, #540]	; (800285c <HAL_ADC_Init+0x294>)
 8002640:	fba2 2303 	umull	r2, r3, r2, r3
 8002644:	099b      	lsrs	r3, r3, #6
 8002646:	3301      	adds	r3, #1
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800264c:	e002      	b.n	8002654 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	3b01      	subs	r3, #1
 8002652:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1f9      	bne.n	800264e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff ff3c 	bl	80024dc <LL_ADC_IsInternalRegulatorEnabled>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10d      	bne.n	8002686 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266e:	f043 0210 	orr.w	r2, r3, #16
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267a:	f043 0201 	orr.w	r2, r3, #1
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff ff75 	bl	800257a <LL_ADC_REG_IsConversionOngoing>
 8002690:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002696:	f003 0310 	and.w	r3, r3, #16
 800269a:	2b00      	cmp	r3, #0
 800269c:	f040 80cf 	bne.w	800283e <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f040 80cb 	bne.w	800283e <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80026b0:	f043 0202 	orr.w	r2, r3, #2
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff ff35 	bl	800252c <LL_ADC_IsEnabled>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d115      	bne.n	80026f4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026c8:	4865      	ldr	r0, [pc, #404]	; (8002860 <HAL_ADC_Init+0x298>)
 80026ca:	f7ff ff2f 	bl	800252c <LL_ADC_IsEnabled>
 80026ce:	4604      	mov	r4, r0
 80026d0:	4864      	ldr	r0, [pc, #400]	; (8002864 <HAL_ADC_Init+0x29c>)
 80026d2:	f7ff ff2b 	bl	800252c <LL_ADC_IsEnabled>
 80026d6:	4603      	mov	r3, r0
 80026d8:	431c      	orrs	r4, r3
 80026da:	4863      	ldr	r0, [pc, #396]	; (8002868 <HAL_ADC_Init+0x2a0>)
 80026dc:	f7ff ff26 	bl	800252c <LL_ADC_IsEnabled>
 80026e0:	4603      	mov	r3, r0
 80026e2:	4323      	orrs	r3, r4
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d105      	bne.n	80026f4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	4619      	mov	r1, r3
 80026ee:	485f      	ldr	r0, [pc, #380]	; (800286c <HAL_ADC_Init+0x2a4>)
 80026f0:	f7ff fd86 	bl	8002200 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	7e5b      	ldrb	r3, [r3, #25]
 80026f8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026fe:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002704:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800270a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002712:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002714:	4313      	orrs	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d106      	bne.n	8002730 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	3b01      	subs	r3, #1
 8002728:	045b      	lsls	r3, r3, #17
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4313      	orrs	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002734:	2b00      	cmp	r3, #0
 8002736:	d009      	beq.n	800274c <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002744:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4313      	orrs	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68da      	ldr	r2, [r3, #12]
 8002752:	4b47      	ldr	r3, [pc, #284]	; (8002870 <HAL_ADC_Init+0x2a8>)
 8002754:	4013      	ands	r3, r2
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6812      	ldr	r2, [r2, #0]
 800275a:	69b9      	ldr	r1, [r7, #24]
 800275c:	430b      	orrs	r3, r1
 800275e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff ff08 	bl	800257a <LL_ADC_REG_IsConversionOngoing>
 800276a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff ff15 	bl	80025a0 <LL_ADC_INJ_IsConversionOngoing>
 8002776:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d13d      	bne.n	80027fa <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d13a      	bne.n	80027fa <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002788:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002790:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002792:	4313      	orrs	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027a0:	f023 0302 	bic.w	r3, r3, #2
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	6812      	ldr	r2, [r2, #0]
 80027a8:	69b9      	ldr	r1, [r7, #24]
 80027aa:	430b      	orrs	r3, r1
 80027ac:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d118      	bne.n	80027ea <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80027c2:	f023 0304 	bic.w	r3, r3, #4
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027ce:	4311      	orrs	r1, r2
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80027d4:	4311      	orrs	r1, r2
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80027da:	430a      	orrs	r2, r1
 80027dc:	431a      	orrs	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f042 0201 	orr.w	r2, r2, #1
 80027e6:	611a      	str	r2, [r3, #16]
 80027e8:	e007      	b.n	80027fa <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	691a      	ldr	r2, [r3, #16]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 0201 	bic.w	r2, r2, #1
 80027f8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d10c      	bne.n	800281c <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002808:	f023 010f 	bic.w	r1, r3, #15
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	1e5a      	subs	r2, r3, #1
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	631a      	str	r2, [r3, #48]	; 0x30
 800281a:	e007      	b.n	800282c <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 020f 	bic.w	r2, r2, #15
 800282a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002830:	f023 0303 	bic.w	r3, r3, #3
 8002834:	f043 0201 	orr.w	r2, r3, #1
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	655a      	str	r2, [r3, #84]	; 0x54
 800283c:	e007      	b.n	800284e <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002842:	f043 0210 	orr.w	r2, r3, #16
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800284e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002850:	4618      	mov	r0, r3
 8002852:	3724      	adds	r7, #36	; 0x24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd90      	pop	{r4, r7, pc}
 8002858:	20000000 	.word	0x20000000
 800285c:	053e2d63 	.word	0x053e2d63
 8002860:	50040000 	.word	0x50040000
 8002864:	50040100 	.word	0x50040100
 8002868:	50040200 	.word	0x50040200
 800286c:	50040300 	.word	0x50040300
 8002870:	fff0c007 	.word	0xfff0c007

08002874 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800287c:	4857      	ldr	r0, [pc, #348]	; (80029dc <HAL_ADC_Start+0x168>)
 800287e:	f7ff fdd7 	bl	8002430 <LL_ADC_GetMultimode>
 8002882:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff fe76 	bl	800257a <LL_ADC_REG_IsConversionOngoing>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	f040 809c 	bne.w	80029ce <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800289c:	2b01      	cmp	r3, #1
 800289e:	d101      	bne.n	80028a4 <HAL_ADC_Start+0x30>
 80028a0:	2302      	movs	r3, #2
 80028a2:	e097      	b.n	80029d4 <HAL_ADC_Start+0x160>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 fd7d 	bl	80033ac <ADC_Enable>
 80028b2:	4603      	mov	r3, r0
 80028b4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80028b6:	7dfb      	ldrb	r3, [r7, #23]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f040 8083 	bne.w	80029c4 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028c6:	f023 0301 	bic.w	r3, r3, #1
 80028ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a42      	ldr	r2, [pc, #264]	; (80029e0 <HAL_ADC_Start+0x16c>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d002      	beq.n	80028e2 <HAL_ADC_Start+0x6e>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	e000      	b.n	80028e4 <HAL_ADC_Start+0x70>
 80028e2:	4b40      	ldr	r3, [pc, #256]	; (80029e4 <HAL_ADC_Start+0x170>)
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6812      	ldr	r2, [r2, #0]
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d002      	beq.n	80028f2 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d105      	bne.n	80028fe <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002902:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800290a:	d106      	bne.n	800291a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002910:	f023 0206 	bic.w	r2, r3, #6
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	659a      	str	r2, [r3, #88]	; 0x58
 8002918:	e002      	b.n	8002920 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	221c      	movs	r2, #28
 8002926:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a2a      	ldr	r2, [pc, #168]	; (80029e0 <HAL_ADC_Start+0x16c>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d002      	beq.n	8002940 <HAL_ADC_Start+0xcc>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	e000      	b.n	8002942 <HAL_ADC_Start+0xce>
 8002940:	4b28      	ldr	r3, [pc, #160]	; (80029e4 <HAL_ADC_Start+0x170>)
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6812      	ldr	r2, [r2, #0]
 8002946:	4293      	cmp	r3, r2
 8002948:	d008      	beq.n	800295c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d005      	beq.n	800295c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	2b05      	cmp	r3, #5
 8002954:	d002      	beq.n	800295c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	2b09      	cmp	r3, #9
 800295a:	d114      	bne.n	8002986 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d007      	beq.n	800297a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002972:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
         LL_ADC_REG_StartConversion(hadc->Instance);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff fde7 	bl	8002552 <LL_ADC_REG_StartConversion>
 8002984:	e025      	b.n	80029d2 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a12      	ldr	r2, [pc, #72]	; (80029e0 <HAL_ADC_Start+0x16c>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d002      	beq.n	80029a2 <HAL_ADC_Start+0x12e>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	e000      	b.n	80029a4 <HAL_ADC_Start+0x130>
 80029a2:	4b10      	ldr	r3, [pc, #64]	; (80029e4 <HAL_ADC_Start+0x170>)
 80029a4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00f      	beq.n	80029d2 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	655a      	str	r2, [r3, #84]	; 0x54
 80029c2:	e006      	b.n	80029d2 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80029cc:	e001      	b.n	80029d2 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80029ce:	2302      	movs	r3, #2
 80029d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80029d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	50040300 	.word	0x50040300
 80029e0:	50040100 	.word	0x50040100
 80029e4:	50040000 	.word	0x50040000

080029e8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b088      	sub	sp, #32
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029f2:	4866      	ldr	r0, [pc, #408]	; (8002b8c <HAL_ADC_PollForConversion+0x1a4>)
 80029f4:	f7ff fd1c 	bl	8002430 <LL_ADC_GetMultimode>
 80029f8:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	2b08      	cmp	r3, #8
 8002a00:	d102      	bne.n	8002a08 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002a02:	2308      	movs	r3, #8
 8002a04:	61fb      	str	r3, [r7, #28]
 8002a06:	e02a      	b.n	8002a5e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d005      	beq.n	8002a1a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	2b05      	cmp	r3, #5
 8002a12:	d002      	beq.n	8002a1a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	2b09      	cmp	r3, #9
 8002a18:	d111      	bne.n	8002a3e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d007      	beq.n	8002a38 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2c:	f043 0220 	orr.w	r2, r3, #32
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e0a4      	b.n	8002b82 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002a38:	2304      	movs	r3, #4
 8002a3a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002a3c:	e00f      	b.n	8002a5e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002a3e:	4853      	ldr	r0, [pc, #332]	; (8002b8c <HAL_ADC_PollForConversion+0x1a4>)
 8002a40:	f7ff fd04 	bl	800244c <LL_ADC_GetMultiDMATransfer>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d007      	beq.n	8002a5a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4e:	f043 0220 	orr.w	r2, r3, #32
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e093      	b.n	8002b82 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002a5a:	2304      	movs	r3, #4
 8002a5c:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002a5e:	f7ff fb9f 	bl	80021a0 <HAL_GetTick>
 8002a62:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a64:	e021      	b.n	8002aaa <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6c:	d01d      	beq.n	8002aaa <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002a6e:	f7ff fb97 	bl	80021a0 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d302      	bcc.n	8002a84 <HAL_ADC_PollForConversion+0x9c>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d112      	bne.n	8002aaa <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10b      	bne.n	8002aaa <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a96:	f043 0204 	orr.w	r2, r3, #4
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e06b      	b.n	8002b82 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d0d6      	beq.n	8002a66 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002abc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff fc22 	bl	8002312 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d01c      	beq.n	8002b0e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	7e5b      	ldrb	r3, [r3, #25]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d118      	bne.n	8002b0e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0308 	and.w	r3, r3, #8
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	d111      	bne.n	8002b0e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d105      	bne.n	8002b0e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b06:	f043 0201 	orr.w	r2, r3, #1
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a1f      	ldr	r2, [pc, #124]	; (8002b90 <HAL_ADC_PollForConversion+0x1a8>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d002      	beq.n	8002b1e <HAL_ADC_PollForConversion+0x136>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	e000      	b.n	8002b20 <HAL_ADC_PollForConversion+0x138>
 8002b1e:	4b1d      	ldr	r3, [pc, #116]	; (8002b94 <HAL_ADC_PollForConversion+0x1ac>)
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	6812      	ldr	r2, [r2, #0]
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d008      	beq.n	8002b3a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d005      	beq.n	8002b3a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	2b05      	cmp	r3, #5
 8002b32:	d002      	beq.n	8002b3a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	2b09      	cmp	r3, #9
 8002b38:	d104      	bne.n	8002b44 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	61bb      	str	r3, [r7, #24]
 8002b42:	e00c      	b.n	8002b5e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a11      	ldr	r2, [pc, #68]	; (8002b90 <HAL_ADC_PollForConversion+0x1a8>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d002      	beq.n	8002b54 <HAL_ADC_PollForConversion+0x16c>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	e000      	b.n	8002b56 <HAL_ADC_PollForConversion+0x16e>
 8002b54:	4b0f      	ldr	r3, [pc, #60]	; (8002b94 <HAL_ADC_PollForConversion+0x1ac>)
 8002b56:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	d104      	bne.n	8002b6e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2208      	movs	r2, #8
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	e008      	b.n	8002b80 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d103      	bne.n	8002b80 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	220c      	movs	r2, #12
 8002b7e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3720      	adds	r7, #32
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	50040300 	.word	0x50040300
 8002b90:	50040100 	.word	0x50040100
 8002b94:	50040000 	.word	0x50040000

08002b98 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
	...

08002bb4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b0b6      	sub	sp, #216	; 0xd8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d101      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x22>
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	e3c7      	b.n	8003366 <HAL_ADC_ConfigChannel+0x7b2>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff fcc9 	bl	800257a <LL_ADC_REG_IsConversionOngoing>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f040 83a8 	bne.w	8003340 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2b05      	cmp	r3, #5
 8002bf6:	d824      	bhi.n	8002c42 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	3b02      	subs	r3, #2
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	d81b      	bhi.n	8002c3a <HAL_ADC_ConfigChannel+0x86>
 8002c02:	a201      	add	r2, pc, #4	; (adr r2, 8002c08 <HAL_ADC_ConfigChannel+0x54>)
 8002c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c08:	08002c19 	.word	0x08002c19
 8002c0c:	08002c21 	.word	0x08002c21
 8002c10:	08002c29 	.word	0x08002c29
 8002c14:	08002c31 	.word	0x08002c31
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	220c      	movs	r2, #12
 8002c1c:	605a      	str	r2, [r3, #4]
          break;
 8002c1e:	e011      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	2212      	movs	r2, #18
 8002c24:	605a      	str	r2, [r3, #4]
          break;
 8002c26:	e00d      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	2218      	movs	r2, #24
 8002c2c:	605a      	str	r2, [r3, #4]
          break;
 8002c2e:	e009      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c36:	605a      	str	r2, [r3, #4]
          break;
 8002c38:	e004      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	2206      	movs	r2, #6
 8002c3e:	605a      	str	r2, [r3, #4]
          break;
 8002c40:	e000      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002c42:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6818      	ldr	r0, [r3, #0]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	6859      	ldr	r1, [r3, #4]
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	461a      	mov	r2, r3
 8002c52:	f7ff fb71 	bl	8002338 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff fc8d 	bl	800257a <LL_ADC_REG_IsConversionOngoing>
 8002c60:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff fc99 	bl	80025a0 <LL_ADC_INJ_IsConversionOngoing>
 8002c6e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c72:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f040 81a6 	bne.w	8002fc8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f040 81a1 	bne.w	8002fc8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6818      	ldr	r0, [r3, #0]
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	6819      	ldr	r1, [r3, #0]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	461a      	mov	r2, r3
 8002c94:	f7ff fb7c 	bl	8002390 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	695a      	ldr	r2, [r3, #20]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	08db      	lsrs	r3, r3, #3
 8002ca4:	f003 0303 	and.w	r3, r3, #3
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	d00a      	beq.n	8002cd0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6818      	ldr	r0, [r3, #0]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	6919      	ldr	r1, [r3, #16]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002cca:	f7ff facd 	bl	8002268 <LL_ADC_SetOffset>
 8002cce:	e17b      	b.n	8002fc8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff faea 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10a      	bne.n	8002cfc <HAL_ADC_ConfigChannel+0x148>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2100      	movs	r1, #0
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff fadf 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	0e9b      	lsrs	r3, r3, #26
 8002cf6:	f003 021f 	and.w	r2, r3, #31
 8002cfa:	e01e      	b.n	8002d3a <HAL_ADC_ConfigChannel+0x186>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2100      	movs	r1, #0
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff fad4 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002d12:	fa93 f3a3 	rbit	r3, r3
 8002d16:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002d1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002d22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002d2a:	2320      	movs	r3, #32
 8002d2c:	e004      	b.n	8002d38 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002d2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d32:	fab3 f383 	clz	r3, r3
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d105      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x19e>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	0e9b      	lsrs	r3, r3, #26
 8002d4c:	f003 031f 	and.w	r3, r3, #31
 8002d50:	e018      	b.n	8002d84 <HAL_ADC_ConfigChannel+0x1d0>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002d5e:	fa93 f3a3 	rbit	r3, r3
 8002d62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002d66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002d6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002d76:	2320      	movs	r3, #32
 8002d78:	e004      	b.n	8002d84 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002d7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002d7e:	fab3 f383 	clz	r3, r3
 8002d82:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d106      	bne.n	8002d96 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	2100      	movs	r1, #0
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff faa3 	bl	80022dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff fa87 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002da2:	4603      	mov	r3, r0
 8002da4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10a      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x20e>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2101      	movs	r1, #1
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff fa7c 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002db8:	4603      	mov	r3, r0
 8002dba:	0e9b      	lsrs	r3, r3, #26
 8002dbc:	f003 021f 	and.w	r2, r3, #31
 8002dc0:	e01e      	b.n	8002e00 <HAL_ADC_ConfigChannel+0x24c>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff fa71 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002dd8:	fa93 f3a3 	rbit	r3, r3
 8002ddc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002de0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002de4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002de8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d101      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002df0:	2320      	movs	r3, #32
 8002df2:	e004      	b.n	8002dfe <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002df4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002df8:	fab3 f383 	clz	r3, r3
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d105      	bne.n	8002e18 <HAL_ADC_ConfigChannel+0x264>
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	0e9b      	lsrs	r3, r3, #26
 8002e12:	f003 031f 	and.w	r3, r3, #31
 8002e16:	e018      	b.n	8002e4a <HAL_ADC_ConfigChannel+0x296>
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e24:	fa93 f3a3 	rbit	r3, r3
 8002e28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002e2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002e34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002e3c:	2320      	movs	r3, #32
 8002e3e:	e004      	b.n	8002e4a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002e40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e44:	fab3 f383 	clz	r3, r3
 8002e48:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d106      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2200      	movs	r2, #0
 8002e54:	2101      	movs	r1, #1
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff fa40 	bl	80022dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2102      	movs	r1, #2
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff fa24 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10a      	bne.n	8002e88 <HAL_ADC_ConfigChannel+0x2d4>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2102      	movs	r1, #2
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff fa19 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	0e9b      	lsrs	r3, r3, #26
 8002e82:	f003 021f 	and.w	r2, r3, #31
 8002e86:	e01e      	b.n	8002ec6 <HAL_ADC_ConfigChannel+0x312>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2102      	movs	r1, #2
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff fa0e 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002e94:	4603      	mov	r3, r0
 8002e96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e9e:	fa93 f3a3 	rbit	r3, r3
 8002ea2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002ea6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002eaa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002eae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002eb6:	2320      	movs	r3, #32
 8002eb8:	e004      	b.n	8002ec4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002eba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ebe:	fab3 f383 	clz	r3, r3
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d105      	bne.n	8002ede <HAL_ADC_ConfigChannel+0x32a>
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	0e9b      	lsrs	r3, r3, #26
 8002ed8:	f003 031f 	and.w	r3, r3, #31
 8002edc:	e016      	b.n	8002f0c <HAL_ADC_ConfigChannel+0x358>
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002eea:	fa93 f3a3 	rbit	r3, r3
 8002eee:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002ef0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ef2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002ef6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002efe:	2320      	movs	r3, #32
 8002f00:	e004      	b.n	8002f0c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002f02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f06:	fab3 f383 	clz	r3, r3
 8002f0a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d106      	bne.n	8002f1e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2200      	movs	r2, #0
 8002f16:	2102      	movs	r1, #2
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff f9df 	bl	80022dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2103      	movs	r1, #3
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff f9c3 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10a      	bne.n	8002f4a <HAL_ADC_ConfigChannel+0x396>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2103      	movs	r1, #3
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff f9b8 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002f40:	4603      	mov	r3, r0
 8002f42:	0e9b      	lsrs	r3, r3, #26
 8002f44:	f003 021f 	and.w	r2, r3, #31
 8002f48:	e017      	b.n	8002f7a <HAL_ADC_ConfigChannel+0x3c6>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2103      	movs	r1, #3
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff f9ad 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002f56:	4603      	mov	r3, r0
 8002f58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f5c:	fa93 f3a3 	rbit	r3, r3
 8002f60:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002f62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f64:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002f66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002f6c:	2320      	movs	r3, #32
 8002f6e:	e003      	b.n	8002f78 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002f70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f72:	fab3 f383 	clz	r3, r3
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d105      	bne.n	8002f92 <HAL_ADC_ConfigChannel+0x3de>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	0e9b      	lsrs	r3, r3, #26
 8002f8c:	f003 031f 	and.w	r3, r3, #31
 8002f90:	e011      	b.n	8002fb6 <HAL_ADC_ConfigChannel+0x402>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f9a:	fa93 f3a3 	rbit	r3, r3
 8002f9e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002fa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fa2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002fa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002faa:	2320      	movs	r3, #32
 8002fac:	e003      	b.n	8002fb6 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fb0:	fab3 f383 	clz	r3, r3
 8002fb4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d106      	bne.n	8002fc8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	2103      	movs	r1, #3
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7ff f98a 	bl	80022dc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7ff faad 	bl	800252c <LL_ADC_IsEnabled>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f040 813f 	bne.w	8003258 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6818      	ldr	r0, [r3, #0]
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	6819      	ldr	r1, [r3, #0]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	f7ff f9fe 	bl	80023e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	4a8e      	ldr	r2, [pc, #568]	; (800322c <HAL_ADC_ConfigChannel+0x678>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	f040 8130 	bne.w	8003258 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003004:	2b00      	cmp	r3, #0
 8003006:	d10b      	bne.n	8003020 <HAL_ADC_ConfigChannel+0x46c>
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	0e9b      	lsrs	r3, r3, #26
 800300e:	3301      	adds	r3, #1
 8003010:	f003 031f 	and.w	r3, r3, #31
 8003014:	2b09      	cmp	r3, #9
 8003016:	bf94      	ite	ls
 8003018:	2301      	movls	r3, #1
 800301a:	2300      	movhi	r3, #0
 800301c:	b2db      	uxtb	r3, r3
 800301e:	e019      	b.n	8003054 <HAL_ADC_ConfigChannel+0x4a0>
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003026:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003028:	fa93 f3a3 	rbit	r3, r3
 800302c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800302e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003030:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003032:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003034:	2b00      	cmp	r3, #0
 8003036:	d101      	bne.n	800303c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003038:	2320      	movs	r3, #32
 800303a:	e003      	b.n	8003044 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800303c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800303e:	fab3 f383 	clz	r3, r3
 8003042:	b2db      	uxtb	r3, r3
 8003044:	3301      	adds	r3, #1
 8003046:	f003 031f 	and.w	r3, r3, #31
 800304a:	2b09      	cmp	r3, #9
 800304c:	bf94      	ite	ls
 800304e:	2301      	movls	r3, #1
 8003050:	2300      	movhi	r3, #0
 8003052:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003054:	2b00      	cmp	r3, #0
 8003056:	d079      	beq.n	800314c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003060:	2b00      	cmp	r3, #0
 8003062:	d107      	bne.n	8003074 <HAL_ADC_ConfigChannel+0x4c0>
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	0e9b      	lsrs	r3, r3, #26
 800306a:	3301      	adds	r3, #1
 800306c:	069b      	lsls	r3, r3, #26
 800306e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003072:	e015      	b.n	80030a0 <HAL_ADC_ConfigChannel+0x4ec>
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800307c:	fa93 f3a3 	rbit	r3, r3
 8003080:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003084:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003086:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800308c:	2320      	movs	r3, #32
 800308e:	e003      	b.n	8003098 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003090:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003092:	fab3 f383 	clz	r3, r3
 8003096:	b2db      	uxtb	r3, r3
 8003098:	3301      	adds	r3, #1
 800309a:	069b      	lsls	r3, r3, #26
 800309c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d109      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x50c>
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	0e9b      	lsrs	r3, r3, #26
 80030b2:	3301      	adds	r3, #1
 80030b4:	f003 031f 	and.w	r3, r3, #31
 80030b8:	2101      	movs	r1, #1
 80030ba:	fa01 f303 	lsl.w	r3, r1, r3
 80030be:	e017      	b.n	80030f0 <HAL_ADC_ConfigChannel+0x53c>
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030c8:	fa93 f3a3 	rbit	r3, r3
 80030cc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80030ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030d0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80030d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80030d8:	2320      	movs	r3, #32
 80030da:	e003      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80030dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030de:	fab3 f383 	clz	r3, r3
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	3301      	adds	r3, #1
 80030e6:	f003 031f 	and.w	r3, r3, #31
 80030ea:	2101      	movs	r1, #1
 80030ec:	fa01 f303 	lsl.w	r3, r1, r3
 80030f0:	ea42 0103 	orr.w	r1, r2, r3
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10a      	bne.n	8003116 <HAL_ADC_ConfigChannel+0x562>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	0e9b      	lsrs	r3, r3, #26
 8003106:	3301      	adds	r3, #1
 8003108:	f003 021f 	and.w	r2, r3, #31
 800310c:	4613      	mov	r3, r2
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	4413      	add	r3, r2
 8003112:	051b      	lsls	r3, r3, #20
 8003114:	e018      	b.n	8003148 <HAL_ADC_ConfigChannel+0x594>
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800311e:	fa93 f3a3 	rbit	r3, r3
 8003122:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003126:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800312e:	2320      	movs	r3, #32
 8003130:	e003      	b.n	800313a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003134:	fab3 f383 	clz	r3, r3
 8003138:	b2db      	uxtb	r3, r3
 800313a:	3301      	adds	r3, #1
 800313c:	f003 021f 	and.w	r2, r3, #31
 8003140:	4613      	mov	r3, r2
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	4413      	add	r3, r2
 8003146:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003148:	430b      	orrs	r3, r1
 800314a:	e080      	b.n	800324e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003154:	2b00      	cmp	r3, #0
 8003156:	d107      	bne.n	8003168 <HAL_ADC_ConfigChannel+0x5b4>
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	0e9b      	lsrs	r3, r3, #26
 800315e:	3301      	adds	r3, #1
 8003160:	069b      	lsls	r3, r3, #26
 8003162:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003166:	e015      	b.n	8003194 <HAL_ADC_ConfigChannel+0x5e0>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003170:	fa93 f3a3 	rbit	r3, r3
 8003174:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003178:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800317a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003180:	2320      	movs	r3, #32
 8003182:	e003      	b.n	800318c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003186:	fab3 f383 	clz	r3, r3
 800318a:	b2db      	uxtb	r3, r3
 800318c:	3301      	adds	r3, #1
 800318e:	069b      	lsls	r3, r3, #26
 8003190:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800319c:	2b00      	cmp	r3, #0
 800319e:	d109      	bne.n	80031b4 <HAL_ADC_ConfigChannel+0x600>
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	0e9b      	lsrs	r3, r3, #26
 80031a6:	3301      	adds	r3, #1
 80031a8:	f003 031f 	and.w	r3, r3, #31
 80031ac:	2101      	movs	r1, #1
 80031ae:	fa01 f303 	lsl.w	r3, r1, r3
 80031b2:	e017      	b.n	80031e4 <HAL_ADC_ConfigChannel+0x630>
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ba:	6a3b      	ldr	r3, [r7, #32]
 80031bc:	fa93 f3a3 	rbit	r3, r3
 80031c0:	61fb      	str	r3, [r7, #28]
  return result;
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80031cc:	2320      	movs	r3, #32
 80031ce:	e003      	b.n	80031d8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	fab3 f383 	clz	r3, r3
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	3301      	adds	r3, #1
 80031da:	f003 031f 	and.w	r3, r3, #31
 80031de:	2101      	movs	r1, #1
 80031e0:	fa01 f303 	lsl.w	r3, r1, r3
 80031e4:	ea42 0103 	orr.w	r1, r2, r3
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d10d      	bne.n	8003210 <HAL_ADC_ConfigChannel+0x65c>
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	0e9b      	lsrs	r3, r3, #26
 80031fa:	3301      	adds	r3, #1
 80031fc:	f003 021f 	and.w	r2, r3, #31
 8003200:	4613      	mov	r3, r2
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	4413      	add	r3, r2
 8003206:	3b1e      	subs	r3, #30
 8003208:	051b      	lsls	r3, r3, #20
 800320a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800320e:	e01d      	b.n	800324c <HAL_ADC_ConfigChannel+0x698>
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	fa93 f3a3 	rbit	r3, r3
 800321c:	613b      	str	r3, [r7, #16]
  return result;
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d103      	bne.n	8003230 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003228:	2320      	movs	r3, #32
 800322a:	e005      	b.n	8003238 <HAL_ADC_ConfigChannel+0x684>
 800322c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	fab3 f383 	clz	r3, r3
 8003236:	b2db      	uxtb	r3, r3
 8003238:	3301      	adds	r3, #1
 800323a:	f003 021f 	and.w	r2, r3, #31
 800323e:	4613      	mov	r3, r2
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	4413      	add	r3, r2
 8003244:	3b1e      	subs	r3, #30
 8003246:	051b      	lsls	r3, r3, #20
 8003248:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800324c:	430b      	orrs	r3, r1
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	6892      	ldr	r2, [r2, #8]
 8003252:	4619      	mov	r1, r3
 8003254:	f7ff f89c 	bl	8002390 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	4b44      	ldr	r3, [pc, #272]	; (8003370 <HAL_ADC_ConfigChannel+0x7bc>)
 800325e:	4013      	ands	r3, r2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d07a      	beq.n	800335a <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003264:	4843      	ldr	r0, [pc, #268]	; (8003374 <HAL_ADC_ConfigChannel+0x7c0>)
 8003266:	f7fe fff1 	bl	800224c <LL_ADC_GetCommonPathInternalCh>
 800326a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a41      	ldr	r2, [pc, #260]	; (8003378 <HAL_ADC_ConfigChannel+0x7c4>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d12c      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003278:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800327c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d126      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a3c      	ldr	r2, [pc, #240]	; (800337c <HAL_ADC_ConfigChannel+0x7c8>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d004      	beq.n	8003298 <HAL_ADC_ConfigChannel+0x6e4>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a3b      	ldr	r2, [pc, #236]	; (8003380 <HAL_ADC_ConfigChannel+0x7cc>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d15d      	bne.n	8003354 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003298:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800329c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80032a0:	4619      	mov	r1, r3
 80032a2:	4834      	ldr	r0, [pc, #208]	; (8003374 <HAL_ADC_ConfigChannel+0x7c0>)
 80032a4:	f7fe ffbf 	bl	8002226 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032a8:	4b36      	ldr	r3, [pc, #216]	; (8003384 <HAL_ADC_ConfigChannel+0x7d0>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	099b      	lsrs	r3, r3, #6
 80032ae:	4a36      	ldr	r2, [pc, #216]	; (8003388 <HAL_ADC_ConfigChannel+0x7d4>)
 80032b0:	fba2 2303 	umull	r2, r3, r2, r3
 80032b4:	099b      	lsrs	r3, r3, #6
 80032b6:	1c5a      	adds	r2, r3, #1
 80032b8:	4613      	mov	r3, r2
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	4413      	add	r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80032c2:	e002      	b.n	80032ca <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	3b01      	subs	r3, #1
 80032c8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1f9      	bne.n	80032c4 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032d0:	e040      	b.n	8003354 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a2d      	ldr	r2, [pc, #180]	; (800338c <HAL_ADC_ConfigChannel+0x7d8>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d118      	bne.n	800330e <HAL_ADC_ConfigChannel+0x75a>
 80032dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d112      	bne.n	800330e <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a23      	ldr	r2, [pc, #140]	; (800337c <HAL_ADC_ConfigChannel+0x7c8>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d004      	beq.n	80032fc <HAL_ADC_ConfigChannel+0x748>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a22      	ldr	r2, [pc, #136]	; (8003380 <HAL_ADC_ConfigChannel+0x7cc>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d12d      	bne.n	8003358 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003300:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003304:	4619      	mov	r1, r3
 8003306:	481b      	ldr	r0, [pc, #108]	; (8003374 <HAL_ADC_ConfigChannel+0x7c0>)
 8003308:	f7fe ff8d 	bl	8002226 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800330c:	e024      	b.n	8003358 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a1f      	ldr	r2, [pc, #124]	; (8003390 <HAL_ADC_ConfigChannel+0x7dc>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d120      	bne.n	800335a <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003318:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800331c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d11a      	bne.n	800335a <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a14      	ldr	r2, [pc, #80]	; (800337c <HAL_ADC_ConfigChannel+0x7c8>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d115      	bne.n	800335a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800332e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003332:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003336:	4619      	mov	r1, r3
 8003338:	480e      	ldr	r0, [pc, #56]	; (8003374 <HAL_ADC_ConfigChannel+0x7c0>)
 800333a:	f7fe ff74 	bl	8002226 <LL_ADC_SetCommonPathInternalCh>
 800333e:	e00c      	b.n	800335a <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003344:	f043 0220 	orr.w	r2, r3, #32
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003352:	e002      	b.n	800335a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003354:	bf00      	nop
 8003356:	e000      	b.n	800335a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003358:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003362:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003366:	4618      	mov	r0, r3
 8003368:	37d8      	adds	r7, #216	; 0xd8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	80080000 	.word	0x80080000
 8003374:	50040300 	.word	0x50040300
 8003378:	c7520000 	.word	0xc7520000
 800337c:	50040000 	.word	0x50040000
 8003380:	50040200 	.word	0x50040200
 8003384:	20000000 	.word	0x20000000
 8003388:	053e2d63 	.word	0x053e2d63
 800338c:	cb840000 	.word	0xcb840000
 8003390:	80000001 	.word	0x80000001

08003394 <HAL_ADC_GetState>:
  *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
  * @param hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80033b4:	2300      	movs	r3, #0
 80033b6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff f8b5 	bl	800252c <LL_ADC_IsEnabled>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d169      	bne.n	800349c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689a      	ldr	r2, [r3, #8]
 80033ce:	4b36      	ldr	r3, [pc, #216]	; (80034a8 <ADC_Enable+0xfc>)
 80033d0:	4013      	ands	r3, r2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00d      	beq.n	80033f2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033da:	f043 0210 	orr.w	r2, r3, #16
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e6:	f043 0201 	orr.w	r2, r3, #1
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e055      	b.n	800349e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7ff f884 	bl	8002504 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80033fc:	482b      	ldr	r0, [pc, #172]	; (80034ac <ADC_Enable+0x100>)
 80033fe:	f7fe ff25 	bl	800224c <LL_ADC_GetCommonPathInternalCh>
 8003402:	4603      	mov	r3, r0
 8003404:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d013      	beq.n	8003434 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800340c:	4b28      	ldr	r3, [pc, #160]	; (80034b0 <ADC_Enable+0x104>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	099b      	lsrs	r3, r3, #6
 8003412:	4a28      	ldr	r2, [pc, #160]	; (80034b4 <ADC_Enable+0x108>)
 8003414:	fba2 2303 	umull	r2, r3, r2, r3
 8003418:	099b      	lsrs	r3, r3, #6
 800341a:	1c5a      	adds	r2, r3, #1
 800341c:	4613      	mov	r3, r2
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	4413      	add	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003426:	e002      	b.n	800342e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	3b01      	subs	r3, #1
 800342c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1f9      	bne.n	8003428 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003434:	f7fe feb4 	bl	80021a0 <HAL_GetTick>
 8003438:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800343a:	e028      	b.n	800348e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff f873 	bl	800252c <LL_ADC_IsEnabled>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d104      	bne.n	8003456 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff f857 	bl	8002504 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003456:	f7fe fea3 	bl	80021a0 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d914      	bls.n	800348e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b01      	cmp	r3, #1
 8003470:	d00d      	beq.n	800348e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003476:	f043 0210 	orr.w	r2, r3, #16
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003482:	f043 0201 	orr.w	r2, r3, #1
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e007      	b.n	800349e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b01      	cmp	r3, #1
 800349a:	d1cf      	bne.n	800343c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	8000003f 	.word	0x8000003f
 80034ac:	50040300 	.word	0x50040300
 80034b0:	20000000 	.word	0x20000000
 80034b4:	053e2d63 	.word	0x053e2d63

080034b8 <LL_ADC_IsEnabled>:
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d101      	bne.n	80034d0 <LL_ADC_IsEnabled+0x18>
 80034cc:	2301      	movs	r3, #1
 80034ce:	e000      	b.n	80034d2 <LL_ADC_IsEnabled+0x1a>
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <LL_ADC_REG_IsConversionOngoing>:
{
 80034de:	b480      	push	{r7}
 80034e0:	b083      	sub	sp, #12
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 0304 	and.w	r3, r3, #4
 80034ee:	2b04      	cmp	r3, #4
 80034f0:	d101      	bne.n	80034f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80034f2:	2301      	movs	r3, #1
 80034f4:	e000      	b.n	80034f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003504:	b590      	push	{r4, r7, lr}
 8003506:	b09f      	sub	sp, #124	; 0x7c
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800350e:	2300      	movs	r3, #0
 8003510:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800351a:	2b01      	cmp	r3, #1
 800351c:	d101      	bne.n	8003522 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800351e:	2302      	movs	r3, #2
 8003520:	e093      	b.n	800364a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800352a:	2300      	movs	r3, #0
 800352c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800352e:	2300      	movs	r3, #0
 8003530:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a47      	ldr	r2, [pc, #284]	; (8003654 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d102      	bne.n	8003542 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800353c:	4b46      	ldr	r3, [pc, #280]	; (8003658 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800353e:	60bb      	str	r3, [r7, #8]
 8003540:	e001      	b.n	8003546 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003542:	2300      	movs	r3, #0
 8003544:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10b      	bne.n	8003564 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003550:	f043 0220 	orr.w	r2, r3, #32
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e072      	b.n	800364a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff ffb9 	bl	80034de <LL_ADC_REG_IsConversionOngoing>
 800356c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f7ff ffb3 	bl	80034de <LL_ADC_REG_IsConversionOngoing>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d154      	bne.n	8003628 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800357e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003580:	2b00      	cmp	r3, #0
 8003582:	d151      	bne.n	8003628 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003584:	4b35      	ldr	r3, [pc, #212]	; (800365c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003586:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d02c      	beq.n	80035ea <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	6859      	ldr	r1, [r3, #4]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80035a2:	035b      	lsls	r3, r3, #13
 80035a4:	430b      	orrs	r3, r1
 80035a6:	431a      	orrs	r2, r3
 80035a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035aa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035ac:	4829      	ldr	r0, [pc, #164]	; (8003654 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80035ae:	f7ff ff83 	bl	80034b8 <LL_ADC_IsEnabled>
 80035b2:	4604      	mov	r4, r0
 80035b4:	4828      	ldr	r0, [pc, #160]	; (8003658 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80035b6:	f7ff ff7f 	bl	80034b8 <LL_ADC_IsEnabled>
 80035ba:	4603      	mov	r3, r0
 80035bc:	431c      	orrs	r4, r3
 80035be:	4828      	ldr	r0, [pc, #160]	; (8003660 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80035c0:	f7ff ff7a 	bl	80034b8 <LL_ADC_IsEnabled>
 80035c4:	4603      	mov	r3, r0
 80035c6:	4323      	orrs	r3, r4
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d137      	bne.n	800363c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80035cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80035d4:	f023 030f 	bic.w	r3, r3, #15
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	6811      	ldr	r1, [r2, #0]
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	6892      	ldr	r2, [r2, #8]
 80035e0:	430a      	orrs	r2, r1
 80035e2:	431a      	orrs	r2, r3
 80035e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035e6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80035e8:	e028      	b.n	800363c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80035ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035f4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035f6:	4817      	ldr	r0, [pc, #92]	; (8003654 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80035f8:	f7ff ff5e 	bl	80034b8 <LL_ADC_IsEnabled>
 80035fc:	4604      	mov	r4, r0
 80035fe:	4816      	ldr	r0, [pc, #88]	; (8003658 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003600:	f7ff ff5a 	bl	80034b8 <LL_ADC_IsEnabled>
 8003604:	4603      	mov	r3, r0
 8003606:	431c      	orrs	r4, r3
 8003608:	4815      	ldr	r0, [pc, #84]	; (8003660 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800360a:	f7ff ff55 	bl	80034b8 <LL_ADC_IsEnabled>
 800360e:	4603      	mov	r3, r0
 8003610:	4323      	orrs	r3, r4
 8003612:	2b00      	cmp	r3, #0
 8003614:	d112      	bne.n	800363c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800361e:	f023 030f 	bic.w	r3, r3, #15
 8003622:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003624:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003626:	e009      	b.n	800363c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800362c:	f043 0220 	orr.w	r2, r3, #32
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800363a:	e000      	b.n	800363e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800363c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003646:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800364a:	4618      	mov	r0, r3
 800364c:	377c      	adds	r7, #124	; 0x7c
 800364e:	46bd      	mov	sp, r7
 8003650:	bd90      	pop	{r4, r7, pc}
 8003652:	bf00      	nop
 8003654:	50040000 	.word	0x50040000
 8003658:	50040100 	.word	0x50040100
 800365c:	50040300 	.word	0x50040300
 8003660:	50040200 	.word	0x50040200

08003664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003674:	4b0c      	ldr	r3, [pc, #48]	; (80036a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003680:	4013      	ands	r3, r2
 8003682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800368c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003696:	4a04      	ldr	r2, [pc, #16]	; (80036a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	60d3      	str	r3, [r2, #12]
}
 800369c:	bf00      	nop
 800369e:	3714      	adds	r7, #20
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	e000ed00 	.word	0xe000ed00

080036ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036b0:	4b04      	ldr	r3, [pc, #16]	; (80036c4 <__NVIC_GetPriorityGrouping+0x18>)
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	0a1b      	lsrs	r3, r3, #8
 80036b6:	f003 0307 	and.w	r3, r3, #7
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	e000ed00 	.word	0xe000ed00

080036c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	4603      	mov	r3, r0
 80036d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	db0b      	blt.n	80036f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036da:	79fb      	ldrb	r3, [r7, #7]
 80036dc:	f003 021f 	and.w	r2, r3, #31
 80036e0:	4907      	ldr	r1, [pc, #28]	; (8003700 <__NVIC_EnableIRQ+0x38>)
 80036e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e6:	095b      	lsrs	r3, r3, #5
 80036e8:	2001      	movs	r0, #1
 80036ea:	fa00 f202 	lsl.w	r2, r0, r2
 80036ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80036f2:	bf00      	nop
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	e000e100 	.word	0xe000e100

08003704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	4603      	mov	r3, r0
 800370c:	6039      	str	r1, [r7, #0]
 800370e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003714:	2b00      	cmp	r3, #0
 8003716:	db0a      	blt.n	800372e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	b2da      	uxtb	r2, r3
 800371c:	490c      	ldr	r1, [pc, #48]	; (8003750 <__NVIC_SetPriority+0x4c>)
 800371e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003722:	0112      	lsls	r2, r2, #4
 8003724:	b2d2      	uxtb	r2, r2
 8003726:	440b      	add	r3, r1
 8003728:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800372c:	e00a      	b.n	8003744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	b2da      	uxtb	r2, r3
 8003732:	4908      	ldr	r1, [pc, #32]	; (8003754 <__NVIC_SetPriority+0x50>)
 8003734:	79fb      	ldrb	r3, [r7, #7]
 8003736:	f003 030f 	and.w	r3, r3, #15
 800373a:	3b04      	subs	r3, #4
 800373c:	0112      	lsls	r2, r2, #4
 800373e:	b2d2      	uxtb	r2, r2
 8003740:	440b      	add	r3, r1
 8003742:	761a      	strb	r2, [r3, #24]
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	e000e100 	.word	0xe000e100
 8003754:	e000ed00 	.word	0xe000ed00

08003758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003758:	b480      	push	{r7}
 800375a:	b089      	sub	sp, #36	; 0x24
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	f1c3 0307 	rsb	r3, r3, #7
 8003772:	2b04      	cmp	r3, #4
 8003774:	bf28      	it	cs
 8003776:	2304      	movcs	r3, #4
 8003778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	3304      	adds	r3, #4
 800377e:	2b06      	cmp	r3, #6
 8003780:	d902      	bls.n	8003788 <NVIC_EncodePriority+0x30>
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	3b03      	subs	r3, #3
 8003786:	e000      	b.n	800378a <NVIC_EncodePriority+0x32>
 8003788:	2300      	movs	r3, #0
 800378a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800378c:	f04f 32ff 	mov.w	r2, #4294967295
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	fa02 f303 	lsl.w	r3, r2, r3
 8003796:	43da      	mvns	r2, r3
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	401a      	ands	r2, r3
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037a0:	f04f 31ff 	mov.w	r1, #4294967295
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	fa01 f303 	lsl.w	r3, r1, r3
 80037aa:	43d9      	mvns	r1, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037b0:	4313      	orrs	r3, r2
         );
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3724      	adds	r7, #36	; 0x24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
	...

080037c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3b01      	subs	r3, #1
 80037cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037d0:	d301      	bcc.n	80037d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037d2:	2301      	movs	r3, #1
 80037d4:	e00f      	b.n	80037f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037d6:	4a0a      	ldr	r2, [pc, #40]	; (8003800 <SysTick_Config+0x40>)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3b01      	subs	r3, #1
 80037dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037de:	210f      	movs	r1, #15
 80037e0:	f04f 30ff 	mov.w	r0, #4294967295
 80037e4:	f7ff ff8e 	bl	8003704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037e8:	4b05      	ldr	r3, [pc, #20]	; (8003800 <SysTick_Config+0x40>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037ee:	4b04      	ldr	r3, [pc, #16]	; (8003800 <SysTick_Config+0x40>)
 80037f0:	2207      	movs	r2, #7
 80037f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	e000e010 	.word	0xe000e010

08003804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f7ff ff29 	bl	8003664 <__NVIC_SetPriorityGrouping>
}
 8003812:	bf00      	nop
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b086      	sub	sp, #24
 800381e:	af00      	add	r7, sp, #0
 8003820:	4603      	mov	r3, r0
 8003822:	60b9      	str	r1, [r7, #8]
 8003824:	607a      	str	r2, [r7, #4]
 8003826:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003828:	2300      	movs	r3, #0
 800382a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800382c:	f7ff ff3e 	bl	80036ac <__NVIC_GetPriorityGrouping>
 8003830:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	68b9      	ldr	r1, [r7, #8]
 8003836:	6978      	ldr	r0, [r7, #20]
 8003838:	f7ff ff8e 	bl	8003758 <NVIC_EncodePriority>
 800383c:	4602      	mov	r2, r0
 800383e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003842:	4611      	mov	r1, r2
 8003844:	4618      	mov	r0, r3
 8003846:	f7ff ff5d 	bl	8003704 <__NVIC_SetPriority>
}
 800384a:	bf00      	nop
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b082      	sub	sp, #8
 8003856:	af00      	add	r7, sp, #0
 8003858:	4603      	mov	r3, r0
 800385a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800385c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003860:	4618      	mov	r0, r3
 8003862:	f7ff ff31 	bl	80036c8 <__NVIC_EnableIRQ>
}
 8003866:	bf00      	nop
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b082      	sub	sp, #8
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7ff ffa2 	bl	80037c0 <SysTick_Config>
 800387c:	4603      	mov	r3, r0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
	...

08003888 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003888:	b480      	push	{r7}
 800388a:	b087      	sub	sp, #28
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003892:	2300      	movs	r3, #0
 8003894:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003896:	e17f      	b.n	8003b98 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	2101      	movs	r1, #1
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	fa01 f303 	lsl.w	r3, r1, r3
 80038a4:	4013      	ands	r3, r2
 80038a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f000 8171 	beq.w	8003b92 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f003 0303 	and.w	r3, r3, #3
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d005      	beq.n	80038c8 <HAL_GPIO_Init+0x40>
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f003 0303 	and.w	r3, r3, #3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d130      	bne.n	800392a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	2203      	movs	r2, #3
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	43db      	mvns	r3, r3
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	4013      	ands	r3, r2
 80038de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	68da      	ldr	r2, [r3, #12]
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038fe:	2201      	movs	r2, #1
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	fa02 f303 	lsl.w	r3, r2, r3
 8003906:	43db      	mvns	r3, r3
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	4013      	ands	r3, r2
 800390c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	091b      	lsrs	r3, r3, #4
 8003914:	f003 0201 	and.w	r2, r3, #1
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	fa02 f303 	lsl.w	r3, r2, r3
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	4313      	orrs	r3, r2
 8003922:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f003 0303 	and.w	r3, r3, #3
 8003932:	2b03      	cmp	r3, #3
 8003934:	d118      	bne.n	8003968 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800393c:	2201      	movs	r2, #1
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	43db      	mvns	r3, r3
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	4013      	ands	r3, r2
 800394a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	08db      	lsrs	r3, r3, #3
 8003952:	f003 0201 	and.w	r2, r3, #1
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	4313      	orrs	r3, r2
 8003960:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f003 0303 	and.w	r3, r3, #3
 8003970:	2b03      	cmp	r3, #3
 8003972:	d017      	beq.n	80039a4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	2203      	movs	r2, #3
 8003980:	fa02 f303 	lsl.w	r3, r2, r3
 8003984:	43db      	mvns	r3, r3
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	4013      	ands	r3, r2
 800398a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	4313      	orrs	r3, r2
 800399c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f003 0303 	and.w	r3, r3, #3
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d123      	bne.n	80039f8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	08da      	lsrs	r2, r3, #3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	3208      	adds	r2, #8
 80039b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	220f      	movs	r2, #15
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	43db      	mvns	r3, r3
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	4013      	ands	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	691a      	ldr	r2, [r3, #16]
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	f003 0307 	and.w	r3, r3, #7
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	08da      	lsrs	r2, r3, #3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	3208      	adds	r2, #8
 80039f2:	6939      	ldr	r1, [r7, #16]
 80039f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	2203      	movs	r2, #3
 8003a04:	fa02 f303 	lsl.w	r3, r2, r3
 8003a08:	43db      	mvns	r3, r3
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f003 0203 	and.w	r2, r3, #3
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 80ac 	beq.w	8003b92 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a3a:	4b5f      	ldr	r3, [pc, #380]	; (8003bb8 <HAL_GPIO_Init+0x330>)
 8003a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a3e:	4a5e      	ldr	r2, [pc, #376]	; (8003bb8 <HAL_GPIO_Init+0x330>)
 8003a40:	f043 0301 	orr.w	r3, r3, #1
 8003a44:	6613      	str	r3, [r2, #96]	; 0x60
 8003a46:	4b5c      	ldr	r3, [pc, #368]	; (8003bb8 <HAL_GPIO_Init+0x330>)
 8003a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	60bb      	str	r3, [r7, #8]
 8003a50:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a52:	4a5a      	ldr	r2, [pc, #360]	; (8003bbc <HAL_GPIO_Init+0x334>)
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	089b      	lsrs	r3, r3, #2
 8003a58:	3302      	adds	r3, #2
 8003a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	f003 0303 	and.w	r3, r3, #3
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	220f      	movs	r2, #15
 8003a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6e:	43db      	mvns	r3, r3
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	4013      	ands	r3, r2
 8003a74:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003a7c:	d025      	beq.n	8003aca <HAL_GPIO_Init+0x242>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a4f      	ldr	r2, [pc, #316]	; (8003bc0 <HAL_GPIO_Init+0x338>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d01f      	beq.n	8003ac6 <HAL_GPIO_Init+0x23e>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a4e      	ldr	r2, [pc, #312]	; (8003bc4 <HAL_GPIO_Init+0x33c>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d019      	beq.n	8003ac2 <HAL_GPIO_Init+0x23a>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a4d      	ldr	r2, [pc, #308]	; (8003bc8 <HAL_GPIO_Init+0x340>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d013      	beq.n	8003abe <HAL_GPIO_Init+0x236>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a4c      	ldr	r2, [pc, #304]	; (8003bcc <HAL_GPIO_Init+0x344>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d00d      	beq.n	8003aba <HAL_GPIO_Init+0x232>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a4b      	ldr	r2, [pc, #300]	; (8003bd0 <HAL_GPIO_Init+0x348>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d007      	beq.n	8003ab6 <HAL_GPIO_Init+0x22e>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a4a      	ldr	r2, [pc, #296]	; (8003bd4 <HAL_GPIO_Init+0x34c>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d101      	bne.n	8003ab2 <HAL_GPIO_Init+0x22a>
 8003aae:	2306      	movs	r3, #6
 8003ab0:	e00c      	b.n	8003acc <HAL_GPIO_Init+0x244>
 8003ab2:	2307      	movs	r3, #7
 8003ab4:	e00a      	b.n	8003acc <HAL_GPIO_Init+0x244>
 8003ab6:	2305      	movs	r3, #5
 8003ab8:	e008      	b.n	8003acc <HAL_GPIO_Init+0x244>
 8003aba:	2304      	movs	r3, #4
 8003abc:	e006      	b.n	8003acc <HAL_GPIO_Init+0x244>
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e004      	b.n	8003acc <HAL_GPIO_Init+0x244>
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	e002      	b.n	8003acc <HAL_GPIO_Init+0x244>
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e000      	b.n	8003acc <HAL_GPIO_Init+0x244>
 8003aca:	2300      	movs	r3, #0
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	f002 0203 	and.w	r2, r2, #3
 8003ad2:	0092      	lsls	r2, r2, #2
 8003ad4:	4093      	lsls	r3, r2
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003adc:	4937      	ldr	r1, [pc, #220]	; (8003bbc <HAL_GPIO_Init+0x334>)
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	089b      	lsrs	r3, r3, #2
 8003ae2:	3302      	adds	r3, #2
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003aea:	4b3b      	ldr	r3, [pc, #236]	; (8003bd8 <HAL_GPIO_Init+0x350>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	43db      	mvns	r3, r3
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	4013      	ands	r3, r2
 8003af8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b0e:	4a32      	ldr	r2, [pc, #200]	; (8003bd8 <HAL_GPIO_Init+0x350>)
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b14:	4b30      	ldr	r3, [pc, #192]	; (8003bd8 <HAL_GPIO_Init+0x350>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	4013      	ands	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d003      	beq.n	8003b38 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b38:	4a27      	ldr	r2, [pc, #156]	; (8003bd8 <HAL_GPIO_Init+0x350>)
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003b3e:	4b26      	ldr	r3, [pc, #152]	; (8003bd8 <HAL_GPIO_Init+0x350>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	43db      	mvns	r3, r3
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b62:	4a1d      	ldr	r2, [pc, #116]	; (8003bd8 <HAL_GPIO_Init+0x350>)
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003b68:	4b1b      	ldr	r3, [pc, #108]	; (8003bd8 <HAL_GPIO_Init+0x350>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	43db      	mvns	r3, r3
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	4013      	ands	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d003      	beq.n	8003b8c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b8c:	4a12      	ldr	r2, [pc, #72]	; (8003bd8 <HAL_GPIO_Init+0x350>)
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	3301      	adds	r3, #1
 8003b96:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f47f ae78 	bne.w	8003898 <HAL_GPIO_Init+0x10>
  }
}
 8003ba8:	bf00      	nop
 8003baa:	bf00      	nop
 8003bac:	371c      	adds	r7, #28
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	40010000 	.word	0x40010000
 8003bc0:	48000400 	.word	0x48000400
 8003bc4:	48000800 	.word	0x48000800
 8003bc8:	48000c00 	.word	0x48000c00
 8003bcc:	48001000 	.word	0x48001000
 8003bd0:	48001400 	.word	0x48001400
 8003bd4:	48001800 	.word	0x48001800
 8003bd8:	40010400 	.word	0x40010400

08003bdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	460b      	mov	r3, r1
 8003be6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	691a      	ldr	r2, [r3, #16]
 8003bec:	887b      	ldrh	r3, [r7, #2]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d002      	beq.n	8003bfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	73fb      	strb	r3, [r7, #15]
 8003bf8:	e001      	b.n	8003bfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3714      	adds	r7, #20
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	460b      	mov	r3, r1
 8003c16:	807b      	strh	r3, [r7, #2]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c1c:	787b      	ldrb	r3, [r7, #1]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d003      	beq.n	8003c2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c22:	887a      	ldrh	r2, [r7, #2]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c28:	e002      	b.n	8003c30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c2a:	887a      	ldrh	r2, [r7, #2]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	4603      	mov	r3, r0
 8003c44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003c46:	4b08      	ldr	r3, [pc, #32]	; (8003c68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c48:	695a      	ldr	r2, [r3, #20]
 8003c4a:	88fb      	ldrh	r3, [r7, #6]
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d006      	beq.n	8003c60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c52:	4a05      	ldr	r2, [pc, #20]	; (8003c68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c54:	88fb      	ldrh	r3, [r7, #6]
 8003c56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c58:	88fb      	ldrh	r3, [r7, #6]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7fd fe7c 	bl	8001958 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c60:	bf00      	nop
 8003c62:	3708      	adds	r7, #8
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40010400 	.word	0x40010400

08003c6c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003c70:	4b04      	ldr	r3, [pc, #16]	; (8003c84 <HAL_PWREx_GetVoltageRange+0x18>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	40007000 	.word	0x40007000

08003c88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c96:	d130      	bne.n	8003cfa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c98:	4b23      	ldr	r3, [pc, #140]	; (8003d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ca4:	d038      	beq.n	8003d18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ca6:	4b20      	ldr	r3, [pc, #128]	; (8003d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cae:	4a1e      	ldr	r2, [pc, #120]	; (8003d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cb4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003cb6:	4b1d      	ldr	r3, [pc, #116]	; (8003d2c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2232      	movs	r2, #50	; 0x32
 8003cbc:	fb02 f303 	mul.w	r3, r2, r3
 8003cc0:	4a1b      	ldr	r2, [pc, #108]	; (8003d30 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc6:	0c9b      	lsrs	r3, r3, #18
 8003cc8:	3301      	adds	r3, #1
 8003cca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ccc:	e002      	b.n	8003cd4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cd4:	4b14      	ldr	r3, [pc, #80]	; (8003d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ce0:	d102      	bne.n	8003ce8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1f2      	bne.n	8003cce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ce8:	4b0f      	ldr	r3, [pc, #60]	; (8003d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cf4:	d110      	bne.n	8003d18 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e00f      	b.n	8003d1a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cfa:	4b0b      	ldr	r3, [pc, #44]	; (8003d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d06:	d007      	beq.n	8003d18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d08:	4b07      	ldr	r3, [pc, #28]	; (8003d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d10:	4a05      	ldr	r2, [pc, #20]	; (8003d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d16:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3714      	adds	r7, #20
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	40007000 	.word	0x40007000
 8003d2c:	20000000 	.word	0x20000000
 8003d30:	431bde83 	.word	0x431bde83

08003d34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b088      	sub	sp, #32
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e3ca      	b.n	80044dc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d46:	4b97      	ldr	r3, [pc, #604]	; (8003fa4 <HAL_RCC_OscConfig+0x270>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f003 030c 	and.w	r3, r3, #12
 8003d4e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d50:	4b94      	ldr	r3, [pc, #592]	; (8003fa4 <HAL_RCC_OscConfig+0x270>)
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f003 0303 	and.w	r3, r3, #3
 8003d58:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0310 	and.w	r3, r3, #16
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f000 80e4 	beq.w	8003f30 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d007      	beq.n	8003d7e <HAL_RCC_OscConfig+0x4a>
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	2b0c      	cmp	r3, #12
 8003d72:	f040 808b 	bne.w	8003e8c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	f040 8087 	bne.w	8003e8c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d7e:	4b89      	ldr	r3, [pc, #548]	; (8003fa4 <HAL_RCC_OscConfig+0x270>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d005      	beq.n	8003d96 <HAL_RCC_OscConfig+0x62>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e3a2      	b.n	80044dc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a1a      	ldr	r2, [r3, #32]
 8003d9a:	4b82      	ldr	r3, [pc, #520]	; (8003fa4 <HAL_RCC_OscConfig+0x270>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0308 	and.w	r3, r3, #8
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d004      	beq.n	8003db0 <HAL_RCC_OscConfig+0x7c>
 8003da6:	4b7f      	ldr	r3, [pc, #508]	; (8003fa4 <HAL_RCC_OscConfig+0x270>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dae:	e005      	b.n	8003dbc <HAL_RCC_OscConfig+0x88>
 8003db0:	4b7c      	ldr	r3, [pc, #496]	; (8003fa4 <HAL_RCC_OscConfig+0x270>)
 8003db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003db6:	091b      	lsrs	r3, r3, #4
 8003db8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d223      	bcs.n	8003e08 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f000 fd55 	bl	8004874 <RCC_SetFlashLatencyFromMSIRange>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d001      	beq.n	8003dd4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e383      	b.n	80044dc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dd4:	4b73      	ldr	r3, [pc, #460]	; (8003fa4 <HAL_RCC_OscConfig+0x270>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a72      	ldr	r2, [pc, #456]	; (8003fa4 <HAL_RCC_OscConfig+0x270>)
 8003dda:	f043 0308 	orr.w	r3, r3, #8
 8003dde:	6013      	str	r3, [r2, #0]
 8003de0:	4b70      	ldr	r3, [pc, #448]	; (8003fa4 <HAL_RCC_OscConfig+0x270>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	496d      	ldr	r1, [pc, #436]	; (8003fa4 <HAL_RCC_OscConfig+0x270>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003df2:	4b6c      	ldr	r3, [pc, #432]	; (8003fa4 <HAL_RCC_OscConfig+0x270>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	021b      	lsls	r3, r3, #8
 8003e00:	4968      	ldr	r1, [pc, #416]	; (8003fa4 <HAL_RCC_OscConfig+0x270>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	604b      	str	r3, [r1, #4]
 8003e06:	e025      	b.n	8003e54 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e08:	4b66      	ldr	r3, [pc, #408]	; (8003fa4 <HAL_RCC_OscConfig+0x270>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a65      	ldr	r2, [pc, #404]	; (8003fa4 <HAL_RCC_OscConfig+0x270>)
 8003e0e:	f043 0308 	orr.w	r3, r3, #8
 8003e12:	6013      	str	r3, [r2, #0]
 8003e14:	4b63      	ldr	r3, [pc, #396]	; (8003fa4 <HAL_RCC_OscConfig+0x270>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	4960      	ldr	r1, [pc, #384]	; (8003fa4 <HAL_RCC_OscConfig+0x270>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e26:	4b5f      	ldr	r3, [pc, #380]	; (8003fa4 <HAL_RCC_OscConfig+0x270>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	021b      	lsls	r3, r3, #8
 8003e34:	495b      	ldr	r1, [pc, #364]	; (8003fa4 <HAL_RCC_OscConfig+0x270>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d109      	bne.n	8003e54 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f000 fd15 	bl	8004874 <RCC_SetFlashLatencyFromMSIRange>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e343      	b.n	80044dc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e54:	f000 fc4a 	bl	80046ec <HAL_RCC_GetSysClockFreq>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	4b52      	ldr	r3, [pc, #328]	; (8003fa4 <HAL_RCC_OscConfig+0x270>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	091b      	lsrs	r3, r3, #4
 8003e60:	f003 030f 	and.w	r3, r3, #15
 8003e64:	4950      	ldr	r1, [pc, #320]	; (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003e66:	5ccb      	ldrb	r3, [r1, r3]
 8003e68:	f003 031f 	and.w	r3, r3, #31
 8003e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e70:	4a4e      	ldr	r2, [pc, #312]	; (8003fac <HAL_RCC_OscConfig+0x278>)
 8003e72:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003e74:	4b4e      	ldr	r3, [pc, #312]	; (8003fb0 <HAL_RCC_OscConfig+0x27c>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7fe f941 	bl	8002100 <HAL_InitTick>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003e82:	7bfb      	ldrb	r3, [r7, #15]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d052      	beq.n	8003f2e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003e88:	7bfb      	ldrb	r3, [r7, #15]
 8003e8a:	e327      	b.n	80044dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d032      	beq.n	8003efa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003e94:	4b43      	ldr	r3, [pc, #268]	; (8003fa4 <HAL_RCC_OscConfig+0x270>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a42      	ldr	r2, [pc, #264]	; (8003fa4 <HAL_RCC_OscConfig+0x270>)
 8003e9a:	f043 0301 	orr.w	r3, r3, #1
 8003e9e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ea0:	f7fe f97e 	bl	80021a0 <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ea8:	f7fe f97a 	bl	80021a0 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e310      	b.n	80044dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003eba:	4b3a      	ldr	r3, [pc, #232]	; (8003fa4 <HAL_RCC_OscConfig+0x270>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0f0      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ec6:	4b37      	ldr	r3, [pc, #220]	; (8003fa4 <HAL_RCC_OscConfig+0x270>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a36      	ldr	r2, [pc, #216]	; (8003fa4 <HAL_RCC_OscConfig+0x270>)
 8003ecc:	f043 0308 	orr.w	r3, r3, #8
 8003ed0:	6013      	str	r3, [r2, #0]
 8003ed2:	4b34      	ldr	r3, [pc, #208]	; (8003fa4 <HAL_RCC_OscConfig+0x270>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	4931      	ldr	r1, [pc, #196]	; (8003fa4 <HAL_RCC_OscConfig+0x270>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ee4:	4b2f      	ldr	r3, [pc, #188]	; (8003fa4 <HAL_RCC_OscConfig+0x270>)
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	69db      	ldr	r3, [r3, #28]
 8003ef0:	021b      	lsls	r3, r3, #8
 8003ef2:	492c      	ldr	r1, [pc, #176]	; (8003fa4 <HAL_RCC_OscConfig+0x270>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	604b      	str	r3, [r1, #4]
 8003ef8:	e01a      	b.n	8003f30 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003efa:	4b2a      	ldr	r3, [pc, #168]	; (8003fa4 <HAL_RCC_OscConfig+0x270>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a29      	ldr	r2, [pc, #164]	; (8003fa4 <HAL_RCC_OscConfig+0x270>)
 8003f00:	f023 0301 	bic.w	r3, r3, #1
 8003f04:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f06:	f7fe f94b 	bl	80021a0 <HAL_GetTick>
 8003f0a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f0c:	e008      	b.n	8003f20 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f0e:	f7fe f947 	bl	80021a0 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e2dd      	b.n	80044dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f20:	4b20      	ldr	r3, [pc, #128]	; (8003fa4 <HAL_RCC_OscConfig+0x270>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1f0      	bne.n	8003f0e <HAL_RCC_OscConfig+0x1da>
 8003f2c:	e000      	b.n	8003f30 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f2e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d074      	beq.n	8004026 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	2b08      	cmp	r3, #8
 8003f40:	d005      	beq.n	8003f4e <HAL_RCC_OscConfig+0x21a>
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	2b0c      	cmp	r3, #12
 8003f46:	d10e      	bne.n	8003f66 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	2b03      	cmp	r3, #3
 8003f4c:	d10b      	bne.n	8003f66 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f4e:	4b15      	ldr	r3, [pc, #84]	; (8003fa4 <HAL_RCC_OscConfig+0x270>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d064      	beq.n	8004024 <HAL_RCC_OscConfig+0x2f0>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d160      	bne.n	8004024 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e2ba      	b.n	80044dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f6e:	d106      	bne.n	8003f7e <HAL_RCC_OscConfig+0x24a>
 8003f70:	4b0c      	ldr	r3, [pc, #48]	; (8003fa4 <HAL_RCC_OscConfig+0x270>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a0b      	ldr	r2, [pc, #44]	; (8003fa4 <HAL_RCC_OscConfig+0x270>)
 8003f76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f7a:	6013      	str	r3, [r2, #0]
 8003f7c:	e026      	b.n	8003fcc <HAL_RCC_OscConfig+0x298>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f86:	d115      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x280>
 8003f88:	4b06      	ldr	r3, [pc, #24]	; (8003fa4 <HAL_RCC_OscConfig+0x270>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a05      	ldr	r2, [pc, #20]	; (8003fa4 <HAL_RCC_OscConfig+0x270>)
 8003f8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f92:	6013      	str	r3, [r2, #0]
 8003f94:	4b03      	ldr	r3, [pc, #12]	; (8003fa4 <HAL_RCC_OscConfig+0x270>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a02      	ldr	r2, [pc, #8]	; (8003fa4 <HAL_RCC_OscConfig+0x270>)
 8003f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f9e:	6013      	str	r3, [r2, #0]
 8003fa0:	e014      	b.n	8003fcc <HAL_RCC_OscConfig+0x298>
 8003fa2:	bf00      	nop
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	0800c588 	.word	0x0800c588
 8003fac:	20000000 	.word	0x20000000
 8003fb0:	20000004 	.word	0x20000004
 8003fb4:	4ba0      	ldr	r3, [pc, #640]	; (8004238 <HAL_RCC_OscConfig+0x504>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a9f      	ldr	r2, [pc, #636]	; (8004238 <HAL_RCC_OscConfig+0x504>)
 8003fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fbe:	6013      	str	r3, [r2, #0]
 8003fc0:	4b9d      	ldr	r3, [pc, #628]	; (8004238 <HAL_RCC_OscConfig+0x504>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a9c      	ldr	r2, [pc, #624]	; (8004238 <HAL_RCC_OscConfig+0x504>)
 8003fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d013      	beq.n	8003ffc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd4:	f7fe f8e4 	bl	80021a0 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fdc:	f7fe f8e0 	bl	80021a0 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b64      	cmp	r3, #100	; 0x64
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e276      	b.n	80044dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fee:	4b92      	ldr	r3, [pc, #584]	; (8004238 <HAL_RCC_OscConfig+0x504>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d0f0      	beq.n	8003fdc <HAL_RCC_OscConfig+0x2a8>
 8003ffa:	e014      	b.n	8004026 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffc:	f7fe f8d0 	bl	80021a0 <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004004:	f7fe f8cc 	bl	80021a0 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b64      	cmp	r3, #100	; 0x64
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e262      	b.n	80044dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004016:	4b88      	ldr	r3, [pc, #544]	; (8004238 <HAL_RCC_OscConfig+0x504>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1f0      	bne.n	8004004 <HAL_RCC_OscConfig+0x2d0>
 8004022:	e000      	b.n	8004026 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d060      	beq.n	80040f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	2b04      	cmp	r3, #4
 8004036:	d005      	beq.n	8004044 <HAL_RCC_OscConfig+0x310>
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	2b0c      	cmp	r3, #12
 800403c:	d119      	bne.n	8004072 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	2b02      	cmp	r3, #2
 8004042:	d116      	bne.n	8004072 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004044:	4b7c      	ldr	r3, [pc, #496]	; (8004238 <HAL_RCC_OscConfig+0x504>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800404c:	2b00      	cmp	r3, #0
 800404e:	d005      	beq.n	800405c <HAL_RCC_OscConfig+0x328>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e23f      	b.n	80044dc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800405c:	4b76      	ldr	r3, [pc, #472]	; (8004238 <HAL_RCC_OscConfig+0x504>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	061b      	lsls	r3, r3, #24
 800406a:	4973      	ldr	r1, [pc, #460]	; (8004238 <HAL_RCC_OscConfig+0x504>)
 800406c:	4313      	orrs	r3, r2
 800406e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004070:	e040      	b.n	80040f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d023      	beq.n	80040c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800407a:	4b6f      	ldr	r3, [pc, #444]	; (8004238 <HAL_RCC_OscConfig+0x504>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a6e      	ldr	r2, [pc, #440]	; (8004238 <HAL_RCC_OscConfig+0x504>)
 8004080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004084:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004086:	f7fe f88b 	bl	80021a0 <HAL_GetTick>
 800408a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800408c:	e008      	b.n	80040a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800408e:	f7fe f887 	bl	80021a0 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	2b02      	cmp	r3, #2
 800409a:	d901      	bls.n	80040a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e21d      	b.n	80044dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040a0:	4b65      	ldr	r3, [pc, #404]	; (8004238 <HAL_RCC_OscConfig+0x504>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d0f0      	beq.n	800408e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ac:	4b62      	ldr	r3, [pc, #392]	; (8004238 <HAL_RCC_OscConfig+0x504>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	061b      	lsls	r3, r3, #24
 80040ba:	495f      	ldr	r1, [pc, #380]	; (8004238 <HAL_RCC_OscConfig+0x504>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	604b      	str	r3, [r1, #4]
 80040c0:	e018      	b.n	80040f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040c2:	4b5d      	ldr	r3, [pc, #372]	; (8004238 <HAL_RCC_OscConfig+0x504>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a5c      	ldr	r2, [pc, #368]	; (8004238 <HAL_RCC_OscConfig+0x504>)
 80040c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ce:	f7fe f867 	bl	80021a0 <HAL_GetTick>
 80040d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040d4:	e008      	b.n	80040e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040d6:	f7fe f863 	bl	80021a0 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e1f9      	b.n	80044dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040e8:	4b53      	ldr	r3, [pc, #332]	; (8004238 <HAL_RCC_OscConfig+0x504>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1f0      	bne.n	80040d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0308 	and.w	r3, r3, #8
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d03c      	beq.n	800417a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d01c      	beq.n	8004142 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004108:	4b4b      	ldr	r3, [pc, #300]	; (8004238 <HAL_RCC_OscConfig+0x504>)
 800410a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800410e:	4a4a      	ldr	r2, [pc, #296]	; (8004238 <HAL_RCC_OscConfig+0x504>)
 8004110:	f043 0301 	orr.w	r3, r3, #1
 8004114:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004118:	f7fe f842 	bl	80021a0 <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800411e:	e008      	b.n	8004132 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004120:	f7fe f83e 	bl	80021a0 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e1d4      	b.n	80044dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004132:	4b41      	ldr	r3, [pc, #260]	; (8004238 <HAL_RCC_OscConfig+0x504>)
 8004134:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d0ef      	beq.n	8004120 <HAL_RCC_OscConfig+0x3ec>
 8004140:	e01b      	b.n	800417a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004142:	4b3d      	ldr	r3, [pc, #244]	; (8004238 <HAL_RCC_OscConfig+0x504>)
 8004144:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004148:	4a3b      	ldr	r2, [pc, #236]	; (8004238 <HAL_RCC_OscConfig+0x504>)
 800414a:	f023 0301 	bic.w	r3, r3, #1
 800414e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004152:	f7fe f825 	bl	80021a0 <HAL_GetTick>
 8004156:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004158:	e008      	b.n	800416c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800415a:	f7fe f821 	bl	80021a0 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d901      	bls.n	800416c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e1b7      	b.n	80044dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800416c:	4b32      	ldr	r3, [pc, #200]	; (8004238 <HAL_RCC_OscConfig+0x504>)
 800416e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1ef      	bne.n	800415a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0304 	and.w	r3, r3, #4
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 80a6 	beq.w	80042d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004188:	2300      	movs	r3, #0
 800418a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800418c:	4b2a      	ldr	r3, [pc, #168]	; (8004238 <HAL_RCC_OscConfig+0x504>)
 800418e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d10d      	bne.n	80041b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004198:	4b27      	ldr	r3, [pc, #156]	; (8004238 <HAL_RCC_OscConfig+0x504>)
 800419a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800419c:	4a26      	ldr	r2, [pc, #152]	; (8004238 <HAL_RCC_OscConfig+0x504>)
 800419e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041a2:	6593      	str	r3, [r2, #88]	; 0x58
 80041a4:	4b24      	ldr	r3, [pc, #144]	; (8004238 <HAL_RCC_OscConfig+0x504>)
 80041a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ac:	60bb      	str	r3, [r7, #8]
 80041ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041b0:	2301      	movs	r3, #1
 80041b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041b4:	4b21      	ldr	r3, [pc, #132]	; (800423c <HAL_RCC_OscConfig+0x508>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d118      	bne.n	80041f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041c0:	4b1e      	ldr	r3, [pc, #120]	; (800423c <HAL_RCC_OscConfig+0x508>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a1d      	ldr	r2, [pc, #116]	; (800423c <HAL_RCC_OscConfig+0x508>)
 80041c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041cc:	f7fd ffe8 	bl	80021a0 <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041d4:	f7fd ffe4 	bl	80021a0 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e17a      	b.n	80044dc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041e6:	4b15      	ldr	r3, [pc, #84]	; (800423c <HAL_RCC_OscConfig+0x508>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0f0      	beq.n	80041d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d108      	bne.n	800420c <HAL_RCC_OscConfig+0x4d8>
 80041fa:	4b0f      	ldr	r3, [pc, #60]	; (8004238 <HAL_RCC_OscConfig+0x504>)
 80041fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004200:	4a0d      	ldr	r2, [pc, #52]	; (8004238 <HAL_RCC_OscConfig+0x504>)
 8004202:	f043 0301 	orr.w	r3, r3, #1
 8004206:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800420a:	e029      	b.n	8004260 <HAL_RCC_OscConfig+0x52c>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	2b05      	cmp	r3, #5
 8004212:	d115      	bne.n	8004240 <HAL_RCC_OscConfig+0x50c>
 8004214:	4b08      	ldr	r3, [pc, #32]	; (8004238 <HAL_RCC_OscConfig+0x504>)
 8004216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800421a:	4a07      	ldr	r2, [pc, #28]	; (8004238 <HAL_RCC_OscConfig+0x504>)
 800421c:	f043 0304 	orr.w	r3, r3, #4
 8004220:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004224:	4b04      	ldr	r3, [pc, #16]	; (8004238 <HAL_RCC_OscConfig+0x504>)
 8004226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800422a:	4a03      	ldr	r2, [pc, #12]	; (8004238 <HAL_RCC_OscConfig+0x504>)
 800422c:	f043 0301 	orr.w	r3, r3, #1
 8004230:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004234:	e014      	b.n	8004260 <HAL_RCC_OscConfig+0x52c>
 8004236:	bf00      	nop
 8004238:	40021000 	.word	0x40021000
 800423c:	40007000 	.word	0x40007000
 8004240:	4b9c      	ldr	r3, [pc, #624]	; (80044b4 <HAL_RCC_OscConfig+0x780>)
 8004242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004246:	4a9b      	ldr	r2, [pc, #620]	; (80044b4 <HAL_RCC_OscConfig+0x780>)
 8004248:	f023 0301 	bic.w	r3, r3, #1
 800424c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004250:	4b98      	ldr	r3, [pc, #608]	; (80044b4 <HAL_RCC_OscConfig+0x780>)
 8004252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004256:	4a97      	ldr	r2, [pc, #604]	; (80044b4 <HAL_RCC_OscConfig+0x780>)
 8004258:	f023 0304 	bic.w	r3, r3, #4
 800425c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d016      	beq.n	8004296 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004268:	f7fd ff9a 	bl	80021a0 <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800426e:	e00a      	b.n	8004286 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004270:	f7fd ff96 	bl	80021a0 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	f241 3288 	movw	r2, #5000	; 0x1388
 800427e:	4293      	cmp	r3, r2
 8004280:	d901      	bls.n	8004286 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e12a      	b.n	80044dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004286:	4b8b      	ldr	r3, [pc, #556]	; (80044b4 <HAL_RCC_OscConfig+0x780>)
 8004288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d0ed      	beq.n	8004270 <HAL_RCC_OscConfig+0x53c>
 8004294:	e015      	b.n	80042c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004296:	f7fd ff83 	bl	80021a0 <HAL_GetTick>
 800429a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800429c:	e00a      	b.n	80042b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800429e:	f7fd ff7f 	bl	80021a0 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d901      	bls.n	80042b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e113      	b.n	80044dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042b4:	4b7f      	ldr	r3, [pc, #508]	; (80044b4 <HAL_RCC_OscConfig+0x780>)
 80042b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1ed      	bne.n	800429e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042c2:	7ffb      	ldrb	r3, [r7, #31]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d105      	bne.n	80042d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042c8:	4b7a      	ldr	r3, [pc, #488]	; (80044b4 <HAL_RCC_OscConfig+0x780>)
 80042ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042cc:	4a79      	ldr	r2, [pc, #484]	; (80044b4 <HAL_RCC_OscConfig+0x780>)
 80042ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042d2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 80fe 	beq.w	80044da <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	f040 80d0 	bne.w	8004488 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80042e8:	4b72      	ldr	r3, [pc, #456]	; (80044b4 <HAL_RCC_OscConfig+0x780>)
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f003 0203 	and.w	r2, r3, #3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d130      	bne.n	800435e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004306:	3b01      	subs	r3, #1
 8004308:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800430a:	429a      	cmp	r2, r3
 800430c:	d127      	bne.n	800435e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004318:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800431a:	429a      	cmp	r2, r3
 800431c:	d11f      	bne.n	800435e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004328:	2a07      	cmp	r2, #7
 800432a:	bf14      	ite	ne
 800432c:	2201      	movne	r2, #1
 800432e:	2200      	moveq	r2, #0
 8004330:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004332:	4293      	cmp	r3, r2
 8004334:	d113      	bne.n	800435e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004340:	085b      	lsrs	r3, r3, #1
 8004342:	3b01      	subs	r3, #1
 8004344:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004346:	429a      	cmp	r2, r3
 8004348:	d109      	bne.n	800435e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004354:	085b      	lsrs	r3, r3, #1
 8004356:	3b01      	subs	r3, #1
 8004358:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800435a:	429a      	cmp	r2, r3
 800435c:	d06e      	beq.n	800443c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	2b0c      	cmp	r3, #12
 8004362:	d069      	beq.n	8004438 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004364:	4b53      	ldr	r3, [pc, #332]	; (80044b4 <HAL_RCC_OscConfig+0x780>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d105      	bne.n	800437c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004370:	4b50      	ldr	r3, [pc, #320]	; (80044b4 <HAL_RCC_OscConfig+0x780>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e0ad      	b.n	80044dc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004380:	4b4c      	ldr	r3, [pc, #304]	; (80044b4 <HAL_RCC_OscConfig+0x780>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a4b      	ldr	r2, [pc, #300]	; (80044b4 <HAL_RCC_OscConfig+0x780>)
 8004386:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800438a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800438c:	f7fd ff08 	bl	80021a0 <HAL_GetTick>
 8004390:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004392:	e008      	b.n	80043a6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004394:	f7fd ff04 	bl	80021a0 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e09a      	b.n	80044dc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043a6:	4b43      	ldr	r3, [pc, #268]	; (80044b4 <HAL_RCC_OscConfig+0x780>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1f0      	bne.n	8004394 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043b2:	4b40      	ldr	r3, [pc, #256]	; (80044b4 <HAL_RCC_OscConfig+0x780>)
 80043b4:	68da      	ldr	r2, [r3, #12]
 80043b6:	4b40      	ldr	r3, [pc, #256]	; (80044b8 <HAL_RCC_OscConfig+0x784>)
 80043b8:	4013      	ands	r3, r2
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80043c2:	3a01      	subs	r2, #1
 80043c4:	0112      	lsls	r2, r2, #4
 80043c6:	4311      	orrs	r1, r2
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043cc:	0212      	lsls	r2, r2, #8
 80043ce:	4311      	orrs	r1, r2
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80043d4:	0852      	lsrs	r2, r2, #1
 80043d6:	3a01      	subs	r2, #1
 80043d8:	0552      	lsls	r2, r2, #21
 80043da:	4311      	orrs	r1, r2
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80043e0:	0852      	lsrs	r2, r2, #1
 80043e2:	3a01      	subs	r2, #1
 80043e4:	0652      	lsls	r2, r2, #25
 80043e6:	4311      	orrs	r1, r2
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043ec:	0912      	lsrs	r2, r2, #4
 80043ee:	0452      	lsls	r2, r2, #17
 80043f0:	430a      	orrs	r2, r1
 80043f2:	4930      	ldr	r1, [pc, #192]	; (80044b4 <HAL_RCC_OscConfig+0x780>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80043f8:	4b2e      	ldr	r3, [pc, #184]	; (80044b4 <HAL_RCC_OscConfig+0x780>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a2d      	ldr	r2, [pc, #180]	; (80044b4 <HAL_RCC_OscConfig+0x780>)
 80043fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004402:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004404:	4b2b      	ldr	r3, [pc, #172]	; (80044b4 <HAL_RCC_OscConfig+0x780>)
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	4a2a      	ldr	r2, [pc, #168]	; (80044b4 <HAL_RCC_OscConfig+0x780>)
 800440a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800440e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004410:	f7fd fec6 	bl	80021a0 <HAL_GetTick>
 8004414:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004416:	e008      	b.n	800442a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004418:	f7fd fec2 	bl	80021a0 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e058      	b.n	80044dc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800442a:	4b22      	ldr	r3, [pc, #136]	; (80044b4 <HAL_RCC_OscConfig+0x780>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d0f0      	beq.n	8004418 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004436:	e050      	b.n	80044da <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e04f      	b.n	80044dc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800443c:	4b1d      	ldr	r3, [pc, #116]	; (80044b4 <HAL_RCC_OscConfig+0x780>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d148      	bne.n	80044da <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004448:	4b1a      	ldr	r3, [pc, #104]	; (80044b4 <HAL_RCC_OscConfig+0x780>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a19      	ldr	r2, [pc, #100]	; (80044b4 <HAL_RCC_OscConfig+0x780>)
 800444e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004452:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004454:	4b17      	ldr	r3, [pc, #92]	; (80044b4 <HAL_RCC_OscConfig+0x780>)
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	4a16      	ldr	r2, [pc, #88]	; (80044b4 <HAL_RCC_OscConfig+0x780>)
 800445a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800445e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004460:	f7fd fe9e 	bl	80021a0 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004468:	f7fd fe9a 	bl	80021a0 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e030      	b.n	80044dc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800447a:	4b0e      	ldr	r3, [pc, #56]	; (80044b4 <HAL_RCC_OscConfig+0x780>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0f0      	beq.n	8004468 <HAL_RCC_OscConfig+0x734>
 8004486:	e028      	b.n	80044da <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	2b0c      	cmp	r3, #12
 800448c:	d023      	beq.n	80044d6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800448e:	4b09      	ldr	r3, [pc, #36]	; (80044b4 <HAL_RCC_OscConfig+0x780>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a08      	ldr	r2, [pc, #32]	; (80044b4 <HAL_RCC_OscConfig+0x780>)
 8004494:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004498:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449a:	f7fd fe81 	bl	80021a0 <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044a0:	e00c      	b.n	80044bc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044a2:	f7fd fe7d 	bl	80021a0 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d905      	bls.n	80044bc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e013      	b.n	80044dc <HAL_RCC_OscConfig+0x7a8>
 80044b4:	40021000 	.word	0x40021000
 80044b8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044bc:	4b09      	ldr	r3, [pc, #36]	; (80044e4 <HAL_RCC_OscConfig+0x7b0>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1ec      	bne.n	80044a2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80044c8:	4b06      	ldr	r3, [pc, #24]	; (80044e4 <HAL_RCC_OscConfig+0x7b0>)
 80044ca:	68da      	ldr	r2, [r3, #12]
 80044cc:	4905      	ldr	r1, [pc, #20]	; (80044e4 <HAL_RCC_OscConfig+0x7b0>)
 80044ce:	4b06      	ldr	r3, [pc, #24]	; (80044e8 <HAL_RCC_OscConfig+0x7b4>)
 80044d0:	4013      	ands	r3, r2
 80044d2:	60cb      	str	r3, [r1, #12]
 80044d4:	e001      	b.n	80044da <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e000      	b.n	80044dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3720      	adds	r7, #32
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	40021000 	.word	0x40021000
 80044e8:	feeefffc 	.word	0xfeeefffc

080044ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d101      	bne.n	8004500 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e0e7      	b.n	80046d0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004500:	4b75      	ldr	r3, [pc, #468]	; (80046d8 <HAL_RCC_ClockConfig+0x1ec>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0307 	and.w	r3, r3, #7
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	429a      	cmp	r2, r3
 800450c:	d910      	bls.n	8004530 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800450e:	4b72      	ldr	r3, [pc, #456]	; (80046d8 <HAL_RCC_ClockConfig+0x1ec>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f023 0207 	bic.w	r2, r3, #7
 8004516:	4970      	ldr	r1, [pc, #448]	; (80046d8 <HAL_RCC_ClockConfig+0x1ec>)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	4313      	orrs	r3, r2
 800451c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800451e:	4b6e      	ldr	r3, [pc, #440]	; (80046d8 <HAL_RCC_ClockConfig+0x1ec>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0307 	and.w	r3, r3, #7
 8004526:	683a      	ldr	r2, [r7, #0]
 8004528:	429a      	cmp	r2, r3
 800452a:	d001      	beq.n	8004530 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e0cf      	b.n	80046d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d010      	beq.n	800455e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689a      	ldr	r2, [r3, #8]
 8004540:	4b66      	ldr	r3, [pc, #408]	; (80046dc <HAL_RCC_ClockConfig+0x1f0>)
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004548:	429a      	cmp	r2, r3
 800454a:	d908      	bls.n	800455e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800454c:	4b63      	ldr	r3, [pc, #396]	; (80046dc <HAL_RCC_ClockConfig+0x1f0>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	4960      	ldr	r1, [pc, #384]	; (80046dc <HAL_RCC_ClockConfig+0x1f0>)
 800455a:	4313      	orrs	r3, r2
 800455c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	d04c      	beq.n	8004604 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	2b03      	cmp	r3, #3
 8004570:	d107      	bne.n	8004582 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004572:	4b5a      	ldr	r3, [pc, #360]	; (80046dc <HAL_RCC_ClockConfig+0x1f0>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d121      	bne.n	80045c2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e0a6      	b.n	80046d0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	2b02      	cmp	r3, #2
 8004588:	d107      	bne.n	800459a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800458a:	4b54      	ldr	r3, [pc, #336]	; (80046dc <HAL_RCC_ClockConfig+0x1f0>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d115      	bne.n	80045c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e09a      	b.n	80046d0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d107      	bne.n	80045b2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045a2:	4b4e      	ldr	r3, [pc, #312]	; (80046dc <HAL_RCC_ClockConfig+0x1f0>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d109      	bne.n	80045c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e08e      	b.n	80046d0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045b2:	4b4a      	ldr	r3, [pc, #296]	; (80046dc <HAL_RCC_ClockConfig+0x1f0>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e086      	b.n	80046d0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045c2:	4b46      	ldr	r3, [pc, #280]	; (80046dc <HAL_RCC_ClockConfig+0x1f0>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f023 0203 	bic.w	r2, r3, #3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	4943      	ldr	r1, [pc, #268]	; (80046dc <HAL_RCC_ClockConfig+0x1f0>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045d4:	f7fd fde4 	bl	80021a0 <HAL_GetTick>
 80045d8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045da:	e00a      	b.n	80045f2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045dc:	f7fd fde0 	bl	80021a0 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e06e      	b.n	80046d0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045f2:	4b3a      	ldr	r3, [pc, #232]	; (80046dc <HAL_RCC_ClockConfig+0x1f0>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f003 020c 	and.w	r2, r3, #12
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	429a      	cmp	r2, r3
 8004602:	d1eb      	bne.n	80045dc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d010      	beq.n	8004632 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689a      	ldr	r2, [r3, #8]
 8004614:	4b31      	ldr	r3, [pc, #196]	; (80046dc <HAL_RCC_ClockConfig+0x1f0>)
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800461c:	429a      	cmp	r2, r3
 800461e:	d208      	bcs.n	8004632 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004620:	4b2e      	ldr	r3, [pc, #184]	; (80046dc <HAL_RCC_ClockConfig+0x1f0>)
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	492b      	ldr	r1, [pc, #172]	; (80046dc <HAL_RCC_ClockConfig+0x1f0>)
 800462e:	4313      	orrs	r3, r2
 8004630:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004632:	4b29      	ldr	r3, [pc, #164]	; (80046d8 <HAL_RCC_ClockConfig+0x1ec>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0307 	and.w	r3, r3, #7
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	429a      	cmp	r2, r3
 800463e:	d210      	bcs.n	8004662 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004640:	4b25      	ldr	r3, [pc, #148]	; (80046d8 <HAL_RCC_ClockConfig+0x1ec>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f023 0207 	bic.w	r2, r3, #7
 8004648:	4923      	ldr	r1, [pc, #140]	; (80046d8 <HAL_RCC_ClockConfig+0x1ec>)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	4313      	orrs	r3, r2
 800464e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004650:	4b21      	ldr	r3, [pc, #132]	; (80046d8 <HAL_RCC_ClockConfig+0x1ec>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0307 	and.w	r3, r3, #7
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	429a      	cmp	r2, r3
 800465c:	d001      	beq.n	8004662 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e036      	b.n	80046d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0304 	and.w	r3, r3, #4
 800466a:	2b00      	cmp	r3, #0
 800466c:	d008      	beq.n	8004680 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800466e:	4b1b      	ldr	r3, [pc, #108]	; (80046dc <HAL_RCC_ClockConfig+0x1f0>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	4918      	ldr	r1, [pc, #96]	; (80046dc <HAL_RCC_ClockConfig+0x1f0>)
 800467c:	4313      	orrs	r3, r2
 800467e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0308 	and.w	r3, r3, #8
 8004688:	2b00      	cmp	r3, #0
 800468a:	d009      	beq.n	80046a0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800468c:	4b13      	ldr	r3, [pc, #76]	; (80046dc <HAL_RCC_ClockConfig+0x1f0>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	00db      	lsls	r3, r3, #3
 800469a:	4910      	ldr	r1, [pc, #64]	; (80046dc <HAL_RCC_ClockConfig+0x1f0>)
 800469c:	4313      	orrs	r3, r2
 800469e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046a0:	f000 f824 	bl	80046ec <HAL_RCC_GetSysClockFreq>
 80046a4:	4602      	mov	r2, r0
 80046a6:	4b0d      	ldr	r3, [pc, #52]	; (80046dc <HAL_RCC_ClockConfig+0x1f0>)
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	091b      	lsrs	r3, r3, #4
 80046ac:	f003 030f 	and.w	r3, r3, #15
 80046b0:	490b      	ldr	r1, [pc, #44]	; (80046e0 <HAL_RCC_ClockConfig+0x1f4>)
 80046b2:	5ccb      	ldrb	r3, [r1, r3]
 80046b4:	f003 031f 	and.w	r3, r3, #31
 80046b8:	fa22 f303 	lsr.w	r3, r2, r3
 80046bc:	4a09      	ldr	r2, [pc, #36]	; (80046e4 <HAL_RCC_ClockConfig+0x1f8>)
 80046be:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80046c0:	4b09      	ldr	r3, [pc, #36]	; (80046e8 <HAL_RCC_ClockConfig+0x1fc>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7fd fd1b 	bl	8002100 <HAL_InitTick>
 80046ca:	4603      	mov	r3, r0
 80046cc:	72fb      	strb	r3, [r7, #11]

  return status;
 80046ce:	7afb      	ldrb	r3, [r7, #11]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	40022000 	.word	0x40022000
 80046dc:	40021000 	.word	0x40021000
 80046e0:	0800c588 	.word	0x0800c588
 80046e4:	20000000 	.word	0x20000000
 80046e8:	20000004 	.word	0x20000004

080046ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b089      	sub	sp, #36	; 0x24
 80046f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80046f2:	2300      	movs	r3, #0
 80046f4:	61fb      	str	r3, [r7, #28]
 80046f6:	2300      	movs	r3, #0
 80046f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046fa:	4b3e      	ldr	r3, [pc, #248]	; (80047f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f003 030c 	and.w	r3, r3, #12
 8004702:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004704:	4b3b      	ldr	r3, [pc, #236]	; (80047f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	f003 0303 	and.w	r3, r3, #3
 800470c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d005      	beq.n	8004720 <HAL_RCC_GetSysClockFreq+0x34>
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	2b0c      	cmp	r3, #12
 8004718:	d121      	bne.n	800475e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d11e      	bne.n	800475e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004720:	4b34      	ldr	r3, [pc, #208]	; (80047f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0308 	and.w	r3, r3, #8
 8004728:	2b00      	cmp	r3, #0
 800472a:	d107      	bne.n	800473c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800472c:	4b31      	ldr	r3, [pc, #196]	; (80047f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800472e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004732:	0a1b      	lsrs	r3, r3, #8
 8004734:	f003 030f 	and.w	r3, r3, #15
 8004738:	61fb      	str	r3, [r7, #28]
 800473a:	e005      	b.n	8004748 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800473c:	4b2d      	ldr	r3, [pc, #180]	; (80047f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	091b      	lsrs	r3, r3, #4
 8004742:	f003 030f 	and.w	r3, r3, #15
 8004746:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004748:	4a2b      	ldr	r2, [pc, #172]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004750:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d10d      	bne.n	8004774 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800475c:	e00a      	b.n	8004774 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	2b04      	cmp	r3, #4
 8004762:	d102      	bne.n	800476a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004764:	4b25      	ldr	r3, [pc, #148]	; (80047fc <HAL_RCC_GetSysClockFreq+0x110>)
 8004766:	61bb      	str	r3, [r7, #24]
 8004768:	e004      	b.n	8004774 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	2b08      	cmp	r3, #8
 800476e:	d101      	bne.n	8004774 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004770:	4b23      	ldr	r3, [pc, #140]	; (8004800 <HAL_RCC_GetSysClockFreq+0x114>)
 8004772:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	2b0c      	cmp	r3, #12
 8004778:	d134      	bne.n	80047e4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800477a:	4b1e      	ldr	r3, [pc, #120]	; (80047f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	f003 0303 	and.w	r3, r3, #3
 8004782:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	2b02      	cmp	r3, #2
 8004788:	d003      	beq.n	8004792 <HAL_RCC_GetSysClockFreq+0xa6>
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	2b03      	cmp	r3, #3
 800478e:	d003      	beq.n	8004798 <HAL_RCC_GetSysClockFreq+0xac>
 8004790:	e005      	b.n	800479e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004792:	4b1a      	ldr	r3, [pc, #104]	; (80047fc <HAL_RCC_GetSysClockFreq+0x110>)
 8004794:	617b      	str	r3, [r7, #20]
      break;
 8004796:	e005      	b.n	80047a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004798:	4b19      	ldr	r3, [pc, #100]	; (8004800 <HAL_RCC_GetSysClockFreq+0x114>)
 800479a:	617b      	str	r3, [r7, #20]
      break;
 800479c:	e002      	b.n	80047a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	617b      	str	r3, [r7, #20]
      break;
 80047a2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047a4:	4b13      	ldr	r3, [pc, #76]	; (80047f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	091b      	lsrs	r3, r3, #4
 80047aa:	f003 0307 	and.w	r3, r3, #7
 80047ae:	3301      	adds	r3, #1
 80047b0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80047b2:	4b10      	ldr	r3, [pc, #64]	; (80047f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	0a1b      	lsrs	r3, r3, #8
 80047b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047bc:	697a      	ldr	r2, [r7, #20]
 80047be:	fb03 f202 	mul.w	r2, r3, r2
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047ca:	4b0a      	ldr	r3, [pc, #40]	; (80047f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	0e5b      	lsrs	r3, r3, #25
 80047d0:	f003 0303 	and.w	r3, r3, #3
 80047d4:	3301      	adds	r3, #1
 80047d6:	005b      	lsls	r3, r3, #1
 80047d8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80047e4:	69bb      	ldr	r3, [r7, #24]
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3724      	adds	r7, #36	; 0x24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	40021000 	.word	0x40021000
 80047f8:	0800c5a0 	.word	0x0800c5a0
 80047fc:	00f42400 	.word	0x00f42400
 8004800:	007a1200 	.word	0x007a1200

08004804 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004804:	b480      	push	{r7}
 8004806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004808:	4b03      	ldr	r3, [pc, #12]	; (8004818 <HAL_RCC_GetHCLKFreq+0x14>)
 800480a:	681b      	ldr	r3, [r3, #0]
}
 800480c:	4618      	mov	r0, r3
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	20000000 	.word	0x20000000

0800481c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004820:	f7ff fff0 	bl	8004804 <HAL_RCC_GetHCLKFreq>
 8004824:	4602      	mov	r2, r0
 8004826:	4b06      	ldr	r3, [pc, #24]	; (8004840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	0a1b      	lsrs	r3, r3, #8
 800482c:	f003 0307 	and.w	r3, r3, #7
 8004830:	4904      	ldr	r1, [pc, #16]	; (8004844 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004832:	5ccb      	ldrb	r3, [r1, r3]
 8004834:	f003 031f 	and.w	r3, r3, #31
 8004838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800483c:	4618      	mov	r0, r3
 800483e:	bd80      	pop	{r7, pc}
 8004840:	40021000 	.word	0x40021000
 8004844:	0800c598 	.word	0x0800c598

08004848 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800484c:	f7ff ffda 	bl	8004804 <HAL_RCC_GetHCLKFreq>
 8004850:	4602      	mov	r2, r0
 8004852:	4b06      	ldr	r3, [pc, #24]	; (800486c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	0adb      	lsrs	r3, r3, #11
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	4904      	ldr	r1, [pc, #16]	; (8004870 <HAL_RCC_GetPCLK2Freq+0x28>)
 800485e:	5ccb      	ldrb	r3, [r1, r3]
 8004860:	f003 031f 	and.w	r3, r3, #31
 8004864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004868:	4618      	mov	r0, r3
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40021000 	.word	0x40021000
 8004870:	0800c598 	.word	0x0800c598

08004874 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800487c:	2300      	movs	r3, #0
 800487e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004880:	4b2a      	ldr	r3, [pc, #168]	; (800492c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d003      	beq.n	8004894 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800488c:	f7ff f9ee 	bl	8003c6c <HAL_PWREx_GetVoltageRange>
 8004890:	6178      	str	r0, [r7, #20]
 8004892:	e014      	b.n	80048be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004894:	4b25      	ldr	r3, [pc, #148]	; (800492c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004898:	4a24      	ldr	r2, [pc, #144]	; (800492c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800489a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800489e:	6593      	str	r3, [r2, #88]	; 0x58
 80048a0:	4b22      	ldr	r3, [pc, #136]	; (800492c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a8:	60fb      	str	r3, [r7, #12]
 80048aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80048ac:	f7ff f9de 	bl	8003c6c <HAL_PWREx_GetVoltageRange>
 80048b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80048b2:	4b1e      	ldr	r3, [pc, #120]	; (800492c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b6:	4a1d      	ldr	r2, [pc, #116]	; (800492c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048bc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048c4:	d10b      	bne.n	80048de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2b80      	cmp	r3, #128	; 0x80
 80048ca:	d919      	bls.n	8004900 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2ba0      	cmp	r3, #160	; 0xa0
 80048d0:	d902      	bls.n	80048d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80048d2:	2302      	movs	r3, #2
 80048d4:	613b      	str	r3, [r7, #16]
 80048d6:	e013      	b.n	8004900 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048d8:	2301      	movs	r3, #1
 80048da:	613b      	str	r3, [r7, #16]
 80048dc:	e010      	b.n	8004900 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2b80      	cmp	r3, #128	; 0x80
 80048e2:	d902      	bls.n	80048ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80048e4:	2303      	movs	r3, #3
 80048e6:	613b      	str	r3, [r7, #16]
 80048e8:	e00a      	b.n	8004900 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2b80      	cmp	r3, #128	; 0x80
 80048ee:	d102      	bne.n	80048f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80048f0:	2302      	movs	r3, #2
 80048f2:	613b      	str	r3, [r7, #16]
 80048f4:	e004      	b.n	8004900 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b70      	cmp	r3, #112	; 0x70
 80048fa:	d101      	bne.n	8004900 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048fc:	2301      	movs	r3, #1
 80048fe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004900:	4b0b      	ldr	r3, [pc, #44]	; (8004930 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f023 0207 	bic.w	r2, r3, #7
 8004908:	4909      	ldr	r1, [pc, #36]	; (8004930 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	4313      	orrs	r3, r2
 800490e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004910:	4b07      	ldr	r3, [pc, #28]	; (8004930 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0307 	and.w	r3, r3, #7
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	429a      	cmp	r2, r3
 800491c:	d001      	beq.n	8004922 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e000      	b.n	8004924 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3718      	adds	r7, #24
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	40021000 	.word	0x40021000
 8004930:	40022000 	.word	0x40022000

08004934 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800493c:	2300      	movs	r3, #0
 800493e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004940:	2300      	movs	r3, #0
 8004942:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800494c:	2b00      	cmp	r3, #0
 800494e:	d041      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004954:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004958:	d02a      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800495a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800495e:	d824      	bhi.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004960:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004964:	d008      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004966:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800496a:	d81e      	bhi.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00a      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004970:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004974:	d010      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004976:	e018      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004978:	4b86      	ldr	r3, [pc, #536]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	4a85      	ldr	r2, [pc, #532]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800497e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004982:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004984:	e015      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	3304      	adds	r3, #4
 800498a:	2100      	movs	r1, #0
 800498c:	4618      	mov	r0, r3
 800498e:	f000 fabb 	bl	8004f08 <RCCEx_PLLSAI1_Config>
 8004992:	4603      	mov	r3, r0
 8004994:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004996:	e00c      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	3320      	adds	r3, #32
 800499c:	2100      	movs	r1, #0
 800499e:	4618      	mov	r0, r3
 80049a0:	f000 fba6 	bl	80050f0 <RCCEx_PLLSAI2_Config>
 80049a4:	4603      	mov	r3, r0
 80049a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049a8:	e003      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	74fb      	strb	r3, [r7, #19]
      break;
 80049ae:	e000      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80049b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049b2:	7cfb      	ldrb	r3, [r7, #19]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10b      	bne.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049b8:	4b76      	ldr	r3, [pc, #472]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049c6:	4973      	ldr	r1, [pc, #460]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80049ce:	e001      	b.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049d0:	7cfb      	ldrb	r3, [r7, #19]
 80049d2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d041      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049e8:	d02a      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80049ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049ee:	d824      	bhi.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80049f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049f4:	d008      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80049f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049fa:	d81e      	bhi.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00a      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004a00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a04:	d010      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a06:	e018      	b.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a08:	4b62      	ldr	r3, [pc, #392]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	4a61      	ldr	r2, [pc, #388]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a12:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a14:	e015      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	3304      	adds	r3, #4
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f000 fa73 	bl	8004f08 <RCCEx_PLLSAI1_Config>
 8004a22:	4603      	mov	r3, r0
 8004a24:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a26:	e00c      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	3320      	adds	r3, #32
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 fb5e 	bl	80050f0 <RCCEx_PLLSAI2_Config>
 8004a34:	4603      	mov	r3, r0
 8004a36:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a38:	e003      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	74fb      	strb	r3, [r7, #19]
      break;
 8004a3e:	e000      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004a40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a42:	7cfb      	ldrb	r3, [r7, #19]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d10b      	bne.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a48:	4b52      	ldr	r3, [pc, #328]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a4e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a56:	494f      	ldr	r1, [pc, #316]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a5e:	e001      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a60:	7cfb      	ldrb	r3, [r7, #19]
 8004a62:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f000 80a0 	beq.w	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a72:	2300      	movs	r3, #0
 8004a74:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a76:	4b47      	ldr	r3, [pc, #284]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004a82:	2301      	movs	r3, #1
 8004a84:	e000      	b.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004a86:	2300      	movs	r3, #0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00d      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a8c:	4b41      	ldr	r3, [pc, #260]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a90:	4a40      	ldr	r2, [pc, #256]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a96:	6593      	str	r3, [r2, #88]	; 0x58
 8004a98:	4b3e      	ldr	r3, [pc, #248]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aa0:	60bb      	str	r3, [r7, #8]
 8004aa2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004aa8:	4b3b      	ldr	r3, [pc, #236]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a3a      	ldr	r2, [pc, #232]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ab2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ab4:	f7fd fb74 	bl	80021a0 <HAL_GetTick>
 8004ab8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004aba:	e009      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004abc:	f7fd fb70 	bl	80021a0 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d902      	bls.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	74fb      	strb	r3, [r7, #19]
        break;
 8004ace:	e005      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ad0:	4b31      	ldr	r3, [pc, #196]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d0ef      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004adc:	7cfb      	ldrb	r3, [r7, #19]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d15c      	bne.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ae2:	4b2c      	ldr	r3, [pc, #176]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ae8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d01f      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d019      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b00:	4b24      	ldr	r3, [pc, #144]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b0a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b0c:	4b21      	ldr	r3, [pc, #132]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b12:	4a20      	ldr	r2, [pc, #128]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b1c:	4b1d      	ldr	r3, [pc, #116]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b22:	4a1c      	ldr	r2, [pc, #112]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b2c:	4a19      	ldr	r2, [pc, #100]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d016      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3e:	f7fd fb2f 	bl	80021a0 <HAL_GetTick>
 8004b42:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b44:	e00b      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b46:	f7fd fb2b 	bl	80021a0 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d902      	bls.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	74fb      	strb	r3, [r7, #19]
            break;
 8004b5c:	e006      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b5e:	4b0d      	ldr	r3, [pc, #52]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b64:	f003 0302 	and.w	r3, r3, #2
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d0ec      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004b6c:	7cfb      	ldrb	r3, [r7, #19]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10c      	bne.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b72:	4b08      	ldr	r3, [pc, #32]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b82:	4904      	ldr	r1, [pc, #16]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004b8a:	e009      	b.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b8c:	7cfb      	ldrb	r3, [r7, #19]
 8004b8e:	74bb      	strb	r3, [r7, #18]
 8004b90:	e006      	b.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004b92:	bf00      	nop
 8004b94:	40021000 	.word	0x40021000
 8004b98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b9c:	7cfb      	ldrb	r3, [r7, #19]
 8004b9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ba0:	7c7b      	ldrb	r3, [r7, #17]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d105      	bne.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ba6:	4b9e      	ldr	r3, [pc, #632]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004baa:	4a9d      	ldr	r2, [pc, #628]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bb0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00a      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bbe:	4b98      	ldr	r3, [pc, #608]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc4:	f023 0203 	bic.w	r2, r3, #3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bcc:	4994      	ldr	r1, [pc, #592]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00a      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004be0:	4b8f      	ldr	r3, [pc, #572]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be6:	f023 020c 	bic.w	r2, r3, #12
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bee:	498c      	ldr	r1, [pc, #560]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0304 	and.w	r3, r3, #4
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00a      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c02:	4b87      	ldr	r3, [pc, #540]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c08:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c10:	4983      	ldr	r1, [pc, #524]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0308 	and.w	r3, r3, #8
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00a      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c24:	4b7e      	ldr	r3, [pc, #504]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c32:	497b      	ldr	r1, [pc, #492]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0310 	and.w	r3, r3, #16
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00a      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c46:	4b76      	ldr	r3, [pc, #472]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c54:	4972      	ldr	r1, [pc, #456]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0320 	and.w	r3, r3, #32
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00a      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c68:	4b6d      	ldr	r3, [pc, #436]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c6e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c76:	496a      	ldr	r1, [pc, #424]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00a      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c8a:	4b65      	ldr	r3, [pc, #404]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c90:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c98:	4961      	ldr	r1, [pc, #388]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00a      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004cac:	4b5c      	ldr	r3, [pc, #368]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cba:	4959      	ldr	r1, [pc, #356]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00a      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cce:	4b54      	ldr	r3, [pc, #336]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cdc:	4950      	ldr	r1, [pc, #320]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00a      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004cf0:	4b4b      	ldr	r3, [pc, #300]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cfe:	4948      	ldr	r1, [pc, #288]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00a      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d12:	4b43      	ldr	r3, [pc, #268]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d20:	493f      	ldr	r1, [pc, #252]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d028      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d34:	4b3a      	ldr	r3, [pc, #232]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d42:	4937      	ldr	r1, [pc, #220]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d52:	d106      	bne.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d54:	4b32      	ldr	r3, [pc, #200]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	4a31      	ldr	r2, [pc, #196]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d5e:	60d3      	str	r3, [r2, #12]
 8004d60:	e011      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d6a:	d10c      	bne.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	3304      	adds	r3, #4
 8004d70:	2101      	movs	r1, #1
 8004d72:	4618      	mov	r0, r3
 8004d74:	f000 f8c8 	bl	8004f08 <RCCEx_PLLSAI1_Config>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004d7c:	7cfb      	ldrb	r3, [r7, #19]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004d82:	7cfb      	ldrb	r3, [r7, #19]
 8004d84:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d028      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d92:	4b23      	ldr	r3, [pc, #140]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d98:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da0:	491f      	ldr	r1, [pc, #124]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004db0:	d106      	bne.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004db2:	4b1b      	ldr	r3, [pc, #108]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	4a1a      	ldr	r2, [pc, #104]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004db8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dbc:	60d3      	str	r3, [r2, #12]
 8004dbe:	e011      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dc8:	d10c      	bne.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	3304      	adds	r3, #4
 8004dce:	2101      	movs	r1, #1
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f000 f899 	bl	8004f08 <RCCEx_PLLSAI1_Config>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004dda:	7cfb      	ldrb	r3, [r7, #19]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004de0:	7cfb      	ldrb	r3, [r7, #19]
 8004de2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d02b      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004df0:	4b0b      	ldr	r3, [pc, #44]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dfe:	4908      	ldr	r1, [pc, #32]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e0e:	d109      	bne.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e10:	4b03      	ldr	r3, [pc, #12]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	4a02      	ldr	r2, [pc, #8]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e1a:	60d3      	str	r3, [r2, #12]
 8004e1c:	e014      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004e1e:	bf00      	nop
 8004e20:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e2c:	d10c      	bne.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	3304      	adds	r3, #4
 8004e32:	2101      	movs	r1, #1
 8004e34:	4618      	mov	r0, r3
 8004e36:	f000 f867 	bl	8004f08 <RCCEx_PLLSAI1_Config>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e3e:	7cfb      	ldrb	r3, [r7, #19]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d001      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004e44:	7cfb      	ldrb	r3, [r7, #19]
 8004e46:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d02f      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e54:	4b2b      	ldr	r3, [pc, #172]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e5a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e62:	4928      	ldr	r1, [pc, #160]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e72:	d10d      	bne.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	3304      	adds	r3, #4
 8004e78:	2102      	movs	r1, #2
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f000 f844 	bl	8004f08 <RCCEx_PLLSAI1_Config>
 8004e80:	4603      	mov	r3, r0
 8004e82:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e84:	7cfb      	ldrb	r3, [r7, #19]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d014      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004e8a:	7cfb      	ldrb	r3, [r7, #19]
 8004e8c:	74bb      	strb	r3, [r7, #18]
 8004e8e:	e011      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e98:	d10c      	bne.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	3320      	adds	r3, #32
 8004e9e:	2102      	movs	r1, #2
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f000 f925 	bl	80050f0 <RCCEx_PLLSAI2_Config>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004eaa:	7cfb      	ldrb	r3, [r7, #19]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d001      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004eb0:	7cfb      	ldrb	r3, [r7, #19]
 8004eb2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00a      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ec0:	4b10      	ldr	r3, [pc, #64]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ece:	490d      	ldr	r1, [pc, #52]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00b      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ee2:	4b08      	ldr	r3, [pc, #32]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ef2:	4904      	ldr	r1, [pc, #16]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004efa:	7cbb      	ldrb	r3, [r7, #18]
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3718      	adds	r7, #24
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	40021000 	.word	0x40021000

08004f08 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f12:	2300      	movs	r3, #0
 8004f14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f16:	4b75      	ldr	r3, [pc, #468]	; (80050ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	f003 0303 	and.w	r3, r3, #3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d018      	beq.n	8004f54 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004f22:	4b72      	ldr	r3, [pc, #456]	; (80050ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	f003 0203 	and.w	r2, r3, #3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d10d      	bne.n	8004f4e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
       ||
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d009      	beq.n	8004f4e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004f3a:	4b6c      	ldr	r3, [pc, #432]	; (80050ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	091b      	lsrs	r3, r3, #4
 8004f40:	f003 0307 	and.w	r3, r3, #7
 8004f44:	1c5a      	adds	r2, r3, #1
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
       ||
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d047      	beq.n	8004fde <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	73fb      	strb	r3, [r7, #15]
 8004f52:	e044      	b.n	8004fde <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2b03      	cmp	r3, #3
 8004f5a:	d018      	beq.n	8004f8e <RCCEx_PLLSAI1_Config+0x86>
 8004f5c:	2b03      	cmp	r3, #3
 8004f5e:	d825      	bhi.n	8004fac <RCCEx_PLLSAI1_Config+0xa4>
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d002      	beq.n	8004f6a <RCCEx_PLLSAI1_Config+0x62>
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d009      	beq.n	8004f7c <RCCEx_PLLSAI1_Config+0x74>
 8004f68:	e020      	b.n	8004fac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f6a:	4b60      	ldr	r3, [pc, #384]	; (80050ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d11d      	bne.n	8004fb2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f7a:	e01a      	b.n	8004fb2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f7c:	4b5b      	ldr	r3, [pc, #364]	; (80050ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d116      	bne.n	8004fb6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f8c:	e013      	b.n	8004fb6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f8e:	4b57      	ldr	r3, [pc, #348]	; (80050ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d10f      	bne.n	8004fba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f9a:	4b54      	ldr	r3, [pc, #336]	; (80050ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d109      	bne.n	8004fba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004faa:	e006      	b.n	8004fba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	73fb      	strb	r3, [r7, #15]
      break;
 8004fb0:	e004      	b.n	8004fbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fb2:	bf00      	nop
 8004fb4:	e002      	b.n	8004fbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fb6:	bf00      	nop
 8004fb8:	e000      	b.n	8004fbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fba:	bf00      	nop
    }

    if(status == HAL_OK)
 8004fbc:	7bfb      	ldrb	r3, [r7, #15]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d10d      	bne.n	8004fde <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004fc2:	4b4a      	ldr	r3, [pc, #296]	; (80050ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6819      	ldr	r1, [r3, #0]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	011b      	lsls	r3, r3, #4
 8004fd6:	430b      	orrs	r3, r1
 8004fd8:	4944      	ldr	r1, [pc, #272]	; (80050ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004fde:	7bfb      	ldrb	r3, [r7, #15]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d17d      	bne.n	80050e0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004fe4:	4b41      	ldr	r3, [pc, #260]	; (80050ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a40      	ldr	r2, [pc, #256]	; (80050ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004fee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ff0:	f7fd f8d6 	bl	80021a0 <HAL_GetTick>
 8004ff4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ff6:	e009      	b.n	800500c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ff8:	f7fd f8d2 	bl	80021a0 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b02      	cmp	r3, #2
 8005004:	d902      	bls.n	800500c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	73fb      	strb	r3, [r7, #15]
        break;
 800500a:	e005      	b.n	8005018 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800500c:	4b37      	ldr	r3, [pc, #220]	; (80050ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d1ef      	bne.n	8004ff8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005018:	7bfb      	ldrb	r3, [r7, #15]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d160      	bne.n	80050e0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d111      	bne.n	8005048 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005024:	4b31      	ldr	r3, [pc, #196]	; (80050ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800502c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	6892      	ldr	r2, [r2, #8]
 8005034:	0211      	lsls	r1, r2, #8
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	68d2      	ldr	r2, [r2, #12]
 800503a:	0912      	lsrs	r2, r2, #4
 800503c:	0452      	lsls	r2, r2, #17
 800503e:	430a      	orrs	r2, r1
 8005040:	492a      	ldr	r1, [pc, #168]	; (80050ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005042:	4313      	orrs	r3, r2
 8005044:	610b      	str	r3, [r1, #16]
 8005046:	e027      	b.n	8005098 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d112      	bne.n	8005074 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800504e:	4b27      	ldr	r3, [pc, #156]	; (80050ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005056:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	6892      	ldr	r2, [r2, #8]
 800505e:	0211      	lsls	r1, r2, #8
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	6912      	ldr	r2, [r2, #16]
 8005064:	0852      	lsrs	r2, r2, #1
 8005066:	3a01      	subs	r2, #1
 8005068:	0552      	lsls	r2, r2, #21
 800506a:	430a      	orrs	r2, r1
 800506c:	491f      	ldr	r1, [pc, #124]	; (80050ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800506e:	4313      	orrs	r3, r2
 8005070:	610b      	str	r3, [r1, #16]
 8005072:	e011      	b.n	8005098 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005074:	4b1d      	ldr	r3, [pc, #116]	; (80050ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800507c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	6892      	ldr	r2, [r2, #8]
 8005084:	0211      	lsls	r1, r2, #8
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	6952      	ldr	r2, [r2, #20]
 800508a:	0852      	lsrs	r2, r2, #1
 800508c:	3a01      	subs	r2, #1
 800508e:	0652      	lsls	r2, r2, #25
 8005090:	430a      	orrs	r2, r1
 8005092:	4916      	ldr	r1, [pc, #88]	; (80050ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005094:	4313      	orrs	r3, r2
 8005096:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005098:	4b14      	ldr	r3, [pc, #80]	; (80050ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a13      	ldr	r2, [pc, #76]	; (80050ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800509e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a4:	f7fd f87c 	bl	80021a0 <HAL_GetTick>
 80050a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050aa:	e009      	b.n	80050c0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050ac:	f7fd f878 	bl	80021a0 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d902      	bls.n	80050c0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	73fb      	strb	r3, [r7, #15]
          break;
 80050be:	e005      	b.n	80050cc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050c0:	4b0a      	ldr	r3, [pc, #40]	; (80050ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d0ef      	beq.n	80050ac <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80050cc:	7bfb      	ldrb	r3, [r7, #15]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d106      	bne.n	80050e0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80050d2:	4b06      	ldr	r3, [pc, #24]	; (80050ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80050d4:	691a      	ldr	r2, [r3, #16]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	4904      	ldr	r1, [pc, #16]	; (80050ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80050e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	40021000 	.word	0x40021000

080050f0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050fa:	2300      	movs	r3, #0
 80050fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80050fe:	4b6a      	ldr	r3, [pc, #424]	; (80052a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	f003 0303 	and.w	r3, r3, #3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d018      	beq.n	800513c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800510a:	4b67      	ldr	r3, [pc, #412]	; (80052a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	f003 0203 	and.w	r2, r3, #3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	429a      	cmp	r2, r3
 8005118:	d10d      	bne.n	8005136 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
       ||
 800511e:	2b00      	cmp	r3, #0
 8005120:	d009      	beq.n	8005136 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005122:	4b61      	ldr	r3, [pc, #388]	; (80052a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	091b      	lsrs	r3, r3, #4
 8005128:	f003 0307 	and.w	r3, r3, #7
 800512c:	1c5a      	adds	r2, r3, #1
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
       ||
 8005132:	429a      	cmp	r2, r3
 8005134:	d047      	beq.n	80051c6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	73fb      	strb	r3, [r7, #15]
 800513a:	e044      	b.n	80051c6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2b03      	cmp	r3, #3
 8005142:	d018      	beq.n	8005176 <RCCEx_PLLSAI2_Config+0x86>
 8005144:	2b03      	cmp	r3, #3
 8005146:	d825      	bhi.n	8005194 <RCCEx_PLLSAI2_Config+0xa4>
 8005148:	2b01      	cmp	r3, #1
 800514a:	d002      	beq.n	8005152 <RCCEx_PLLSAI2_Config+0x62>
 800514c:	2b02      	cmp	r3, #2
 800514e:	d009      	beq.n	8005164 <RCCEx_PLLSAI2_Config+0x74>
 8005150:	e020      	b.n	8005194 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005152:	4b55      	ldr	r3, [pc, #340]	; (80052a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d11d      	bne.n	800519a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005162:	e01a      	b.n	800519a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005164:	4b50      	ldr	r3, [pc, #320]	; (80052a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800516c:	2b00      	cmp	r3, #0
 800516e:	d116      	bne.n	800519e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005174:	e013      	b.n	800519e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005176:	4b4c      	ldr	r3, [pc, #304]	; (80052a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10f      	bne.n	80051a2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005182:	4b49      	ldr	r3, [pc, #292]	; (80052a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d109      	bne.n	80051a2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005192:	e006      	b.n	80051a2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	73fb      	strb	r3, [r7, #15]
      break;
 8005198:	e004      	b.n	80051a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800519a:	bf00      	nop
 800519c:	e002      	b.n	80051a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800519e:	bf00      	nop
 80051a0:	e000      	b.n	80051a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80051a4:	7bfb      	ldrb	r3, [r7, #15]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10d      	bne.n	80051c6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80051aa:	4b3f      	ldr	r3, [pc, #252]	; (80052a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6819      	ldr	r1, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	3b01      	subs	r3, #1
 80051bc:	011b      	lsls	r3, r3, #4
 80051be:	430b      	orrs	r3, r1
 80051c0:	4939      	ldr	r1, [pc, #228]	; (80052a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80051c6:	7bfb      	ldrb	r3, [r7, #15]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d167      	bne.n	800529c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80051cc:	4b36      	ldr	r3, [pc, #216]	; (80052a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a35      	ldr	r2, [pc, #212]	; (80052a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051d8:	f7fc ffe2 	bl	80021a0 <HAL_GetTick>
 80051dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80051de:	e009      	b.n	80051f4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80051e0:	f7fc ffde 	bl	80021a0 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d902      	bls.n	80051f4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	73fb      	strb	r3, [r7, #15]
        break;
 80051f2:	e005      	b.n	8005200 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80051f4:	4b2c      	ldr	r3, [pc, #176]	; (80052a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1ef      	bne.n	80051e0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005200:	7bfb      	ldrb	r3, [r7, #15]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d14a      	bne.n	800529c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d111      	bne.n	8005230 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800520c:	4b26      	ldr	r3, [pc, #152]	; (80052a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005214:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	6892      	ldr	r2, [r2, #8]
 800521c:	0211      	lsls	r1, r2, #8
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	68d2      	ldr	r2, [r2, #12]
 8005222:	0912      	lsrs	r2, r2, #4
 8005224:	0452      	lsls	r2, r2, #17
 8005226:	430a      	orrs	r2, r1
 8005228:	491f      	ldr	r1, [pc, #124]	; (80052a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800522a:	4313      	orrs	r3, r2
 800522c:	614b      	str	r3, [r1, #20]
 800522e:	e011      	b.n	8005254 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005230:	4b1d      	ldr	r3, [pc, #116]	; (80052a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005238:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	6892      	ldr	r2, [r2, #8]
 8005240:	0211      	lsls	r1, r2, #8
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	6912      	ldr	r2, [r2, #16]
 8005246:	0852      	lsrs	r2, r2, #1
 8005248:	3a01      	subs	r2, #1
 800524a:	0652      	lsls	r2, r2, #25
 800524c:	430a      	orrs	r2, r1
 800524e:	4916      	ldr	r1, [pc, #88]	; (80052a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005250:	4313      	orrs	r3, r2
 8005252:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005254:	4b14      	ldr	r3, [pc, #80]	; (80052a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a13      	ldr	r2, [pc, #76]	; (80052a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800525a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800525e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005260:	f7fc ff9e 	bl	80021a0 <HAL_GetTick>
 8005264:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005266:	e009      	b.n	800527c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005268:	f7fc ff9a 	bl	80021a0 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b02      	cmp	r3, #2
 8005274:	d902      	bls.n	800527c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	73fb      	strb	r3, [r7, #15]
          break;
 800527a:	e005      	b.n	8005288 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800527c:	4b0a      	ldr	r3, [pc, #40]	; (80052a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d0ef      	beq.n	8005268 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005288:	7bfb      	ldrb	r3, [r7, #15]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d106      	bne.n	800529c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800528e:	4b06      	ldr	r3, [pc, #24]	; (80052a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005290:	695a      	ldr	r2, [r3, #20]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	4904      	ldr	r1, [pc, #16]	; (80052a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005298:	4313      	orrs	r3, r2
 800529a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800529c:	7bfb      	ldrb	r3, [r7, #15]
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	40021000 	.word	0x40021000

080052ac <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d06c      	beq.n	8005398 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d106      	bne.n	80052d8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7fc fb88 	bl	80019e8 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2202      	movs	r2, #2
 80052dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	22ca      	movs	r2, #202	; 0xca
 80052e6:	625a      	str	r2, [r3, #36]	; 0x24
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2253      	movs	r2, #83	; 0x53
 80052ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 f87c 	bl	80053ee <RTC_EnterInitMode>
 80052f6:	4603      	mov	r3, r0
 80052f8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80052fa:	7bfb      	ldrb	r3, [r7, #15]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d14b      	bne.n	8005398 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	6812      	ldr	r2, [r2, #0]
 800530a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800530e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005312:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	6899      	ldr	r1, [r3, #8]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685a      	ldr	r2, [r3, #4]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	431a      	orrs	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	431a      	orrs	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	430a      	orrs	r2, r1
 8005330:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	68d2      	ldr	r2, [r2, #12]
 800533a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6919      	ldr	r1, [r3, #16]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	041a      	lsls	r2, r3, #16
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	430a      	orrs	r2, r1
 800534e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 f87f 	bl	8005454 <RTC_ExitInitMode>
 8005356:	4603      	mov	r3, r0
 8005358:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800535a:	7bfb      	ldrb	r3, [r7, #15]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d11b      	bne.n	8005398 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f022 0203 	bic.w	r2, r2, #3
 800536e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	69da      	ldr	r2, [r3, #28]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	431a      	orrs	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	430a      	orrs	r2, r1
 8005386:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	22ff      	movs	r2, #255	; 0xff
 800538e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8005398:	7bfb      	ldrb	r3, [r7, #15]
}
 800539a:	4618      	mov	r0, r3
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b084      	sub	sp, #16
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68da      	ldr	r2, [r3, #12]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80053b8:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80053ba:	f7fc fef1 	bl	80021a0 <HAL_GetTick>
 80053be:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80053c0:	e009      	b.n	80053d6 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80053c2:	f7fc feed 	bl	80021a0 <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053d0:	d901      	bls.n	80053d6 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e007      	b.n	80053e6 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	f003 0320 	and.w	r3, r3, #32
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d0ee      	beq.n	80053c2 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3710      	adds	r7, #16
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b084      	sub	sp, #16
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053f6:	2300      	movs	r3, #0
 80053f8:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005404:	2b00      	cmp	r3, #0
 8005406:	d120      	bne.n	800544a <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f04f 32ff 	mov.w	r2, #4294967295
 8005410:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005412:	f7fc fec5 	bl	80021a0 <HAL_GetTick>
 8005416:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005418:	e00d      	b.n	8005436 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800541a:	f7fc fec1 	bl	80021a0 <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005428:	d905      	bls.n	8005436 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2203      	movs	r2, #3
 8005432:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005440:	2b00      	cmp	r3, #0
 8005442:	d102      	bne.n	800544a <RTC_EnterInitMode+0x5c>
 8005444:	7bfb      	ldrb	r3, [r7, #15]
 8005446:	2b03      	cmp	r3, #3
 8005448:	d1e7      	bne.n	800541a <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800544a:	7bfb      	ldrb	r3, [r7, #15]
}
 800544c:	4618      	mov	r0, r3
 800544e:	3710      	adds	r7, #16
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800545c:	2300      	movs	r3, #0
 800545e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005460:	4b1a      	ldr	r3, [pc, #104]	; (80054cc <RTC_ExitInitMode+0x78>)
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	4a19      	ldr	r2, [pc, #100]	; (80054cc <RTC_ExitInitMode+0x78>)
 8005466:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800546a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800546c:	4b17      	ldr	r3, [pc, #92]	; (80054cc <RTC_ExitInitMode+0x78>)
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f003 0320 	and.w	r3, r3, #32
 8005474:	2b00      	cmp	r3, #0
 8005476:	d10c      	bne.n	8005492 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f7ff ff92 	bl	80053a2 <HAL_RTC_WaitForSynchro>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d01e      	beq.n	80054c2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2203      	movs	r2, #3
 8005488:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	73fb      	strb	r3, [r7, #15]
 8005490:	e017      	b.n	80054c2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005492:	4b0e      	ldr	r3, [pc, #56]	; (80054cc <RTC_ExitInitMode+0x78>)
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	4a0d      	ldr	r2, [pc, #52]	; (80054cc <RTC_ExitInitMode+0x78>)
 8005498:	f023 0320 	bic.w	r3, r3, #32
 800549c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f7ff ff7f 	bl	80053a2 <HAL_RTC_WaitForSynchro>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d005      	beq.n	80054b6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2203      	movs	r2, #3
 80054ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80054b6:	4b05      	ldr	r3, [pc, #20]	; (80054cc <RTC_ExitInitMode+0x78>)
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	4a04      	ldr	r2, [pc, #16]	; (80054cc <RTC_ExitInitMode+0x78>)
 80054bc:	f043 0320 	orr.w	r3, r3, #32
 80054c0:	6093      	str	r3, [r2, #8]
  }

  return status;
 80054c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	40002800 	.word	0x40002800

080054d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d101      	bne.n	80054e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e049      	b.n	8005576 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d106      	bne.n	80054fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f7fc fc7e 	bl	8001df8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2202      	movs	r2, #2
 8005500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	3304      	adds	r3, #4
 800550c:	4619      	mov	r1, r3
 800550e:	4610      	mov	r0, r2
 8005510:	f000 fac0 	bl	8005a94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3708      	adds	r7, #8
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
	...

08005580 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800558e:	b2db      	uxtb	r3, r3
 8005590:	2b01      	cmp	r3, #1
 8005592:	d001      	beq.n	8005598 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e04f      	b.n	8005638 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2202      	movs	r2, #2
 800559c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68da      	ldr	r2, [r3, #12]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f042 0201 	orr.w	r2, r2, #1
 80055ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a23      	ldr	r2, [pc, #140]	; (8005644 <HAL_TIM_Base_Start_IT+0xc4>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d01d      	beq.n	80055f6 <HAL_TIM_Base_Start_IT+0x76>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055c2:	d018      	beq.n	80055f6 <HAL_TIM_Base_Start_IT+0x76>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a1f      	ldr	r2, [pc, #124]	; (8005648 <HAL_TIM_Base_Start_IT+0xc8>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d013      	beq.n	80055f6 <HAL_TIM_Base_Start_IT+0x76>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a1e      	ldr	r2, [pc, #120]	; (800564c <HAL_TIM_Base_Start_IT+0xcc>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d00e      	beq.n	80055f6 <HAL_TIM_Base_Start_IT+0x76>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a1c      	ldr	r2, [pc, #112]	; (8005650 <HAL_TIM_Base_Start_IT+0xd0>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d009      	beq.n	80055f6 <HAL_TIM_Base_Start_IT+0x76>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a1b      	ldr	r2, [pc, #108]	; (8005654 <HAL_TIM_Base_Start_IT+0xd4>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d004      	beq.n	80055f6 <HAL_TIM_Base_Start_IT+0x76>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a19      	ldr	r2, [pc, #100]	; (8005658 <HAL_TIM_Base_Start_IT+0xd8>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d115      	bne.n	8005622 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	689a      	ldr	r2, [r3, #8]
 80055fc:	4b17      	ldr	r3, [pc, #92]	; (800565c <HAL_TIM_Base_Start_IT+0xdc>)
 80055fe:	4013      	ands	r3, r2
 8005600:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2b06      	cmp	r3, #6
 8005606:	d015      	beq.n	8005634 <HAL_TIM_Base_Start_IT+0xb4>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800560e:	d011      	beq.n	8005634 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f042 0201 	orr.w	r2, r2, #1
 800561e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005620:	e008      	b.n	8005634 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f042 0201 	orr.w	r2, r2, #1
 8005630:	601a      	str	r2, [r3, #0]
 8005632:	e000      	b.n	8005636 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005634:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3714      	adds	r7, #20
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr
 8005644:	40012c00 	.word	0x40012c00
 8005648:	40000400 	.word	0x40000400
 800564c:	40000800 	.word	0x40000800
 8005650:	40000c00 	.word	0x40000c00
 8005654:	40013400 	.word	0x40013400
 8005658:	40014000 	.word	0x40014000
 800565c:	00010007 	.word	0x00010007

08005660 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b02      	cmp	r3, #2
 8005674:	d122      	bne.n	80056bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	f003 0302 	and.w	r3, r3, #2
 8005680:	2b02      	cmp	r3, #2
 8005682:	d11b      	bne.n	80056bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f06f 0202 	mvn.w	r2, #2
 800568c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2201      	movs	r2, #1
 8005692:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	f003 0303 	and.w	r3, r3, #3
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d003      	beq.n	80056aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f9d8 	bl	8005a58 <HAL_TIM_IC_CaptureCallback>
 80056a8:	e005      	b.n	80056b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 f9ca 	bl	8005a44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 f9db 	bl	8005a6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	f003 0304 	and.w	r3, r3, #4
 80056c6:	2b04      	cmp	r3, #4
 80056c8:	d122      	bne.n	8005710 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	f003 0304 	and.w	r3, r3, #4
 80056d4:	2b04      	cmp	r3, #4
 80056d6:	d11b      	bne.n	8005710 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f06f 0204 	mvn.w	r2, #4
 80056e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2202      	movs	r2, #2
 80056e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d003      	beq.n	80056fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f9ae 	bl	8005a58 <HAL_TIM_IC_CaptureCallback>
 80056fc:	e005      	b.n	800570a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 f9a0 	bl	8005a44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 f9b1 	bl	8005a6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	f003 0308 	and.w	r3, r3, #8
 800571a:	2b08      	cmp	r3, #8
 800571c:	d122      	bne.n	8005764 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	f003 0308 	and.w	r3, r3, #8
 8005728:	2b08      	cmp	r3, #8
 800572a:	d11b      	bne.n	8005764 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f06f 0208 	mvn.w	r2, #8
 8005734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2204      	movs	r2, #4
 800573a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	69db      	ldr	r3, [r3, #28]
 8005742:	f003 0303 	and.w	r3, r3, #3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d003      	beq.n	8005752 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f984 	bl	8005a58 <HAL_TIM_IC_CaptureCallback>
 8005750:	e005      	b.n	800575e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f976 	bl	8005a44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 f987 	bl	8005a6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	f003 0310 	and.w	r3, r3, #16
 800576e:	2b10      	cmp	r3, #16
 8005770:	d122      	bne.n	80057b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	f003 0310 	and.w	r3, r3, #16
 800577c:	2b10      	cmp	r3, #16
 800577e:	d11b      	bne.n	80057b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f06f 0210 	mvn.w	r2, #16
 8005788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2208      	movs	r2, #8
 800578e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800579a:	2b00      	cmp	r3, #0
 800579c:	d003      	beq.n	80057a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f95a 	bl	8005a58 <HAL_TIM_IC_CaptureCallback>
 80057a4:	e005      	b.n	80057b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 f94c 	bl	8005a44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 f95d 	bl	8005a6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d10e      	bne.n	80057e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	f003 0301 	and.w	r3, r3, #1
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d107      	bne.n	80057e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f06f 0201 	mvn.w	r2, #1
 80057dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f926 	bl	8005a30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ee:	2b80      	cmp	r3, #128	; 0x80
 80057f0:	d10e      	bne.n	8005810 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057fc:	2b80      	cmp	r3, #128	; 0x80
 80057fe:	d107      	bne.n	8005810 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 fb08 	bl	8005e20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800581a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800581e:	d10e      	bne.n	800583e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800582a:	2b80      	cmp	r3, #128	; 0x80
 800582c:	d107      	bne.n	800583e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005836:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 fafb 	bl	8005e34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005848:	2b40      	cmp	r3, #64	; 0x40
 800584a:	d10e      	bne.n	800586a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005856:	2b40      	cmp	r3, #64	; 0x40
 8005858:	d107      	bne.n	800586a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005862:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 f90b 	bl	8005a80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	f003 0320 	and.w	r3, r3, #32
 8005874:	2b20      	cmp	r3, #32
 8005876:	d10e      	bne.n	8005896 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	f003 0320 	and.w	r3, r3, #32
 8005882:	2b20      	cmp	r3, #32
 8005884:	d107      	bne.n	8005896 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f06f 0220 	mvn.w	r2, #32
 800588e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 fabb 	bl	8005e0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005896:	bf00      	nop
 8005898:	3708      	adds	r7, #8
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}

0800589e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b084      	sub	sp, #16
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
 80058a6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058a8:	2300      	movs	r3, #0
 80058aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d101      	bne.n	80058ba <HAL_TIM_ConfigClockSource+0x1c>
 80058b6:	2302      	movs	r3, #2
 80058b8:	e0b6      	b.n	8005a28 <HAL_TIM_ConfigClockSource+0x18a>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2201      	movs	r2, #1
 80058be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2202      	movs	r2, #2
 80058c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058d8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80058dc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058e4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68ba      	ldr	r2, [r7, #8]
 80058ec:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058f6:	d03e      	beq.n	8005976 <HAL_TIM_ConfigClockSource+0xd8>
 80058f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058fc:	f200 8087 	bhi.w	8005a0e <HAL_TIM_ConfigClockSource+0x170>
 8005900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005904:	f000 8086 	beq.w	8005a14 <HAL_TIM_ConfigClockSource+0x176>
 8005908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800590c:	d87f      	bhi.n	8005a0e <HAL_TIM_ConfigClockSource+0x170>
 800590e:	2b70      	cmp	r3, #112	; 0x70
 8005910:	d01a      	beq.n	8005948 <HAL_TIM_ConfigClockSource+0xaa>
 8005912:	2b70      	cmp	r3, #112	; 0x70
 8005914:	d87b      	bhi.n	8005a0e <HAL_TIM_ConfigClockSource+0x170>
 8005916:	2b60      	cmp	r3, #96	; 0x60
 8005918:	d050      	beq.n	80059bc <HAL_TIM_ConfigClockSource+0x11e>
 800591a:	2b60      	cmp	r3, #96	; 0x60
 800591c:	d877      	bhi.n	8005a0e <HAL_TIM_ConfigClockSource+0x170>
 800591e:	2b50      	cmp	r3, #80	; 0x50
 8005920:	d03c      	beq.n	800599c <HAL_TIM_ConfigClockSource+0xfe>
 8005922:	2b50      	cmp	r3, #80	; 0x50
 8005924:	d873      	bhi.n	8005a0e <HAL_TIM_ConfigClockSource+0x170>
 8005926:	2b40      	cmp	r3, #64	; 0x40
 8005928:	d058      	beq.n	80059dc <HAL_TIM_ConfigClockSource+0x13e>
 800592a:	2b40      	cmp	r3, #64	; 0x40
 800592c:	d86f      	bhi.n	8005a0e <HAL_TIM_ConfigClockSource+0x170>
 800592e:	2b30      	cmp	r3, #48	; 0x30
 8005930:	d064      	beq.n	80059fc <HAL_TIM_ConfigClockSource+0x15e>
 8005932:	2b30      	cmp	r3, #48	; 0x30
 8005934:	d86b      	bhi.n	8005a0e <HAL_TIM_ConfigClockSource+0x170>
 8005936:	2b20      	cmp	r3, #32
 8005938:	d060      	beq.n	80059fc <HAL_TIM_ConfigClockSource+0x15e>
 800593a:	2b20      	cmp	r3, #32
 800593c:	d867      	bhi.n	8005a0e <HAL_TIM_ConfigClockSource+0x170>
 800593e:	2b00      	cmp	r3, #0
 8005940:	d05c      	beq.n	80059fc <HAL_TIM_ConfigClockSource+0x15e>
 8005942:	2b10      	cmp	r3, #16
 8005944:	d05a      	beq.n	80059fc <HAL_TIM_ConfigClockSource+0x15e>
 8005946:	e062      	b.n	8005a0e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6818      	ldr	r0, [r3, #0]
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	6899      	ldr	r1, [r3, #8]
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	685a      	ldr	r2, [r3, #4]
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	f000 f9b0 	bl	8005cbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800596a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68ba      	ldr	r2, [r7, #8]
 8005972:	609a      	str	r2, [r3, #8]
      break;
 8005974:	e04f      	b.n	8005a16 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6818      	ldr	r0, [r3, #0]
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	6899      	ldr	r1, [r3, #8]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	685a      	ldr	r2, [r3, #4]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	f000 f999 	bl	8005cbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	689a      	ldr	r2, [r3, #8]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005998:	609a      	str	r2, [r3, #8]
      break;
 800599a:	e03c      	b.n	8005a16 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6818      	ldr	r0, [r3, #0]
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	6859      	ldr	r1, [r3, #4]
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	461a      	mov	r2, r3
 80059aa:	f000 f90d 	bl	8005bc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2150      	movs	r1, #80	; 0x50
 80059b4:	4618      	mov	r0, r3
 80059b6:	f000 f966 	bl	8005c86 <TIM_ITRx_SetConfig>
      break;
 80059ba:	e02c      	b.n	8005a16 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6818      	ldr	r0, [r3, #0]
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	6859      	ldr	r1, [r3, #4]
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	461a      	mov	r2, r3
 80059ca:	f000 f92c 	bl	8005c26 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2160      	movs	r1, #96	; 0x60
 80059d4:	4618      	mov	r0, r3
 80059d6:	f000 f956 	bl	8005c86 <TIM_ITRx_SetConfig>
      break;
 80059da:	e01c      	b.n	8005a16 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6818      	ldr	r0, [r3, #0]
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	6859      	ldr	r1, [r3, #4]
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	461a      	mov	r2, r3
 80059ea:	f000 f8ed 	bl	8005bc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2140      	movs	r1, #64	; 0x40
 80059f4:	4618      	mov	r0, r3
 80059f6:	f000 f946 	bl	8005c86 <TIM_ITRx_SetConfig>
      break;
 80059fa:	e00c      	b.n	8005a16 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4619      	mov	r1, r3
 8005a06:	4610      	mov	r0, r2
 8005a08:	f000 f93d 	bl	8005c86 <TIM_ITRx_SetConfig>
      break;
 8005a0c:	e003      	b.n	8005a16 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	73fb      	strb	r3, [r7, #15]
      break;
 8005a12:	e000      	b.n	8005a16 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005a14:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3710      	adds	r7, #16
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005a38:	bf00      	nop
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a4c:	bf00      	nop
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a40      	ldr	r2, [pc, #256]	; (8005ba8 <TIM_Base_SetConfig+0x114>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d013      	beq.n	8005ad4 <TIM_Base_SetConfig+0x40>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ab2:	d00f      	beq.n	8005ad4 <TIM_Base_SetConfig+0x40>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a3d      	ldr	r2, [pc, #244]	; (8005bac <TIM_Base_SetConfig+0x118>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d00b      	beq.n	8005ad4 <TIM_Base_SetConfig+0x40>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a3c      	ldr	r2, [pc, #240]	; (8005bb0 <TIM_Base_SetConfig+0x11c>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d007      	beq.n	8005ad4 <TIM_Base_SetConfig+0x40>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a3b      	ldr	r2, [pc, #236]	; (8005bb4 <TIM_Base_SetConfig+0x120>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d003      	beq.n	8005ad4 <TIM_Base_SetConfig+0x40>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a3a      	ldr	r2, [pc, #232]	; (8005bb8 <TIM_Base_SetConfig+0x124>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d108      	bne.n	8005ae6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ada:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a2f      	ldr	r2, [pc, #188]	; (8005ba8 <TIM_Base_SetConfig+0x114>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d01f      	beq.n	8005b2e <TIM_Base_SetConfig+0x9a>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005af4:	d01b      	beq.n	8005b2e <TIM_Base_SetConfig+0x9a>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a2c      	ldr	r2, [pc, #176]	; (8005bac <TIM_Base_SetConfig+0x118>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d017      	beq.n	8005b2e <TIM_Base_SetConfig+0x9a>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a2b      	ldr	r2, [pc, #172]	; (8005bb0 <TIM_Base_SetConfig+0x11c>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d013      	beq.n	8005b2e <TIM_Base_SetConfig+0x9a>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a2a      	ldr	r2, [pc, #168]	; (8005bb4 <TIM_Base_SetConfig+0x120>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d00f      	beq.n	8005b2e <TIM_Base_SetConfig+0x9a>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a29      	ldr	r2, [pc, #164]	; (8005bb8 <TIM_Base_SetConfig+0x124>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d00b      	beq.n	8005b2e <TIM_Base_SetConfig+0x9a>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a28      	ldr	r2, [pc, #160]	; (8005bbc <TIM_Base_SetConfig+0x128>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d007      	beq.n	8005b2e <TIM_Base_SetConfig+0x9a>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a27      	ldr	r2, [pc, #156]	; (8005bc0 <TIM_Base_SetConfig+0x12c>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d003      	beq.n	8005b2e <TIM_Base_SetConfig+0x9a>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a26      	ldr	r2, [pc, #152]	; (8005bc4 <TIM_Base_SetConfig+0x130>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d108      	bne.n	8005b40 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	689a      	ldr	r2, [r3, #8]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a10      	ldr	r2, [pc, #64]	; (8005ba8 <TIM_Base_SetConfig+0x114>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d00f      	beq.n	8005b8c <TIM_Base_SetConfig+0xf8>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a12      	ldr	r2, [pc, #72]	; (8005bb8 <TIM_Base_SetConfig+0x124>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d00b      	beq.n	8005b8c <TIM_Base_SetConfig+0xf8>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a11      	ldr	r2, [pc, #68]	; (8005bbc <TIM_Base_SetConfig+0x128>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d007      	beq.n	8005b8c <TIM_Base_SetConfig+0xf8>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a10      	ldr	r2, [pc, #64]	; (8005bc0 <TIM_Base_SetConfig+0x12c>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d003      	beq.n	8005b8c <TIM_Base_SetConfig+0xf8>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a0f      	ldr	r2, [pc, #60]	; (8005bc4 <TIM_Base_SetConfig+0x130>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d103      	bne.n	8005b94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	691a      	ldr	r2, [r3, #16]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	615a      	str	r2, [r3, #20]
}
 8005b9a:	bf00      	nop
 8005b9c:	3714      	adds	r7, #20
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	40012c00 	.word	0x40012c00
 8005bac:	40000400 	.word	0x40000400
 8005bb0:	40000800 	.word	0x40000800
 8005bb4:	40000c00 	.word	0x40000c00
 8005bb8:	40013400 	.word	0x40013400
 8005bbc:	40014000 	.word	0x40014000
 8005bc0:	40014400 	.word	0x40014400
 8005bc4:	40014800 	.word	0x40014800

08005bc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b087      	sub	sp, #28
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6a1b      	ldr	r3, [r3, #32]
 8005bd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	f023 0201 	bic.w	r2, r3, #1
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	011b      	lsls	r3, r3, #4
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	f023 030a 	bic.w	r3, r3, #10
 8005c04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	621a      	str	r2, [r3, #32]
}
 8005c1a:	bf00      	nop
 8005c1c:	371c      	adds	r7, #28
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b087      	sub	sp, #28
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	60f8      	str	r0, [r7, #12]
 8005c2e:	60b9      	str	r1, [r7, #8]
 8005c30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	f023 0210 	bic.w	r2, r3, #16
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	031b      	lsls	r3, r3, #12
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	011b      	lsls	r3, r3, #4
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	621a      	str	r2, [r3, #32]
}
 8005c7a:	bf00      	nop
 8005c7c:	371c      	adds	r7, #28
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr

08005c86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c86:	b480      	push	{r7}
 8005c88:	b085      	sub	sp, #20
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
 8005c8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c9e:	683a      	ldr	r2, [r7, #0]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	f043 0307 	orr.w	r3, r3, #7
 8005ca8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	609a      	str	r2, [r3, #8]
}
 8005cb0:	bf00      	nop
 8005cb2:	3714      	adds	r7, #20
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b087      	sub	sp, #28
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	607a      	str	r2, [r7, #4]
 8005cc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	021a      	lsls	r2, r3, #8
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	431a      	orrs	r2, r3
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	697a      	ldr	r2, [r7, #20]
 8005cee:	609a      	str	r2, [r3, #8]
}
 8005cf0:	bf00      	nop
 8005cf2:	371c      	adds	r7, #28
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d101      	bne.n	8005d14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d10:	2302      	movs	r3, #2
 8005d12:	e068      	b.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2202      	movs	r2, #2
 8005d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a2e      	ldr	r2, [pc, #184]	; (8005df4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d004      	beq.n	8005d48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a2d      	ldr	r2, [pc, #180]	; (8005df8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d108      	bne.n	8005d5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005d4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a1e      	ldr	r2, [pc, #120]	; (8005df4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d01d      	beq.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d86:	d018      	beq.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a1b      	ldr	r2, [pc, #108]	; (8005dfc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d013      	beq.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a1a      	ldr	r2, [pc, #104]	; (8005e00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d00e      	beq.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a18      	ldr	r2, [pc, #96]	; (8005e04 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d009      	beq.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a13      	ldr	r2, [pc, #76]	; (8005df8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d004      	beq.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a14      	ldr	r2, [pc, #80]	; (8005e08 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d10c      	bne.n	8005dd4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	68ba      	ldr	r2, [r7, #8]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	40012c00 	.word	0x40012c00
 8005df8:	40013400 	.word	0x40013400
 8005dfc:	40000400 	.word	0x40000400
 8005e00:	40000800 	.word	0x40000800
 8005e04:	40000c00 	.word	0x40000c00
 8005e08:	40014000 	.word	0x40014000

08005e0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d101      	bne.n	8005e5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e040      	b.n	8005edc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d106      	bne.n	8005e70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f7fc f85c 	bl	8001f28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2224      	movs	r2, #36	; 0x24
 8005e74:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f022 0201 	bic.w	r2, r2, #1
 8005e84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 f8c0 	bl	800600c <UART_SetConfig>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d101      	bne.n	8005e96 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e022      	b.n	8005edc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d002      	beq.n	8005ea4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 fb6c 	bl	800657c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685a      	ldr	r2, [r3, #4]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005eb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	689a      	ldr	r2, [r3, #8]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ec2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f042 0201 	orr.w	r2, r2, #1
 8005ed2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 fbf3 	bl	80066c0 <UART_CheckIdleState>
 8005eda:	4603      	mov	r3, r0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3708      	adds	r7, #8
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b08a      	sub	sp, #40	; 0x28
 8005ee8:	af02      	add	r7, sp, #8
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	603b      	str	r3, [r7, #0]
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ef8:	2b20      	cmp	r3, #32
 8005efa:	f040 8082 	bne.w	8006002 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d002      	beq.n	8005f0a <HAL_UART_Transmit+0x26>
 8005f04:	88fb      	ldrh	r3, [r7, #6]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d101      	bne.n	8005f0e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e07a      	b.n	8006004 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d101      	bne.n	8005f1c <HAL_UART_Transmit+0x38>
 8005f18:	2302      	movs	r3, #2
 8005f1a:	e073      	b.n	8006004 <HAL_UART_Transmit+0x120>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2221      	movs	r2, #33	; 0x21
 8005f30:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f32:	f7fc f935 	bl	80021a0 <HAL_GetTick>
 8005f36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	88fa      	ldrh	r2, [r7, #6]
 8005f3c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	88fa      	ldrh	r2, [r7, #6]
 8005f44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f50:	d108      	bne.n	8005f64 <HAL_UART_Transmit+0x80>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d104      	bne.n	8005f64 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	61bb      	str	r3, [r7, #24]
 8005f62:	e003      	b.n	8005f6c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005f74:	e02d      	b.n	8005fd2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	9300      	str	r3, [sp, #0]
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	2180      	movs	r1, #128	; 0x80
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f000 fbe6 	bl	8006752 <UART_WaitOnFlagUntilTimeout>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d001      	beq.n	8005f90 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	e039      	b.n	8006004 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10b      	bne.n	8005fae <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	881a      	ldrh	r2, [r3, #0]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fa2:	b292      	uxth	r2, r2
 8005fa4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	3302      	adds	r3, #2
 8005faa:	61bb      	str	r3, [r7, #24]
 8005fac:	e008      	b.n	8005fc0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	781a      	ldrb	r2, [r3, #0]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	b292      	uxth	r2, r2
 8005fb8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1cb      	bne.n	8005f76 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	9300      	str	r3, [sp, #0]
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	2140      	movs	r1, #64	; 0x40
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f000 fbb2 	bl	8006752 <UART_WaitOnFlagUntilTimeout>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d001      	beq.n	8005ff8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e005      	b.n	8006004 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2220      	movs	r2, #32
 8005ffc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
 8006000:	e000      	b.n	8006004 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006002:	2302      	movs	r3, #2
  }
}
 8006004:	4618      	mov	r0, r3
 8006006:	3720      	adds	r7, #32
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800600c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006010:	b08a      	sub	sp, #40	; 0x28
 8006012:	af00      	add	r7, sp, #0
 8006014:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006016:	2300      	movs	r3, #0
 8006018:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	689a      	ldr	r2, [r3, #8]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	431a      	orrs	r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	431a      	orrs	r2, r3
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	69db      	ldr	r3, [r3, #28]
 8006030:	4313      	orrs	r3, r2
 8006032:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	4ba4      	ldr	r3, [pc, #656]	; (80062cc <UART_SetConfig+0x2c0>)
 800603c:	4013      	ands	r3, r2
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	6812      	ldr	r2, [r2, #0]
 8006042:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006044:	430b      	orrs	r3, r1
 8006046:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	68da      	ldr	r2, [r3, #12]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	430a      	orrs	r2, r1
 800605c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a99      	ldr	r2, [pc, #612]	; (80062d0 <UART_SetConfig+0x2c4>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d004      	beq.n	8006078 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006074:	4313      	orrs	r3, r2
 8006076:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006088:	430a      	orrs	r2, r1
 800608a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a90      	ldr	r2, [pc, #576]	; (80062d4 <UART_SetConfig+0x2c8>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d126      	bne.n	80060e4 <UART_SetConfig+0xd8>
 8006096:	4b90      	ldr	r3, [pc, #576]	; (80062d8 <UART_SetConfig+0x2cc>)
 8006098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800609c:	f003 0303 	and.w	r3, r3, #3
 80060a0:	2b03      	cmp	r3, #3
 80060a2:	d81b      	bhi.n	80060dc <UART_SetConfig+0xd0>
 80060a4:	a201      	add	r2, pc, #4	; (adr r2, 80060ac <UART_SetConfig+0xa0>)
 80060a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060aa:	bf00      	nop
 80060ac:	080060bd 	.word	0x080060bd
 80060b0:	080060cd 	.word	0x080060cd
 80060b4:	080060c5 	.word	0x080060c5
 80060b8:	080060d5 	.word	0x080060d5
 80060bc:	2301      	movs	r3, #1
 80060be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060c2:	e116      	b.n	80062f2 <UART_SetConfig+0x2e6>
 80060c4:	2302      	movs	r3, #2
 80060c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060ca:	e112      	b.n	80062f2 <UART_SetConfig+0x2e6>
 80060cc:	2304      	movs	r3, #4
 80060ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060d2:	e10e      	b.n	80062f2 <UART_SetConfig+0x2e6>
 80060d4:	2308      	movs	r3, #8
 80060d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060da:	e10a      	b.n	80062f2 <UART_SetConfig+0x2e6>
 80060dc:	2310      	movs	r3, #16
 80060de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060e2:	e106      	b.n	80062f2 <UART_SetConfig+0x2e6>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a7c      	ldr	r2, [pc, #496]	; (80062dc <UART_SetConfig+0x2d0>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d138      	bne.n	8006160 <UART_SetConfig+0x154>
 80060ee:	4b7a      	ldr	r3, [pc, #488]	; (80062d8 <UART_SetConfig+0x2cc>)
 80060f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f4:	f003 030c 	and.w	r3, r3, #12
 80060f8:	2b0c      	cmp	r3, #12
 80060fa:	d82d      	bhi.n	8006158 <UART_SetConfig+0x14c>
 80060fc:	a201      	add	r2, pc, #4	; (adr r2, 8006104 <UART_SetConfig+0xf8>)
 80060fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006102:	bf00      	nop
 8006104:	08006139 	.word	0x08006139
 8006108:	08006159 	.word	0x08006159
 800610c:	08006159 	.word	0x08006159
 8006110:	08006159 	.word	0x08006159
 8006114:	08006149 	.word	0x08006149
 8006118:	08006159 	.word	0x08006159
 800611c:	08006159 	.word	0x08006159
 8006120:	08006159 	.word	0x08006159
 8006124:	08006141 	.word	0x08006141
 8006128:	08006159 	.word	0x08006159
 800612c:	08006159 	.word	0x08006159
 8006130:	08006159 	.word	0x08006159
 8006134:	08006151 	.word	0x08006151
 8006138:	2300      	movs	r3, #0
 800613a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800613e:	e0d8      	b.n	80062f2 <UART_SetConfig+0x2e6>
 8006140:	2302      	movs	r3, #2
 8006142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006146:	e0d4      	b.n	80062f2 <UART_SetConfig+0x2e6>
 8006148:	2304      	movs	r3, #4
 800614a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800614e:	e0d0      	b.n	80062f2 <UART_SetConfig+0x2e6>
 8006150:	2308      	movs	r3, #8
 8006152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006156:	e0cc      	b.n	80062f2 <UART_SetConfig+0x2e6>
 8006158:	2310      	movs	r3, #16
 800615a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800615e:	e0c8      	b.n	80062f2 <UART_SetConfig+0x2e6>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a5e      	ldr	r2, [pc, #376]	; (80062e0 <UART_SetConfig+0x2d4>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d125      	bne.n	80061b6 <UART_SetConfig+0x1aa>
 800616a:	4b5b      	ldr	r3, [pc, #364]	; (80062d8 <UART_SetConfig+0x2cc>)
 800616c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006170:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006174:	2b30      	cmp	r3, #48	; 0x30
 8006176:	d016      	beq.n	80061a6 <UART_SetConfig+0x19a>
 8006178:	2b30      	cmp	r3, #48	; 0x30
 800617a:	d818      	bhi.n	80061ae <UART_SetConfig+0x1a2>
 800617c:	2b20      	cmp	r3, #32
 800617e:	d00a      	beq.n	8006196 <UART_SetConfig+0x18a>
 8006180:	2b20      	cmp	r3, #32
 8006182:	d814      	bhi.n	80061ae <UART_SetConfig+0x1a2>
 8006184:	2b00      	cmp	r3, #0
 8006186:	d002      	beq.n	800618e <UART_SetConfig+0x182>
 8006188:	2b10      	cmp	r3, #16
 800618a:	d008      	beq.n	800619e <UART_SetConfig+0x192>
 800618c:	e00f      	b.n	80061ae <UART_SetConfig+0x1a2>
 800618e:	2300      	movs	r3, #0
 8006190:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006194:	e0ad      	b.n	80062f2 <UART_SetConfig+0x2e6>
 8006196:	2302      	movs	r3, #2
 8006198:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800619c:	e0a9      	b.n	80062f2 <UART_SetConfig+0x2e6>
 800619e:	2304      	movs	r3, #4
 80061a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061a4:	e0a5      	b.n	80062f2 <UART_SetConfig+0x2e6>
 80061a6:	2308      	movs	r3, #8
 80061a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061ac:	e0a1      	b.n	80062f2 <UART_SetConfig+0x2e6>
 80061ae:	2310      	movs	r3, #16
 80061b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061b4:	e09d      	b.n	80062f2 <UART_SetConfig+0x2e6>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a4a      	ldr	r2, [pc, #296]	; (80062e4 <UART_SetConfig+0x2d8>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d125      	bne.n	800620c <UART_SetConfig+0x200>
 80061c0:	4b45      	ldr	r3, [pc, #276]	; (80062d8 <UART_SetConfig+0x2cc>)
 80061c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80061ca:	2bc0      	cmp	r3, #192	; 0xc0
 80061cc:	d016      	beq.n	80061fc <UART_SetConfig+0x1f0>
 80061ce:	2bc0      	cmp	r3, #192	; 0xc0
 80061d0:	d818      	bhi.n	8006204 <UART_SetConfig+0x1f8>
 80061d2:	2b80      	cmp	r3, #128	; 0x80
 80061d4:	d00a      	beq.n	80061ec <UART_SetConfig+0x1e0>
 80061d6:	2b80      	cmp	r3, #128	; 0x80
 80061d8:	d814      	bhi.n	8006204 <UART_SetConfig+0x1f8>
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d002      	beq.n	80061e4 <UART_SetConfig+0x1d8>
 80061de:	2b40      	cmp	r3, #64	; 0x40
 80061e0:	d008      	beq.n	80061f4 <UART_SetConfig+0x1e8>
 80061e2:	e00f      	b.n	8006204 <UART_SetConfig+0x1f8>
 80061e4:	2300      	movs	r3, #0
 80061e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061ea:	e082      	b.n	80062f2 <UART_SetConfig+0x2e6>
 80061ec:	2302      	movs	r3, #2
 80061ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061f2:	e07e      	b.n	80062f2 <UART_SetConfig+0x2e6>
 80061f4:	2304      	movs	r3, #4
 80061f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061fa:	e07a      	b.n	80062f2 <UART_SetConfig+0x2e6>
 80061fc:	2308      	movs	r3, #8
 80061fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006202:	e076      	b.n	80062f2 <UART_SetConfig+0x2e6>
 8006204:	2310      	movs	r3, #16
 8006206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800620a:	e072      	b.n	80062f2 <UART_SetConfig+0x2e6>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a35      	ldr	r2, [pc, #212]	; (80062e8 <UART_SetConfig+0x2dc>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d12a      	bne.n	800626c <UART_SetConfig+0x260>
 8006216:	4b30      	ldr	r3, [pc, #192]	; (80062d8 <UART_SetConfig+0x2cc>)
 8006218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800621c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006220:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006224:	d01a      	beq.n	800625c <UART_SetConfig+0x250>
 8006226:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800622a:	d81b      	bhi.n	8006264 <UART_SetConfig+0x258>
 800622c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006230:	d00c      	beq.n	800624c <UART_SetConfig+0x240>
 8006232:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006236:	d815      	bhi.n	8006264 <UART_SetConfig+0x258>
 8006238:	2b00      	cmp	r3, #0
 800623a:	d003      	beq.n	8006244 <UART_SetConfig+0x238>
 800623c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006240:	d008      	beq.n	8006254 <UART_SetConfig+0x248>
 8006242:	e00f      	b.n	8006264 <UART_SetConfig+0x258>
 8006244:	2300      	movs	r3, #0
 8006246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800624a:	e052      	b.n	80062f2 <UART_SetConfig+0x2e6>
 800624c:	2302      	movs	r3, #2
 800624e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006252:	e04e      	b.n	80062f2 <UART_SetConfig+0x2e6>
 8006254:	2304      	movs	r3, #4
 8006256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800625a:	e04a      	b.n	80062f2 <UART_SetConfig+0x2e6>
 800625c:	2308      	movs	r3, #8
 800625e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006262:	e046      	b.n	80062f2 <UART_SetConfig+0x2e6>
 8006264:	2310      	movs	r3, #16
 8006266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800626a:	e042      	b.n	80062f2 <UART_SetConfig+0x2e6>
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a17      	ldr	r2, [pc, #92]	; (80062d0 <UART_SetConfig+0x2c4>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d13a      	bne.n	80062ec <UART_SetConfig+0x2e0>
 8006276:	4b18      	ldr	r3, [pc, #96]	; (80062d8 <UART_SetConfig+0x2cc>)
 8006278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800627c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006280:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006284:	d01a      	beq.n	80062bc <UART_SetConfig+0x2b0>
 8006286:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800628a:	d81b      	bhi.n	80062c4 <UART_SetConfig+0x2b8>
 800628c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006290:	d00c      	beq.n	80062ac <UART_SetConfig+0x2a0>
 8006292:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006296:	d815      	bhi.n	80062c4 <UART_SetConfig+0x2b8>
 8006298:	2b00      	cmp	r3, #0
 800629a:	d003      	beq.n	80062a4 <UART_SetConfig+0x298>
 800629c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062a0:	d008      	beq.n	80062b4 <UART_SetConfig+0x2a8>
 80062a2:	e00f      	b.n	80062c4 <UART_SetConfig+0x2b8>
 80062a4:	2300      	movs	r3, #0
 80062a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062aa:	e022      	b.n	80062f2 <UART_SetConfig+0x2e6>
 80062ac:	2302      	movs	r3, #2
 80062ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062b2:	e01e      	b.n	80062f2 <UART_SetConfig+0x2e6>
 80062b4:	2304      	movs	r3, #4
 80062b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062ba:	e01a      	b.n	80062f2 <UART_SetConfig+0x2e6>
 80062bc:	2308      	movs	r3, #8
 80062be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062c2:	e016      	b.n	80062f2 <UART_SetConfig+0x2e6>
 80062c4:	2310      	movs	r3, #16
 80062c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062ca:	e012      	b.n	80062f2 <UART_SetConfig+0x2e6>
 80062cc:	efff69f3 	.word	0xefff69f3
 80062d0:	40008000 	.word	0x40008000
 80062d4:	40013800 	.word	0x40013800
 80062d8:	40021000 	.word	0x40021000
 80062dc:	40004400 	.word	0x40004400
 80062e0:	40004800 	.word	0x40004800
 80062e4:	40004c00 	.word	0x40004c00
 80062e8:	40005000 	.word	0x40005000
 80062ec:	2310      	movs	r3, #16
 80062ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a9f      	ldr	r2, [pc, #636]	; (8006574 <UART_SetConfig+0x568>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d17a      	bne.n	80063f2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80062fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006300:	2b08      	cmp	r3, #8
 8006302:	d824      	bhi.n	800634e <UART_SetConfig+0x342>
 8006304:	a201      	add	r2, pc, #4	; (adr r2, 800630c <UART_SetConfig+0x300>)
 8006306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630a:	bf00      	nop
 800630c:	08006331 	.word	0x08006331
 8006310:	0800634f 	.word	0x0800634f
 8006314:	08006339 	.word	0x08006339
 8006318:	0800634f 	.word	0x0800634f
 800631c:	0800633f 	.word	0x0800633f
 8006320:	0800634f 	.word	0x0800634f
 8006324:	0800634f 	.word	0x0800634f
 8006328:	0800634f 	.word	0x0800634f
 800632c:	08006347 	.word	0x08006347
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006330:	f7fe fa74 	bl	800481c <HAL_RCC_GetPCLK1Freq>
 8006334:	61f8      	str	r0, [r7, #28]
        break;
 8006336:	e010      	b.n	800635a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006338:	4b8f      	ldr	r3, [pc, #572]	; (8006578 <UART_SetConfig+0x56c>)
 800633a:	61fb      	str	r3, [r7, #28]
        break;
 800633c:	e00d      	b.n	800635a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800633e:	f7fe f9d5 	bl	80046ec <HAL_RCC_GetSysClockFreq>
 8006342:	61f8      	str	r0, [r7, #28]
        break;
 8006344:	e009      	b.n	800635a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006346:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800634a:	61fb      	str	r3, [r7, #28]
        break;
 800634c:	e005      	b.n	800635a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800634e:	2300      	movs	r3, #0
 8006350:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006358:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	2b00      	cmp	r3, #0
 800635e:	f000 80fb 	beq.w	8006558 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	685a      	ldr	r2, [r3, #4]
 8006366:	4613      	mov	r3, r2
 8006368:	005b      	lsls	r3, r3, #1
 800636a:	4413      	add	r3, r2
 800636c:	69fa      	ldr	r2, [r7, #28]
 800636e:	429a      	cmp	r2, r3
 8006370:	d305      	bcc.n	800637e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006378:	69fa      	ldr	r2, [r7, #28]
 800637a:	429a      	cmp	r2, r3
 800637c:	d903      	bls.n	8006386 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006384:	e0e8      	b.n	8006558 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	2200      	movs	r2, #0
 800638a:	461c      	mov	r4, r3
 800638c:	4615      	mov	r5, r2
 800638e:	f04f 0200 	mov.w	r2, #0
 8006392:	f04f 0300 	mov.w	r3, #0
 8006396:	022b      	lsls	r3, r5, #8
 8006398:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800639c:	0222      	lsls	r2, r4, #8
 800639e:	68f9      	ldr	r1, [r7, #12]
 80063a0:	6849      	ldr	r1, [r1, #4]
 80063a2:	0849      	lsrs	r1, r1, #1
 80063a4:	2000      	movs	r0, #0
 80063a6:	4688      	mov	r8, r1
 80063a8:	4681      	mov	r9, r0
 80063aa:	eb12 0a08 	adds.w	sl, r2, r8
 80063ae:	eb43 0b09 	adc.w	fp, r3, r9
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	603b      	str	r3, [r7, #0]
 80063ba:	607a      	str	r2, [r7, #4]
 80063bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063c0:	4650      	mov	r0, sl
 80063c2:	4659      	mov	r1, fp
 80063c4:	f7fa fc60 	bl	8000c88 <__aeabi_uldivmod>
 80063c8:	4602      	mov	r2, r0
 80063ca:	460b      	mov	r3, r1
 80063cc:	4613      	mov	r3, r2
 80063ce:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063d6:	d308      	bcc.n	80063ea <UART_SetConfig+0x3de>
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063de:	d204      	bcs.n	80063ea <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	69ba      	ldr	r2, [r7, #24]
 80063e6:	60da      	str	r2, [r3, #12]
 80063e8:	e0b6      	b.n	8006558 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80063f0:	e0b2      	b.n	8006558 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	69db      	ldr	r3, [r3, #28]
 80063f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063fa:	d15e      	bne.n	80064ba <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80063fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006400:	2b08      	cmp	r3, #8
 8006402:	d828      	bhi.n	8006456 <UART_SetConfig+0x44a>
 8006404:	a201      	add	r2, pc, #4	; (adr r2, 800640c <UART_SetConfig+0x400>)
 8006406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800640a:	bf00      	nop
 800640c:	08006431 	.word	0x08006431
 8006410:	08006439 	.word	0x08006439
 8006414:	08006441 	.word	0x08006441
 8006418:	08006457 	.word	0x08006457
 800641c:	08006447 	.word	0x08006447
 8006420:	08006457 	.word	0x08006457
 8006424:	08006457 	.word	0x08006457
 8006428:	08006457 	.word	0x08006457
 800642c:	0800644f 	.word	0x0800644f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006430:	f7fe f9f4 	bl	800481c <HAL_RCC_GetPCLK1Freq>
 8006434:	61f8      	str	r0, [r7, #28]
        break;
 8006436:	e014      	b.n	8006462 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006438:	f7fe fa06 	bl	8004848 <HAL_RCC_GetPCLK2Freq>
 800643c:	61f8      	str	r0, [r7, #28]
        break;
 800643e:	e010      	b.n	8006462 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006440:	4b4d      	ldr	r3, [pc, #308]	; (8006578 <UART_SetConfig+0x56c>)
 8006442:	61fb      	str	r3, [r7, #28]
        break;
 8006444:	e00d      	b.n	8006462 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006446:	f7fe f951 	bl	80046ec <HAL_RCC_GetSysClockFreq>
 800644a:	61f8      	str	r0, [r7, #28]
        break;
 800644c:	e009      	b.n	8006462 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800644e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006452:	61fb      	str	r3, [r7, #28]
        break;
 8006454:	e005      	b.n	8006462 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006456:	2300      	movs	r3, #0
 8006458:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006460:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d077      	beq.n	8006558 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	005a      	lsls	r2, r3, #1
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	085b      	lsrs	r3, r3, #1
 8006472:	441a      	add	r2, r3
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	fbb2 f3f3 	udiv	r3, r2, r3
 800647c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	2b0f      	cmp	r3, #15
 8006482:	d916      	bls.n	80064b2 <UART_SetConfig+0x4a6>
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800648a:	d212      	bcs.n	80064b2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	b29b      	uxth	r3, r3
 8006490:	f023 030f 	bic.w	r3, r3, #15
 8006494:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	085b      	lsrs	r3, r3, #1
 800649a:	b29b      	uxth	r3, r3
 800649c:	f003 0307 	and.w	r3, r3, #7
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	8afb      	ldrh	r3, [r7, #22]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	8afa      	ldrh	r2, [r7, #22]
 80064ae:	60da      	str	r2, [r3, #12]
 80064b0:	e052      	b.n	8006558 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80064b8:	e04e      	b.n	8006558 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80064be:	2b08      	cmp	r3, #8
 80064c0:	d827      	bhi.n	8006512 <UART_SetConfig+0x506>
 80064c2:	a201      	add	r2, pc, #4	; (adr r2, 80064c8 <UART_SetConfig+0x4bc>)
 80064c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c8:	080064ed 	.word	0x080064ed
 80064cc:	080064f5 	.word	0x080064f5
 80064d0:	080064fd 	.word	0x080064fd
 80064d4:	08006513 	.word	0x08006513
 80064d8:	08006503 	.word	0x08006503
 80064dc:	08006513 	.word	0x08006513
 80064e0:	08006513 	.word	0x08006513
 80064e4:	08006513 	.word	0x08006513
 80064e8:	0800650b 	.word	0x0800650b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064ec:	f7fe f996 	bl	800481c <HAL_RCC_GetPCLK1Freq>
 80064f0:	61f8      	str	r0, [r7, #28]
        break;
 80064f2:	e014      	b.n	800651e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064f4:	f7fe f9a8 	bl	8004848 <HAL_RCC_GetPCLK2Freq>
 80064f8:	61f8      	str	r0, [r7, #28]
        break;
 80064fa:	e010      	b.n	800651e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064fc:	4b1e      	ldr	r3, [pc, #120]	; (8006578 <UART_SetConfig+0x56c>)
 80064fe:	61fb      	str	r3, [r7, #28]
        break;
 8006500:	e00d      	b.n	800651e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006502:	f7fe f8f3 	bl	80046ec <HAL_RCC_GetSysClockFreq>
 8006506:	61f8      	str	r0, [r7, #28]
        break;
 8006508:	e009      	b.n	800651e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800650a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800650e:	61fb      	str	r3, [r7, #28]
        break;
 8006510:	e005      	b.n	800651e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006512:	2300      	movs	r3, #0
 8006514:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800651c:	bf00      	nop
    }

    if (pclk != 0U)
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d019      	beq.n	8006558 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	085a      	lsrs	r2, r3, #1
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	441a      	add	r2, r3
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	fbb2 f3f3 	udiv	r3, r2, r3
 8006536:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	2b0f      	cmp	r3, #15
 800653c:	d909      	bls.n	8006552 <UART_SetConfig+0x546>
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006544:	d205      	bcs.n	8006552 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	b29a      	uxth	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	60da      	str	r2, [r3, #12]
 8006550:	e002      	b.n	8006558 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006564:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006568:	4618      	mov	r0, r3
 800656a:	3728      	adds	r7, #40	; 0x28
 800656c:	46bd      	mov	sp, r7
 800656e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006572:	bf00      	nop
 8006574:	40008000 	.word	0x40008000
 8006578:	00f42400 	.word	0x00f42400

0800657c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006588:	f003 0301 	and.w	r3, r3, #1
 800658c:	2b00      	cmp	r3, #0
 800658e:	d00a      	beq.n	80065a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	430a      	orrs	r2, r1
 80065a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00a      	beq.n	80065c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	430a      	orrs	r2, r1
 80065c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065cc:	f003 0304 	and.w	r3, r3, #4
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00a      	beq.n	80065ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	430a      	orrs	r2, r1
 80065e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ee:	f003 0308 	and.w	r3, r3, #8
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00a      	beq.n	800660c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	430a      	orrs	r2, r1
 800660a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006610:	f003 0310 	and.w	r3, r3, #16
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00a      	beq.n	800662e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	430a      	orrs	r2, r1
 800662c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006632:	f003 0320 	and.w	r3, r3, #32
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00a      	beq.n	8006650 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	430a      	orrs	r2, r1
 800664e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006658:	2b00      	cmp	r3, #0
 800665a:	d01a      	beq.n	8006692 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	430a      	orrs	r2, r1
 8006670:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006676:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800667a:	d10a      	bne.n	8006692 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	430a      	orrs	r2, r1
 8006690:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00a      	beq.n	80066b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	430a      	orrs	r2, r1
 80066b2:	605a      	str	r2, [r3, #4]
  }
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b086      	sub	sp, #24
 80066c4:	af02      	add	r7, sp, #8
 80066c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066d0:	f7fb fd66 	bl	80021a0 <HAL_GetTick>
 80066d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0308 	and.w	r3, r3, #8
 80066e0:	2b08      	cmp	r3, #8
 80066e2:	d10e      	bne.n	8006702 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066e8:	9300      	str	r3, [sp, #0]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f82d 	bl	8006752 <UART_WaitOnFlagUntilTimeout>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d001      	beq.n	8006702 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	e023      	b.n	800674a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0304 	and.w	r3, r3, #4
 800670c:	2b04      	cmp	r3, #4
 800670e:	d10e      	bne.n	800672e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006710:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006714:	9300      	str	r3, [sp, #0]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 f817 	bl	8006752 <UART_WaitOnFlagUntilTimeout>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d001      	beq.n	800672e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e00d      	b.n	800674a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2220      	movs	r2, #32
 8006732:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2220      	movs	r2, #32
 8006738:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b09c      	sub	sp, #112	; 0x70
 8006756:	af00      	add	r7, sp, #0
 8006758:	60f8      	str	r0, [r7, #12]
 800675a:	60b9      	str	r1, [r7, #8]
 800675c:	603b      	str	r3, [r7, #0]
 800675e:	4613      	mov	r3, r2
 8006760:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006762:	e0a5      	b.n	80068b0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006764:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800676a:	f000 80a1 	beq.w	80068b0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800676e:	f7fb fd17 	bl	80021a0 <HAL_GetTick>
 8006772:	4602      	mov	r2, r0
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800677a:	429a      	cmp	r2, r3
 800677c:	d302      	bcc.n	8006784 <UART_WaitOnFlagUntilTimeout+0x32>
 800677e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006780:	2b00      	cmp	r3, #0
 8006782:	d13e      	bne.n	8006802 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800678c:	e853 3f00 	ldrex	r3, [r3]
 8006790:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006794:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006798:	667b      	str	r3, [r7, #100]	; 0x64
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	461a      	mov	r2, r3
 80067a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067a4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80067a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80067aa:	e841 2300 	strex	r3, r2, [r1]
 80067ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80067b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d1e6      	bne.n	8006784 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	3308      	adds	r3, #8
 80067bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067c0:	e853 3f00 	ldrex	r3, [r3]
 80067c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c8:	f023 0301 	bic.w	r3, r3, #1
 80067cc:	663b      	str	r3, [r7, #96]	; 0x60
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	3308      	adds	r3, #8
 80067d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80067d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80067d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80067dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067de:	e841 2300 	strex	r3, r2, [r1]
 80067e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80067e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1e5      	bne.n	80067b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2220      	movs	r2, #32
 80067ee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2220      	movs	r2, #32
 80067f4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	e067      	b.n	80068d2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0304 	and.w	r3, r3, #4
 800680c:	2b00      	cmp	r3, #0
 800680e:	d04f      	beq.n	80068b0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	69db      	ldr	r3, [r3, #28]
 8006816:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800681a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800681e:	d147      	bne.n	80068b0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006828:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006832:	e853 3f00 	ldrex	r3, [r3]
 8006836:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800683e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	461a      	mov	r2, r3
 8006846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006848:	637b      	str	r3, [r7, #52]	; 0x34
 800684a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800684e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006850:	e841 2300 	strex	r3, r2, [r1]
 8006854:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1e6      	bne.n	800682a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	3308      	adds	r3, #8
 8006862:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	e853 3f00 	ldrex	r3, [r3]
 800686a:	613b      	str	r3, [r7, #16]
   return(result);
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	f023 0301 	bic.w	r3, r3, #1
 8006872:	66bb      	str	r3, [r7, #104]	; 0x68
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	3308      	adds	r3, #8
 800687a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800687c:	623a      	str	r2, [r7, #32]
 800687e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006880:	69f9      	ldr	r1, [r7, #28]
 8006882:	6a3a      	ldr	r2, [r7, #32]
 8006884:	e841 2300 	strex	r3, r2, [r1]
 8006888:	61bb      	str	r3, [r7, #24]
   return(result);
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d1e5      	bne.n	800685c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2220      	movs	r2, #32
 8006894:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2220      	movs	r2, #32
 800689a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2220      	movs	r2, #32
 80068a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80068ac:	2303      	movs	r3, #3
 80068ae:	e010      	b.n	80068d2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	69da      	ldr	r2, [r3, #28]
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	4013      	ands	r3, r2
 80068ba:	68ba      	ldr	r2, [r7, #8]
 80068bc:	429a      	cmp	r2, r3
 80068be:	bf0c      	ite	eq
 80068c0:	2301      	moveq	r3, #1
 80068c2:	2300      	movne	r3, #0
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	461a      	mov	r2, r3
 80068c8:	79fb      	ldrb	r3, [r7, #7]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	f43f af4a 	beq.w	8006764 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3770      	adds	r7, #112	; 0x70
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 80068da:	b5b0      	push	{r4, r5, r7, lr}
 80068dc:	b08a      	sub	sp, #40	; 0x28
 80068de:	af00      	add	r7, sp, #0
 80068e0:	60f8      	str	r0, [r7, #12]
 80068e2:	60b9      	str	r1, [r7, #8]
 80068e4:	607a      	str	r2, [r7, #4]
 80068e6:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 80068e8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80068ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 80068f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80068f4:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 80068f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068f8:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 80068fa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80068fc:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 800690a:	f107 0310 	add.w	r3, r7, #16
 800690e:	4618      	mov	r0, r3
 8006910:	f000 f80e 	bl	8006930 <Lcd_init>

	return lcd;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	461d      	mov	r5, r3
 8006918:	f107 0410 	add.w	r4, r7, #16
 800691c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800691e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006920:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006924:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8006928:	68f8      	ldr	r0, [r7, #12]
 800692a:	3728      	adds	r7, #40	; 0x28
 800692c:	46bd      	mov	sp, r7
 800692e:	bdb0      	pop	{r4, r5, r7, pc}

08006930 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	7d9b      	ldrb	r3, [r3, #22]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d10c      	bne.n	800695a <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8006940:	2133      	movs	r1, #51	; 0x33
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f87c 	bl	8006a40 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8006948:	2132      	movs	r1, #50	; 0x32
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 f878 	bl	8006a40 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8006950:	2128      	movs	r1, #40	; 0x28
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 f874 	bl	8006a40 <lcd_write_command>
 8006958:	e003      	b.n	8006962 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 800695a:	2138      	movs	r1, #56	; 0x38
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 f86f 	bl	8006a40 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8006962:	2101      	movs	r1, #1
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 f86b 	bl	8006a40 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 800696a:	210c      	movs	r1, #12
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 f867 	bl	8006a40 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8006972:	2106      	movs	r1, #6
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 f863 	bl	8006a40 <lcd_write_command>
}
 800697a:	bf00      	nop
 800697c:	3708      	adds	r7, #8
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
	...

08006984 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b086      	sub	sp, #24
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 800698e:	f107 030c 	add.w	r3, r7, #12
 8006992:	683a      	ldr	r2, [r7, #0]
 8006994:	4906      	ldr	r1, [pc, #24]	; (80069b0 <Lcd_int+0x2c>)
 8006996:	4618      	mov	r0, r3
 8006998:	f001 ffb0 	bl	80088fc <siprintf>

	Lcd_string(lcd, buffer);
 800699c:	f107 030c 	add.w	r3, r7, #12
 80069a0:	4619      	mov	r1, r3
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 f806 	bl	80069b4 <Lcd_string>
}
 80069a8:	bf00      	nop
 80069aa:	3718      	adds	r7, #24
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	0800c584 	.word	0x0800c584

080069b4 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 80069b4:	b590      	push	{r4, r7, lr}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 80069be:	2300      	movs	r3, #0
 80069c0:	73fb      	strb	r3, [r7, #15]
 80069c2:	e00a      	b.n	80069da <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 80069c4:	7bfb      	ldrb	r3, [r7, #15]
 80069c6:	683a      	ldr	r2, [r7, #0]
 80069c8:	4413      	add	r3, r2
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	4619      	mov	r1, r3
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 f864 	bl	8006a9c <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 80069d4:	7bfb      	ldrb	r3, [r7, #15]
 80069d6:	3301      	adds	r3, #1
 80069d8:	73fb      	strb	r3, [r7, #15]
 80069da:	7bfc      	ldrb	r4, [r7, #15]
 80069dc:	6838      	ldr	r0, [r7, #0]
 80069de:	f7f9 fbf7 	bl	80001d0 <strlen>
 80069e2:	4603      	mov	r3, r0
 80069e4:	429c      	cmp	r4, r3
 80069e6:	d3ed      	bcc.n	80069c4 <Lcd_string+0x10>
	}
}
 80069e8:	bf00      	nop
 80069ea:	bf00      	nop
 80069ec:	3714      	adds	r7, #20
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd90      	pop	{r4, r7, pc}
	...

080069f4 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	460b      	mov	r3, r1
 80069fe:	70fb      	strb	r3, [r7, #3]
 8006a00:	4613      	mov	r3, r2
 8006a02:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8006a04:	78fb      	ldrb	r3, [r7, #3]
 8006a06:	4a07      	ldr	r2, [pc, #28]	; (8006a24 <Lcd_cursor+0x30>)
 8006a08:	5cd2      	ldrb	r2, [r2, r3]
 8006a0a:	78bb      	ldrb	r3, [r7, #2]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	3b80      	subs	r3, #128	; 0x80
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	4619      	mov	r1, r3
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f812 	bl	8006a40 <lcd_write_command>
	#endif
}
 8006a1c:	bf00      	nop
 8006a1e:	3708      	adds	r7, #8
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	0800c5d0 	.word	0x0800c5d0

08006a28 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8006a30:	2101      	movs	r1, #1
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f804 	bl	8006a40 <lcd_write_command>
}
 8006a38:	bf00      	nop
 8006a3a:	3708      	adds	r7, #8
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	460b      	mov	r3, r1
 8006a4a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6898      	ldr	r0, [r3, #8]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	899b      	ldrh	r3, [r3, #12]
 8006a54:	2200      	movs	r2, #0
 8006a56:	4619      	mov	r1, r3
 8006a58:	f7fd f8d8 	bl	8003c0c <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	7d9b      	ldrb	r3, [r3, #22]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d111      	bne.n	8006a88 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8006a64:	78fb      	ldrb	r3, [r7, #3]
 8006a66:	091b      	lsrs	r3, r3, #4
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	2204      	movs	r2, #4
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 f842 	bl	8006af8 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8006a74:	78fb      	ldrb	r3, [r7, #3]
 8006a76:	f003 030f 	and.w	r3, r3, #15
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	2204      	movs	r2, #4
 8006a7e:	4619      	mov	r1, r3
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 f839 	bl	8006af8 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8006a86:	e005      	b.n	8006a94 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8006a88:	78fb      	ldrb	r3, [r7, #3]
 8006a8a:	2208      	movs	r2, #8
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 f832 	bl	8006af8 <lcd_write>
}
 8006a94:	bf00      	nop
 8006a96:	3708      	adds	r7, #8
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6898      	ldr	r0, [r3, #8]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	899b      	ldrh	r3, [r3, #12]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	f7fd f8aa 	bl	8003c0c <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	7d9b      	ldrb	r3, [r3, #22]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d111      	bne.n	8006ae4 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8006ac0:	78fb      	ldrb	r3, [r7, #3]
 8006ac2:	091b      	lsrs	r3, r3, #4
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	2204      	movs	r2, #4
 8006ac8:	4619      	mov	r1, r3
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 f814 	bl	8006af8 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8006ad0:	78fb      	ldrb	r3, [r7, #3]
 8006ad2:	f003 030f 	and.w	r3, r3, #15
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	2204      	movs	r2, #4
 8006ada:	4619      	mov	r1, r3
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 f80b 	bl	8006af8 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8006ae2:	e005      	b.n	8006af0 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8006ae4:	78fb      	ldrb	r3, [r7, #3]
 8006ae6:	2208      	movs	r2, #8
 8006ae8:	4619      	mov	r1, r3
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 f804 	bl	8006af8 <lcd_write>
}
 8006af0:	bf00      	nop
 8006af2:	3708      	adds	r7, #8
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	460b      	mov	r3, r1
 8006b02:	70fb      	strb	r3, [r7, #3]
 8006b04:	4613      	mov	r3, r2
 8006b06:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8006b08:	2300      	movs	r3, #0
 8006b0a:	73fb      	strb	r3, [r7, #15]
 8006b0c:	e019      	b.n	8006b42 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	7bfb      	ldrb	r3, [r7, #15]
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	4413      	add	r3, r2
 8006b18:	6818      	ldr	r0, [r3, #0]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	685a      	ldr	r2, [r3, #4]
 8006b1e:	7bfb      	ldrb	r3, [r7, #15]
 8006b20:	005b      	lsls	r3, r3, #1
 8006b22:	4413      	add	r3, r2
 8006b24:	8819      	ldrh	r1, [r3, #0]
 8006b26:	78fa      	ldrb	r2, [r7, #3]
 8006b28:	7bfb      	ldrb	r3, [r7, #15]
 8006b2a:	fa42 f303 	asr.w	r3, r2, r3
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	f003 0301 	and.w	r3, r3, #1
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	461a      	mov	r2, r3
 8006b38:	f7fd f868 	bl	8003c0c <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8006b3c:	7bfb      	ldrb	r3, [r7, #15]
 8006b3e:	3301      	adds	r3, #1
 8006b40:	73fb      	strb	r3, [r7, #15]
 8006b42:	7bfa      	ldrb	r2, [r7, #15]
 8006b44:	78bb      	ldrb	r3, [r7, #2]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d3e1      	bcc.n	8006b0e <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6918      	ldr	r0, [r3, #16]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	8a9b      	ldrh	r3, [r3, #20]
 8006b52:	2201      	movs	r2, #1
 8006b54:	4619      	mov	r1, r3
 8006b56:	f7fd f859 	bl	8003c0c <HAL_GPIO_WritePin>
	DELAY(1);
 8006b5a:	2001      	movs	r0, #1
 8006b5c:	f7fb fb2c 	bl	80021b8 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6918      	ldr	r0, [r3, #16]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	8a9b      	ldrh	r3, [r3, #20]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	f7fd f84e 	bl	8003c0c <HAL_GPIO_WritePin>
}
 8006b70:	bf00      	nop
 8006b72:	3710      	adds	r7, #16
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <RS485_Data_Transmit>:

//int 	trans_spd;
//uint8_t trans_msg[1];

void RS485_Data_Transmit(int trans_spd, uint8_t trans_msg[1])
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
	encode_transmit_data(trans_spd,trans_msg);
 8006b82:	6839      	ldr	r1, [r7, #0]
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 f80d 	bl	8006ba4 <encode_transmit_data>
	HAL_UART_Transmit(&huart1,trans_msg,1,1);
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	6839      	ldr	r1, [r7, #0]
 8006b90:	4803      	ldr	r0, [pc, #12]	; (8006ba0 <RS485_Data_Transmit+0x28>)
 8006b92:	f7ff f9a7 	bl	8005ee4 <HAL_UART_Transmit>
}
 8006b96:	bf00      	nop
 8006b98:	3708      	adds	r7, #8
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	20004338 	.word	0x20004338

08006ba4 <encode_transmit_data>:

void encode_transmit_data(int input, uint8_t* output)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
	if(input>=0 && input<10){
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	db07      	blt.n	8006bc4 <encode_transmit_data+0x20>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b09      	cmp	r3, #9
 8006bb8:	dc04      	bgt.n	8006bc4 <encode_transmit_data+0x20>
		*output = input;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	b2da      	uxtb	r2, r3
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	701a      	strb	r2, [r3, #0]
	}
	else if(input>9 && input<100){
		*output = (input/10)<<4 | (input%10);
	}
}
 8006bc2:	e020      	b.n	8006c06 <encode_transmit_data+0x62>
	else if(input>9 && input<100){
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2b09      	cmp	r3, #9
 8006bc8:	dd1d      	ble.n	8006c06 <encode_transmit_data+0x62>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2b63      	cmp	r3, #99	; 0x63
 8006bce:	dc1a      	bgt.n	8006c06 <encode_transmit_data+0x62>
		*output = (input/10)<<4 | (input%10);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	4a10      	ldr	r2, [pc, #64]	; (8006c14 <encode_transmit_data+0x70>)
 8006bd4:	fb82 1203 	smull	r1, r2, r2, r3
 8006bd8:	1092      	asrs	r2, r2, #2
 8006bda:	17db      	asrs	r3, r3, #31
 8006bdc:	1ad3      	subs	r3, r2, r3
 8006bde:	011b      	lsls	r3, r3, #4
 8006be0:	b258      	sxtb	r0, r3
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	4b0b      	ldr	r3, [pc, #44]	; (8006c14 <encode_transmit_data+0x70>)
 8006be6:	fb83 1302 	smull	r1, r3, r3, r2
 8006bea:	1099      	asrs	r1, r3, #2
 8006bec:	17d3      	asrs	r3, r2, #31
 8006bee:	1ac9      	subs	r1, r1, r3
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	440b      	add	r3, r1
 8006bf6:	005b      	lsls	r3, r3, #1
 8006bf8:	1ad1      	subs	r1, r2, r3
 8006bfa:	b24b      	sxtb	r3, r1
 8006bfc:	4303      	orrs	r3, r0
 8006bfe:	b25b      	sxtb	r3, r3
 8006c00:	b2da      	uxtb	r2, r3
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	701a      	strb	r2, [r3, #0]
}
 8006c06:	bf00      	nop
 8006c08:	370c      	adds	r7, #12
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	66666667 	.word	0x66666667

08006c18 <Get_Adc>:

#include "adc.h"


uint16_t Get_Adc(){
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	af00      	add	r7, sp, #0
  HAL_ADC_Start(&hadc1);
 8006c1c:	480c      	ldr	r0, [pc, #48]	; (8006c50 <Get_Adc+0x38>)
 8006c1e:	f7fb fe29 	bl	8002874 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1,100);
 8006c22:	2164      	movs	r1, #100	; 0x64
 8006c24:	480a      	ldr	r0, [pc, #40]	; (8006c50 <Get_Adc+0x38>)
 8006c26:	f7fb fedf 	bl	80029e8 <HAL_ADC_PollForConversion>
  if(HAL_IS_BIT_SET(HAL_ADC_GetState(&hadc1),HAL_ADC_STATE_REG_EOC)){
 8006c2a:	4809      	ldr	r0, [pc, #36]	; (8006c50 <Get_Adc+0x38>)
 8006c2c:	f7fc fbb2 	bl	8003394 <HAL_ADC_GetState>
 8006c30:	4603      	mov	r3, r0
 8006c32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c3a:	d105      	bne.n	8006c48 <Get_Adc+0x30>
       return HAL_ADC_GetValue(&hadc1);
 8006c3c:	4804      	ldr	r0, [pc, #16]	; (8006c50 <Get_Adc+0x38>)
 8006c3e:	f7fb ffab 	bl	8002b98 <HAL_ADC_GetValue>
 8006c42:	4603      	mov	r3, r0
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	e000      	b.n	8006c4a <Get_Adc+0x32>
    }
    return 0;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	200001fc 	.word	0x200001fc

08006c54 <arm_cfft_radix8by2_f32>:
 8006c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c58:	ed2d 8b08 	vpush	{d8-d11}
 8006c5c:	4607      	mov	r7, r0
 8006c5e:	4608      	mov	r0, r1
 8006c60:	f8b7 c000 	ldrh.w	ip, [r7]
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8006c6a:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8006c6e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006c72:	f000 80b0 	beq.w	8006dd6 <arm_cfft_radix8by2_f32+0x182>
 8006c76:	008c      	lsls	r4, r1, #2
 8006c78:	3410      	adds	r4, #16
 8006c7a:	f100 0310 	add.w	r3, r0, #16
 8006c7e:	1906      	adds	r6, r0, r4
 8006c80:	3210      	adds	r2, #16
 8006c82:	4444      	add	r4, r8
 8006c84:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8006c88:	f108 0510 	add.w	r5, r8, #16
 8006c8c:	ed15 2a04 	vldr	s4, [r5, #-16]
 8006c90:	ed55 2a03 	vldr	s5, [r5, #-12]
 8006c94:	ed54 4a04 	vldr	s9, [r4, #-16]
 8006c98:	ed14 4a03 	vldr	s8, [r4, #-12]
 8006c9c:	ed14 6a02 	vldr	s12, [r4, #-8]
 8006ca0:	ed54 5a01 	vldr	s11, [r4, #-4]
 8006ca4:	ed53 3a04 	vldr	s7, [r3, #-16]
 8006ca8:	ed15 0a02 	vldr	s0, [r5, #-8]
 8006cac:	ed55 0a01 	vldr	s1, [r5, #-4]
 8006cb0:	ed56 6a04 	vldr	s13, [r6, #-16]
 8006cb4:	ed16 3a03 	vldr	s6, [r6, #-12]
 8006cb8:	ed13 7a03 	vldr	s14, [r3, #-12]
 8006cbc:	ed13 5a02 	vldr	s10, [r3, #-8]
 8006cc0:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006cc4:	ed16 1a02 	vldr	s2, [r6, #-8]
 8006cc8:	ed56 1a01 	vldr	s3, [r6, #-4]
 8006ccc:	ee73 ba82 	vadd.f32	s23, s7, s4
 8006cd0:	ee37 ba22 	vadd.f32	s22, s14, s5
 8006cd4:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8006cd8:	ee33 9a04 	vadd.f32	s18, s6, s8
 8006cdc:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8006ce0:	ee75 aa00 	vadd.f32	s21, s10, s0
 8006ce4:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8006ce8:	ee71 8a06 	vadd.f32	s17, s2, s12
 8006cec:	ed43 ba04 	vstr	s23, [r3, #-16]
 8006cf0:	ed03 ba03 	vstr	s22, [r3, #-12]
 8006cf4:	ed43 aa02 	vstr	s21, [r3, #-8]
 8006cf8:	ed03 aa01 	vstr	s20, [r3, #-4]
 8006cfc:	ed06 8a01 	vstr	s16, [r6, #-4]
 8006d00:	ed46 9a04 	vstr	s19, [r6, #-16]
 8006d04:	ed06 9a03 	vstr	s18, [r6, #-12]
 8006d08:	ed46 8a02 	vstr	s17, [r6, #-8]
 8006d0c:	ee37 7a62 	vsub.f32	s14, s14, s5
 8006d10:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8006d14:	ee34 4a43 	vsub.f32	s8, s8, s6
 8006d18:	ed52 6a03 	vldr	s13, [r2, #-12]
 8006d1c:	ed12 3a04 	vldr	s6, [r2, #-16]
 8006d20:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8006d24:	ee27 8a26 	vmul.f32	s16, s14, s13
 8006d28:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8006d2c:	ee23 2a83 	vmul.f32	s4, s7, s6
 8006d30:	ee64 4a83 	vmul.f32	s9, s9, s6
 8006d34:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8006d38:	ee27 7a03 	vmul.f32	s14, s14, s6
 8006d3c:	ee64 6a26 	vmul.f32	s13, s8, s13
 8006d40:	ee24 4a03 	vmul.f32	s8, s8, s6
 8006d44:	ee37 7a63 	vsub.f32	s14, s14, s7
 8006d48:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8006d4c:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8006d50:	ee32 3a08 	vadd.f32	s6, s4, s16
 8006d54:	ed05 7a03 	vstr	s14, [r5, #-12]
 8006d58:	ed05 3a04 	vstr	s6, [r5, #-16]
 8006d5c:	ed04 4a04 	vstr	s8, [r4, #-16]
 8006d60:	ed44 6a03 	vstr	s13, [r4, #-12]
 8006d64:	ed12 7a01 	vldr	s14, [r2, #-4]
 8006d68:	ee76 6a41 	vsub.f32	s13, s12, s2
 8006d6c:	ee35 5a40 	vsub.f32	s10, s10, s0
 8006d70:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8006d74:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8006d78:	ed52 5a02 	vldr	s11, [r2, #-8]
 8006d7c:	ee67 3a87 	vmul.f32	s7, s15, s14
 8006d80:	ee66 4a87 	vmul.f32	s9, s13, s14
 8006d84:	ee25 4a25 	vmul.f32	s8, s10, s11
 8006d88:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006d8c:	ee25 5a07 	vmul.f32	s10, s10, s14
 8006d90:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8006d94:	ee26 7a07 	vmul.f32	s14, s12, s14
 8006d98:	ee26 6a25 	vmul.f32	s12, s12, s11
 8006d9c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8006da0:	ee74 5a23 	vadd.f32	s11, s8, s7
 8006da4:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8006da8:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006dac:	3310      	adds	r3, #16
 8006dae:	4563      	cmp	r3, ip
 8006db0:	ed45 5a02 	vstr	s11, [r5, #-8]
 8006db4:	f106 0610 	add.w	r6, r6, #16
 8006db8:	ed45 7a01 	vstr	s15, [r5, #-4]
 8006dbc:	f102 0210 	add.w	r2, r2, #16
 8006dc0:	ed04 6a02 	vstr	s12, [r4, #-8]
 8006dc4:	ed04 7a01 	vstr	s14, [r4, #-4]
 8006dc8:	f105 0510 	add.w	r5, r5, #16
 8006dcc:	f104 0410 	add.w	r4, r4, #16
 8006dd0:	f47f af5c 	bne.w	8006c8c <arm_cfft_radix8by2_f32+0x38>
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	b28c      	uxth	r4, r1
 8006dd8:	4621      	mov	r1, r4
 8006dda:	2302      	movs	r3, #2
 8006ddc:	f000 fc1c 	bl	8007618 <arm_radix8_butterfly_f32>
 8006de0:	ecbd 8b08 	vpop	{d8-d11}
 8006de4:	4621      	mov	r1, r4
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	4640      	mov	r0, r8
 8006dea:	2302      	movs	r3, #2
 8006dec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006df0:	f000 bc12 	b.w	8007618 <arm_radix8_butterfly_f32>

08006df4 <arm_cfft_radix8by4_f32>:
 8006df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006df8:	ed2d 8b0a 	vpush	{d8-d12}
 8006dfc:	b08d      	sub	sp, #52	; 0x34
 8006dfe:	460d      	mov	r5, r1
 8006e00:	910b      	str	r1, [sp, #44]	; 0x2c
 8006e02:	8801      	ldrh	r1, [r0, #0]
 8006e04:	6842      	ldr	r2, [r0, #4]
 8006e06:	900a      	str	r0, [sp, #40]	; 0x28
 8006e08:	0849      	lsrs	r1, r1, #1
 8006e0a:	008b      	lsls	r3, r1, #2
 8006e0c:	18ee      	adds	r6, r5, r3
 8006e0e:	18f0      	adds	r0, r6, r3
 8006e10:	edd0 5a00 	vldr	s11, [r0]
 8006e14:	edd5 7a00 	vldr	s15, [r5]
 8006e18:	ed96 7a00 	vldr	s14, [r6]
 8006e1c:	edd0 3a01 	vldr	s7, [r0, #4]
 8006e20:	ed96 4a01 	vldr	s8, [r6, #4]
 8006e24:	ed95 5a01 	vldr	s10, [r5, #4]
 8006e28:	9008      	str	r0, [sp, #32]
 8006e2a:	ee37 6aa5 	vadd.f32	s12, s15, s11
 8006e2e:	18c7      	adds	r7, r0, r3
 8006e30:	edd7 4a00 	vldr	s9, [r7]
 8006e34:	ed97 3a01 	vldr	s6, [r7, #4]
 8006e38:	9701      	str	r7, [sp, #4]
 8006e3a:	ee77 6a06 	vadd.f32	s13, s14, s12
 8006e3e:	462c      	mov	r4, r5
 8006e40:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8006e44:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8006e48:	ee16 ca90 	vmov	ip, s13
 8006e4c:	f844 cb08 	str.w	ip, [r4], #8
 8006e50:	ee75 6a23 	vadd.f32	s13, s10, s7
 8006e54:	edd6 5a01 	vldr	s11, [r6, #4]
 8006e58:	edd7 2a01 	vldr	s5, [r7, #4]
 8006e5c:	9404      	str	r4, [sp, #16]
 8006e5e:	ee35 5a63 	vsub.f32	s10, s10, s7
 8006e62:	ee74 3a27 	vadd.f32	s7, s8, s15
 8006e66:	ee36 6a47 	vsub.f32	s12, s12, s14
 8006e6a:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8006e6e:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8006e72:	0849      	lsrs	r1, r1, #1
 8006e74:	f102 0e08 	add.w	lr, r2, #8
 8006e78:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8006e7c:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8006e80:	9109      	str	r1, [sp, #36]	; 0x24
 8006e82:	ee35 4a47 	vsub.f32	s8, s10, s14
 8006e86:	f1a1 0902 	sub.w	r9, r1, #2
 8006e8a:	f8cd e00c 	str.w	lr, [sp, #12]
 8006e8e:	4631      	mov	r1, r6
 8006e90:	ee13 ea90 	vmov	lr, s7
 8006e94:	ee36 6a64 	vsub.f32	s12, s12, s9
 8006e98:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8006e9c:	4604      	mov	r4, r0
 8006e9e:	edc5 5a01 	vstr	s11, [r5, #4]
 8006ea2:	ee37 7a05 	vadd.f32	s14, s14, s10
 8006ea6:	f841 eb08 	str.w	lr, [r1], #8
 8006eaa:	ee34 5a24 	vadd.f32	s10, s8, s9
 8006eae:	ee16 ea10 	vmov	lr, s12
 8006eb2:	ed86 5a01 	vstr	s10, [r6, #4]
 8006eb6:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8006eba:	f844 eb08 	str.w	lr, [r4], #8
 8006ebe:	ee77 7a83 	vadd.f32	s15, s15, s6
 8006ec2:	edc0 6a01 	vstr	s13, [r0, #4]
 8006ec6:	9405      	str	r4, [sp, #20]
 8006ec8:	4604      	mov	r4, r0
 8006eca:	ee17 0a90 	vmov	r0, s15
 8006ece:	9106      	str	r1, [sp, #24]
 8006ed0:	ee37 7a64 	vsub.f32	s14, s14, s9
 8006ed4:	f102 0110 	add.w	r1, r2, #16
 8006ed8:	46bc      	mov	ip, r7
 8006eda:	9100      	str	r1, [sp, #0]
 8006edc:	f847 0b08 	str.w	r0, [r7], #8
 8006ee0:	f102 0118 	add.w	r1, r2, #24
 8006ee4:	ea5f 0059 	movs.w	r0, r9, lsr #1
 8006ee8:	9102      	str	r1, [sp, #8]
 8006eea:	ed8c 7a01 	vstr	s14, [ip, #4]
 8006eee:	9007      	str	r0, [sp, #28]
 8006ef0:	f000 8134 	beq.w	800715c <arm_cfft_radix8by4_f32+0x368>
 8006ef4:	f102 0920 	add.w	r9, r2, #32
 8006ef8:	f102 0830 	add.w	r8, r2, #48	; 0x30
 8006efc:	9a01      	ldr	r2, [sp, #4]
 8006efe:	f8dd a000 	ldr.w	sl, [sp]
 8006f02:	3b0c      	subs	r3, #12
 8006f04:	4683      	mov	fp, r0
 8006f06:	4463      	add	r3, ip
 8006f08:	f105 0e10 	add.w	lr, r5, #16
 8006f0c:	f1a4 010c 	sub.w	r1, r4, #12
 8006f10:	f104 0510 	add.w	r5, r4, #16
 8006f14:	f1a6 0c0c 	sub.w	ip, r6, #12
 8006f18:	f1a2 040c 	sub.w	r4, r2, #12
 8006f1c:	f106 0010 	add.w	r0, r6, #16
 8006f20:	3210      	adds	r2, #16
 8006f22:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8006f26:	ed55 5a02 	vldr	s11, [r5, #-8]
 8006f2a:	ed50 7a02 	vldr	s15, [r0, #-8]
 8006f2e:	ed52 1a02 	vldr	s3, [r2, #-8]
 8006f32:	ed55 6a01 	vldr	s13, [r5, #-4]
 8006f36:	ed1e 0a01 	vldr	s0, [lr, #-4]
 8006f3a:	ed12 1a01 	vldr	s2, [r2, #-4]
 8006f3e:	ed10 8a01 	vldr	s16, [r0, #-4]
 8006f42:	ee35 4a25 	vadd.f32	s8, s10, s11
 8006f46:	ee30 6a26 	vadd.f32	s12, s0, s13
 8006f4a:	ee37 7a84 	vadd.f32	s14, s15, s8
 8006f4e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8006f52:	ee37 7a21 	vadd.f32	s14, s14, s3
 8006f56:	ee75 5a65 	vsub.f32	s11, s10, s11
 8006f5a:	ed0e 7a02 	vstr	s14, [lr, #-8]
 8006f5e:	ed10 7a01 	vldr	s14, [r0, #-4]
 8006f62:	ed52 6a01 	vldr	s13, [r2, #-4]
 8006f66:	ee36 7a07 	vadd.f32	s14, s12, s14
 8006f6a:	ee78 aa25 	vadd.f32	s21, s16, s11
 8006f6e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006f72:	ee70 3a67 	vsub.f32	s7, s0, s15
 8006f76:	ed0e 7a01 	vstr	s14, [lr, #-4]
 8006f7a:	ed94 7a02 	vldr	s14, [r4, #8]
 8006f7e:	ed9c 2a02 	vldr	s4, [ip, #8]
 8006f82:	ed91 ba02 	vldr	s22, [r1, #8]
 8006f86:	edd3 9a02 	vldr	s19, [r3, #8]
 8006f8a:	edd4 2a01 	vldr	s5, [r4, #4]
 8006f8e:	ed9c 9a01 	vldr	s18, [ip, #4]
 8006f92:	ed93 5a01 	vldr	s10, [r3, #4]
 8006f96:	edd1 0a01 	vldr	s1, [r1, #4]
 8006f9a:	ee72 6a07 	vadd.f32	s13, s4, s14
 8006f9e:	ee32 2a47 	vsub.f32	s4, s4, s14
 8006fa2:	ee7b 8a26 	vadd.f32	s17, s22, s13
 8006fa6:	ee79 4a22 	vadd.f32	s9, s18, s5
 8006faa:	ee38 7aa9 	vadd.f32	s14, s17, s19
 8006fae:	ee79 2a62 	vsub.f32	s5, s18, s5
 8006fb2:	ed8c 7a02 	vstr	s14, [ip, #8]
 8006fb6:	ed91 7a01 	vldr	s14, [r1, #4]
 8006fba:	edd3 8a01 	vldr	s17, [r3, #4]
 8006fbe:	ee34 7a87 	vadd.f32	s14, s9, s14
 8006fc2:	ee3b 3a69 	vsub.f32	s6, s22, s19
 8006fc6:	ee37 7a28 	vadd.f32	s14, s14, s17
 8006fca:	ee32 9a60 	vsub.f32	s18, s4, s1
 8006fce:	ed8c 7a01 	vstr	s14, [ip, #4]
 8006fd2:	ed1a 7a01 	vldr	s14, [sl, #-4]
 8006fd6:	ed1a aa02 	vldr	s20, [sl, #-8]
 8006fda:	ee73 8a22 	vadd.f32	s17, s6, s5
 8006fde:	ee39 9a05 	vadd.f32	s18, s18, s10
 8006fe2:	ee7a aac1 	vsub.f32	s21, s21, s2
 8006fe6:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8006fea:	ee2a ca8a 	vmul.f32	s24, s21, s20
 8006fee:	ee69 ba07 	vmul.f32	s23, s18, s14
 8006ff2:	ee6a aa87 	vmul.f32	s21, s21, s14
 8006ff6:	ee29 9a0a 	vmul.f32	s18, s18, s20
 8006ffa:	ee63 ca87 	vmul.f32	s25, s7, s14
 8006ffe:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8007002:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8007006:	ee68 8a87 	vmul.f32	s17, s17, s14
 800700a:	ee73 3aea 	vsub.f32	s7, s7, s21
 800700e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8007012:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8007016:	ee3b aaca 	vsub.f32	s20, s23, s20
 800701a:	ee34 4a67 	vsub.f32	s8, s8, s15
 800701e:	ee76 6acb 	vsub.f32	s13, s13, s22
 8007022:	ee36 6a48 	vsub.f32	s12, s12, s16
 8007026:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800702a:	ed00 7a02 	vstr	s14, [r0, #-8]
 800702e:	ed40 3a01 	vstr	s7, [r0, #-4]
 8007032:	edc1 8a01 	vstr	s17, [r1, #4]
 8007036:	ed81 aa02 	vstr	s20, [r1, #8]
 800703a:	ed59 3a04 	vldr	s7, [r9, #-16]
 800703e:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8007042:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8007046:	ed59 6a03 	vldr	s13, [r9, #-12]
 800704a:	ee34 4a61 	vsub.f32	s8, s8, s3
 800704e:	ee36 6a41 	vsub.f32	s12, s12, s2
 8007052:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8007056:	ee66 9a26 	vmul.f32	s19, s12, s13
 800705a:	ee24 9a23 	vmul.f32	s18, s8, s7
 800705e:	ee26 6a23 	vmul.f32	s12, s12, s7
 8007062:	ee24 4a26 	vmul.f32	s8, s8, s13
 8007066:	ee27 7a26 	vmul.f32	s14, s14, s13
 800706a:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800706e:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8007072:	ee36 6a44 	vsub.f32	s12, s12, s8
 8007076:	ee37 7a64 	vsub.f32	s14, s14, s9
 800707a:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800707e:	ee79 3a29 	vadd.f32	s7, s18, s19
 8007082:	ee75 6a60 	vsub.f32	s13, s10, s1
 8007086:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800708a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800708e:	ed45 3a02 	vstr	s7, [r5, #-8]
 8007092:	ed05 6a01 	vstr	s12, [r5, #-4]
 8007096:	ed84 7a01 	vstr	s14, [r4, #4]
 800709a:	ed84 4a02 	vstr	s8, [r4, #8]
 800709e:	ee35 6a81 	vadd.f32	s12, s11, s2
 80070a2:	ee36 7ac2 	vsub.f32	s14, s13, s4
 80070a6:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 80070aa:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 80070ae:	ee33 3a62 	vsub.f32	s6, s6, s5
 80070b2:	ee77 7ae1 	vsub.f32	s15, s15, s3
 80070b6:	ee67 2a26 	vmul.f32	s5, s14, s13
 80070ba:	ee67 4aa6 	vmul.f32	s9, s15, s13
 80070be:	ee26 5a25 	vmul.f32	s10, s12, s11
 80070c2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80070c6:	ee26 6a26 	vmul.f32	s12, s12, s13
 80070ca:	ee27 7a25 	vmul.f32	s14, s14, s11
 80070ce:	ee63 6a26 	vmul.f32	s13, s6, s13
 80070d2:	ee23 3a25 	vmul.f32	s6, s6, s11
 80070d6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80070da:	ee75 5a24 	vadd.f32	s11, s10, s9
 80070de:	ee32 3ac3 	vsub.f32	s6, s5, s6
 80070e2:	ee36 7a87 	vadd.f32	s14, s13, s14
 80070e6:	f1bb 0b01 	subs.w	fp, fp, #1
 80070ea:	ed42 5a02 	vstr	s11, [r2, #-8]
 80070ee:	ed42 7a01 	vstr	s15, [r2, #-4]
 80070f2:	f10e 0e08 	add.w	lr, lr, #8
 80070f6:	ed83 3a02 	vstr	s6, [r3, #8]
 80070fa:	ed83 7a01 	vstr	s14, [r3, #4]
 80070fe:	f1ac 0c08 	sub.w	ip, ip, #8
 8007102:	f10a 0a08 	add.w	sl, sl, #8
 8007106:	f100 0008 	add.w	r0, r0, #8
 800710a:	f1a1 0108 	sub.w	r1, r1, #8
 800710e:	f109 0910 	add.w	r9, r9, #16
 8007112:	f105 0508 	add.w	r5, r5, #8
 8007116:	f1a4 0408 	sub.w	r4, r4, #8
 800711a:	f108 0818 	add.w	r8, r8, #24
 800711e:	f102 0208 	add.w	r2, r2, #8
 8007122:	f1a3 0308 	sub.w	r3, r3, #8
 8007126:	f47f aefc 	bne.w	8006f22 <arm_cfft_radix8by4_f32+0x12e>
 800712a:	9907      	ldr	r1, [sp, #28]
 800712c:	9800      	ldr	r0, [sp, #0]
 800712e:	00cb      	lsls	r3, r1, #3
 8007130:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8007134:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8007138:	9100      	str	r1, [sp, #0]
 800713a:	9904      	ldr	r1, [sp, #16]
 800713c:	4419      	add	r1, r3
 800713e:	9104      	str	r1, [sp, #16]
 8007140:	9903      	ldr	r1, [sp, #12]
 8007142:	4419      	add	r1, r3
 8007144:	9103      	str	r1, [sp, #12]
 8007146:	9906      	ldr	r1, [sp, #24]
 8007148:	4419      	add	r1, r3
 800714a:	9106      	str	r1, [sp, #24]
 800714c:	9905      	ldr	r1, [sp, #20]
 800714e:	441f      	add	r7, r3
 8007150:	4419      	add	r1, r3
 8007152:	9b02      	ldr	r3, [sp, #8]
 8007154:	9105      	str	r1, [sp, #20]
 8007156:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800715a:	9302      	str	r3, [sp, #8]
 800715c:	9904      	ldr	r1, [sp, #16]
 800715e:	9805      	ldr	r0, [sp, #20]
 8007160:	ed91 4a00 	vldr	s8, [r1]
 8007164:	edd0 6a00 	vldr	s13, [r0]
 8007168:	9b06      	ldr	r3, [sp, #24]
 800716a:	ed97 3a00 	vldr	s6, [r7]
 800716e:	edd3 7a00 	vldr	s15, [r3]
 8007172:	edd0 4a01 	vldr	s9, [r0, #4]
 8007176:	edd1 3a01 	vldr	s7, [r1, #4]
 800717a:	ed97 2a01 	vldr	s4, [r7, #4]
 800717e:	ed93 7a01 	vldr	s14, [r3, #4]
 8007182:	9a03      	ldr	r2, [sp, #12]
 8007184:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8007188:	ee34 6a26 	vadd.f32	s12, s8, s13
 800718c:	ee73 5aa4 	vadd.f32	s11, s7, s9
 8007190:	ee37 5a86 	vadd.f32	s10, s15, s12
 8007194:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8007198:	ee35 5a03 	vadd.f32	s10, s10, s6
 800719c:	ee74 6a66 	vsub.f32	s13, s8, s13
 80071a0:	ed81 5a00 	vstr	s10, [r1]
 80071a4:	ed93 5a01 	vldr	s10, [r3, #4]
 80071a8:	edd7 4a01 	vldr	s9, [r7, #4]
 80071ac:	ee35 5a85 	vadd.f32	s10, s11, s10
 80071b0:	ee37 4a26 	vadd.f32	s8, s14, s13
 80071b4:	ee35 5a24 	vadd.f32	s10, s10, s9
 80071b8:	ee73 4ae7 	vsub.f32	s9, s7, s15
 80071bc:	ed81 5a01 	vstr	s10, [r1, #4]
 80071c0:	edd2 1a00 	vldr	s3, [r2]
 80071c4:	edd2 2a01 	vldr	s5, [r2, #4]
 80071c8:	ee34 5a83 	vadd.f32	s10, s9, s6
 80071cc:	ee34 4a42 	vsub.f32	s8, s8, s4
 80071d0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80071d4:	ee64 4a21 	vmul.f32	s9, s8, s3
 80071d8:	ee24 4a22 	vmul.f32	s8, s8, s5
 80071dc:	ee65 2a22 	vmul.f32	s5, s10, s5
 80071e0:	ee25 5a21 	vmul.f32	s10, s10, s3
 80071e4:	ee74 2aa2 	vadd.f32	s5, s9, s5
 80071e8:	ee35 5a44 	vsub.f32	s10, s10, s8
 80071ec:	edc3 2a00 	vstr	s5, [r3]
 80071f0:	ed83 5a01 	vstr	s10, [r3, #4]
 80071f4:	ee75 5ac7 	vsub.f32	s11, s11, s14
 80071f8:	9b00      	ldr	r3, [sp, #0]
 80071fa:	ee36 6a43 	vsub.f32	s12, s12, s6
 80071fe:	ed93 4a01 	vldr	s8, [r3, #4]
 8007202:	ed93 5a00 	vldr	s10, [r3]
 8007206:	9b02      	ldr	r3, [sp, #8]
 8007208:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800720c:	ee66 4a05 	vmul.f32	s9, s12, s10
 8007210:	ee25 5a85 	vmul.f32	s10, s11, s10
 8007214:	ee26 6a04 	vmul.f32	s12, s12, s8
 8007218:	ee65 5a84 	vmul.f32	s11, s11, s8
 800721c:	ee35 6a46 	vsub.f32	s12, s10, s12
 8007220:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8007224:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8007228:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800722c:	ed80 6a01 	vstr	s12, [r0, #4]
 8007230:	edc0 5a00 	vstr	s11, [r0]
 8007234:	edd3 5a01 	vldr	s11, [r3, #4]
 8007238:	edd3 6a00 	vldr	s13, [r3]
 800723c:	ee37 7a02 	vadd.f32	s14, s14, s4
 8007240:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8007244:	ee27 6a26 	vmul.f32	s12, s14, s13
 8007248:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800724c:	ee27 7a25 	vmul.f32	s14, s14, s11
 8007250:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007254:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007258:	ee76 7a27 	vadd.f32	s15, s12, s15
 800725c:	ed87 7a01 	vstr	s14, [r7, #4]
 8007260:	edc7 7a00 	vstr	s15, [r7]
 8007264:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 8007268:	4621      	mov	r1, r4
 800726a:	686a      	ldr	r2, [r5, #4]
 800726c:	2304      	movs	r3, #4
 800726e:	f000 f9d3 	bl	8007618 <arm_radix8_butterfly_f32>
 8007272:	4630      	mov	r0, r6
 8007274:	4621      	mov	r1, r4
 8007276:	686a      	ldr	r2, [r5, #4]
 8007278:	2304      	movs	r3, #4
 800727a:	f000 f9cd 	bl	8007618 <arm_radix8_butterfly_f32>
 800727e:	9808      	ldr	r0, [sp, #32]
 8007280:	686a      	ldr	r2, [r5, #4]
 8007282:	4621      	mov	r1, r4
 8007284:	2304      	movs	r3, #4
 8007286:	f000 f9c7 	bl	8007618 <arm_radix8_butterfly_f32>
 800728a:	686a      	ldr	r2, [r5, #4]
 800728c:	9801      	ldr	r0, [sp, #4]
 800728e:	4621      	mov	r1, r4
 8007290:	2304      	movs	r3, #4
 8007292:	b00d      	add	sp, #52	; 0x34
 8007294:	ecbd 8b0a 	vpop	{d8-d12}
 8007298:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800729c:	f000 b9bc 	b.w	8007618 <arm_radix8_butterfly_f32>

080072a0 <arm_cfft_f32>:
 80072a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072a4:	2a01      	cmp	r2, #1
 80072a6:	4606      	mov	r6, r0
 80072a8:	4617      	mov	r7, r2
 80072aa:	460c      	mov	r4, r1
 80072ac:	4698      	mov	r8, r3
 80072ae:	8805      	ldrh	r5, [r0, #0]
 80072b0:	d056      	beq.n	8007360 <arm_cfft_f32+0xc0>
 80072b2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80072b6:	d063      	beq.n	8007380 <arm_cfft_f32+0xe0>
 80072b8:	d916      	bls.n	80072e8 <arm_cfft_f32+0x48>
 80072ba:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80072be:	d01a      	beq.n	80072f6 <arm_cfft_f32+0x56>
 80072c0:	d947      	bls.n	8007352 <arm_cfft_f32+0xb2>
 80072c2:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80072c6:	d05b      	beq.n	8007380 <arm_cfft_f32+0xe0>
 80072c8:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 80072cc:	d105      	bne.n	80072da <arm_cfft_f32+0x3a>
 80072ce:	2301      	movs	r3, #1
 80072d0:	6872      	ldr	r2, [r6, #4]
 80072d2:	4629      	mov	r1, r5
 80072d4:	4620      	mov	r0, r4
 80072d6:	f000 f99f 	bl	8007618 <arm_radix8_butterfly_f32>
 80072da:	f1b8 0f00 	cmp.w	r8, #0
 80072de:	d111      	bne.n	8007304 <arm_cfft_f32+0x64>
 80072e0:	2f01      	cmp	r7, #1
 80072e2:	d016      	beq.n	8007312 <arm_cfft_f32+0x72>
 80072e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072e8:	2d20      	cmp	r5, #32
 80072ea:	d049      	beq.n	8007380 <arm_cfft_f32+0xe0>
 80072ec:	d935      	bls.n	800735a <arm_cfft_f32+0xba>
 80072ee:	2d40      	cmp	r5, #64	; 0x40
 80072f0:	d0ed      	beq.n	80072ce <arm_cfft_f32+0x2e>
 80072f2:	2d80      	cmp	r5, #128	; 0x80
 80072f4:	d1f1      	bne.n	80072da <arm_cfft_f32+0x3a>
 80072f6:	4621      	mov	r1, r4
 80072f8:	4630      	mov	r0, r6
 80072fa:	f7ff fcab 	bl	8006c54 <arm_cfft_radix8by2_f32>
 80072fe:	f1b8 0f00 	cmp.w	r8, #0
 8007302:	d0ed      	beq.n	80072e0 <arm_cfft_f32+0x40>
 8007304:	68b2      	ldr	r2, [r6, #8]
 8007306:	89b1      	ldrh	r1, [r6, #12]
 8007308:	4620      	mov	r0, r4
 800730a:	f000 f841 	bl	8007390 <arm_bitreversal_32>
 800730e:	2f01      	cmp	r7, #1
 8007310:	d1e8      	bne.n	80072e4 <arm_cfft_f32+0x44>
 8007312:	ee07 5a90 	vmov	s15, r5
 8007316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800731a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800731e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007322:	2d00      	cmp	r5, #0
 8007324:	d0de      	beq.n	80072e4 <arm_cfft_f32+0x44>
 8007326:	f104 0108 	add.w	r1, r4, #8
 800732a:	2300      	movs	r3, #0
 800732c:	3301      	adds	r3, #1
 800732e:	429d      	cmp	r5, r3
 8007330:	f101 0108 	add.w	r1, r1, #8
 8007334:	ed11 7a04 	vldr	s14, [r1, #-16]
 8007338:	ed51 7a03 	vldr	s15, [r1, #-12]
 800733c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007340:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007344:	ed01 7a04 	vstr	s14, [r1, #-16]
 8007348:	ed41 7a03 	vstr	s15, [r1, #-12]
 800734c:	d1ee      	bne.n	800732c <arm_cfft_f32+0x8c>
 800734e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007352:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8007356:	d0ba      	beq.n	80072ce <arm_cfft_f32+0x2e>
 8007358:	e7bf      	b.n	80072da <arm_cfft_f32+0x3a>
 800735a:	2d10      	cmp	r5, #16
 800735c:	d0cb      	beq.n	80072f6 <arm_cfft_f32+0x56>
 800735e:	e7bc      	b.n	80072da <arm_cfft_f32+0x3a>
 8007360:	b19d      	cbz	r5, 800738a <arm_cfft_f32+0xea>
 8007362:	f101 030c 	add.w	r3, r1, #12
 8007366:	2200      	movs	r2, #0
 8007368:	ed53 7a02 	vldr	s15, [r3, #-8]
 800736c:	3201      	adds	r2, #1
 800736e:	eef1 7a67 	vneg.f32	s15, s15
 8007372:	4295      	cmp	r5, r2
 8007374:	ed43 7a02 	vstr	s15, [r3, #-8]
 8007378:	f103 0308 	add.w	r3, r3, #8
 800737c:	d1f4      	bne.n	8007368 <arm_cfft_f32+0xc8>
 800737e:	e798      	b.n	80072b2 <arm_cfft_f32+0x12>
 8007380:	4621      	mov	r1, r4
 8007382:	4630      	mov	r0, r6
 8007384:	f7ff fd36 	bl	8006df4 <arm_cfft_radix8by4_f32>
 8007388:	e7a7      	b.n	80072da <arm_cfft_f32+0x3a>
 800738a:	2b00      	cmp	r3, #0
 800738c:	d0aa      	beq.n	80072e4 <arm_cfft_f32+0x44>
 800738e:	e7b9      	b.n	8007304 <arm_cfft_f32+0x64>

08007390 <arm_bitreversal_32>:
 8007390:	b1e9      	cbz	r1, 80073ce <arm_bitreversal_32+0x3e>
 8007392:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007394:	2500      	movs	r5, #0
 8007396:	f102 0e02 	add.w	lr, r2, #2
 800739a:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800739e:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 80073a2:	08a4      	lsrs	r4, r4, #2
 80073a4:	089b      	lsrs	r3, r3, #2
 80073a6:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 80073aa:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 80073ae:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 80073b2:	00a6      	lsls	r6, r4, #2
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 80073ba:	3304      	adds	r3, #4
 80073bc:	1d34      	adds	r4, r6, #4
 80073be:	3502      	adds	r5, #2
 80073c0:	58c6      	ldr	r6, [r0, r3]
 80073c2:	5907      	ldr	r7, [r0, r4]
 80073c4:	50c7      	str	r7, [r0, r3]
 80073c6:	428d      	cmp	r5, r1
 80073c8:	5106      	str	r6, [r0, r4]
 80073ca:	d3e6      	bcc.n	800739a <arm_bitreversal_32+0xa>
 80073cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073ce:	4770      	bx	lr

080073d0 <arm_cmplx_mag_f32>:
 80073d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073d4:	ed2d 8b02 	vpush	{d8}
 80073d8:	0897      	lsrs	r7, r2, #2
 80073da:	b084      	sub	sp, #16
 80073dc:	d077      	beq.n	80074ce <arm_cmplx_mag_f32+0xfe>
 80073de:	f04f 0800 	mov.w	r8, #0
 80073e2:	f100 0420 	add.w	r4, r0, #32
 80073e6:	f101 0510 	add.w	r5, r1, #16
 80073ea:	463e      	mov	r6, r7
 80073ec:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 80073f0:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 80073f4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80073f8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80073fc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007400:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007408:	f2c0 80c5 	blt.w	8007596 <arm_cmplx_mag_f32+0x1c6>
 800740c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007414:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8007418:	f100 80cb 	bmi.w	80075b2 <arm_cmplx_mag_f32+0x1e2>
 800741c:	ed05 8a04 	vstr	s16, [r5, #-16]
 8007420:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 8007424:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 8007428:	ee20 0a00 	vmul.f32	s0, s0, s0
 800742c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007430:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007434:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800743c:	f2c0 80a8 	blt.w	8007590 <arm_cmplx_mag_f32+0x1c0>
 8007440:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007448:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800744c:	f100 80a8 	bmi.w	80075a0 <arm_cmplx_mag_f32+0x1d0>
 8007450:	ed05 8a03 	vstr	s16, [r5, #-12]
 8007454:	ed14 0a04 	vldr	s0, [r4, #-16]
 8007458:	ed54 7a03 	vldr	s15, [r4, #-12]
 800745c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007460:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007464:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007468:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800746c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007470:	f2c0 808b 	blt.w	800758a <arm_cmplx_mag_f32+0x1ba>
 8007474:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800747c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8007480:	f100 80a9 	bmi.w	80075d6 <arm_cmplx_mag_f32+0x206>
 8007484:	ed05 8a02 	vstr	s16, [r5, #-8]
 8007488:	ed14 0a02 	vldr	s0, [r4, #-8]
 800748c:	ed54 7a01 	vldr	s15, [r4, #-4]
 8007490:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007494:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007498:	ee30 0a27 	vadd.f32	s0, s0, s15
 800749c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80074a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074a4:	db6e      	blt.n	8007584 <arm_cmplx_mag_f32+0x1b4>
 80074a6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80074aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074ae:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80074b2:	f100 8087 	bmi.w	80075c4 <arm_cmplx_mag_f32+0x1f4>
 80074b6:	ed05 8a01 	vstr	s16, [r5, #-4]
 80074ba:	3e01      	subs	r6, #1
 80074bc:	f104 0420 	add.w	r4, r4, #32
 80074c0:	f105 0510 	add.w	r5, r5, #16
 80074c4:	d192      	bne.n	80073ec <arm_cmplx_mag_f32+0x1c>
 80074c6:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 80074ca:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 80074ce:	f012 0203 	ands.w	r2, r2, #3
 80074d2:	d052      	beq.n	800757a <arm_cmplx_mag_f32+0x1aa>
 80074d4:	ed90 0a00 	vldr	s0, [r0]
 80074d8:	edd0 7a01 	vldr	s15, [r0, #4]
 80074dc:	ee20 0a00 	vmul.f32	s0, s0, s0
 80074e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80074e4:	2300      	movs	r3, #0
 80074e6:	ee37 0a80 	vadd.f32	s0, s15, s0
 80074ea:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80074ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074f2:	bfb8      	it	lt
 80074f4:	600b      	strlt	r3, [r1, #0]
 80074f6:	db08      	blt.n	800750a <arm_cmplx_mag_f32+0x13a>
 80074f8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80074fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007500:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8007504:	d479      	bmi.n	80075fa <arm_cmplx_mag_f32+0x22a>
 8007506:	ed81 8a00 	vstr	s16, [r1]
 800750a:	3a01      	subs	r2, #1
 800750c:	d035      	beq.n	800757a <arm_cmplx_mag_f32+0x1aa>
 800750e:	ed90 0a02 	vldr	s0, [r0, #8]
 8007512:	edd0 7a03 	vldr	s15, [r0, #12]
 8007516:	ee20 0a00 	vmul.f32	s0, s0, s0
 800751a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800751e:	2300      	movs	r3, #0
 8007520:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007524:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800752c:	bfb8      	it	lt
 800752e:	604b      	strlt	r3, [r1, #4]
 8007530:	db08      	blt.n	8007544 <arm_cmplx_mag_f32+0x174>
 8007532:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800753a:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800753e:	d453      	bmi.n	80075e8 <arm_cmplx_mag_f32+0x218>
 8007540:	ed81 8a01 	vstr	s16, [r1, #4]
 8007544:	2a01      	cmp	r2, #1
 8007546:	d018      	beq.n	800757a <arm_cmplx_mag_f32+0x1aa>
 8007548:	ed90 0a04 	vldr	s0, [r0, #16]
 800754c:	edd0 7a05 	vldr	s15, [r0, #20]
 8007550:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007554:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007558:	2300      	movs	r3, #0
 800755a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800755e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007566:	db19      	blt.n	800759c <arm_cmplx_mag_f32+0x1cc>
 8007568:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800756c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007570:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8007574:	d44a      	bmi.n	800760c <arm_cmplx_mag_f32+0x23c>
 8007576:	ed81 8a02 	vstr	s16, [r1, #8]
 800757a:	b004      	add	sp, #16
 800757c:	ecbd 8b02 	vpop	{d8}
 8007580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007584:	f845 8c04 	str.w	r8, [r5, #-4]
 8007588:	e797      	b.n	80074ba <arm_cmplx_mag_f32+0xea>
 800758a:	f845 8c08 	str.w	r8, [r5, #-8]
 800758e:	e77b      	b.n	8007488 <arm_cmplx_mag_f32+0xb8>
 8007590:	f845 8c0c 	str.w	r8, [r5, #-12]
 8007594:	e75e      	b.n	8007454 <arm_cmplx_mag_f32+0x84>
 8007596:	f845 8c10 	str.w	r8, [r5, #-16]
 800759a:	e741      	b.n	8007420 <arm_cmplx_mag_f32+0x50>
 800759c:	608b      	str	r3, [r1, #8]
 800759e:	e7ec      	b.n	800757a <arm_cmplx_mag_f32+0x1aa>
 80075a0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80075a4:	9001      	str	r0, [sp, #4]
 80075a6:	f004 ff9b 	bl	800c4e0 <sqrtf>
 80075aa:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80075ae:	9801      	ldr	r0, [sp, #4]
 80075b0:	e74e      	b.n	8007450 <arm_cmplx_mag_f32+0x80>
 80075b2:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80075b6:	9001      	str	r0, [sp, #4]
 80075b8:	f004 ff92 	bl	800c4e0 <sqrtf>
 80075bc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80075c0:	9801      	ldr	r0, [sp, #4]
 80075c2:	e72b      	b.n	800741c <arm_cmplx_mag_f32+0x4c>
 80075c4:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80075c8:	9001      	str	r0, [sp, #4]
 80075ca:	f004 ff89 	bl	800c4e0 <sqrtf>
 80075ce:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80075d2:	9801      	ldr	r0, [sp, #4]
 80075d4:	e76f      	b.n	80074b6 <arm_cmplx_mag_f32+0xe6>
 80075d6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80075da:	9001      	str	r0, [sp, #4]
 80075dc:	f004 ff80 	bl	800c4e0 <sqrtf>
 80075e0:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80075e4:	9801      	ldr	r0, [sp, #4]
 80075e6:	e74d      	b.n	8007484 <arm_cmplx_mag_f32+0xb4>
 80075e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075ec:	9201      	str	r2, [sp, #4]
 80075ee:	f004 ff77 	bl	800c4e0 <sqrtf>
 80075f2:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 80075f6:	9903      	ldr	r1, [sp, #12]
 80075f8:	e7a2      	b.n	8007540 <arm_cmplx_mag_f32+0x170>
 80075fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075fe:	9201      	str	r2, [sp, #4]
 8007600:	f004 ff6e 	bl	800c4e0 <sqrtf>
 8007604:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8007608:	9903      	ldr	r1, [sp, #12]
 800760a:	e77c      	b.n	8007506 <arm_cmplx_mag_f32+0x136>
 800760c:	9101      	str	r1, [sp, #4]
 800760e:	f004 ff67 	bl	800c4e0 <sqrtf>
 8007612:	9901      	ldr	r1, [sp, #4]
 8007614:	e7af      	b.n	8007576 <arm_cmplx_mag_f32+0x1a6>
 8007616:	bf00      	nop

08007618 <arm_radix8_butterfly_f32>:
 8007618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800761c:	ed2d 8b10 	vpush	{d8-d15}
 8007620:	b095      	sub	sp, #84	; 0x54
 8007622:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8007626:	4603      	mov	r3, r0
 8007628:	3304      	adds	r3, #4
 800762a:	ed9f bab9 	vldr	s22, [pc, #740]	; 8007910 <arm_radix8_butterfly_f32+0x2f8>
 800762e:	9012      	str	r0, [sp, #72]	; 0x48
 8007630:	468b      	mov	fp, r1
 8007632:	9313      	str	r3, [sp, #76]	; 0x4c
 8007634:	4689      	mov	r9, r1
 8007636:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800763a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800763c:	960f      	str	r6, [sp, #60]	; 0x3c
 800763e:	ea4f 1846 	mov.w	r8, r6, lsl #5
 8007642:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 8007646:	eb03 0508 	add.w	r5, r3, r8
 800764a:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800764e:	eb05 040e 	add.w	r4, r5, lr
 8007652:	0137      	lsls	r7, r6, #4
 8007654:	eba6 030a 	sub.w	r3, r6, sl
 8007658:	eb04 000e 	add.w	r0, r4, lr
 800765c:	44b2      	add	sl, r6
 800765e:	1d3a      	adds	r2, r7, #4
 8007660:	9702      	str	r7, [sp, #8]
 8007662:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8007666:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800766a:	ebae 0c06 	sub.w	ip, lr, r6
 800766e:	9703      	str	r7, [sp, #12]
 8007670:	eb03 0708 	add.w	r7, r3, r8
 8007674:	9701      	str	r7, [sp, #4]
 8007676:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800767a:	9706      	str	r7, [sp, #24]
 800767c:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800767e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8007682:	f10e 0104 	add.w	r1, lr, #4
 8007686:	4439      	add	r1, r7
 8007688:	443a      	add	r2, r7
 800768a:	0137      	lsls	r7, r6, #4
 800768c:	00f6      	lsls	r6, r6, #3
 800768e:	9704      	str	r7, [sp, #16]
 8007690:	9605      	str	r6, [sp, #20]
 8007692:	9f01      	ldr	r7, [sp, #4]
 8007694:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8007696:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800769a:	f04f 0c00 	mov.w	ip, #0
 800769e:	edd4 6a00 	vldr	s13, [r4]
 80076a2:	edd7 1a00 	vldr	s3, [r7]
 80076a6:	ed16 aa01 	vldr	s20, [r6, #-4]
 80076aa:	edd5 5a00 	vldr	s11, [r5]
 80076ae:	ed52 9a01 	vldr	s19, [r2, #-4]
 80076b2:	ed90 6a00 	vldr	s12, [r0]
 80076b6:	ed51 7a01 	vldr	s15, [r1, #-4]
 80076ba:	ed93 3a00 	vldr	s6, [r3]
 80076be:	ee39 0a86 	vadd.f32	s0, s19, s12
 80076c2:	ee33 2a21 	vadd.f32	s4, s6, s3
 80076c6:	ee37 5aa6 	vadd.f32	s10, s15, s13
 80076ca:	ee7a 4a25 	vadd.f32	s9, s20, s11
 80076ce:	ee35 7a02 	vadd.f32	s14, s10, s4
 80076d2:	ee34 4a80 	vadd.f32	s8, s9, s0
 80076d6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80076da:	ee74 6a07 	vadd.f32	s13, s8, s14
 80076de:	ee34 4a47 	vsub.f32	s8, s8, s14
 80076e2:	ed46 6a01 	vstr	s13, [r6, #-4]
 80076e6:	ed85 4a00 	vstr	s8, [r5]
 80076ea:	edd1 6a00 	vldr	s13, [r1]
 80076ee:	ed94 9a01 	vldr	s18, [r4, #4]
 80076f2:	edd3 2a01 	vldr	s5, [r3, #4]
 80076f6:	edd7 8a01 	vldr	s17, [r7, #4]
 80076fa:	edd6 0a00 	vldr	s1, [r6]
 80076fe:	edd5 3a01 	vldr	s7, [r5, #4]
 8007702:	ed90 8a01 	vldr	s16, [r0, #4]
 8007706:	ed92 7a00 	vldr	s14, [r2]
 800770a:	ee33 3a61 	vsub.f32	s6, s6, s3
 800770e:	ee36 4ac9 	vsub.f32	s8, s13, s18
 8007712:	ee72 aae8 	vsub.f32	s21, s5, s17
 8007716:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800771a:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800771e:	ee77 7a83 	vadd.f32	s15, s15, s6
 8007722:	ee34 4a6a 	vsub.f32	s8, s8, s21
 8007726:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800772a:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800772e:	ee70 3ae3 	vsub.f32	s7, s1, s7
 8007732:	ee72 2aa8 	vadd.f32	s5, s5, s17
 8007736:	ee77 0a08 	vadd.f32	s1, s14, s16
 800773a:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800773e:	ee37 7a48 	vsub.f32	s14, s14, s16
 8007742:	ee61 1a8b 	vmul.f32	s3, s3, s22
 8007746:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800774a:	ee76 6a89 	vadd.f32	s13, s13, s18
 800774e:	ee24 4a0b 	vmul.f32	s8, s8, s22
 8007752:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8007756:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800775a:	ee35 5a42 	vsub.f32	s10, s10, s4
 800775e:	ee36 0aa2 	vadd.f32	s0, s13, s5
 8007762:	ee33 2a20 	vadd.f32	s4, s6, s1
 8007766:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800776a:	ee33 3a60 	vsub.f32	s6, s6, s1
 800776e:	ee75 2aa1 	vadd.f32	s5, s11, s3
 8007772:	ee77 0a01 	vadd.f32	s1, s14, s2
 8007776:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800777a:	ee37 7a41 	vsub.f32	s14, s14, s2
 800777e:	ee73 1a84 	vadd.f32	s3, s7, s8
 8007782:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8007786:	ee76 3a27 	vadd.f32	s7, s12, s15
 800778a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800778e:	ee32 8a00 	vadd.f32	s16, s4, s0
 8007792:	ee33 1a45 	vsub.f32	s2, s6, s10
 8007796:	ee32 2a40 	vsub.f32	s4, s4, s0
 800779a:	ee35 5a03 	vadd.f32	s10, s10, s6
 800779e:	ee34 0aa6 	vadd.f32	s0, s9, s13
 80077a2:	ee32 3aa0 	vadd.f32	s6, s5, s1
 80077a6:	ee74 6ae6 	vsub.f32	s13, s9, s13
 80077aa:	ee34 6a67 	vsub.f32	s12, s8, s15
 80077ae:	ee75 4a87 	vadd.f32	s9, s11, s14
 80077b2:	ee72 2ae0 	vsub.f32	s5, s5, s1
 80077b6:	ee35 7ac7 	vsub.f32	s14, s11, s14
 80077ba:	ee77 7a84 	vadd.f32	s15, s15, s8
 80077be:	ee71 5ae3 	vsub.f32	s11, s3, s7
 80077c2:	44dc      	add	ip, fp
 80077c4:	ee73 3aa1 	vadd.f32	s7, s7, s3
 80077c8:	45e1      	cmp	r9, ip
 80077ca:	ed86 8a00 	vstr	s16, [r6]
 80077ce:	ed85 2a01 	vstr	s4, [r5, #4]
 80077d2:	4456      	add	r6, sl
 80077d4:	ed02 0a01 	vstr	s0, [r2, #-4]
 80077d8:	4455      	add	r5, sl
 80077da:	edc0 6a00 	vstr	s13, [r0]
 80077de:	ed82 1a00 	vstr	s2, [r2]
 80077e2:	ed80 5a01 	vstr	s10, [r0, #4]
 80077e6:	4452      	add	r2, sl
 80077e8:	ed01 3a01 	vstr	s6, [r1, #-4]
 80077ec:	4450      	add	r0, sl
 80077ee:	edc7 2a00 	vstr	s5, [r7]
 80077f2:	edc4 4a00 	vstr	s9, [r4]
 80077f6:	ed83 7a00 	vstr	s14, [r3]
 80077fa:	edc1 5a00 	vstr	s11, [r1]
 80077fe:	edc7 3a01 	vstr	s7, [r7, #4]
 8007802:	4451      	add	r1, sl
 8007804:	ed84 6a01 	vstr	s12, [r4, #4]
 8007808:	4457      	add	r7, sl
 800780a:	edc3 7a01 	vstr	s15, [r3, #4]
 800780e:	4454      	add	r4, sl
 8007810:	4453      	add	r3, sl
 8007812:	f63f af44 	bhi.w	800769e <arm_radix8_butterfly_f32+0x86>
 8007816:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007818:	2b07      	cmp	r3, #7
 800781a:	f240 81b7 	bls.w	8007b8c <arm_radix8_butterfly_f32+0x574>
 800781e:	9b06      	ldr	r3, [sp, #24]
 8007820:	9903      	ldr	r1, [sp, #12]
 8007822:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007824:	9e05      	ldr	r6, [sp, #20]
 8007826:	9a04      	ldr	r2, [sp, #16]
 8007828:	f103 0c08 	add.w	ip, r3, #8
 800782c:	9b02      	ldr	r3, [sp, #8]
 800782e:	3108      	adds	r1, #8
 8007830:	f108 0808 	add.w	r8, r8, #8
 8007834:	1841      	adds	r1, r0, r1
 8007836:	3608      	adds	r6, #8
 8007838:	330c      	adds	r3, #12
 800783a:	4604      	mov	r4, r0
 800783c:	4444      	add	r4, r8
 800783e:	18c3      	adds	r3, r0, r3
 8007840:	9109      	str	r1, [sp, #36]	; 0x24
 8007842:	1981      	adds	r1, r0, r6
 8007844:	f10e 0e08 	add.w	lr, lr, #8
 8007848:	3208      	adds	r2, #8
 800784a:	940b      	str	r4, [sp, #44]	; 0x2c
 800784c:	9107      	str	r1, [sp, #28]
 800784e:	4604      	mov	r4, r0
 8007850:	4601      	mov	r1, r0
 8007852:	9304      	str	r3, [sp, #16]
 8007854:	f100 030c 	add.w	r3, r0, #12
 8007858:	4474      	add	r4, lr
 800785a:	f04f 0801 	mov.w	r8, #1
 800785e:	1882      	adds	r2, r0, r2
 8007860:	4461      	add	r1, ip
 8007862:	9305      	str	r3, [sp, #20]
 8007864:	464b      	mov	r3, r9
 8007866:	940a      	str	r4, [sp, #40]	; 0x28
 8007868:	46c1      	mov	r9, r8
 800786a:	9208      	str	r2, [sp, #32]
 800786c:	46d8      	mov	r8, fp
 800786e:	9106      	str	r1, [sp, #24]
 8007870:	f04f 0e00 	mov.w	lr, #0
 8007874:	469b      	mov	fp, r3
 8007876:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007878:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800787a:	449e      	add	lr, r3
 800787c:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8007880:	441a      	add	r2, r3
 8007882:	920e      	str	r2, [sp, #56]	; 0x38
 8007884:	441a      	add	r2, r3
 8007886:	18d4      	adds	r4, r2, r3
 8007888:	18e5      	adds	r5, r4, r3
 800788a:	18ee      	adds	r6, r5, r3
 800788c:	18f7      	adds	r7, r6, r3
 800788e:	eb07 0c03 	add.w	ip, r7, r3
 8007892:	920d      	str	r2, [sp, #52]	; 0x34
 8007894:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 8007898:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800789c:	910c      	str	r1, [sp, #48]	; 0x30
 800789e:	4419      	add	r1, r3
 80078a0:	9103      	str	r1, [sp, #12]
 80078a2:	4419      	add	r1, r3
 80078a4:	18ca      	adds	r2, r1, r3
 80078a6:	9202      	str	r2, [sp, #8]
 80078a8:	441a      	add	r2, r3
 80078aa:	18d0      	adds	r0, r2, r3
 80078ac:	ed92 ea01 	vldr	s28, [r2, #4]
 80078b0:	9a02      	ldr	r2, [sp, #8]
 80078b2:	edd4 7a00 	vldr	s15, [r4]
 80078b6:	edd2 da01 	vldr	s27, [r2, #4]
 80078ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80078bc:	ed91 da01 	vldr	s26, [r1, #4]
 80078c0:	ed92 ca01 	vldr	s24, [r2, #4]
 80078c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80078c6:	9903      	ldr	r1, [sp, #12]
 80078c8:	edcd 7a03 	vstr	s15, [sp, #12]
 80078cc:	edd2 7a00 	vldr	s15, [r2]
 80078d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078d2:	edcd 7a02 	vstr	s15, [sp, #8]
 80078d6:	edd2 7a00 	vldr	s15, [r2]
 80078da:	edd0 ea01 	vldr	s29, [r0, #4]
 80078de:	edd1 ca01 	vldr	s25, [r1, #4]
 80078e2:	eddc ba00 	vldr	s23, [ip]
 80078e6:	edd7 aa00 	vldr	s21, [r7]
 80078ea:	ed96 aa00 	vldr	s20, [r6]
 80078ee:	edd5 9a00 	vldr	s19, [r5]
 80078f2:	edcd 7a01 	vstr	s15, [sp, #4]
 80078f6:	4403      	add	r3, r0
 80078f8:	ed93 fa01 	vldr	s30, [r3, #4]
 80078fc:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 8007900:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 8007904:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007908:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800790c:	46cc      	mov	ip, r9
 800790e:	e001      	b.n	8007914 <arm_radix8_butterfly_f32+0x2fc>
 8007910:	3f3504f3 	.word	0x3f3504f3
 8007914:	ed91 6a00 	vldr	s12, [r1]
 8007918:	ed93 5a00 	vldr	s10, [r3]
 800791c:	edd0 fa00 	vldr	s31, [r0]
 8007920:	edd4 7a00 	vldr	s15, [r4]
 8007924:	ed95 7a00 	vldr	s14, [r5]
 8007928:	ed56 3a01 	vldr	s7, [r6, #-4]
 800792c:	ed17 3a01 	vldr	s6, [r7, #-4]
 8007930:	ed92 2a00 	vldr	s4, [r2]
 8007934:	ed96 0a00 	vldr	s0, [r6]
 8007938:	ee33 8a85 	vadd.f32	s16, s7, s10
 800793c:	ee32 1a06 	vadd.f32	s2, s4, s12
 8007940:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8007944:	ee77 4a87 	vadd.f32	s9, s15, s14
 8007948:	ee78 1a04 	vadd.f32	s3, s16, s8
 800794c:	ee71 6a24 	vadd.f32	s13, s2, s9
 8007950:	ee32 2a46 	vsub.f32	s4, s4, s12
 8007954:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8007958:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800795c:	ed06 6a01 	vstr	s12, [r6, #-4]
 8007960:	edd4 8a01 	vldr	s17, [r4, #4]
 8007964:	ed92 9a01 	vldr	s18, [r2, #4]
 8007968:	edd7 0a00 	vldr	s1, [r7]
 800796c:	edd1 2a01 	vldr	s5, [r1, #4]
 8007970:	ed95 7a01 	vldr	s14, [r5, #4]
 8007974:	ed93 6a01 	vldr	s12, [r3, #4]
 8007978:	edd0 5a01 	vldr	s11, [r0, #4]
 800797c:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8007980:	ee33 3a6f 	vsub.f32	s6, s6, s31
 8007984:	ee39 5a62 	vsub.f32	s10, s18, s5
 8007988:	ee78 fac7 	vsub.f32	s31, s17, s14
 800798c:	ee38 4a44 	vsub.f32	s8, s16, s8
 8007990:	ee38 7a87 	vadd.f32	s14, s17, s14
 8007994:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8007998:	ee79 2a22 	vadd.f32	s5, s18, s5
 800799c:	ee32 9a27 	vadd.f32	s18, s4, s15
 80079a0:	ee72 7a67 	vsub.f32	s15, s4, s15
 80079a4:	ee30 2a06 	vadd.f32	s4, s0, s12
 80079a8:	ee75 8a6f 	vsub.f32	s17, s10, s31
 80079ac:	ee71 4a64 	vsub.f32	s9, s2, s9
 80079b0:	ee35 5a2f 	vadd.f32	s10, s10, s31
 80079b4:	ee32 1a08 	vadd.f32	s2, s4, s16
 80079b8:	ee72 fa87 	vadd.f32	s31, s5, s14
 80079bc:	ee32 2a48 	vsub.f32	s4, s4, s16
 80079c0:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80079c4:	ee25 5a0b 	vmul.f32	s10, s10, s22
 80079c8:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80079cc:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80079d0:	ee71 6ae6 	vsub.f32	s13, s3, s13
 80079d4:	ee29 9a0b 	vmul.f32	s18, s18, s22
 80079d8:	ee71 1a6f 	vsub.f32	s3, s2, s31
 80079dc:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80079e0:	ee30 6a46 	vsub.f32	s12, s0, s12
 80079e4:	ee74 0a22 	vadd.f32	s1, s8, s5
 80079e8:	ee36 0a28 	vadd.f32	s0, s12, s17
 80079ec:	ee74 2a62 	vsub.f32	s5, s8, s5
 80079f0:	ee36 6a68 	vsub.f32	s12, s12, s17
 80079f4:	ee32 4a64 	vsub.f32	s8, s4, s9
 80079f8:	ee73 8a09 	vadd.f32	s17, s6, s18
 80079fc:	ee74 4a82 	vadd.f32	s9, s9, s4
 8007a00:	ee33 9a49 	vsub.f32	s18, s6, s18
 8007a04:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 8007a08:	ee35 3a85 	vadd.f32	s6, s11, s10
 8007a0c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8007a10:	ee33 5aa7 	vadd.f32	s10, s7, s15
 8007a14:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8007a18:	ee69 3aa6 	vmul.f32	s7, s19, s13
 8007a1c:	ee30 7a68 	vsub.f32	s14, s0, s17
 8007a20:	ee35 8a03 	vadd.f32	s16, s10, s6
 8007a24:	ee38 0a80 	vadd.f32	s0, s17, s0
 8007a28:	ee73 3a82 	vadd.f32	s7, s7, s4
 8007a2c:	ee69 8aa1 	vmul.f32	s17, s19, s3
 8007a30:	ed9d 2a01 	vldr	s4, [sp, #4]
 8007a34:	eddd 1a02 	vldr	s3, [sp, #8]
 8007a38:	ee35 5a43 	vsub.f32	s10, s10, s6
 8007a3c:	ee71 fa2f 	vadd.f32	s31, s2, s31
 8007a40:	ee37 3aa5 	vadd.f32	s6, s15, s11
 8007a44:	ee21 1aa0 	vmul.f32	s2, s3, s1
 8007a48:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8007a4c:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8007a50:	ee76 5a49 	vsub.f32	s11, s12, s18
 8007a54:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 8007a58:	ee39 6a06 	vadd.f32	s12, s18, s12
 8007a5c:	ee2c 9a84 	vmul.f32	s18, s25, s8
 8007a60:	ee21 4a84 	vmul.f32	s8, s3, s8
 8007a64:	ee6c 1a07 	vmul.f32	s3, s24, s14
 8007a68:	ee22 7a07 	vmul.f32	s14, s4, s14
 8007a6c:	ee22 2a08 	vmul.f32	s4, s4, s16
 8007a70:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8007a74:	ee78 6ae6 	vsub.f32	s13, s17, s13
 8007a78:	ee31 1a09 	vadd.f32	s2, s2, s18
 8007a7c:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 8007a80:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 8007a84:	ee74 0a60 	vsub.f32	s1, s8, s1
 8007a88:	ee37 7a48 	vsub.f32	s14, s14, s16
 8007a8c:	ee2f 4a00 	vmul.f32	s8, s30, s0
 8007a90:	ee2b 8a85 	vmul.f32	s16, s23, s10
 8007a94:	ee72 1a21 	vadd.f32	s3, s4, s3
 8007a98:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 8007a9c:	ee38 2a89 	vadd.f32	s4, s17, s18
 8007aa0:	ee2f 5a05 	vmul.f32	s10, s30, s10
 8007aa4:	ee38 8a04 	vadd.f32	s16, s16, s8
 8007aa8:	ee2e 9a25 	vmul.f32	s18, s28, s11
 8007aac:	ee2a 4a25 	vmul.f32	s8, s20, s11
 8007ab0:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 8007ab4:	eddd 5a03 	vldr	s11, [sp, #12]
 8007ab8:	edc6 fa00 	vstr	s31, [r6]
 8007abc:	ee2b 0a80 	vmul.f32	s0, s23, s0
 8007ac0:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8007ac4:	ee30 0a45 	vsub.f32	s0, s0, s10
 8007ac8:	ee6a 4a03 	vmul.f32	s9, s20, s6
 8007acc:	ee65 8aa7 	vmul.f32	s17, s11, s15
 8007ad0:	ee2d 5a06 	vmul.f32	s10, s26, s12
 8007ad4:	ee2e 3a03 	vmul.f32	s6, s28, s6
 8007ad8:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8007adc:	ee25 6a86 	vmul.f32	s12, s11, s12
 8007ae0:	ee74 4a89 	vadd.f32	s9, s9, s18
 8007ae4:	ee34 3a43 	vsub.f32	s6, s8, s6
 8007ae8:	ee78 8a85 	vadd.f32	s17, s17, s10
 8007aec:	ee36 6a67 	vsub.f32	s12, s12, s15
 8007af0:	44c4      	add	ip, r8
 8007af2:	45e3      	cmp	fp, ip
 8007af4:	edc3 3a00 	vstr	s7, [r3]
 8007af8:	edc3 6a01 	vstr	s13, [r3, #4]
 8007afc:	4456      	add	r6, sl
 8007afe:	ed07 1a01 	vstr	s2, [r7, #-4]
 8007b02:	edc7 0a00 	vstr	s1, [r7]
 8007b06:	4453      	add	r3, sl
 8007b08:	ed80 2a00 	vstr	s4, [r0]
 8007b0c:	edc0 2a01 	vstr	s5, [r0, #4]
 8007b10:	4457      	add	r7, sl
 8007b12:	edc2 1a00 	vstr	s3, [r2]
 8007b16:	ed82 7a01 	vstr	s14, [r2, #4]
 8007b1a:	4450      	add	r0, sl
 8007b1c:	ed85 8a00 	vstr	s16, [r5]
 8007b20:	ed85 0a01 	vstr	s0, [r5, #4]
 8007b24:	4452      	add	r2, sl
 8007b26:	edc1 4a00 	vstr	s9, [r1]
 8007b2a:	4455      	add	r5, sl
 8007b2c:	ed81 3a01 	vstr	s6, [r1, #4]
 8007b30:	edc4 8a00 	vstr	s17, [r4]
 8007b34:	ed84 6a01 	vstr	s12, [r4, #4]
 8007b38:	4451      	add	r1, sl
 8007b3a:	4454      	add	r4, sl
 8007b3c:	f63f aeea 	bhi.w	8007914 <arm_radix8_butterfly_f32+0x2fc>
 8007b40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b42:	3308      	adds	r3, #8
 8007b44:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b48:	3308      	adds	r3, #8
 8007b4a:	930a      	str	r3, [sp, #40]	; 0x28
 8007b4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b4e:	3308      	adds	r3, #8
 8007b50:	9309      	str	r3, [sp, #36]	; 0x24
 8007b52:	9b08      	ldr	r3, [sp, #32]
 8007b54:	3308      	adds	r3, #8
 8007b56:	9308      	str	r3, [sp, #32]
 8007b58:	9b07      	ldr	r3, [sp, #28]
 8007b5a:	3308      	adds	r3, #8
 8007b5c:	9307      	str	r3, [sp, #28]
 8007b5e:	9b06      	ldr	r3, [sp, #24]
 8007b60:	3308      	adds	r3, #8
 8007b62:	9306      	str	r3, [sp, #24]
 8007b64:	9b05      	ldr	r3, [sp, #20]
 8007b66:	3308      	adds	r3, #8
 8007b68:	9305      	str	r3, [sp, #20]
 8007b6a:	9b04      	ldr	r3, [sp, #16]
 8007b6c:	3308      	adds	r3, #8
 8007b6e:	9304      	str	r3, [sp, #16]
 8007b70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b72:	f109 0901 	add.w	r9, r9, #1
 8007b76:	454b      	cmp	r3, r9
 8007b78:	f47f ae7d 	bne.w	8007876 <arm_radix8_butterfly_f32+0x25e>
 8007b7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b7e:	00db      	lsls	r3, r3, #3
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	46d9      	mov	r9, fp
 8007b84:	9310      	str	r3, [sp, #64]	; 0x40
 8007b86:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8007b8a:	e554      	b.n	8007636 <arm_radix8_butterfly_f32+0x1e>
 8007b8c:	b015      	add	sp, #84	; 0x54
 8007b8e:	ecbd 8b10 	vpop	{d8-d15}
 8007b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b96:	bf00      	nop

08007b98 <__errno>:
 8007b98:	4b01      	ldr	r3, [pc, #4]	; (8007ba0 <__errno+0x8>)
 8007b9a:	6818      	ldr	r0, [r3, #0]
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop
 8007ba0:	2000000c 	.word	0x2000000c

08007ba4 <__libc_init_array>:
 8007ba4:	b570      	push	{r4, r5, r6, lr}
 8007ba6:	4d0d      	ldr	r5, [pc, #52]	; (8007bdc <__libc_init_array+0x38>)
 8007ba8:	4c0d      	ldr	r4, [pc, #52]	; (8007be0 <__libc_init_array+0x3c>)
 8007baa:	1b64      	subs	r4, r4, r5
 8007bac:	10a4      	asrs	r4, r4, #2
 8007bae:	2600      	movs	r6, #0
 8007bb0:	42a6      	cmp	r6, r4
 8007bb2:	d109      	bne.n	8007bc8 <__libc_init_array+0x24>
 8007bb4:	4d0b      	ldr	r5, [pc, #44]	; (8007be4 <__libc_init_array+0x40>)
 8007bb6:	4c0c      	ldr	r4, [pc, #48]	; (8007be8 <__libc_init_array+0x44>)
 8007bb8:	f004 fcb4 	bl	800c524 <_init>
 8007bbc:	1b64      	subs	r4, r4, r5
 8007bbe:	10a4      	asrs	r4, r4, #2
 8007bc0:	2600      	movs	r6, #0
 8007bc2:	42a6      	cmp	r6, r4
 8007bc4:	d105      	bne.n	8007bd2 <__libc_init_array+0x2e>
 8007bc6:	bd70      	pop	{r4, r5, r6, pc}
 8007bc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bcc:	4798      	blx	r3
 8007bce:	3601      	adds	r6, #1
 8007bd0:	e7ee      	b.n	8007bb0 <__libc_init_array+0xc>
 8007bd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bd6:	4798      	blx	r3
 8007bd8:	3601      	adds	r6, #1
 8007bda:	e7f2      	b.n	8007bc2 <__libc_init_array+0x1e>
 8007bdc:	0800f8a4 	.word	0x0800f8a4
 8007be0:	0800f8a4 	.word	0x0800f8a4
 8007be4:	0800f8a4 	.word	0x0800f8a4
 8007be8:	0800f8a8 	.word	0x0800f8a8

08007bec <memset>:
 8007bec:	4402      	add	r2, r0
 8007bee:	4603      	mov	r3, r0
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d100      	bne.n	8007bf6 <memset+0xa>
 8007bf4:	4770      	bx	lr
 8007bf6:	f803 1b01 	strb.w	r1, [r3], #1
 8007bfa:	e7f9      	b.n	8007bf0 <memset+0x4>

08007bfc <__cvt>:
 8007bfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c00:	ec55 4b10 	vmov	r4, r5, d0
 8007c04:	2d00      	cmp	r5, #0
 8007c06:	460e      	mov	r6, r1
 8007c08:	4619      	mov	r1, r3
 8007c0a:	462b      	mov	r3, r5
 8007c0c:	bfbb      	ittet	lt
 8007c0e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007c12:	461d      	movlt	r5, r3
 8007c14:	2300      	movge	r3, #0
 8007c16:	232d      	movlt	r3, #45	; 0x2d
 8007c18:	700b      	strb	r3, [r1, #0]
 8007c1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c1c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007c20:	4691      	mov	r9, r2
 8007c22:	f023 0820 	bic.w	r8, r3, #32
 8007c26:	bfbc      	itt	lt
 8007c28:	4622      	movlt	r2, r4
 8007c2a:	4614      	movlt	r4, r2
 8007c2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c30:	d005      	beq.n	8007c3e <__cvt+0x42>
 8007c32:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007c36:	d100      	bne.n	8007c3a <__cvt+0x3e>
 8007c38:	3601      	adds	r6, #1
 8007c3a:	2102      	movs	r1, #2
 8007c3c:	e000      	b.n	8007c40 <__cvt+0x44>
 8007c3e:	2103      	movs	r1, #3
 8007c40:	ab03      	add	r3, sp, #12
 8007c42:	9301      	str	r3, [sp, #4]
 8007c44:	ab02      	add	r3, sp, #8
 8007c46:	9300      	str	r3, [sp, #0]
 8007c48:	ec45 4b10 	vmov	d0, r4, r5
 8007c4c:	4653      	mov	r3, sl
 8007c4e:	4632      	mov	r2, r6
 8007c50:	f001 fdae 	bl	80097b0 <_dtoa_r>
 8007c54:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007c58:	4607      	mov	r7, r0
 8007c5a:	d102      	bne.n	8007c62 <__cvt+0x66>
 8007c5c:	f019 0f01 	tst.w	r9, #1
 8007c60:	d022      	beq.n	8007ca8 <__cvt+0xac>
 8007c62:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c66:	eb07 0906 	add.w	r9, r7, r6
 8007c6a:	d110      	bne.n	8007c8e <__cvt+0x92>
 8007c6c:	783b      	ldrb	r3, [r7, #0]
 8007c6e:	2b30      	cmp	r3, #48	; 0x30
 8007c70:	d10a      	bne.n	8007c88 <__cvt+0x8c>
 8007c72:	2200      	movs	r2, #0
 8007c74:	2300      	movs	r3, #0
 8007c76:	4620      	mov	r0, r4
 8007c78:	4629      	mov	r1, r5
 8007c7a:	f7f8 ff25 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c7e:	b918      	cbnz	r0, 8007c88 <__cvt+0x8c>
 8007c80:	f1c6 0601 	rsb	r6, r6, #1
 8007c84:	f8ca 6000 	str.w	r6, [sl]
 8007c88:	f8da 3000 	ldr.w	r3, [sl]
 8007c8c:	4499      	add	r9, r3
 8007c8e:	2200      	movs	r2, #0
 8007c90:	2300      	movs	r3, #0
 8007c92:	4620      	mov	r0, r4
 8007c94:	4629      	mov	r1, r5
 8007c96:	f7f8 ff17 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c9a:	b108      	cbz	r0, 8007ca0 <__cvt+0xa4>
 8007c9c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007ca0:	2230      	movs	r2, #48	; 0x30
 8007ca2:	9b03      	ldr	r3, [sp, #12]
 8007ca4:	454b      	cmp	r3, r9
 8007ca6:	d307      	bcc.n	8007cb8 <__cvt+0xbc>
 8007ca8:	9b03      	ldr	r3, [sp, #12]
 8007caa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007cac:	1bdb      	subs	r3, r3, r7
 8007cae:	4638      	mov	r0, r7
 8007cb0:	6013      	str	r3, [r2, #0]
 8007cb2:	b004      	add	sp, #16
 8007cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cb8:	1c59      	adds	r1, r3, #1
 8007cba:	9103      	str	r1, [sp, #12]
 8007cbc:	701a      	strb	r2, [r3, #0]
 8007cbe:	e7f0      	b.n	8007ca2 <__cvt+0xa6>

08007cc0 <__exponent>:
 8007cc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2900      	cmp	r1, #0
 8007cc6:	bfb8      	it	lt
 8007cc8:	4249      	neglt	r1, r1
 8007cca:	f803 2b02 	strb.w	r2, [r3], #2
 8007cce:	bfb4      	ite	lt
 8007cd0:	222d      	movlt	r2, #45	; 0x2d
 8007cd2:	222b      	movge	r2, #43	; 0x2b
 8007cd4:	2909      	cmp	r1, #9
 8007cd6:	7042      	strb	r2, [r0, #1]
 8007cd8:	dd2a      	ble.n	8007d30 <__exponent+0x70>
 8007cda:	f10d 0407 	add.w	r4, sp, #7
 8007cde:	46a4      	mov	ip, r4
 8007ce0:	270a      	movs	r7, #10
 8007ce2:	46a6      	mov	lr, r4
 8007ce4:	460a      	mov	r2, r1
 8007ce6:	fb91 f6f7 	sdiv	r6, r1, r7
 8007cea:	fb07 1516 	mls	r5, r7, r6, r1
 8007cee:	3530      	adds	r5, #48	; 0x30
 8007cf0:	2a63      	cmp	r2, #99	; 0x63
 8007cf2:	f104 34ff 	add.w	r4, r4, #4294967295
 8007cf6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007cfa:	4631      	mov	r1, r6
 8007cfc:	dcf1      	bgt.n	8007ce2 <__exponent+0x22>
 8007cfe:	3130      	adds	r1, #48	; 0x30
 8007d00:	f1ae 0502 	sub.w	r5, lr, #2
 8007d04:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007d08:	1c44      	adds	r4, r0, #1
 8007d0a:	4629      	mov	r1, r5
 8007d0c:	4561      	cmp	r1, ip
 8007d0e:	d30a      	bcc.n	8007d26 <__exponent+0x66>
 8007d10:	f10d 0209 	add.w	r2, sp, #9
 8007d14:	eba2 020e 	sub.w	r2, r2, lr
 8007d18:	4565      	cmp	r5, ip
 8007d1a:	bf88      	it	hi
 8007d1c:	2200      	movhi	r2, #0
 8007d1e:	4413      	add	r3, r2
 8007d20:	1a18      	subs	r0, r3, r0
 8007d22:	b003      	add	sp, #12
 8007d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d2a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007d2e:	e7ed      	b.n	8007d0c <__exponent+0x4c>
 8007d30:	2330      	movs	r3, #48	; 0x30
 8007d32:	3130      	adds	r1, #48	; 0x30
 8007d34:	7083      	strb	r3, [r0, #2]
 8007d36:	70c1      	strb	r1, [r0, #3]
 8007d38:	1d03      	adds	r3, r0, #4
 8007d3a:	e7f1      	b.n	8007d20 <__exponent+0x60>

08007d3c <_printf_float>:
 8007d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d40:	ed2d 8b02 	vpush	{d8}
 8007d44:	b08d      	sub	sp, #52	; 0x34
 8007d46:	460c      	mov	r4, r1
 8007d48:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007d4c:	4616      	mov	r6, r2
 8007d4e:	461f      	mov	r7, r3
 8007d50:	4605      	mov	r5, r0
 8007d52:	f002 fe8b 	bl	800aa6c <_localeconv_r>
 8007d56:	f8d0 a000 	ldr.w	sl, [r0]
 8007d5a:	4650      	mov	r0, sl
 8007d5c:	f7f8 fa38 	bl	80001d0 <strlen>
 8007d60:	2300      	movs	r3, #0
 8007d62:	930a      	str	r3, [sp, #40]	; 0x28
 8007d64:	6823      	ldr	r3, [r4, #0]
 8007d66:	9305      	str	r3, [sp, #20]
 8007d68:	f8d8 3000 	ldr.w	r3, [r8]
 8007d6c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007d70:	3307      	adds	r3, #7
 8007d72:	f023 0307 	bic.w	r3, r3, #7
 8007d76:	f103 0208 	add.w	r2, r3, #8
 8007d7a:	f8c8 2000 	str.w	r2, [r8]
 8007d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d82:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007d86:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007d8a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007d8e:	9307      	str	r3, [sp, #28]
 8007d90:	f8cd 8018 	str.w	r8, [sp, #24]
 8007d94:	ee08 0a10 	vmov	s16, r0
 8007d98:	4b9f      	ldr	r3, [pc, #636]	; (8008018 <_printf_float+0x2dc>)
 8007d9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8007da2:	f7f8 fec3 	bl	8000b2c <__aeabi_dcmpun>
 8007da6:	bb88      	cbnz	r0, 8007e0c <_printf_float+0xd0>
 8007da8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007dac:	4b9a      	ldr	r3, [pc, #616]	; (8008018 <_printf_float+0x2dc>)
 8007dae:	f04f 32ff 	mov.w	r2, #4294967295
 8007db2:	f7f8 fe9d 	bl	8000af0 <__aeabi_dcmple>
 8007db6:	bb48      	cbnz	r0, 8007e0c <_printf_float+0xd0>
 8007db8:	2200      	movs	r2, #0
 8007dba:	2300      	movs	r3, #0
 8007dbc:	4640      	mov	r0, r8
 8007dbe:	4649      	mov	r1, r9
 8007dc0:	f7f8 fe8c 	bl	8000adc <__aeabi_dcmplt>
 8007dc4:	b110      	cbz	r0, 8007dcc <_printf_float+0x90>
 8007dc6:	232d      	movs	r3, #45	; 0x2d
 8007dc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dcc:	4b93      	ldr	r3, [pc, #588]	; (800801c <_printf_float+0x2e0>)
 8007dce:	4894      	ldr	r0, [pc, #592]	; (8008020 <_printf_float+0x2e4>)
 8007dd0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007dd4:	bf94      	ite	ls
 8007dd6:	4698      	movls	r8, r3
 8007dd8:	4680      	movhi	r8, r0
 8007dda:	2303      	movs	r3, #3
 8007ddc:	6123      	str	r3, [r4, #16]
 8007dde:	9b05      	ldr	r3, [sp, #20]
 8007de0:	f023 0204 	bic.w	r2, r3, #4
 8007de4:	6022      	str	r2, [r4, #0]
 8007de6:	f04f 0900 	mov.w	r9, #0
 8007dea:	9700      	str	r7, [sp, #0]
 8007dec:	4633      	mov	r3, r6
 8007dee:	aa0b      	add	r2, sp, #44	; 0x2c
 8007df0:	4621      	mov	r1, r4
 8007df2:	4628      	mov	r0, r5
 8007df4:	f000 f9d8 	bl	80081a8 <_printf_common>
 8007df8:	3001      	adds	r0, #1
 8007dfa:	f040 8090 	bne.w	8007f1e <_printf_float+0x1e2>
 8007dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8007e02:	b00d      	add	sp, #52	; 0x34
 8007e04:	ecbd 8b02 	vpop	{d8}
 8007e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e0c:	4642      	mov	r2, r8
 8007e0e:	464b      	mov	r3, r9
 8007e10:	4640      	mov	r0, r8
 8007e12:	4649      	mov	r1, r9
 8007e14:	f7f8 fe8a 	bl	8000b2c <__aeabi_dcmpun>
 8007e18:	b140      	cbz	r0, 8007e2c <_printf_float+0xf0>
 8007e1a:	464b      	mov	r3, r9
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	bfbc      	itt	lt
 8007e20:	232d      	movlt	r3, #45	; 0x2d
 8007e22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007e26:	487f      	ldr	r0, [pc, #508]	; (8008024 <_printf_float+0x2e8>)
 8007e28:	4b7f      	ldr	r3, [pc, #508]	; (8008028 <_printf_float+0x2ec>)
 8007e2a:	e7d1      	b.n	8007dd0 <_printf_float+0x94>
 8007e2c:	6863      	ldr	r3, [r4, #4]
 8007e2e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007e32:	9206      	str	r2, [sp, #24]
 8007e34:	1c5a      	adds	r2, r3, #1
 8007e36:	d13f      	bne.n	8007eb8 <_printf_float+0x17c>
 8007e38:	2306      	movs	r3, #6
 8007e3a:	6063      	str	r3, [r4, #4]
 8007e3c:	9b05      	ldr	r3, [sp, #20]
 8007e3e:	6861      	ldr	r1, [r4, #4]
 8007e40:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007e44:	2300      	movs	r3, #0
 8007e46:	9303      	str	r3, [sp, #12]
 8007e48:	ab0a      	add	r3, sp, #40	; 0x28
 8007e4a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007e4e:	ab09      	add	r3, sp, #36	; 0x24
 8007e50:	ec49 8b10 	vmov	d0, r8, r9
 8007e54:	9300      	str	r3, [sp, #0]
 8007e56:	6022      	str	r2, [r4, #0]
 8007e58:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	f7ff fecd 	bl	8007bfc <__cvt>
 8007e62:	9b06      	ldr	r3, [sp, #24]
 8007e64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e66:	2b47      	cmp	r3, #71	; 0x47
 8007e68:	4680      	mov	r8, r0
 8007e6a:	d108      	bne.n	8007e7e <_printf_float+0x142>
 8007e6c:	1cc8      	adds	r0, r1, #3
 8007e6e:	db02      	blt.n	8007e76 <_printf_float+0x13a>
 8007e70:	6863      	ldr	r3, [r4, #4]
 8007e72:	4299      	cmp	r1, r3
 8007e74:	dd41      	ble.n	8007efa <_printf_float+0x1be>
 8007e76:	f1ab 0b02 	sub.w	fp, fp, #2
 8007e7a:	fa5f fb8b 	uxtb.w	fp, fp
 8007e7e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e82:	d820      	bhi.n	8007ec6 <_printf_float+0x18a>
 8007e84:	3901      	subs	r1, #1
 8007e86:	465a      	mov	r2, fp
 8007e88:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007e8c:	9109      	str	r1, [sp, #36]	; 0x24
 8007e8e:	f7ff ff17 	bl	8007cc0 <__exponent>
 8007e92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e94:	1813      	adds	r3, r2, r0
 8007e96:	2a01      	cmp	r2, #1
 8007e98:	4681      	mov	r9, r0
 8007e9a:	6123      	str	r3, [r4, #16]
 8007e9c:	dc02      	bgt.n	8007ea4 <_printf_float+0x168>
 8007e9e:	6822      	ldr	r2, [r4, #0]
 8007ea0:	07d2      	lsls	r2, r2, #31
 8007ea2:	d501      	bpl.n	8007ea8 <_printf_float+0x16c>
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	6123      	str	r3, [r4, #16]
 8007ea8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d09c      	beq.n	8007dea <_printf_float+0xae>
 8007eb0:	232d      	movs	r3, #45	; 0x2d
 8007eb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007eb6:	e798      	b.n	8007dea <_printf_float+0xae>
 8007eb8:	9a06      	ldr	r2, [sp, #24]
 8007eba:	2a47      	cmp	r2, #71	; 0x47
 8007ebc:	d1be      	bne.n	8007e3c <_printf_float+0x100>
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d1bc      	bne.n	8007e3c <_printf_float+0x100>
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e7b9      	b.n	8007e3a <_printf_float+0xfe>
 8007ec6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007eca:	d118      	bne.n	8007efe <_printf_float+0x1c2>
 8007ecc:	2900      	cmp	r1, #0
 8007ece:	6863      	ldr	r3, [r4, #4]
 8007ed0:	dd0b      	ble.n	8007eea <_printf_float+0x1ae>
 8007ed2:	6121      	str	r1, [r4, #16]
 8007ed4:	b913      	cbnz	r3, 8007edc <_printf_float+0x1a0>
 8007ed6:	6822      	ldr	r2, [r4, #0]
 8007ed8:	07d0      	lsls	r0, r2, #31
 8007eda:	d502      	bpl.n	8007ee2 <_printf_float+0x1a6>
 8007edc:	3301      	adds	r3, #1
 8007ede:	440b      	add	r3, r1
 8007ee0:	6123      	str	r3, [r4, #16]
 8007ee2:	65a1      	str	r1, [r4, #88]	; 0x58
 8007ee4:	f04f 0900 	mov.w	r9, #0
 8007ee8:	e7de      	b.n	8007ea8 <_printf_float+0x16c>
 8007eea:	b913      	cbnz	r3, 8007ef2 <_printf_float+0x1b6>
 8007eec:	6822      	ldr	r2, [r4, #0]
 8007eee:	07d2      	lsls	r2, r2, #31
 8007ef0:	d501      	bpl.n	8007ef6 <_printf_float+0x1ba>
 8007ef2:	3302      	adds	r3, #2
 8007ef4:	e7f4      	b.n	8007ee0 <_printf_float+0x1a4>
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e7f2      	b.n	8007ee0 <_printf_float+0x1a4>
 8007efa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f00:	4299      	cmp	r1, r3
 8007f02:	db05      	blt.n	8007f10 <_printf_float+0x1d4>
 8007f04:	6823      	ldr	r3, [r4, #0]
 8007f06:	6121      	str	r1, [r4, #16]
 8007f08:	07d8      	lsls	r0, r3, #31
 8007f0a:	d5ea      	bpl.n	8007ee2 <_printf_float+0x1a6>
 8007f0c:	1c4b      	adds	r3, r1, #1
 8007f0e:	e7e7      	b.n	8007ee0 <_printf_float+0x1a4>
 8007f10:	2900      	cmp	r1, #0
 8007f12:	bfd4      	ite	le
 8007f14:	f1c1 0202 	rsble	r2, r1, #2
 8007f18:	2201      	movgt	r2, #1
 8007f1a:	4413      	add	r3, r2
 8007f1c:	e7e0      	b.n	8007ee0 <_printf_float+0x1a4>
 8007f1e:	6823      	ldr	r3, [r4, #0]
 8007f20:	055a      	lsls	r2, r3, #21
 8007f22:	d407      	bmi.n	8007f34 <_printf_float+0x1f8>
 8007f24:	6923      	ldr	r3, [r4, #16]
 8007f26:	4642      	mov	r2, r8
 8007f28:	4631      	mov	r1, r6
 8007f2a:	4628      	mov	r0, r5
 8007f2c:	47b8      	blx	r7
 8007f2e:	3001      	adds	r0, #1
 8007f30:	d12c      	bne.n	8007f8c <_printf_float+0x250>
 8007f32:	e764      	b.n	8007dfe <_printf_float+0xc2>
 8007f34:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007f38:	f240 80e0 	bls.w	80080fc <_printf_float+0x3c0>
 8007f3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f40:	2200      	movs	r2, #0
 8007f42:	2300      	movs	r3, #0
 8007f44:	f7f8 fdc0 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	d034      	beq.n	8007fb6 <_printf_float+0x27a>
 8007f4c:	4a37      	ldr	r2, [pc, #220]	; (800802c <_printf_float+0x2f0>)
 8007f4e:	2301      	movs	r3, #1
 8007f50:	4631      	mov	r1, r6
 8007f52:	4628      	mov	r0, r5
 8007f54:	47b8      	blx	r7
 8007f56:	3001      	adds	r0, #1
 8007f58:	f43f af51 	beq.w	8007dfe <_printf_float+0xc2>
 8007f5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f60:	429a      	cmp	r2, r3
 8007f62:	db02      	blt.n	8007f6a <_printf_float+0x22e>
 8007f64:	6823      	ldr	r3, [r4, #0]
 8007f66:	07d8      	lsls	r0, r3, #31
 8007f68:	d510      	bpl.n	8007f8c <_printf_float+0x250>
 8007f6a:	ee18 3a10 	vmov	r3, s16
 8007f6e:	4652      	mov	r2, sl
 8007f70:	4631      	mov	r1, r6
 8007f72:	4628      	mov	r0, r5
 8007f74:	47b8      	blx	r7
 8007f76:	3001      	adds	r0, #1
 8007f78:	f43f af41 	beq.w	8007dfe <_printf_float+0xc2>
 8007f7c:	f04f 0800 	mov.w	r8, #0
 8007f80:	f104 091a 	add.w	r9, r4, #26
 8007f84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f86:	3b01      	subs	r3, #1
 8007f88:	4543      	cmp	r3, r8
 8007f8a:	dc09      	bgt.n	8007fa0 <_printf_float+0x264>
 8007f8c:	6823      	ldr	r3, [r4, #0]
 8007f8e:	079b      	lsls	r3, r3, #30
 8007f90:	f100 8105 	bmi.w	800819e <_printf_float+0x462>
 8007f94:	68e0      	ldr	r0, [r4, #12]
 8007f96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f98:	4298      	cmp	r0, r3
 8007f9a:	bfb8      	it	lt
 8007f9c:	4618      	movlt	r0, r3
 8007f9e:	e730      	b.n	8007e02 <_printf_float+0xc6>
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	464a      	mov	r2, r9
 8007fa4:	4631      	mov	r1, r6
 8007fa6:	4628      	mov	r0, r5
 8007fa8:	47b8      	blx	r7
 8007faa:	3001      	adds	r0, #1
 8007fac:	f43f af27 	beq.w	8007dfe <_printf_float+0xc2>
 8007fb0:	f108 0801 	add.w	r8, r8, #1
 8007fb4:	e7e6      	b.n	8007f84 <_printf_float+0x248>
 8007fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	dc39      	bgt.n	8008030 <_printf_float+0x2f4>
 8007fbc:	4a1b      	ldr	r2, [pc, #108]	; (800802c <_printf_float+0x2f0>)
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	4631      	mov	r1, r6
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	47b8      	blx	r7
 8007fc6:	3001      	adds	r0, #1
 8007fc8:	f43f af19 	beq.w	8007dfe <_printf_float+0xc2>
 8007fcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	d102      	bne.n	8007fda <_printf_float+0x29e>
 8007fd4:	6823      	ldr	r3, [r4, #0]
 8007fd6:	07d9      	lsls	r1, r3, #31
 8007fd8:	d5d8      	bpl.n	8007f8c <_printf_float+0x250>
 8007fda:	ee18 3a10 	vmov	r3, s16
 8007fde:	4652      	mov	r2, sl
 8007fe0:	4631      	mov	r1, r6
 8007fe2:	4628      	mov	r0, r5
 8007fe4:	47b8      	blx	r7
 8007fe6:	3001      	adds	r0, #1
 8007fe8:	f43f af09 	beq.w	8007dfe <_printf_float+0xc2>
 8007fec:	f04f 0900 	mov.w	r9, #0
 8007ff0:	f104 0a1a 	add.w	sl, r4, #26
 8007ff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ff6:	425b      	negs	r3, r3
 8007ff8:	454b      	cmp	r3, r9
 8007ffa:	dc01      	bgt.n	8008000 <_printf_float+0x2c4>
 8007ffc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ffe:	e792      	b.n	8007f26 <_printf_float+0x1ea>
 8008000:	2301      	movs	r3, #1
 8008002:	4652      	mov	r2, sl
 8008004:	4631      	mov	r1, r6
 8008006:	4628      	mov	r0, r5
 8008008:	47b8      	blx	r7
 800800a:	3001      	adds	r0, #1
 800800c:	f43f aef7 	beq.w	8007dfe <_printf_float+0xc2>
 8008010:	f109 0901 	add.w	r9, r9, #1
 8008014:	e7ee      	b.n	8007ff4 <_printf_float+0x2b8>
 8008016:	bf00      	nop
 8008018:	7fefffff 	.word	0x7fefffff
 800801c:	0800f3f8 	.word	0x0800f3f8
 8008020:	0800f3fc 	.word	0x0800f3fc
 8008024:	0800f404 	.word	0x0800f404
 8008028:	0800f400 	.word	0x0800f400
 800802c:	0800f408 	.word	0x0800f408
 8008030:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008032:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008034:	429a      	cmp	r2, r3
 8008036:	bfa8      	it	ge
 8008038:	461a      	movge	r2, r3
 800803a:	2a00      	cmp	r2, #0
 800803c:	4691      	mov	r9, r2
 800803e:	dc37      	bgt.n	80080b0 <_printf_float+0x374>
 8008040:	f04f 0b00 	mov.w	fp, #0
 8008044:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008048:	f104 021a 	add.w	r2, r4, #26
 800804c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800804e:	9305      	str	r3, [sp, #20]
 8008050:	eba3 0309 	sub.w	r3, r3, r9
 8008054:	455b      	cmp	r3, fp
 8008056:	dc33      	bgt.n	80080c0 <_printf_float+0x384>
 8008058:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800805c:	429a      	cmp	r2, r3
 800805e:	db3b      	blt.n	80080d8 <_printf_float+0x39c>
 8008060:	6823      	ldr	r3, [r4, #0]
 8008062:	07da      	lsls	r2, r3, #31
 8008064:	d438      	bmi.n	80080d8 <_printf_float+0x39c>
 8008066:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008068:	9a05      	ldr	r2, [sp, #20]
 800806a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800806c:	1a9a      	subs	r2, r3, r2
 800806e:	eba3 0901 	sub.w	r9, r3, r1
 8008072:	4591      	cmp	r9, r2
 8008074:	bfa8      	it	ge
 8008076:	4691      	movge	r9, r2
 8008078:	f1b9 0f00 	cmp.w	r9, #0
 800807c:	dc35      	bgt.n	80080ea <_printf_float+0x3ae>
 800807e:	f04f 0800 	mov.w	r8, #0
 8008082:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008086:	f104 0a1a 	add.w	sl, r4, #26
 800808a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800808e:	1a9b      	subs	r3, r3, r2
 8008090:	eba3 0309 	sub.w	r3, r3, r9
 8008094:	4543      	cmp	r3, r8
 8008096:	f77f af79 	ble.w	8007f8c <_printf_float+0x250>
 800809a:	2301      	movs	r3, #1
 800809c:	4652      	mov	r2, sl
 800809e:	4631      	mov	r1, r6
 80080a0:	4628      	mov	r0, r5
 80080a2:	47b8      	blx	r7
 80080a4:	3001      	adds	r0, #1
 80080a6:	f43f aeaa 	beq.w	8007dfe <_printf_float+0xc2>
 80080aa:	f108 0801 	add.w	r8, r8, #1
 80080ae:	e7ec      	b.n	800808a <_printf_float+0x34e>
 80080b0:	4613      	mov	r3, r2
 80080b2:	4631      	mov	r1, r6
 80080b4:	4642      	mov	r2, r8
 80080b6:	4628      	mov	r0, r5
 80080b8:	47b8      	blx	r7
 80080ba:	3001      	adds	r0, #1
 80080bc:	d1c0      	bne.n	8008040 <_printf_float+0x304>
 80080be:	e69e      	b.n	8007dfe <_printf_float+0xc2>
 80080c0:	2301      	movs	r3, #1
 80080c2:	4631      	mov	r1, r6
 80080c4:	4628      	mov	r0, r5
 80080c6:	9205      	str	r2, [sp, #20]
 80080c8:	47b8      	blx	r7
 80080ca:	3001      	adds	r0, #1
 80080cc:	f43f ae97 	beq.w	8007dfe <_printf_float+0xc2>
 80080d0:	9a05      	ldr	r2, [sp, #20]
 80080d2:	f10b 0b01 	add.w	fp, fp, #1
 80080d6:	e7b9      	b.n	800804c <_printf_float+0x310>
 80080d8:	ee18 3a10 	vmov	r3, s16
 80080dc:	4652      	mov	r2, sl
 80080de:	4631      	mov	r1, r6
 80080e0:	4628      	mov	r0, r5
 80080e2:	47b8      	blx	r7
 80080e4:	3001      	adds	r0, #1
 80080e6:	d1be      	bne.n	8008066 <_printf_float+0x32a>
 80080e8:	e689      	b.n	8007dfe <_printf_float+0xc2>
 80080ea:	9a05      	ldr	r2, [sp, #20]
 80080ec:	464b      	mov	r3, r9
 80080ee:	4442      	add	r2, r8
 80080f0:	4631      	mov	r1, r6
 80080f2:	4628      	mov	r0, r5
 80080f4:	47b8      	blx	r7
 80080f6:	3001      	adds	r0, #1
 80080f8:	d1c1      	bne.n	800807e <_printf_float+0x342>
 80080fa:	e680      	b.n	8007dfe <_printf_float+0xc2>
 80080fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080fe:	2a01      	cmp	r2, #1
 8008100:	dc01      	bgt.n	8008106 <_printf_float+0x3ca>
 8008102:	07db      	lsls	r3, r3, #31
 8008104:	d538      	bpl.n	8008178 <_printf_float+0x43c>
 8008106:	2301      	movs	r3, #1
 8008108:	4642      	mov	r2, r8
 800810a:	4631      	mov	r1, r6
 800810c:	4628      	mov	r0, r5
 800810e:	47b8      	blx	r7
 8008110:	3001      	adds	r0, #1
 8008112:	f43f ae74 	beq.w	8007dfe <_printf_float+0xc2>
 8008116:	ee18 3a10 	vmov	r3, s16
 800811a:	4652      	mov	r2, sl
 800811c:	4631      	mov	r1, r6
 800811e:	4628      	mov	r0, r5
 8008120:	47b8      	blx	r7
 8008122:	3001      	adds	r0, #1
 8008124:	f43f ae6b 	beq.w	8007dfe <_printf_float+0xc2>
 8008128:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800812c:	2200      	movs	r2, #0
 800812e:	2300      	movs	r3, #0
 8008130:	f7f8 fcca 	bl	8000ac8 <__aeabi_dcmpeq>
 8008134:	b9d8      	cbnz	r0, 800816e <_printf_float+0x432>
 8008136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008138:	f108 0201 	add.w	r2, r8, #1
 800813c:	3b01      	subs	r3, #1
 800813e:	4631      	mov	r1, r6
 8008140:	4628      	mov	r0, r5
 8008142:	47b8      	blx	r7
 8008144:	3001      	adds	r0, #1
 8008146:	d10e      	bne.n	8008166 <_printf_float+0x42a>
 8008148:	e659      	b.n	8007dfe <_printf_float+0xc2>
 800814a:	2301      	movs	r3, #1
 800814c:	4652      	mov	r2, sl
 800814e:	4631      	mov	r1, r6
 8008150:	4628      	mov	r0, r5
 8008152:	47b8      	blx	r7
 8008154:	3001      	adds	r0, #1
 8008156:	f43f ae52 	beq.w	8007dfe <_printf_float+0xc2>
 800815a:	f108 0801 	add.w	r8, r8, #1
 800815e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008160:	3b01      	subs	r3, #1
 8008162:	4543      	cmp	r3, r8
 8008164:	dcf1      	bgt.n	800814a <_printf_float+0x40e>
 8008166:	464b      	mov	r3, r9
 8008168:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800816c:	e6dc      	b.n	8007f28 <_printf_float+0x1ec>
 800816e:	f04f 0800 	mov.w	r8, #0
 8008172:	f104 0a1a 	add.w	sl, r4, #26
 8008176:	e7f2      	b.n	800815e <_printf_float+0x422>
 8008178:	2301      	movs	r3, #1
 800817a:	4642      	mov	r2, r8
 800817c:	e7df      	b.n	800813e <_printf_float+0x402>
 800817e:	2301      	movs	r3, #1
 8008180:	464a      	mov	r2, r9
 8008182:	4631      	mov	r1, r6
 8008184:	4628      	mov	r0, r5
 8008186:	47b8      	blx	r7
 8008188:	3001      	adds	r0, #1
 800818a:	f43f ae38 	beq.w	8007dfe <_printf_float+0xc2>
 800818e:	f108 0801 	add.w	r8, r8, #1
 8008192:	68e3      	ldr	r3, [r4, #12]
 8008194:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008196:	1a5b      	subs	r3, r3, r1
 8008198:	4543      	cmp	r3, r8
 800819a:	dcf0      	bgt.n	800817e <_printf_float+0x442>
 800819c:	e6fa      	b.n	8007f94 <_printf_float+0x258>
 800819e:	f04f 0800 	mov.w	r8, #0
 80081a2:	f104 0919 	add.w	r9, r4, #25
 80081a6:	e7f4      	b.n	8008192 <_printf_float+0x456>

080081a8 <_printf_common>:
 80081a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081ac:	4616      	mov	r6, r2
 80081ae:	4699      	mov	r9, r3
 80081b0:	688a      	ldr	r2, [r1, #8]
 80081b2:	690b      	ldr	r3, [r1, #16]
 80081b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80081b8:	4293      	cmp	r3, r2
 80081ba:	bfb8      	it	lt
 80081bc:	4613      	movlt	r3, r2
 80081be:	6033      	str	r3, [r6, #0]
 80081c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80081c4:	4607      	mov	r7, r0
 80081c6:	460c      	mov	r4, r1
 80081c8:	b10a      	cbz	r2, 80081ce <_printf_common+0x26>
 80081ca:	3301      	adds	r3, #1
 80081cc:	6033      	str	r3, [r6, #0]
 80081ce:	6823      	ldr	r3, [r4, #0]
 80081d0:	0699      	lsls	r1, r3, #26
 80081d2:	bf42      	ittt	mi
 80081d4:	6833      	ldrmi	r3, [r6, #0]
 80081d6:	3302      	addmi	r3, #2
 80081d8:	6033      	strmi	r3, [r6, #0]
 80081da:	6825      	ldr	r5, [r4, #0]
 80081dc:	f015 0506 	ands.w	r5, r5, #6
 80081e0:	d106      	bne.n	80081f0 <_printf_common+0x48>
 80081e2:	f104 0a19 	add.w	sl, r4, #25
 80081e6:	68e3      	ldr	r3, [r4, #12]
 80081e8:	6832      	ldr	r2, [r6, #0]
 80081ea:	1a9b      	subs	r3, r3, r2
 80081ec:	42ab      	cmp	r3, r5
 80081ee:	dc26      	bgt.n	800823e <_printf_common+0x96>
 80081f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80081f4:	1e13      	subs	r3, r2, #0
 80081f6:	6822      	ldr	r2, [r4, #0]
 80081f8:	bf18      	it	ne
 80081fa:	2301      	movne	r3, #1
 80081fc:	0692      	lsls	r2, r2, #26
 80081fe:	d42b      	bmi.n	8008258 <_printf_common+0xb0>
 8008200:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008204:	4649      	mov	r1, r9
 8008206:	4638      	mov	r0, r7
 8008208:	47c0      	blx	r8
 800820a:	3001      	adds	r0, #1
 800820c:	d01e      	beq.n	800824c <_printf_common+0xa4>
 800820e:	6823      	ldr	r3, [r4, #0]
 8008210:	68e5      	ldr	r5, [r4, #12]
 8008212:	6832      	ldr	r2, [r6, #0]
 8008214:	f003 0306 	and.w	r3, r3, #6
 8008218:	2b04      	cmp	r3, #4
 800821a:	bf08      	it	eq
 800821c:	1aad      	subeq	r5, r5, r2
 800821e:	68a3      	ldr	r3, [r4, #8]
 8008220:	6922      	ldr	r2, [r4, #16]
 8008222:	bf0c      	ite	eq
 8008224:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008228:	2500      	movne	r5, #0
 800822a:	4293      	cmp	r3, r2
 800822c:	bfc4      	itt	gt
 800822e:	1a9b      	subgt	r3, r3, r2
 8008230:	18ed      	addgt	r5, r5, r3
 8008232:	2600      	movs	r6, #0
 8008234:	341a      	adds	r4, #26
 8008236:	42b5      	cmp	r5, r6
 8008238:	d11a      	bne.n	8008270 <_printf_common+0xc8>
 800823a:	2000      	movs	r0, #0
 800823c:	e008      	b.n	8008250 <_printf_common+0xa8>
 800823e:	2301      	movs	r3, #1
 8008240:	4652      	mov	r2, sl
 8008242:	4649      	mov	r1, r9
 8008244:	4638      	mov	r0, r7
 8008246:	47c0      	blx	r8
 8008248:	3001      	adds	r0, #1
 800824a:	d103      	bne.n	8008254 <_printf_common+0xac>
 800824c:	f04f 30ff 	mov.w	r0, #4294967295
 8008250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008254:	3501      	adds	r5, #1
 8008256:	e7c6      	b.n	80081e6 <_printf_common+0x3e>
 8008258:	18e1      	adds	r1, r4, r3
 800825a:	1c5a      	adds	r2, r3, #1
 800825c:	2030      	movs	r0, #48	; 0x30
 800825e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008262:	4422      	add	r2, r4
 8008264:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008268:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800826c:	3302      	adds	r3, #2
 800826e:	e7c7      	b.n	8008200 <_printf_common+0x58>
 8008270:	2301      	movs	r3, #1
 8008272:	4622      	mov	r2, r4
 8008274:	4649      	mov	r1, r9
 8008276:	4638      	mov	r0, r7
 8008278:	47c0      	blx	r8
 800827a:	3001      	adds	r0, #1
 800827c:	d0e6      	beq.n	800824c <_printf_common+0xa4>
 800827e:	3601      	adds	r6, #1
 8008280:	e7d9      	b.n	8008236 <_printf_common+0x8e>
	...

08008284 <_printf_i>:
 8008284:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008288:	7e0f      	ldrb	r7, [r1, #24]
 800828a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800828c:	2f78      	cmp	r7, #120	; 0x78
 800828e:	4691      	mov	r9, r2
 8008290:	4680      	mov	r8, r0
 8008292:	460c      	mov	r4, r1
 8008294:	469a      	mov	sl, r3
 8008296:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800829a:	d807      	bhi.n	80082ac <_printf_i+0x28>
 800829c:	2f62      	cmp	r7, #98	; 0x62
 800829e:	d80a      	bhi.n	80082b6 <_printf_i+0x32>
 80082a0:	2f00      	cmp	r7, #0
 80082a2:	f000 80d8 	beq.w	8008456 <_printf_i+0x1d2>
 80082a6:	2f58      	cmp	r7, #88	; 0x58
 80082a8:	f000 80a3 	beq.w	80083f2 <_printf_i+0x16e>
 80082ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80082b4:	e03a      	b.n	800832c <_printf_i+0xa8>
 80082b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80082ba:	2b15      	cmp	r3, #21
 80082bc:	d8f6      	bhi.n	80082ac <_printf_i+0x28>
 80082be:	a101      	add	r1, pc, #4	; (adr r1, 80082c4 <_printf_i+0x40>)
 80082c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082c4:	0800831d 	.word	0x0800831d
 80082c8:	08008331 	.word	0x08008331
 80082cc:	080082ad 	.word	0x080082ad
 80082d0:	080082ad 	.word	0x080082ad
 80082d4:	080082ad 	.word	0x080082ad
 80082d8:	080082ad 	.word	0x080082ad
 80082dc:	08008331 	.word	0x08008331
 80082e0:	080082ad 	.word	0x080082ad
 80082e4:	080082ad 	.word	0x080082ad
 80082e8:	080082ad 	.word	0x080082ad
 80082ec:	080082ad 	.word	0x080082ad
 80082f0:	0800843d 	.word	0x0800843d
 80082f4:	08008361 	.word	0x08008361
 80082f8:	0800841f 	.word	0x0800841f
 80082fc:	080082ad 	.word	0x080082ad
 8008300:	080082ad 	.word	0x080082ad
 8008304:	0800845f 	.word	0x0800845f
 8008308:	080082ad 	.word	0x080082ad
 800830c:	08008361 	.word	0x08008361
 8008310:	080082ad 	.word	0x080082ad
 8008314:	080082ad 	.word	0x080082ad
 8008318:	08008427 	.word	0x08008427
 800831c:	682b      	ldr	r3, [r5, #0]
 800831e:	1d1a      	adds	r2, r3, #4
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	602a      	str	r2, [r5, #0]
 8008324:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008328:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800832c:	2301      	movs	r3, #1
 800832e:	e0a3      	b.n	8008478 <_printf_i+0x1f4>
 8008330:	6820      	ldr	r0, [r4, #0]
 8008332:	6829      	ldr	r1, [r5, #0]
 8008334:	0606      	lsls	r6, r0, #24
 8008336:	f101 0304 	add.w	r3, r1, #4
 800833a:	d50a      	bpl.n	8008352 <_printf_i+0xce>
 800833c:	680e      	ldr	r6, [r1, #0]
 800833e:	602b      	str	r3, [r5, #0]
 8008340:	2e00      	cmp	r6, #0
 8008342:	da03      	bge.n	800834c <_printf_i+0xc8>
 8008344:	232d      	movs	r3, #45	; 0x2d
 8008346:	4276      	negs	r6, r6
 8008348:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800834c:	485e      	ldr	r0, [pc, #376]	; (80084c8 <_printf_i+0x244>)
 800834e:	230a      	movs	r3, #10
 8008350:	e019      	b.n	8008386 <_printf_i+0x102>
 8008352:	680e      	ldr	r6, [r1, #0]
 8008354:	602b      	str	r3, [r5, #0]
 8008356:	f010 0f40 	tst.w	r0, #64	; 0x40
 800835a:	bf18      	it	ne
 800835c:	b236      	sxthne	r6, r6
 800835e:	e7ef      	b.n	8008340 <_printf_i+0xbc>
 8008360:	682b      	ldr	r3, [r5, #0]
 8008362:	6820      	ldr	r0, [r4, #0]
 8008364:	1d19      	adds	r1, r3, #4
 8008366:	6029      	str	r1, [r5, #0]
 8008368:	0601      	lsls	r1, r0, #24
 800836a:	d501      	bpl.n	8008370 <_printf_i+0xec>
 800836c:	681e      	ldr	r6, [r3, #0]
 800836e:	e002      	b.n	8008376 <_printf_i+0xf2>
 8008370:	0646      	lsls	r6, r0, #25
 8008372:	d5fb      	bpl.n	800836c <_printf_i+0xe8>
 8008374:	881e      	ldrh	r6, [r3, #0]
 8008376:	4854      	ldr	r0, [pc, #336]	; (80084c8 <_printf_i+0x244>)
 8008378:	2f6f      	cmp	r7, #111	; 0x6f
 800837a:	bf0c      	ite	eq
 800837c:	2308      	moveq	r3, #8
 800837e:	230a      	movne	r3, #10
 8008380:	2100      	movs	r1, #0
 8008382:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008386:	6865      	ldr	r5, [r4, #4]
 8008388:	60a5      	str	r5, [r4, #8]
 800838a:	2d00      	cmp	r5, #0
 800838c:	bfa2      	ittt	ge
 800838e:	6821      	ldrge	r1, [r4, #0]
 8008390:	f021 0104 	bicge.w	r1, r1, #4
 8008394:	6021      	strge	r1, [r4, #0]
 8008396:	b90e      	cbnz	r6, 800839c <_printf_i+0x118>
 8008398:	2d00      	cmp	r5, #0
 800839a:	d04d      	beq.n	8008438 <_printf_i+0x1b4>
 800839c:	4615      	mov	r5, r2
 800839e:	fbb6 f1f3 	udiv	r1, r6, r3
 80083a2:	fb03 6711 	mls	r7, r3, r1, r6
 80083a6:	5dc7      	ldrb	r7, [r0, r7]
 80083a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80083ac:	4637      	mov	r7, r6
 80083ae:	42bb      	cmp	r3, r7
 80083b0:	460e      	mov	r6, r1
 80083b2:	d9f4      	bls.n	800839e <_printf_i+0x11a>
 80083b4:	2b08      	cmp	r3, #8
 80083b6:	d10b      	bne.n	80083d0 <_printf_i+0x14c>
 80083b8:	6823      	ldr	r3, [r4, #0]
 80083ba:	07de      	lsls	r6, r3, #31
 80083bc:	d508      	bpl.n	80083d0 <_printf_i+0x14c>
 80083be:	6923      	ldr	r3, [r4, #16]
 80083c0:	6861      	ldr	r1, [r4, #4]
 80083c2:	4299      	cmp	r1, r3
 80083c4:	bfde      	ittt	le
 80083c6:	2330      	movle	r3, #48	; 0x30
 80083c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80083cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80083d0:	1b52      	subs	r2, r2, r5
 80083d2:	6122      	str	r2, [r4, #16]
 80083d4:	f8cd a000 	str.w	sl, [sp]
 80083d8:	464b      	mov	r3, r9
 80083da:	aa03      	add	r2, sp, #12
 80083dc:	4621      	mov	r1, r4
 80083de:	4640      	mov	r0, r8
 80083e0:	f7ff fee2 	bl	80081a8 <_printf_common>
 80083e4:	3001      	adds	r0, #1
 80083e6:	d14c      	bne.n	8008482 <_printf_i+0x1fe>
 80083e8:	f04f 30ff 	mov.w	r0, #4294967295
 80083ec:	b004      	add	sp, #16
 80083ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083f2:	4835      	ldr	r0, [pc, #212]	; (80084c8 <_printf_i+0x244>)
 80083f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80083f8:	6829      	ldr	r1, [r5, #0]
 80083fa:	6823      	ldr	r3, [r4, #0]
 80083fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8008400:	6029      	str	r1, [r5, #0]
 8008402:	061d      	lsls	r5, r3, #24
 8008404:	d514      	bpl.n	8008430 <_printf_i+0x1ac>
 8008406:	07df      	lsls	r7, r3, #31
 8008408:	bf44      	itt	mi
 800840a:	f043 0320 	orrmi.w	r3, r3, #32
 800840e:	6023      	strmi	r3, [r4, #0]
 8008410:	b91e      	cbnz	r6, 800841a <_printf_i+0x196>
 8008412:	6823      	ldr	r3, [r4, #0]
 8008414:	f023 0320 	bic.w	r3, r3, #32
 8008418:	6023      	str	r3, [r4, #0]
 800841a:	2310      	movs	r3, #16
 800841c:	e7b0      	b.n	8008380 <_printf_i+0xfc>
 800841e:	6823      	ldr	r3, [r4, #0]
 8008420:	f043 0320 	orr.w	r3, r3, #32
 8008424:	6023      	str	r3, [r4, #0]
 8008426:	2378      	movs	r3, #120	; 0x78
 8008428:	4828      	ldr	r0, [pc, #160]	; (80084cc <_printf_i+0x248>)
 800842a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800842e:	e7e3      	b.n	80083f8 <_printf_i+0x174>
 8008430:	0659      	lsls	r1, r3, #25
 8008432:	bf48      	it	mi
 8008434:	b2b6      	uxthmi	r6, r6
 8008436:	e7e6      	b.n	8008406 <_printf_i+0x182>
 8008438:	4615      	mov	r5, r2
 800843a:	e7bb      	b.n	80083b4 <_printf_i+0x130>
 800843c:	682b      	ldr	r3, [r5, #0]
 800843e:	6826      	ldr	r6, [r4, #0]
 8008440:	6961      	ldr	r1, [r4, #20]
 8008442:	1d18      	adds	r0, r3, #4
 8008444:	6028      	str	r0, [r5, #0]
 8008446:	0635      	lsls	r5, r6, #24
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	d501      	bpl.n	8008450 <_printf_i+0x1cc>
 800844c:	6019      	str	r1, [r3, #0]
 800844e:	e002      	b.n	8008456 <_printf_i+0x1d2>
 8008450:	0670      	lsls	r0, r6, #25
 8008452:	d5fb      	bpl.n	800844c <_printf_i+0x1c8>
 8008454:	8019      	strh	r1, [r3, #0]
 8008456:	2300      	movs	r3, #0
 8008458:	6123      	str	r3, [r4, #16]
 800845a:	4615      	mov	r5, r2
 800845c:	e7ba      	b.n	80083d4 <_printf_i+0x150>
 800845e:	682b      	ldr	r3, [r5, #0]
 8008460:	1d1a      	adds	r2, r3, #4
 8008462:	602a      	str	r2, [r5, #0]
 8008464:	681d      	ldr	r5, [r3, #0]
 8008466:	6862      	ldr	r2, [r4, #4]
 8008468:	2100      	movs	r1, #0
 800846a:	4628      	mov	r0, r5
 800846c:	f7f7 feb8 	bl	80001e0 <memchr>
 8008470:	b108      	cbz	r0, 8008476 <_printf_i+0x1f2>
 8008472:	1b40      	subs	r0, r0, r5
 8008474:	6060      	str	r0, [r4, #4]
 8008476:	6863      	ldr	r3, [r4, #4]
 8008478:	6123      	str	r3, [r4, #16]
 800847a:	2300      	movs	r3, #0
 800847c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008480:	e7a8      	b.n	80083d4 <_printf_i+0x150>
 8008482:	6923      	ldr	r3, [r4, #16]
 8008484:	462a      	mov	r2, r5
 8008486:	4649      	mov	r1, r9
 8008488:	4640      	mov	r0, r8
 800848a:	47d0      	blx	sl
 800848c:	3001      	adds	r0, #1
 800848e:	d0ab      	beq.n	80083e8 <_printf_i+0x164>
 8008490:	6823      	ldr	r3, [r4, #0]
 8008492:	079b      	lsls	r3, r3, #30
 8008494:	d413      	bmi.n	80084be <_printf_i+0x23a>
 8008496:	68e0      	ldr	r0, [r4, #12]
 8008498:	9b03      	ldr	r3, [sp, #12]
 800849a:	4298      	cmp	r0, r3
 800849c:	bfb8      	it	lt
 800849e:	4618      	movlt	r0, r3
 80084a0:	e7a4      	b.n	80083ec <_printf_i+0x168>
 80084a2:	2301      	movs	r3, #1
 80084a4:	4632      	mov	r2, r6
 80084a6:	4649      	mov	r1, r9
 80084a8:	4640      	mov	r0, r8
 80084aa:	47d0      	blx	sl
 80084ac:	3001      	adds	r0, #1
 80084ae:	d09b      	beq.n	80083e8 <_printf_i+0x164>
 80084b0:	3501      	adds	r5, #1
 80084b2:	68e3      	ldr	r3, [r4, #12]
 80084b4:	9903      	ldr	r1, [sp, #12]
 80084b6:	1a5b      	subs	r3, r3, r1
 80084b8:	42ab      	cmp	r3, r5
 80084ba:	dcf2      	bgt.n	80084a2 <_printf_i+0x21e>
 80084bc:	e7eb      	b.n	8008496 <_printf_i+0x212>
 80084be:	2500      	movs	r5, #0
 80084c0:	f104 0619 	add.w	r6, r4, #25
 80084c4:	e7f5      	b.n	80084b2 <_printf_i+0x22e>
 80084c6:	bf00      	nop
 80084c8:	0800f40a 	.word	0x0800f40a
 80084cc:	0800f41b 	.word	0x0800f41b

080084d0 <_scanf_float>:
 80084d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d4:	b087      	sub	sp, #28
 80084d6:	4617      	mov	r7, r2
 80084d8:	9303      	str	r3, [sp, #12]
 80084da:	688b      	ldr	r3, [r1, #8]
 80084dc:	1e5a      	subs	r2, r3, #1
 80084de:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80084e2:	bf83      	ittte	hi
 80084e4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80084e8:	195b      	addhi	r3, r3, r5
 80084ea:	9302      	strhi	r3, [sp, #8]
 80084ec:	2300      	movls	r3, #0
 80084ee:	bf86      	itte	hi
 80084f0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80084f4:	608b      	strhi	r3, [r1, #8]
 80084f6:	9302      	strls	r3, [sp, #8]
 80084f8:	680b      	ldr	r3, [r1, #0]
 80084fa:	468b      	mov	fp, r1
 80084fc:	2500      	movs	r5, #0
 80084fe:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008502:	f84b 3b1c 	str.w	r3, [fp], #28
 8008506:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800850a:	4680      	mov	r8, r0
 800850c:	460c      	mov	r4, r1
 800850e:	465e      	mov	r6, fp
 8008510:	46aa      	mov	sl, r5
 8008512:	46a9      	mov	r9, r5
 8008514:	9501      	str	r5, [sp, #4]
 8008516:	68a2      	ldr	r2, [r4, #8]
 8008518:	b152      	cbz	r2, 8008530 <_scanf_float+0x60>
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	2b4e      	cmp	r3, #78	; 0x4e
 8008520:	d864      	bhi.n	80085ec <_scanf_float+0x11c>
 8008522:	2b40      	cmp	r3, #64	; 0x40
 8008524:	d83c      	bhi.n	80085a0 <_scanf_float+0xd0>
 8008526:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800852a:	b2c8      	uxtb	r0, r1
 800852c:	280e      	cmp	r0, #14
 800852e:	d93a      	bls.n	80085a6 <_scanf_float+0xd6>
 8008530:	f1b9 0f00 	cmp.w	r9, #0
 8008534:	d003      	beq.n	800853e <_scanf_float+0x6e>
 8008536:	6823      	ldr	r3, [r4, #0]
 8008538:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800853c:	6023      	str	r3, [r4, #0]
 800853e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008542:	f1ba 0f01 	cmp.w	sl, #1
 8008546:	f200 8113 	bhi.w	8008770 <_scanf_float+0x2a0>
 800854a:	455e      	cmp	r6, fp
 800854c:	f200 8105 	bhi.w	800875a <_scanf_float+0x28a>
 8008550:	2501      	movs	r5, #1
 8008552:	4628      	mov	r0, r5
 8008554:	b007      	add	sp, #28
 8008556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800855a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800855e:	2a0d      	cmp	r2, #13
 8008560:	d8e6      	bhi.n	8008530 <_scanf_float+0x60>
 8008562:	a101      	add	r1, pc, #4	; (adr r1, 8008568 <_scanf_float+0x98>)
 8008564:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008568:	080086a7 	.word	0x080086a7
 800856c:	08008531 	.word	0x08008531
 8008570:	08008531 	.word	0x08008531
 8008574:	08008531 	.word	0x08008531
 8008578:	08008707 	.word	0x08008707
 800857c:	080086df 	.word	0x080086df
 8008580:	08008531 	.word	0x08008531
 8008584:	08008531 	.word	0x08008531
 8008588:	080086b5 	.word	0x080086b5
 800858c:	08008531 	.word	0x08008531
 8008590:	08008531 	.word	0x08008531
 8008594:	08008531 	.word	0x08008531
 8008598:	08008531 	.word	0x08008531
 800859c:	0800866d 	.word	0x0800866d
 80085a0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80085a4:	e7db      	b.n	800855e <_scanf_float+0x8e>
 80085a6:	290e      	cmp	r1, #14
 80085a8:	d8c2      	bhi.n	8008530 <_scanf_float+0x60>
 80085aa:	a001      	add	r0, pc, #4	; (adr r0, 80085b0 <_scanf_float+0xe0>)
 80085ac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80085b0:	0800865f 	.word	0x0800865f
 80085b4:	08008531 	.word	0x08008531
 80085b8:	0800865f 	.word	0x0800865f
 80085bc:	080086f3 	.word	0x080086f3
 80085c0:	08008531 	.word	0x08008531
 80085c4:	0800860d 	.word	0x0800860d
 80085c8:	08008649 	.word	0x08008649
 80085cc:	08008649 	.word	0x08008649
 80085d0:	08008649 	.word	0x08008649
 80085d4:	08008649 	.word	0x08008649
 80085d8:	08008649 	.word	0x08008649
 80085dc:	08008649 	.word	0x08008649
 80085e0:	08008649 	.word	0x08008649
 80085e4:	08008649 	.word	0x08008649
 80085e8:	08008649 	.word	0x08008649
 80085ec:	2b6e      	cmp	r3, #110	; 0x6e
 80085ee:	d809      	bhi.n	8008604 <_scanf_float+0x134>
 80085f0:	2b60      	cmp	r3, #96	; 0x60
 80085f2:	d8b2      	bhi.n	800855a <_scanf_float+0x8a>
 80085f4:	2b54      	cmp	r3, #84	; 0x54
 80085f6:	d077      	beq.n	80086e8 <_scanf_float+0x218>
 80085f8:	2b59      	cmp	r3, #89	; 0x59
 80085fa:	d199      	bne.n	8008530 <_scanf_float+0x60>
 80085fc:	2d07      	cmp	r5, #7
 80085fe:	d197      	bne.n	8008530 <_scanf_float+0x60>
 8008600:	2508      	movs	r5, #8
 8008602:	e029      	b.n	8008658 <_scanf_float+0x188>
 8008604:	2b74      	cmp	r3, #116	; 0x74
 8008606:	d06f      	beq.n	80086e8 <_scanf_float+0x218>
 8008608:	2b79      	cmp	r3, #121	; 0x79
 800860a:	e7f6      	b.n	80085fa <_scanf_float+0x12a>
 800860c:	6821      	ldr	r1, [r4, #0]
 800860e:	05c8      	lsls	r0, r1, #23
 8008610:	d51a      	bpl.n	8008648 <_scanf_float+0x178>
 8008612:	9b02      	ldr	r3, [sp, #8]
 8008614:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008618:	6021      	str	r1, [r4, #0]
 800861a:	f109 0901 	add.w	r9, r9, #1
 800861e:	b11b      	cbz	r3, 8008628 <_scanf_float+0x158>
 8008620:	3b01      	subs	r3, #1
 8008622:	3201      	adds	r2, #1
 8008624:	9302      	str	r3, [sp, #8]
 8008626:	60a2      	str	r2, [r4, #8]
 8008628:	68a3      	ldr	r3, [r4, #8]
 800862a:	3b01      	subs	r3, #1
 800862c:	60a3      	str	r3, [r4, #8]
 800862e:	6923      	ldr	r3, [r4, #16]
 8008630:	3301      	adds	r3, #1
 8008632:	6123      	str	r3, [r4, #16]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	3b01      	subs	r3, #1
 8008638:	2b00      	cmp	r3, #0
 800863a:	607b      	str	r3, [r7, #4]
 800863c:	f340 8084 	ble.w	8008748 <_scanf_float+0x278>
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	3301      	adds	r3, #1
 8008644:	603b      	str	r3, [r7, #0]
 8008646:	e766      	b.n	8008516 <_scanf_float+0x46>
 8008648:	eb1a 0f05 	cmn.w	sl, r5
 800864c:	f47f af70 	bne.w	8008530 <_scanf_float+0x60>
 8008650:	6822      	ldr	r2, [r4, #0]
 8008652:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008656:	6022      	str	r2, [r4, #0]
 8008658:	f806 3b01 	strb.w	r3, [r6], #1
 800865c:	e7e4      	b.n	8008628 <_scanf_float+0x158>
 800865e:	6822      	ldr	r2, [r4, #0]
 8008660:	0610      	lsls	r0, r2, #24
 8008662:	f57f af65 	bpl.w	8008530 <_scanf_float+0x60>
 8008666:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800866a:	e7f4      	b.n	8008656 <_scanf_float+0x186>
 800866c:	f1ba 0f00 	cmp.w	sl, #0
 8008670:	d10e      	bne.n	8008690 <_scanf_float+0x1c0>
 8008672:	f1b9 0f00 	cmp.w	r9, #0
 8008676:	d10e      	bne.n	8008696 <_scanf_float+0x1c6>
 8008678:	6822      	ldr	r2, [r4, #0]
 800867a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800867e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008682:	d108      	bne.n	8008696 <_scanf_float+0x1c6>
 8008684:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008688:	6022      	str	r2, [r4, #0]
 800868a:	f04f 0a01 	mov.w	sl, #1
 800868e:	e7e3      	b.n	8008658 <_scanf_float+0x188>
 8008690:	f1ba 0f02 	cmp.w	sl, #2
 8008694:	d055      	beq.n	8008742 <_scanf_float+0x272>
 8008696:	2d01      	cmp	r5, #1
 8008698:	d002      	beq.n	80086a0 <_scanf_float+0x1d0>
 800869a:	2d04      	cmp	r5, #4
 800869c:	f47f af48 	bne.w	8008530 <_scanf_float+0x60>
 80086a0:	3501      	adds	r5, #1
 80086a2:	b2ed      	uxtb	r5, r5
 80086a4:	e7d8      	b.n	8008658 <_scanf_float+0x188>
 80086a6:	f1ba 0f01 	cmp.w	sl, #1
 80086aa:	f47f af41 	bne.w	8008530 <_scanf_float+0x60>
 80086ae:	f04f 0a02 	mov.w	sl, #2
 80086b2:	e7d1      	b.n	8008658 <_scanf_float+0x188>
 80086b4:	b97d      	cbnz	r5, 80086d6 <_scanf_float+0x206>
 80086b6:	f1b9 0f00 	cmp.w	r9, #0
 80086ba:	f47f af3c 	bne.w	8008536 <_scanf_float+0x66>
 80086be:	6822      	ldr	r2, [r4, #0]
 80086c0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80086c4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80086c8:	f47f af39 	bne.w	800853e <_scanf_float+0x6e>
 80086cc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80086d0:	6022      	str	r2, [r4, #0]
 80086d2:	2501      	movs	r5, #1
 80086d4:	e7c0      	b.n	8008658 <_scanf_float+0x188>
 80086d6:	2d03      	cmp	r5, #3
 80086d8:	d0e2      	beq.n	80086a0 <_scanf_float+0x1d0>
 80086da:	2d05      	cmp	r5, #5
 80086dc:	e7de      	b.n	800869c <_scanf_float+0x1cc>
 80086de:	2d02      	cmp	r5, #2
 80086e0:	f47f af26 	bne.w	8008530 <_scanf_float+0x60>
 80086e4:	2503      	movs	r5, #3
 80086e6:	e7b7      	b.n	8008658 <_scanf_float+0x188>
 80086e8:	2d06      	cmp	r5, #6
 80086ea:	f47f af21 	bne.w	8008530 <_scanf_float+0x60>
 80086ee:	2507      	movs	r5, #7
 80086f0:	e7b2      	b.n	8008658 <_scanf_float+0x188>
 80086f2:	6822      	ldr	r2, [r4, #0]
 80086f4:	0591      	lsls	r1, r2, #22
 80086f6:	f57f af1b 	bpl.w	8008530 <_scanf_float+0x60>
 80086fa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80086fe:	6022      	str	r2, [r4, #0]
 8008700:	f8cd 9004 	str.w	r9, [sp, #4]
 8008704:	e7a8      	b.n	8008658 <_scanf_float+0x188>
 8008706:	6822      	ldr	r2, [r4, #0]
 8008708:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800870c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008710:	d006      	beq.n	8008720 <_scanf_float+0x250>
 8008712:	0550      	lsls	r0, r2, #21
 8008714:	f57f af0c 	bpl.w	8008530 <_scanf_float+0x60>
 8008718:	f1b9 0f00 	cmp.w	r9, #0
 800871c:	f43f af0f 	beq.w	800853e <_scanf_float+0x6e>
 8008720:	0591      	lsls	r1, r2, #22
 8008722:	bf58      	it	pl
 8008724:	9901      	ldrpl	r1, [sp, #4]
 8008726:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800872a:	bf58      	it	pl
 800872c:	eba9 0101 	subpl.w	r1, r9, r1
 8008730:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008734:	bf58      	it	pl
 8008736:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800873a:	6022      	str	r2, [r4, #0]
 800873c:	f04f 0900 	mov.w	r9, #0
 8008740:	e78a      	b.n	8008658 <_scanf_float+0x188>
 8008742:	f04f 0a03 	mov.w	sl, #3
 8008746:	e787      	b.n	8008658 <_scanf_float+0x188>
 8008748:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800874c:	4639      	mov	r1, r7
 800874e:	4640      	mov	r0, r8
 8008750:	4798      	blx	r3
 8008752:	2800      	cmp	r0, #0
 8008754:	f43f aedf 	beq.w	8008516 <_scanf_float+0x46>
 8008758:	e6ea      	b.n	8008530 <_scanf_float+0x60>
 800875a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800875e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008762:	463a      	mov	r2, r7
 8008764:	4640      	mov	r0, r8
 8008766:	4798      	blx	r3
 8008768:	6923      	ldr	r3, [r4, #16]
 800876a:	3b01      	subs	r3, #1
 800876c:	6123      	str	r3, [r4, #16]
 800876e:	e6ec      	b.n	800854a <_scanf_float+0x7a>
 8008770:	1e6b      	subs	r3, r5, #1
 8008772:	2b06      	cmp	r3, #6
 8008774:	d825      	bhi.n	80087c2 <_scanf_float+0x2f2>
 8008776:	2d02      	cmp	r5, #2
 8008778:	d836      	bhi.n	80087e8 <_scanf_float+0x318>
 800877a:	455e      	cmp	r6, fp
 800877c:	f67f aee8 	bls.w	8008550 <_scanf_float+0x80>
 8008780:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008784:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008788:	463a      	mov	r2, r7
 800878a:	4640      	mov	r0, r8
 800878c:	4798      	blx	r3
 800878e:	6923      	ldr	r3, [r4, #16]
 8008790:	3b01      	subs	r3, #1
 8008792:	6123      	str	r3, [r4, #16]
 8008794:	e7f1      	b.n	800877a <_scanf_float+0x2aa>
 8008796:	9802      	ldr	r0, [sp, #8]
 8008798:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800879c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80087a0:	9002      	str	r0, [sp, #8]
 80087a2:	463a      	mov	r2, r7
 80087a4:	4640      	mov	r0, r8
 80087a6:	4798      	blx	r3
 80087a8:	6923      	ldr	r3, [r4, #16]
 80087aa:	3b01      	subs	r3, #1
 80087ac:	6123      	str	r3, [r4, #16]
 80087ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80087b2:	fa5f fa8a 	uxtb.w	sl, sl
 80087b6:	f1ba 0f02 	cmp.w	sl, #2
 80087ba:	d1ec      	bne.n	8008796 <_scanf_float+0x2c6>
 80087bc:	3d03      	subs	r5, #3
 80087be:	b2ed      	uxtb	r5, r5
 80087c0:	1b76      	subs	r6, r6, r5
 80087c2:	6823      	ldr	r3, [r4, #0]
 80087c4:	05da      	lsls	r2, r3, #23
 80087c6:	d52f      	bpl.n	8008828 <_scanf_float+0x358>
 80087c8:	055b      	lsls	r3, r3, #21
 80087ca:	d510      	bpl.n	80087ee <_scanf_float+0x31e>
 80087cc:	455e      	cmp	r6, fp
 80087ce:	f67f aebf 	bls.w	8008550 <_scanf_float+0x80>
 80087d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80087da:	463a      	mov	r2, r7
 80087dc:	4640      	mov	r0, r8
 80087de:	4798      	blx	r3
 80087e0:	6923      	ldr	r3, [r4, #16]
 80087e2:	3b01      	subs	r3, #1
 80087e4:	6123      	str	r3, [r4, #16]
 80087e6:	e7f1      	b.n	80087cc <_scanf_float+0x2fc>
 80087e8:	46aa      	mov	sl, r5
 80087ea:	9602      	str	r6, [sp, #8]
 80087ec:	e7df      	b.n	80087ae <_scanf_float+0x2de>
 80087ee:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80087f2:	6923      	ldr	r3, [r4, #16]
 80087f4:	2965      	cmp	r1, #101	; 0x65
 80087f6:	f103 33ff 	add.w	r3, r3, #4294967295
 80087fa:	f106 35ff 	add.w	r5, r6, #4294967295
 80087fe:	6123      	str	r3, [r4, #16]
 8008800:	d00c      	beq.n	800881c <_scanf_float+0x34c>
 8008802:	2945      	cmp	r1, #69	; 0x45
 8008804:	d00a      	beq.n	800881c <_scanf_float+0x34c>
 8008806:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800880a:	463a      	mov	r2, r7
 800880c:	4640      	mov	r0, r8
 800880e:	4798      	blx	r3
 8008810:	6923      	ldr	r3, [r4, #16]
 8008812:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008816:	3b01      	subs	r3, #1
 8008818:	1eb5      	subs	r5, r6, #2
 800881a:	6123      	str	r3, [r4, #16]
 800881c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008820:	463a      	mov	r2, r7
 8008822:	4640      	mov	r0, r8
 8008824:	4798      	blx	r3
 8008826:	462e      	mov	r6, r5
 8008828:	6825      	ldr	r5, [r4, #0]
 800882a:	f015 0510 	ands.w	r5, r5, #16
 800882e:	d159      	bne.n	80088e4 <_scanf_float+0x414>
 8008830:	7035      	strb	r5, [r6, #0]
 8008832:	6823      	ldr	r3, [r4, #0]
 8008834:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800883c:	d11b      	bne.n	8008876 <_scanf_float+0x3a6>
 800883e:	9b01      	ldr	r3, [sp, #4]
 8008840:	454b      	cmp	r3, r9
 8008842:	eba3 0209 	sub.w	r2, r3, r9
 8008846:	d123      	bne.n	8008890 <_scanf_float+0x3c0>
 8008848:	2200      	movs	r2, #0
 800884a:	4659      	mov	r1, fp
 800884c:	4640      	mov	r0, r8
 800884e:	f000 fe99 	bl	8009584 <_strtod_r>
 8008852:	6822      	ldr	r2, [r4, #0]
 8008854:	9b03      	ldr	r3, [sp, #12]
 8008856:	f012 0f02 	tst.w	r2, #2
 800885a:	ec57 6b10 	vmov	r6, r7, d0
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	d021      	beq.n	80088a6 <_scanf_float+0x3d6>
 8008862:	9903      	ldr	r1, [sp, #12]
 8008864:	1d1a      	adds	r2, r3, #4
 8008866:	600a      	str	r2, [r1, #0]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	e9c3 6700 	strd	r6, r7, [r3]
 800886e:	68e3      	ldr	r3, [r4, #12]
 8008870:	3301      	adds	r3, #1
 8008872:	60e3      	str	r3, [r4, #12]
 8008874:	e66d      	b.n	8008552 <_scanf_float+0x82>
 8008876:	9b04      	ldr	r3, [sp, #16]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d0e5      	beq.n	8008848 <_scanf_float+0x378>
 800887c:	9905      	ldr	r1, [sp, #20]
 800887e:	230a      	movs	r3, #10
 8008880:	462a      	mov	r2, r5
 8008882:	3101      	adds	r1, #1
 8008884:	4640      	mov	r0, r8
 8008886:	f000 ff05 	bl	8009694 <_strtol_r>
 800888a:	9b04      	ldr	r3, [sp, #16]
 800888c:	9e05      	ldr	r6, [sp, #20]
 800888e:	1ac2      	subs	r2, r0, r3
 8008890:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008894:	429e      	cmp	r6, r3
 8008896:	bf28      	it	cs
 8008898:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800889c:	4912      	ldr	r1, [pc, #72]	; (80088e8 <_scanf_float+0x418>)
 800889e:	4630      	mov	r0, r6
 80088a0:	f000 f82c 	bl	80088fc <siprintf>
 80088a4:	e7d0      	b.n	8008848 <_scanf_float+0x378>
 80088a6:	9903      	ldr	r1, [sp, #12]
 80088a8:	f012 0f04 	tst.w	r2, #4
 80088ac:	f103 0204 	add.w	r2, r3, #4
 80088b0:	600a      	str	r2, [r1, #0]
 80088b2:	d1d9      	bne.n	8008868 <_scanf_float+0x398>
 80088b4:	f8d3 8000 	ldr.w	r8, [r3]
 80088b8:	ee10 2a10 	vmov	r2, s0
 80088bc:	ee10 0a10 	vmov	r0, s0
 80088c0:	463b      	mov	r3, r7
 80088c2:	4639      	mov	r1, r7
 80088c4:	f7f8 f932 	bl	8000b2c <__aeabi_dcmpun>
 80088c8:	b128      	cbz	r0, 80088d6 <_scanf_float+0x406>
 80088ca:	4808      	ldr	r0, [pc, #32]	; (80088ec <_scanf_float+0x41c>)
 80088cc:	f000 f810 	bl	80088f0 <nanf>
 80088d0:	ed88 0a00 	vstr	s0, [r8]
 80088d4:	e7cb      	b.n	800886e <_scanf_float+0x39e>
 80088d6:	4630      	mov	r0, r6
 80088d8:	4639      	mov	r1, r7
 80088da:	f7f8 f985 	bl	8000be8 <__aeabi_d2f>
 80088de:	f8c8 0000 	str.w	r0, [r8]
 80088e2:	e7c4      	b.n	800886e <_scanf_float+0x39e>
 80088e4:	2500      	movs	r5, #0
 80088e6:	e634      	b.n	8008552 <_scanf_float+0x82>
 80088e8:	0800f42c 	.word	0x0800f42c
 80088ec:	0800f838 	.word	0x0800f838

080088f0 <nanf>:
 80088f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80088f8 <nanf+0x8>
 80088f4:	4770      	bx	lr
 80088f6:	bf00      	nop
 80088f8:	7fc00000 	.word	0x7fc00000

080088fc <siprintf>:
 80088fc:	b40e      	push	{r1, r2, r3}
 80088fe:	b500      	push	{lr}
 8008900:	b09c      	sub	sp, #112	; 0x70
 8008902:	ab1d      	add	r3, sp, #116	; 0x74
 8008904:	9002      	str	r0, [sp, #8]
 8008906:	9006      	str	r0, [sp, #24]
 8008908:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800890c:	4809      	ldr	r0, [pc, #36]	; (8008934 <siprintf+0x38>)
 800890e:	9107      	str	r1, [sp, #28]
 8008910:	9104      	str	r1, [sp, #16]
 8008912:	4909      	ldr	r1, [pc, #36]	; (8008938 <siprintf+0x3c>)
 8008914:	f853 2b04 	ldr.w	r2, [r3], #4
 8008918:	9105      	str	r1, [sp, #20]
 800891a:	6800      	ldr	r0, [r0, #0]
 800891c:	9301      	str	r3, [sp, #4]
 800891e:	a902      	add	r1, sp, #8
 8008920:	f002 fee4 	bl	800b6ec <_svfiprintf_r>
 8008924:	9b02      	ldr	r3, [sp, #8]
 8008926:	2200      	movs	r2, #0
 8008928:	701a      	strb	r2, [r3, #0]
 800892a:	b01c      	add	sp, #112	; 0x70
 800892c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008930:	b003      	add	sp, #12
 8008932:	4770      	bx	lr
 8008934:	2000000c 	.word	0x2000000c
 8008938:	ffff0208 	.word	0xffff0208

0800893c <sulp>:
 800893c:	b570      	push	{r4, r5, r6, lr}
 800893e:	4604      	mov	r4, r0
 8008940:	460d      	mov	r5, r1
 8008942:	ec45 4b10 	vmov	d0, r4, r5
 8008946:	4616      	mov	r6, r2
 8008948:	f002 fc2e 	bl	800b1a8 <__ulp>
 800894c:	ec51 0b10 	vmov	r0, r1, d0
 8008950:	b17e      	cbz	r6, 8008972 <sulp+0x36>
 8008952:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008956:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800895a:	2b00      	cmp	r3, #0
 800895c:	dd09      	ble.n	8008972 <sulp+0x36>
 800895e:	051b      	lsls	r3, r3, #20
 8008960:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008964:	2400      	movs	r4, #0
 8008966:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800896a:	4622      	mov	r2, r4
 800896c:	462b      	mov	r3, r5
 800896e:	f7f7 fe43 	bl	80005f8 <__aeabi_dmul>
 8008972:	bd70      	pop	{r4, r5, r6, pc}
 8008974:	0000      	movs	r0, r0
	...

08008978 <_strtod_l>:
 8008978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800897c:	ed2d 8b02 	vpush	{d8}
 8008980:	b09d      	sub	sp, #116	; 0x74
 8008982:	461f      	mov	r7, r3
 8008984:	2300      	movs	r3, #0
 8008986:	9318      	str	r3, [sp, #96]	; 0x60
 8008988:	4ba2      	ldr	r3, [pc, #648]	; (8008c14 <_strtod_l+0x29c>)
 800898a:	9213      	str	r2, [sp, #76]	; 0x4c
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	9305      	str	r3, [sp, #20]
 8008990:	4604      	mov	r4, r0
 8008992:	4618      	mov	r0, r3
 8008994:	4688      	mov	r8, r1
 8008996:	f7f7 fc1b 	bl	80001d0 <strlen>
 800899a:	f04f 0a00 	mov.w	sl, #0
 800899e:	4605      	mov	r5, r0
 80089a0:	f04f 0b00 	mov.w	fp, #0
 80089a4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80089a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80089aa:	781a      	ldrb	r2, [r3, #0]
 80089ac:	2a2b      	cmp	r2, #43	; 0x2b
 80089ae:	d04e      	beq.n	8008a4e <_strtod_l+0xd6>
 80089b0:	d83b      	bhi.n	8008a2a <_strtod_l+0xb2>
 80089b2:	2a0d      	cmp	r2, #13
 80089b4:	d834      	bhi.n	8008a20 <_strtod_l+0xa8>
 80089b6:	2a08      	cmp	r2, #8
 80089b8:	d834      	bhi.n	8008a24 <_strtod_l+0xac>
 80089ba:	2a00      	cmp	r2, #0
 80089bc:	d03e      	beq.n	8008a3c <_strtod_l+0xc4>
 80089be:	2300      	movs	r3, #0
 80089c0:	930a      	str	r3, [sp, #40]	; 0x28
 80089c2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80089c4:	7833      	ldrb	r3, [r6, #0]
 80089c6:	2b30      	cmp	r3, #48	; 0x30
 80089c8:	f040 80b0 	bne.w	8008b2c <_strtod_l+0x1b4>
 80089cc:	7873      	ldrb	r3, [r6, #1]
 80089ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80089d2:	2b58      	cmp	r3, #88	; 0x58
 80089d4:	d168      	bne.n	8008aa8 <_strtod_l+0x130>
 80089d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089d8:	9301      	str	r3, [sp, #4]
 80089da:	ab18      	add	r3, sp, #96	; 0x60
 80089dc:	9702      	str	r7, [sp, #8]
 80089de:	9300      	str	r3, [sp, #0]
 80089e0:	4a8d      	ldr	r2, [pc, #564]	; (8008c18 <_strtod_l+0x2a0>)
 80089e2:	ab19      	add	r3, sp, #100	; 0x64
 80089e4:	a917      	add	r1, sp, #92	; 0x5c
 80089e6:	4620      	mov	r0, r4
 80089e8:	f001 fd38 	bl	800a45c <__gethex>
 80089ec:	f010 0707 	ands.w	r7, r0, #7
 80089f0:	4605      	mov	r5, r0
 80089f2:	d005      	beq.n	8008a00 <_strtod_l+0x88>
 80089f4:	2f06      	cmp	r7, #6
 80089f6:	d12c      	bne.n	8008a52 <_strtod_l+0xda>
 80089f8:	3601      	adds	r6, #1
 80089fa:	2300      	movs	r3, #0
 80089fc:	9617      	str	r6, [sp, #92]	; 0x5c
 80089fe:	930a      	str	r3, [sp, #40]	; 0x28
 8008a00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	f040 8590 	bne.w	8009528 <_strtod_l+0xbb0>
 8008a08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a0a:	b1eb      	cbz	r3, 8008a48 <_strtod_l+0xd0>
 8008a0c:	4652      	mov	r2, sl
 8008a0e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008a12:	ec43 2b10 	vmov	d0, r2, r3
 8008a16:	b01d      	add	sp, #116	; 0x74
 8008a18:	ecbd 8b02 	vpop	{d8}
 8008a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a20:	2a20      	cmp	r2, #32
 8008a22:	d1cc      	bne.n	80089be <_strtod_l+0x46>
 8008a24:	3301      	adds	r3, #1
 8008a26:	9317      	str	r3, [sp, #92]	; 0x5c
 8008a28:	e7be      	b.n	80089a8 <_strtod_l+0x30>
 8008a2a:	2a2d      	cmp	r2, #45	; 0x2d
 8008a2c:	d1c7      	bne.n	80089be <_strtod_l+0x46>
 8008a2e:	2201      	movs	r2, #1
 8008a30:	920a      	str	r2, [sp, #40]	; 0x28
 8008a32:	1c5a      	adds	r2, r3, #1
 8008a34:	9217      	str	r2, [sp, #92]	; 0x5c
 8008a36:	785b      	ldrb	r3, [r3, #1]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d1c2      	bne.n	80089c2 <_strtod_l+0x4a>
 8008a3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008a3e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	f040 856e 	bne.w	8009524 <_strtod_l+0xbac>
 8008a48:	4652      	mov	r2, sl
 8008a4a:	465b      	mov	r3, fp
 8008a4c:	e7e1      	b.n	8008a12 <_strtod_l+0x9a>
 8008a4e:	2200      	movs	r2, #0
 8008a50:	e7ee      	b.n	8008a30 <_strtod_l+0xb8>
 8008a52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008a54:	b13a      	cbz	r2, 8008a66 <_strtod_l+0xee>
 8008a56:	2135      	movs	r1, #53	; 0x35
 8008a58:	a81a      	add	r0, sp, #104	; 0x68
 8008a5a:	f002 fcb0 	bl	800b3be <__copybits>
 8008a5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008a60:	4620      	mov	r0, r4
 8008a62:	f002 f86f 	bl	800ab44 <_Bfree>
 8008a66:	3f01      	subs	r7, #1
 8008a68:	2f04      	cmp	r7, #4
 8008a6a:	d806      	bhi.n	8008a7a <_strtod_l+0x102>
 8008a6c:	e8df f007 	tbb	[pc, r7]
 8008a70:	1714030a 	.word	0x1714030a
 8008a74:	0a          	.byte	0x0a
 8008a75:	00          	.byte	0x00
 8008a76:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008a7a:	0728      	lsls	r0, r5, #28
 8008a7c:	d5c0      	bpl.n	8008a00 <_strtod_l+0x88>
 8008a7e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008a82:	e7bd      	b.n	8008a00 <_strtod_l+0x88>
 8008a84:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008a88:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008a8a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008a8e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008a92:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008a96:	e7f0      	b.n	8008a7a <_strtod_l+0x102>
 8008a98:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008c1c <_strtod_l+0x2a4>
 8008a9c:	e7ed      	b.n	8008a7a <_strtod_l+0x102>
 8008a9e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008aa2:	f04f 3aff 	mov.w	sl, #4294967295
 8008aa6:	e7e8      	b.n	8008a7a <_strtod_l+0x102>
 8008aa8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008aaa:	1c5a      	adds	r2, r3, #1
 8008aac:	9217      	str	r2, [sp, #92]	; 0x5c
 8008aae:	785b      	ldrb	r3, [r3, #1]
 8008ab0:	2b30      	cmp	r3, #48	; 0x30
 8008ab2:	d0f9      	beq.n	8008aa8 <_strtod_l+0x130>
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d0a3      	beq.n	8008a00 <_strtod_l+0x88>
 8008ab8:	2301      	movs	r3, #1
 8008aba:	f04f 0900 	mov.w	r9, #0
 8008abe:	9304      	str	r3, [sp, #16]
 8008ac0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008ac2:	9308      	str	r3, [sp, #32]
 8008ac4:	f8cd 901c 	str.w	r9, [sp, #28]
 8008ac8:	464f      	mov	r7, r9
 8008aca:	220a      	movs	r2, #10
 8008acc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008ace:	7806      	ldrb	r6, [r0, #0]
 8008ad0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008ad4:	b2d9      	uxtb	r1, r3
 8008ad6:	2909      	cmp	r1, #9
 8008ad8:	d92a      	bls.n	8008b30 <_strtod_l+0x1b8>
 8008ada:	9905      	ldr	r1, [sp, #20]
 8008adc:	462a      	mov	r2, r5
 8008ade:	f002 ff1f 	bl	800b920 <strncmp>
 8008ae2:	b398      	cbz	r0, 8008b4c <_strtod_l+0x1d4>
 8008ae4:	2000      	movs	r0, #0
 8008ae6:	4632      	mov	r2, r6
 8008ae8:	463d      	mov	r5, r7
 8008aea:	9005      	str	r0, [sp, #20]
 8008aec:	4603      	mov	r3, r0
 8008aee:	2a65      	cmp	r2, #101	; 0x65
 8008af0:	d001      	beq.n	8008af6 <_strtod_l+0x17e>
 8008af2:	2a45      	cmp	r2, #69	; 0x45
 8008af4:	d118      	bne.n	8008b28 <_strtod_l+0x1b0>
 8008af6:	b91d      	cbnz	r5, 8008b00 <_strtod_l+0x188>
 8008af8:	9a04      	ldr	r2, [sp, #16]
 8008afa:	4302      	orrs	r2, r0
 8008afc:	d09e      	beq.n	8008a3c <_strtod_l+0xc4>
 8008afe:	2500      	movs	r5, #0
 8008b00:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008b04:	f108 0201 	add.w	r2, r8, #1
 8008b08:	9217      	str	r2, [sp, #92]	; 0x5c
 8008b0a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008b0e:	2a2b      	cmp	r2, #43	; 0x2b
 8008b10:	d075      	beq.n	8008bfe <_strtod_l+0x286>
 8008b12:	2a2d      	cmp	r2, #45	; 0x2d
 8008b14:	d07b      	beq.n	8008c0e <_strtod_l+0x296>
 8008b16:	f04f 0c00 	mov.w	ip, #0
 8008b1a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008b1e:	2909      	cmp	r1, #9
 8008b20:	f240 8082 	bls.w	8008c28 <_strtod_l+0x2b0>
 8008b24:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008b28:	2600      	movs	r6, #0
 8008b2a:	e09d      	b.n	8008c68 <_strtod_l+0x2f0>
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	e7c4      	b.n	8008aba <_strtod_l+0x142>
 8008b30:	2f08      	cmp	r7, #8
 8008b32:	bfd8      	it	le
 8008b34:	9907      	ldrle	r1, [sp, #28]
 8008b36:	f100 0001 	add.w	r0, r0, #1
 8008b3a:	bfda      	itte	le
 8008b3c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008b40:	9307      	strle	r3, [sp, #28]
 8008b42:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008b46:	3701      	adds	r7, #1
 8008b48:	9017      	str	r0, [sp, #92]	; 0x5c
 8008b4a:	e7bf      	b.n	8008acc <_strtod_l+0x154>
 8008b4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b4e:	195a      	adds	r2, r3, r5
 8008b50:	9217      	str	r2, [sp, #92]	; 0x5c
 8008b52:	5d5a      	ldrb	r2, [r3, r5]
 8008b54:	2f00      	cmp	r7, #0
 8008b56:	d037      	beq.n	8008bc8 <_strtod_l+0x250>
 8008b58:	9005      	str	r0, [sp, #20]
 8008b5a:	463d      	mov	r5, r7
 8008b5c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008b60:	2b09      	cmp	r3, #9
 8008b62:	d912      	bls.n	8008b8a <_strtod_l+0x212>
 8008b64:	2301      	movs	r3, #1
 8008b66:	e7c2      	b.n	8008aee <_strtod_l+0x176>
 8008b68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b6a:	1c5a      	adds	r2, r3, #1
 8008b6c:	9217      	str	r2, [sp, #92]	; 0x5c
 8008b6e:	785a      	ldrb	r2, [r3, #1]
 8008b70:	3001      	adds	r0, #1
 8008b72:	2a30      	cmp	r2, #48	; 0x30
 8008b74:	d0f8      	beq.n	8008b68 <_strtod_l+0x1f0>
 8008b76:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008b7a:	2b08      	cmp	r3, #8
 8008b7c:	f200 84d9 	bhi.w	8009532 <_strtod_l+0xbba>
 8008b80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b82:	9005      	str	r0, [sp, #20]
 8008b84:	2000      	movs	r0, #0
 8008b86:	9308      	str	r3, [sp, #32]
 8008b88:	4605      	mov	r5, r0
 8008b8a:	3a30      	subs	r2, #48	; 0x30
 8008b8c:	f100 0301 	add.w	r3, r0, #1
 8008b90:	d014      	beq.n	8008bbc <_strtod_l+0x244>
 8008b92:	9905      	ldr	r1, [sp, #20]
 8008b94:	4419      	add	r1, r3
 8008b96:	9105      	str	r1, [sp, #20]
 8008b98:	462b      	mov	r3, r5
 8008b9a:	eb00 0e05 	add.w	lr, r0, r5
 8008b9e:	210a      	movs	r1, #10
 8008ba0:	4573      	cmp	r3, lr
 8008ba2:	d113      	bne.n	8008bcc <_strtod_l+0x254>
 8008ba4:	182b      	adds	r3, r5, r0
 8008ba6:	2b08      	cmp	r3, #8
 8008ba8:	f105 0501 	add.w	r5, r5, #1
 8008bac:	4405      	add	r5, r0
 8008bae:	dc1c      	bgt.n	8008bea <_strtod_l+0x272>
 8008bb0:	9907      	ldr	r1, [sp, #28]
 8008bb2:	230a      	movs	r3, #10
 8008bb4:	fb03 2301 	mla	r3, r3, r1, r2
 8008bb8:	9307      	str	r3, [sp, #28]
 8008bba:	2300      	movs	r3, #0
 8008bbc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008bbe:	1c51      	adds	r1, r2, #1
 8008bc0:	9117      	str	r1, [sp, #92]	; 0x5c
 8008bc2:	7852      	ldrb	r2, [r2, #1]
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	e7c9      	b.n	8008b5c <_strtod_l+0x1e4>
 8008bc8:	4638      	mov	r0, r7
 8008bca:	e7d2      	b.n	8008b72 <_strtod_l+0x1fa>
 8008bcc:	2b08      	cmp	r3, #8
 8008bce:	dc04      	bgt.n	8008bda <_strtod_l+0x262>
 8008bd0:	9e07      	ldr	r6, [sp, #28]
 8008bd2:	434e      	muls	r6, r1
 8008bd4:	9607      	str	r6, [sp, #28]
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	e7e2      	b.n	8008ba0 <_strtod_l+0x228>
 8008bda:	f103 0c01 	add.w	ip, r3, #1
 8008bde:	f1bc 0f10 	cmp.w	ip, #16
 8008be2:	bfd8      	it	le
 8008be4:	fb01 f909 	mulle.w	r9, r1, r9
 8008be8:	e7f5      	b.n	8008bd6 <_strtod_l+0x25e>
 8008bea:	2d10      	cmp	r5, #16
 8008bec:	bfdc      	itt	le
 8008bee:	230a      	movle	r3, #10
 8008bf0:	fb03 2909 	mlale	r9, r3, r9, r2
 8008bf4:	e7e1      	b.n	8008bba <_strtod_l+0x242>
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	9305      	str	r3, [sp, #20]
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e77c      	b.n	8008af8 <_strtod_l+0x180>
 8008bfe:	f04f 0c00 	mov.w	ip, #0
 8008c02:	f108 0202 	add.w	r2, r8, #2
 8008c06:	9217      	str	r2, [sp, #92]	; 0x5c
 8008c08:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008c0c:	e785      	b.n	8008b1a <_strtod_l+0x1a2>
 8008c0e:	f04f 0c01 	mov.w	ip, #1
 8008c12:	e7f6      	b.n	8008c02 <_strtod_l+0x28a>
 8008c14:	0800f680 	.word	0x0800f680
 8008c18:	0800f434 	.word	0x0800f434
 8008c1c:	7ff00000 	.word	0x7ff00000
 8008c20:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008c22:	1c51      	adds	r1, r2, #1
 8008c24:	9117      	str	r1, [sp, #92]	; 0x5c
 8008c26:	7852      	ldrb	r2, [r2, #1]
 8008c28:	2a30      	cmp	r2, #48	; 0x30
 8008c2a:	d0f9      	beq.n	8008c20 <_strtod_l+0x2a8>
 8008c2c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008c30:	2908      	cmp	r1, #8
 8008c32:	f63f af79 	bhi.w	8008b28 <_strtod_l+0x1b0>
 8008c36:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008c3a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008c3c:	9206      	str	r2, [sp, #24]
 8008c3e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008c40:	1c51      	adds	r1, r2, #1
 8008c42:	9117      	str	r1, [sp, #92]	; 0x5c
 8008c44:	7852      	ldrb	r2, [r2, #1]
 8008c46:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008c4a:	2e09      	cmp	r6, #9
 8008c4c:	d937      	bls.n	8008cbe <_strtod_l+0x346>
 8008c4e:	9e06      	ldr	r6, [sp, #24]
 8008c50:	1b89      	subs	r1, r1, r6
 8008c52:	2908      	cmp	r1, #8
 8008c54:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008c58:	dc02      	bgt.n	8008c60 <_strtod_l+0x2e8>
 8008c5a:	4576      	cmp	r6, lr
 8008c5c:	bfa8      	it	ge
 8008c5e:	4676      	movge	r6, lr
 8008c60:	f1bc 0f00 	cmp.w	ip, #0
 8008c64:	d000      	beq.n	8008c68 <_strtod_l+0x2f0>
 8008c66:	4276      	negs	r6, r6
 8008c68:	2d00      	cmp	r5, #0
 8008c6a:	d14d      	bne.n	8008d08 <_strtod_l+0x390>
 8008c6c:	9904      	ldr	r1, [sp, #16]
 8008c6e:	4301      	orrs	r1, r0
 8008c70:	f47f aec6 	bne.w	8008a00 <_strtod_l+0x88>
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	f47f aee1 	bne.w	8008a3c <_strtod_l+0xc4>
 8008c7a:	2a69      	cmp	r2, #105	; 0x69
 8008c7c:	d027      	beq.n	8008cce <_strtod_l+0x356>
 8008c7e:	dc24      	bgt.n	8008cca <_strtod_l+0x352>
 8008c80:	2a49      	cmp	r2, #73	; 0x49
 8008c82:	d024      	beq.n	8008cce <_strtod_l+0x356>
 8008c84:	2a4e      	cmp	r2, #78	; 0x4e
 8008c86:	f47f aed9 	bne.w	8008a3c <_strtod_l+0xc4>
 8008c8a:	499f      	ldr	r1, [pc, #636]	; (8008f08 <_strtod_l+0x590>)
 8008c8c:	a817      	add	r0, sp, #92	; 0x5c
 8008c8e:	f001 fe3d 	bl	800a90c <__match>
 8008c92:	2800      	cmp	r0, #0
 8008c94:	f43f aed2 	beq.w	8008a3c <_strtod_l+0xc4>
 8008c98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	2b28      	cmp	r3, #40	; 0x28
 8008c9e:	d12d      	bne.n	8008cfc <_strtod_l+0x384>
 8008ca0:	499a      	ldr	r1, [pc, #616]	; (8008f0c <_strtod_l+0x594>)
 8008ca2:	aa1a      	add	r2, sp, #104	; 0x68
 8008ca4:	a817      	add	r0, sp, #92	; 0x5c
 8008ca6:	f001 fe45 	bl	800a934 <__hexnan>
 8008caa:	2805      	cmp	r0, #5
 8008cac:	d126      	bne.n	8008cfc <_strtod_l+0x384>
 8008cae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008cb0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008cb4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008cb8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008cbc:	e6a0      	b.n	8008a00 <_strtod_l+0x88>
 8008cbe:	210a      	movs	r1, #10
 8008cc0:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008cc4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008cc8:	e7b9      	b.n	8008c3e <_strtod_l+0x2c6>
 8008cca:	2a6e      	cmp	r2, #110	; 0x6e
 8008ccc:	e7db      	b.n	8008c86 <_strtod_l+0x30e>
 8008cce:	4990      	ldr	r1, [pc, #576]	; (8008f10 <_strtod_l+0x598>)
 8008cd0:	a817      	add	r0, sp, #92	; 0x5c
 8008cd2:	f001 fe1b 	bl	800a90c <__match>
 8008cd6:	2800      	cmp	r0, #0
 8008cd8:	f43f aeb0 	beq.w	8008a3c <_strtod_l+0xc4>
 8008cdc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008cde:	498d      	ldr	r1, [pc, #564]	; (8008f14 <_strtod_l+0x59c>)
 8008ce0:	3b01      	subs	r3, #1
 8008ce2:	a817      	add	r0, sp, #92	; 0x5c
 8008ce4:	9317      	str	r3, [sp, #92]	; 0x5c
 8008ce6:	f001 fe11 	bl	800a90c <__match>
 8008cea:	b910      	cbnz	r0, 8008cf2 <_strtod_l+0x37a>
 8008cec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008cee:	3301      	adds	r3, #1
 8008cf0:	9317      	str	r3, [sp, #92]	; 0x5c
 8008cf2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8008f24 <_strtod_l+0x5ac>
 8008cf6:	f04f 0a00 	mov.w	sl, #0
 8008cfa:	e681      	b.n	8008a00 <_strtod_l+0x88>
 8008cfc:	4886      	ldr	r0, [pc, #536]	; (8008f18 <_strtod_l+0x5a0>)
 8008cfe:	f002 fdf7 	bl	800b8f0 <nan>
 8008d02:	ec5b ab10 	vmov	sl, fp, d0
 8008d06:	e67b      	b.n	8008a00 <_strtod_l+0x88>
 8008d08:	9b05      	ldr	r3, [sp, #20]
 8008d0a:	9807      	ldr	r0, [sp, #28]
 8008d0c:	1af3      	subs	r3, r6, r3
 8008d0e:	2f00      	cmp	r7, #0
 8008d10:	bf08      	it	eq
 8008d12:	462f      	moveq	r7, r5
 8008d14:	2d10      	cmp	r5, #16
 8008d16:	9306      	str	r3, [sp, #24]
 8008d18:	46a8      	mov	r8, r5
 8008d1a:	bfa8      	it	ge
 8008d1c:	f04f 0810 	movge.w	r8, #16
 8008d20:	f7f7 fbf0 	bl	8000504 <__aeabi_ui2d>
 8008d24:	2d09      	cmp	r5, #9
 8008d26:	4682      	mov	sl, r0
 8008d28:	468b      	mov	fp, r1
 8008d2a:	dd13      	ble.n	8008d54 <_strtod_l+0x3dc>
 8008d2c:	4b7b      	ldr	r3, [pc, #492]	; (8008f1c <_strtod_l+0x5a4>)
 8008d2e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008d32:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008d36:	f7f7 fc5f 	bl	80005f8 <__aeabi_dmul>
 8008d3a:	4682      	mov	sl, r0
 8008d3c:	4648      	mov	r0, r9
 8008d3e:	468b      	mov	fp, r1
 8008d40:	f7f7 fbe0 	bl	8000504 <__aeabi_ui2d>
 8008d44:	4602      	mov	r2, r0
 8008d46:	460b      	mov	r3, r1
 8008d48:	4650      	mov	r0, sl
 8008d4a:	4659      	mov	r1, fp
 8008d4c:	f7f7 fa9e 	bl	800028c <__adddf3>
 8008d50:	4682      	mov	sl, r0
 8008d52:	468b      	mov	fp, r1
 8008d54:	2d0f      	cmp	r5, #15
 8008d56:	dc38      	bgt.n	8008dca <_strtod_l+0x452>
 8008d58:	9b06      	ldr	r3, [sp, #24]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	f43f ae50 	beq.w	8008a00 <_strtod_l+0x88>
 8008d60:	dd24      	ble.n	8008dac <_strtod_l+0x434>
 8008d62:	2b16      	cmp	r3, #22
 8008d64:	dc0b      	bgt.n	8008d7e <_strtod_l+0x406>
 8008d66:	496d      	ldr	r1, [pc, #436]	; (8008f1c <_strtod_l+0x5a4>)
 8008d68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008d6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d70:	4652      	mov	r2, sl
 8008d72:	465b      	mov	r3, fp
 8008d74:	f7f7 fc40 	bl	80005f8 <__aeabi_dmul>
 8008d78:	4682      	mov	sl, r0
 8008d7a:	468b      	mov	fp, r1
 8008d7c:	e640      	b.n	8008a00 <_strtod_l+0x88>
 8008d7e:	9a06      	ldr	r2, [sp, #24]
 8008d80:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008d84:	4293      	cmp	r3, r2
 8008d86:	db20      	blt.n	8008dca <_strtod_l+0x452>
 8008d88:	4c64      	ldr	r4, [pc, #400]	; (8008f1c <_strtod_l+0x5a4>)
 8008d8a:	f1c5 050f 	rsb	r5, r5, #15
 8008d8e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008d92:	4652      	mov	r2, sl
 8008d94:	465b      	mov	r3, fp
 8008d96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d9a:	f7f7 fc2d 	bl	80005f8 <__aeabi_dmul>
 8008d9e:	9b06      	ldr	r3, [sp, #24]
 8008da0:	1b5d      	subs	r5, r3, r5
 8008da2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008da6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008daa:	e7e3      	b.n	8008d74 <_strtod_l+0x3fc>
 8008dac:	9b06      	ldr	r3, [sp, #24]
 8008dae:	3316      	adds	r3, #22
 8008db0:	db0b      	blt.n	8008dca <_strtod_l+0x452>
 8008db2:	9b05      	ldr	r3, [sp, #20]
 8008db4:	1b9e      	subs	r6, r3, r6
 8008db6:	4b59      	ldr	r3, [pc, #356]	; (8008f1c <_strtod_l+0x5a4>)
 8008db8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008dbc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008dc0:	4650      	mov	r0, sl
 8008dc2:	4659      	mov	r1, fp
 8008dc4:	f7f7 fd42 	bl	800084c <__aeabi_ddiv>
 8008dc8:	e7d6      	b.n	8008d78 <_strtod_l+0x400>
 8008dca:	9b06      	ldr	r3, [sp, #24]
 8008dcc:	eba5 0808 	sub.w	r8, r5, r8
 8008dd0:	4498      	add	r8, r3
 8008dd2:	f1b8 0f00 	cmp.w	r8, #0
 8008dd6:	dd74      	ble.n	8008ec2 <_strtod_l+0x54a>
 8008dd8:	f018 030f 	ands.w	r3, r8, #15
 8008ddc:	d00a      	beq.n	8008df4 <_strtod_l+0x47c>
 8008dde:	494f      	ldr	r1, [pc, #316]	; (8008f1c <_strtod_l+0x5a4>)
 8008de0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008de4:	4652      	mov	r2, sl
 8008de6:	465b      	mov	r3, fp
 8008de8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dec:	f7f7 fc04 	bl	80005f8 <__aeabi_dmul>
 8008df0:	4682      	mov	sl, r0
 8008df2:	468b      	mov	fp, r1
 8008df4:	f038 080f 	bics.w	r8, r8, #15
 8008df8:	d04f      	beq.n	8008e9a <_strtod_l+0x522>
 8008dfa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008dfe:	dd22      	ble.n	8008e46 <_strtod_l+0x4ce>
 8008e00:	2500      	movs	r5, #0
 8008e02:	462e      	mov	r6, r5
 8008e04:	9507      	str	r5, [sp, #28]
 8008e06:	9505      	str	r5, [sp, #20]
 8008e08:	2322      	movs	r3, #34	; 0x22
 8008e0a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8008f24 <_strtod_l+0x5ac>
 8008e0e:	6023      	str	r3, [r4, #0]
 8008e10:	f04f 0a00 	mov.w	sl, #0
 8008e14:	9b07      	ldr	r3, [sp, #28]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	f43f adf2 	beq.w	8008a00 <_strtod_l+0x88>
 8008e1c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008e1e:	4620      	mov	r0, r4
 8008e20:	f001 fe90 	bl	800ab44 <_Bfree>
 8008e24:	9905      	ldr	r1, [sp, #20]
 8008e26:	4620      	mov	r0, r4
 8008e28:	f001 fe8c 	bl	800ab44 <_Bfree>
 8008e2c:	4631      	mov	r1, r6
 8008e2e:	4620      	mov	r0, r4
 8008e30:	f001 fe88 	bl	800ab44 <_Bfree>
 8008e34:	9907      	ldr	r1, [sp, #28]
 8008e36:	4620      	mov	r0, r4
 8008e38:	f001 fe84 	bl	800ab44 <_Bfree>
 8008e3c:	4629      	mov	r1, r5
 8008e3e:	4620      	mov	r0, r4
 8008e40:	f001 fe80 	bl	800ab44 <_Bfree>
 8008e44:	e5dc      	b.n	8008a00 <_strtod_l+0x88>
 8008e46:	4b36      	ldr	r3, [pc, #216]	; (8008f20 <_strtod_l+0x5a8>)
 8008e48:	9304      	str	r3, [sp, #16]
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008e50:	4650      	mov	r0, sl
 8008e52:	4659      	mov	r1, fp
 8008e54:	4699      	mov	r9, r3
 8008e56:	f1b8 0f01 	cmp.w	r8, #1
 8008e5a:	dc21      	bgt.n	8008ea0 <_strtod_l+0x528>
 8008e5c:	b10b      	cbz	r3, 8008e62 <_strtod_l+0x4ea>
 8008e5e:	4682      	mov	sl, r0
 8008e60:	468b      	mov	fp, r1
 8008e62:	4b2f      	ldr	r3, [pc, #188]	; (8008f20 <_strtod_l+0x5a8>)
 8008e64:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008e68:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008e6c:	4652      	mov	r2, sl
 8008e6e:	465b      	mov	r3, fp
 8008e70:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008e74:	f7f7 fbc0 	bl	80005f8 <__aeabi_dmul>
 8008e78:	4b2a      	ldr	r3, [pc, #168]	; (8008f24 <_strtod_l+0x5ac>)
 8008e7a:	460a      	mov	r2, r1
 8008e7c:	400b      	ands	r3, r1
 8008e7e:	492a      	ldr	r1, [pc, #168]	; (8008f28 <_strtod_l+0x5b0>)
 8008e80:	428b      	cmp	r3, r1
 8008e82:	4682      	mov	sl, r0
 8008e84:	d8bc      	bhi.n	8008e00 <_strtod_l+0x488>
 8008e86:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008e8a:	428b      	cmp	r3, r1
 8008e8c:	bf86      	itte	hi
 8008e8e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8008f2c <_strtod_l+0x5b4>
 8008e92:	f04f 3aff 	movhi.w	sl, #4294967295
 8008e96:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	9304      	str	r3, [sp, #16]
 8008e9e:	e084      	b.n	8008faa <_strtod_l+0x632>
 8008ea0:	f018 0f01 	tst.w	r8, #1
 8008ea4:	d005      	beq.n	8008eb2 <_strtod_l+0x53a>
 8008ea6:	9b04      	ldr	r3, [sp, #16]
 8008ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eac:	f7f7 fba4 	bl	80005f8 <__aeabi_dmul>
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	9a04      	ldr	r2, [sp, #16]
 8008eb4:	3208      	adds	r2, #8
 8008eb6:	f109 0901 	add.w	r9, r9, #1
 8008eba:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008ebe:	9204      	str	r2, [sp, #16]
 8008ec0:	e7c9      	b.n	8008e56 <_strtod_l+0x4de>
 8008ec2:	d0ea      	beq.n	8008e9a <_strtod_l+0x522>
 8008ec4:	f1c8 0800 	rsb	r8, r8, #0
 8008ec8:	f018 020f 	ands.w	r2, r8, #15
 8008ecc:	d00a      	beq.n	8008ee4 <_strtod_l+0x56c>
 8008ece:	4b13      	ldr	r3, [pc, #76]	; (8008f1c <_strtod_l+0x5a4>)
 8008ed0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ed4:	4650      	mov	r0, sl
 8008ed6:	4659      	mov	r1, fp
 8008ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008edc:	f7f7 fcb6 	bl	800084c <__aeabi_ddiv>
 8008ee0:	4682      	mov	sl, r0
 8008ee2:	468b      	mov	fp, r1
 8008ee4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008ee8:	d0d7      	beq.n	8008e9a <_strtod_l+0x522>
 8008eea:	f1b8 0f1f 	cmp.w	r8, #31
 8008eee:	dd1f      	ble.n	8008f30 <_strtod_l+0x5b8>
 8008ef0:	2500      	movs	r5, #0
 8008ef2:	462e      	mov	r6, r5
 8008ef4:	9507      	str	r5, [sp, #28]
 8008ef6:	9505      	str	r5, [sp, #20]
 8008ef8:	2322      	movs	r3, #34	; 0x22
 8008efa:	f04f 0a00 	mov.w	sl, #0
 8008efe:	f04f 0b00 	mov.w	fp, #0
 8008f02:	6023      	str	r3, [r4, #0]
 8008f04:	e786      	b.n	8008e14 <_strtod_l+0x49c>
 8008f06:	bf00      	nop
 8008f08:	0800f405 	.word	0x0800f405
 8008f0c:	0800f448 	.word	0x0800f448
 8008f10:	0800f3fd 	.word	0x0800f3fd
 8008f14:	0800f58c 	.word	0x0800f58c
 8008f18:	0800f838 	.word	0x0800f838
 8008f1c:	0800f718 	.word	0x0800f718
 8008f20:	0800f6f0 	.word	0x0800f6f0
 8008f24:	7ff00000 	.word	0x7ff00000
 8008f28:	7ca00000 	.word	0x7ca00000
 8008f2c:	7fefffff 	.word	0x7fefffff
 8008f30:	f018 0310 	ands.w	r3, r8, #16
 8008f34:	bf18      	it	ne
 8008f36:	236a      	movne	r3, #106	; 0x6a
 8008f38:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80092e8 <_strtod_l+0x970>
 8008f3c:	9304      	str	r3, [sp, #16]
 8008f3e:	4650      	mov	r0, sl
 8008f40:	4659      	mov	r1, fp
 8008f42:	2300      	movs	r3, #0
 8008f44:	f018 0f01 	tst.w	r8, #1
 8008f48:	d004      	beq.n	8008f54 <_strtod_l+0x5dc>
 8008f4a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008f4e:	f7f7 fb53 	bl	80005f8 <__aeabi_dmul>
 8008f52:	2301      	movs	r3, #1
 8008f54:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008f58:	f109 0908 	add.w	r9, r9, #8
 8008f5c:	d1f2      	bne.n	8008f44 <_strtod_l+0x5cc>
 8008f5e:	b10b      	cbz	r3, 8008f64 <_strtod_l+0x5ec>
 8008f60:	4682      	mov	sl, r0
 8008f62:	468b      	mov	fp, r1
 8008f64:	9b04      	ldr	r3, [sp, #16]
 8008f66:	b1c3      	cbz	r3, 8008f9a <_strtod_l+0x622>
 8008f68:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008f6c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	4659      	mov	r1, fp
 8008f74:	dd11      	ble.n	8008f9a <_strtod_l+0x622>
 8008f76:	2b1f      	cmp	r3, #31
 8008f78:	f340 8124 	ble.w	80091c4 <_strtod_l+0x84c>
 8008f7c:	2b34      	cmp	r3, #52	; 0x34
 8008f7e:	bfde      	ittt	le
 8008f80:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008f84:	f04f 33ff 	movle.w	r3, #4294967295
 8008f88:	fa03 f202 	lslle.w	r2, r3, r2
 8008f8c:	f04f 0a00 	mov.w	sl, #0
 8008f90:	bfcc      	ite	gt
 8008f92:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008f96:	ea02 0b01 	andle.w	fp, r2, r1
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	4650      	mov	r0, sl
 8008fa0:	4659      	mov	r1, fp
 8008fa2:	f7f7 fd91 	bl	8000ac8 <__aeabi_dcmpeq>
 8008fa6:	2800      	cmp	r0, #0
 8008fa8:	d1a2      	bne.n	8008ef0 <_strtod_l+0x578>
 8008faa:	9b07      	ldr	r3, [sp, #28]
 8008fac:	9300      	str	r3, [sp, #0]
 8008fae:	9908      	ldr	r1, [sp, #32]
 8008fb0:	462b      	mov	r3, r5
 8008fb2:	463a      	mov	r2, r7
 8008fb4:	4620      	mov	r0, r4
 8008fb6:	f001 fe2d 	bl	800ac14 <__s2b>
 8008fba:	9007      	str	r0, [sp, #28]
 8008fbc:	2800      	cmp	r0, #0
 8008fbe:	f43f af1f 	beq.w	8008e00 <_strtod_l+0x488>
 8008fc2:	9b05      	ldr	r3, [sp, #20]
 8008fc4:	1b9e      	subs	r6, r3, r6
 8008fc6:	9b06      	ldr	r3, [sp, #24]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	bfb4      	ite	lt
 8008fcc:	4633      	movlt	r3, r6
 8008fce:	2300      	movge	r3, #0
 8008fd0:	930c      	str	r3, [sp, #48]	; 0x30
 8008fd2:	9b06      	ldr	r3, [sp, #24]
 8008fd4:	2500      	movs	r5, #0
 8008fd6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008fda:	9312      	str	r3, [sp, #72]	; 0x48
 8008fdc:	462e      	mov	r6, r5
 8008fde:	9b07      	ldr	r3, [sp, #28]
 8008fe0:	4620      	mov	r0, r4
 8008fe2:	6859      	ldr	r1, [r3, #4]
 8008fe4:	f001 fd6e 	bl	800aac4 <_Balloc>
 8008fe8:	9005      	str	r0, [sp, #20]
 8008fea:	2800      	cmp	r0, #0
 8008fec:	f43f af0c 	beq.w	8008e08 <_strtod_l+0x490>
 8008ff0:	9b07      	ldr	r3, [sp, #28]
 8008ff2:	691a      	ldr	r2, [r3, #16]
 8008ff4:	3202      	adds	r2, #2
 8008ff6:	f103 010c 	add.w	r1, r3, #12
 8008ffa:	0092      	lsls	r2, r2, #2
 8008ffc:	300c      	adds	r0, #12
 8008ffe:	f001 fd53 	bl	800aaa8 <memcpy>
 8009002:	ec4b ab10 	vmov	d0, sl, fp
 8009006:	aa1a      	add	r2, sp, #104	; 0x68
 8009008:	a919      	add	r1, sp, #100	; 0x64
 800900a:	4620      	mov	r0, r4
 800900c:	f002 f948 	bl	800b2a0 <__d2b>
 8009010:	ec4b ab18 	vmov	d8, sl, fp
 8009014:	9018      	str	r0, [sp, #96]	; 0x60
 8009016:	2800      	cmp	r0, #0
 8009018:	f43f aef6 	beq.w	8008e08 <_strtod_l+0x490>
 800901c:	2101      	movs	r1, #1
 800901e:	4620      	mov	r0, r4
 8009020:	f001 fe92 	bl	800ad48 <__i2b>
 8009024:	4606      	mov	r6, r0
 8009026:	2800      	cmp	r0, #0
 8009028:	f43f aeee 	beq.w	8008e08 <_strtod_l+0x490>
 800902c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800902e:	9904      	ldr	r1, [sp, #16]
 8009030:	2b00      	cmp	r3, #0
 8009032:	bfab      	itete	ge
 8009034:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009036:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009038:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800903a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800903e:	bfac      	ite	ge
 8009040:	eb03 0902 	addge.w	r9, r3, r2
 8009044:	1ad7      	sublt	r7, r2, r3
 8009046:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009048:	eba3 0801 	sub.w	r8, r3, r1
 800904c:	4490      	add	r8, r2
 800904e:	4ba1      	ldr	r3, [pc, #644]	; (80092d4 <_strtod_l+0x95c>)
 8009050:	f108 38ff 	add.w	r8, r8, #4294967295
 8009054:	4598      	cmp	r8, r3
 8009056:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800905a:	f280 80c7 	bge.w	80091ec <_strtod_l+0x874>
 800905e:	eba3 0308 	sub.w	r3, r3, r8
 8009062:	2b1f      	cmp	r3, #31
 8009064:	eba2 0203 	sub.w	r2, r2, r3
 8009068:	f04f 0101 	mov.w	r1, #1
 800906c:	f300 80b1 	bgt.w	80091d2 <_strtod_l+0x85a>
 8009070:	fa01 f303 	lsl.w	r3, r1, r3
 8009074:	930d      	str	r3, [sp, #52]	; 0x34
 8009076:	2300      	movs	r3, #0
 8009078:	9308      	str	r3, [sp, #32]
 800907a:	eb09 0802 	add.w	r8, r9, r2
 800907e:	9b04      	ldr	r3, [sp, #16]
 8009080:	45c1      	cmp	r9, r8
 8009082:	4417      	add	r7, r2
 8009084:	441f      	add	r7, r3
 8009086:	464b      	mov	r3, r9
 8009088:	bfa8      	it	ge
 800908a:	4643      	movge	r3, r8
 800908c:	42bb      	cmp	r3, r7
 800908e:	bfa8      	it	ge
 8009090:	463b      	movge	r3, r7
 8009092:	2b00      	cmp	r3, #0
 8009094:	bfc2      	ittt	gt
 8009096:	eba8 0803 	subgt.w	r8, r8, r3
 800909a:	1aff      	subgt	r7, r7, r3
 800909c:	eba9 0903 	subgt.w	r9, r9, r3
 80090a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	dd17      	ble.n	80090d6 <_strtod_l+0x75e>
 80090a6:	4631      	mov	r1, r6
 80090a8:	461a      	mov	r2, r3
 80090aa:	4620      	mov	r0, r4
 80090ac:	f001 ff0c 	bl	800aec8 <__pow5mult>
 80090b0:	4606      	mov	r6, r0
 80090b2:	2800      	cmp	r0, #0
 80090b4:	f43f aea8 	beq.w	8008e08 <_strtod_l+0x490>
 80090b8:	4601      	mov	r1, r0
 80090ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80090bc:	4620      	mov	r0, r4
 80090be:	f001 fe59 	bl	800ad74 <__multiply>
 80090c2:	900b      	str	r0, [sp, #44]	; 0x2c
 80090c4:	2800      	cmp	r0, #0
 80090c6:	f43f ae9f 	beq.w	8008e08 <_strtod_l+0x490>
 80090ca:	9918      	ldr	r1, [sp, #96]	; 0x60
 80090cc:	4620      	mov	r0, r4
 80090ce:	f001 fd39 	bl	800ab44 <_Bfree>
 80090d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090d4:	9318      	str	r3, [sp, #96]	; 0x60
 80090d6:	f1b8 0f00 	cmp.w	r8, #0
 80090da:	f300 808c 	bgt.w	80091f6 <_strtod_l+0x87e>
 80090de:	9b06      	ldr	r3, [sp, #24]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	dd08      	ble.n	80090f6 <_strtod_l+0x77e>
 80090e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80090e6:	9905      	ldr	r1, [sp, #20]
 80090e8:	4620      	mov	r0, r4
 80090ea:	f001 feed 	bl	800aec8 <__pow5mult>
 80090ee:	9005      	str	r0, [sp, #20]
 80090f0:	2800      	cmp	r0, #0
 80090f2:	f43f ae89 	beq.w	8008e08 <_strtod_l+0x490>
 80090f6:	2f00      	cmp	r7, #0
 80090f8:	dd08      	ble.n	800910c <_strtod_l+0x794>
 80090fa:	9905      	ldr	r1, [sp, #20]
 80090fc:	463a      	mov	r2, r7
 80090fe:	4620      	mov	r0, r4
 8009100:	f001 ff3c 	bl	800af7c <__lshift>
 8009104:	9005      	str	r0, [sp, #20]
 8009106:	2800      	cmp	r0, #0
 8009108:	f43f ae7e 	beq.w	8008e08 <_strtod_l+0x490>
 800910c:	f1b9 0f00 	cmp.w	r9, #0
 8009110:	dd08      	ble.n	8009124 <_strtod_l+0x7ac>
 8009112:	4631      	mov	r1, r6
 8009114:	464a      	mov	r2, r9
 8009116:	4620      	mov	r0, r4
 8009118:	f001 ff30 	bl	800af7c <__lshift>
 800911c:	4606      	mov	r6, r0
 800911e:	2800      	cmp	r0, #0
 8009120:	f43f ae72 	beq.w	8008e08 <_strtod_l+0x490>
 8009124:	9a05      	ldr	r2, [sp, #20]
 8009126:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009128:	4620      	mov	r0, r4
 800912a:	f001 ffb3 	bl	800b094 <__mdiff>
 800912e:	4605      	mov	r5, r0
 8009130:	2800      	cmp	r0, #0
 8009132:	f43f ae69 	beq.w	8008e08 <_strtod_l+0x490>
 8009136:	68c3      	ldr	r3, [r0, #12]
 8009138:	930b      	str	r3, [sp, #44]	; 0x2c
 800913a:	2300      	movs	r3, #0
 800913c:	60c3      	str	r3, [r0, #12]
 800913e:	4631      	mov	r1, r6
 8009140:	f001 ff8c 	bl	800b05c <__mcmp>
 8009144:	2800      	cmp	r0, #0
 8009146:	da60      	bge.n	800920a <_strtod_l+0x892>
 8009148:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800914a:	ea53 030a 	orrs.w	r3, r3, sl
 800914e:	f040 8082 	bne.w	8009256 <_strtod_l+0x8de>
 8009152:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009156:	2b00      	cmp	r3, #0
 8009158:	d17d      	bne.n	8009256 <_strtod_l+0x8de>
 800915a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800915e:	0d1b      	lsrs	r3, r3, #20
 8009160:	051b      	lsls	r3, r3, #20
 8009162:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009166:	d976      	bls.n	8009256 <_strtod_l+0x8de>
 8009168:	696b      	ldr	r3, [r5, #20]
 800916a:	b913      	cbnz	r3, 8009172 <_strtod_l+0x7fa>
 800916c:	692b      	ldr	r3, [r5, #16]
 800916e:	2b01      	cmp	r3, #1
 8009170:	dd71      	ble.n	8009256 <_strtod_l+0x8de>
 8009172:	4629      	mov	r1, r5
 8009174:	2201      	movs	r2, #1
 8009176:	4620      	mov	r0, r4
 8009178:	f001 ff00 	bl	800af7c <__lshift>
 800917c:	4631      	mov	r1, r6
 800917e:	4605      	mov	r5, r0
 8009180:	f001 ff6c 	bl	800b05c <__mcmp>
 8009184:	2800      	cmp	r0, #0
 8009186:	dd66      	ble.n	8009256 <_strtod_l+0x8de>
 8009188:	9904      	ldr	r1, [sp, #16]
 800918a:	4a53      	ldr	r2, [pc, #332]	; (80092d8 <_strtod_l+0x960>)
 800918c:	465b      	mov	r3, fp
 800918e:	2900      	cmp	r1, #0
 8009190:	f000 8081 	beq.w	8009296 <_strtod_l+0x91e>
 8009194:	ea02 010b 	and.w	r1, r2, fp
 8009198:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800919c:	dc7b      	bgt.n	8009296 <_strtod_l+0x91e>
 800919e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80091a2:	f77f aea9 	ble.w	8008ef8 <_strtod_l+0x580>
 80091a6:	4b4d      	ldr	r3, [pc, #308]	; (80092dc <_strtod_l+0x964>)
 80091a8:	4650      	mov	r0, sl
 80091aa:	4659      	mov	r1, fp
 80091ac:	2200      	movs	r2, #0
 80091ae:	f7f7 fa23 	bl	80005f8 <__aeabi_dmul>
 80091b2:	460b      	mov	r3, r1
 80091b4:	4303      	orrs	r3, r0
 80091b6:	bf08      	it	eq
 80091b8:	2322      	moveq	r3, #34	; 0x22
 80091ba:	4682      	mov	sl, r0
 80091bc:	468b      	mov	fp, r1
 80091be:	bf08      	it	eq
 80091c0:	6023      	streq	r3, [r4, #0]
 80091c2:	e62b      	b.n	8008e1c <_strtod_l+0x4a4>
 80091c4:	f04f 32ff 	mov.w	r2, #4294967295
 80091c8:	fa02 f303 	lsl.w	r3, r2, r3
 80091cc:	ea03 0a0a 	and.w	sl, r3, sl
 80091d0:	e6e3      	b.n	8008f9a <_strtod_l+0x622>
 80091d2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80091d6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80091da:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80091de:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80091e2:	fa01 f308 	lsl.w	r3, r1, r8
 80091e6:	9308      	str	r3, [sp, #32]
 80091e8:	910d      	str	r1, [sp, #52]	; 0x34
 80091ea:	e746      	b.n	800907a <_strtod_l+0x702>
 80091ec:	2300      	movs	r3, #0
 80091ee:	9308      	str	r3, [sp, #32]
 80091f0:	2301      	movs	r3, #1
 80091f2:	930d      	str	r3, [sp, #52]	; 0x34
 80091f4:	e741      	b.n	800907a <_strtod_l+0x702>
 80091f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80091f8:	4642      	mov	r2, r8
 80091fa:	4620      	mov	r0, r4
 80091fc:	f001 febe 	bl	800af7c <__lshift>
 8009200:	9018      	str	r0, [sp, #96]	; 0x60
 8009202:	2800      	cmp	r0, #0
 8009204:	f47f af6b 	bne.w	80090de <_strtod_l+0x766>
 8009208:	e5fe      	b.n	8008e08 <_strtod_l+0x490>
 800920a:	465f      	mov	r7, fp
 800920c:	d16e      	bne.n	80092ec <_strtod_l+0x974>
 800920e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009210:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009214:	b342      	cbz	r2, 8009268 <_strtod_l+0x8f0>
 8009216:	4a32      	ldr	r2, [pc, #200]	; (80092e0 <_strtod_l+0x968>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d128      	bne.n	800926e <_strtod_l+0x8f6>
 800921c:	9b04      	ldr	r3, [sp, #16]
 800921e:	4651      	mov	r1, sl
 8009220:	b1eb      	cbz	r3, 800925e <_strtod_l+0x8e6>
 8009222:	4b2d      	ldr	r3, [pc, #180]	; (80092d8 <_strtod_l+0x960>)
 8009224:	403b      	ands	r3, r7
 8009226:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800922a:	f04f 32ff 	mov.w	r2, #4294967295
 800922e:	d819      	bhi.n	8009264 <_strtod_l+0x8ec>
 8009230:	0d1b      	lsrs	r3, r3, #20
 8009232:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009236:	fa02 f303 	lsl.w	r3, r2, r3
 800923a:	4299      	cmp	r1, r3
 800923c:	d117      	bne.n	800926e <_strtod_l+0x8f6>
 800923e:	4b29      	ldr	r3, [pc, #164]	; (80092e4 <_strtod_l+0x96c>)
 8009240:	429f      	cmp	r7, r3
 8009242:	d102      	bne.n	800924a <_strtod_l+0x8d2>
 8009244:	3101      	adds	r1, #1
 8009246:	f43f addf 	beq.w	8008e08 <_strtod_l+0x490>
 800924a:	4b23      	ldr	r3, [pc, #140]	; (80092d8 <_strtod_l+0x960>)
 800924c:	403b      	ands	r3, r7
 800924e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009252:	f04f 0a00 	mov.w	sl, #0
 8009256:	9b04      	ldr	r3, [sp, #16]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d1a4      	bne.n	80091a6 <_strtod_l+0x82e>
 800925c:	e5de      	b.n	8008e1c <_strtod_l+0x4a4>
 800925e:	f04f 33ff 	mov.w	r3, #4294967295
 8009262:	e7ea      	b.n	800923a <_strtod_l+0x8c2>
 8009264:	4613      	mov	r3, r2
 8009266:	e7e8      	b.n	800923a <_strtod_l+0x8c2>
 8009268:	ea53 030a 	orrs.w	r3, r3, sl
 800926c:	d08c      	beq.n	8009188 <_strtod_l+0x810>
 800926e:	9b08      	ldr	r3, [sp, #32]
 8009270:	b1db      	cbz	r3, 80092aa <_strtod_l+0x932>
 8009272:	423b      	tst	r3, r7
 8009274:	d0ef      	beq.n	8009256 <_strtod_l+0x8de>
 8009276:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009278:	9a04      	ldr	r2, [sp, #16]
 800927a:	4650      	mov	r0, sl
 800927c:	4659      	mov	r1, fp
 800927e:	b1c3      	cbz	r3, 80092b2 <_strtod_l+0x93a>
 8009280:	f7ff fb5c 	bl	800893c <sulp>
 8009284:	4602      	mov	r2, r0
 8009286:	460b      	mov	r3, r1
 8009288:	ec51 0b18 	vmov	r0, r1, d8
 800928c:	f7f6 fffe 	bl	800028c <__adddf3>
 8009290:	4682      	mov	sl, r0
 8009292:	468b      	mov	fp, r1
 8009294:	e7df      	b.n	8009256 <_strtod_l+0x8de>
 8009296:	4013      	ands	r3, r2
 8009298:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800929c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80092a0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80092a4:	f04f 3aff 	mov.w	sl, #4294967295
 80092a8:	e7d5      	b.n	8009256 <_strtod_l+0x8de>
 80092aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092ac:	ea13 0f0a 	tst.w	r3, sl
 80092b0:	e7e0      	b.n	8009274 <_strtod_l+0x8fc>
 80092b2:	f7ff fb43 	bl	800893c <sulp>
 80092b6:	4602      	mov	r2, r0
 80092b8:	460b      	mov	r3, r1
 80092ba:	ec51 0b18 	vmov	r0, r1, d8
 80092be:	f7f6 ffe3 	bl	8000288 <__aeabi_dsub>
 80092c2:	2200      	movs	r2, #0
 80092c4:	2300      	movs	r3, #0
 80092c6:	4682      	mov	sl, r0
 80092c8:	468b      	mov	fp, r1
 80092ca:	f7f7 fbfd 	bl	8000ac8 <__aeabi_dcmpeq>
 80092ce:	2800      	cmp	r0, #0
 80092d0:	d0c1      	beq.n	8009256 <_strtod_l+0x8de>
 80092d2:	e611      	b.n	8008ef8 <_strtod_l+0x580>
 80092d4:	fffffc02 	.word	0xfffffc02
 80092d8:	7ff00000 	.word	0x7ff00000
 80092dc:	39500000 	.word	0x39500000
 80092e0:	000fffff 	.word	0x000fffff
 80092e4:	7fefffff 	.word	0x7fefffff
 80092e8:	0800f460 	.word	0x0800f460
 80092ec:	4631      	mov	r1, r6
 80092ee:	4628      	mov	r0, r5
 80092f0:	f002 f832 	bl	800b358 <__ratio>
 80092f4:	ec59 8b10 	vmov	r8, r9, d0
 80092f8:	ee10 0a10 	vmov	r0, s0
 80092fc:	2200      	movs	r2, #0
 80092fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009302:	4649      	mov	r1, r9
 8009304:	f7f7 fbf4 	bl	8000af0 <__aeabi_dcmple>
 8009308:	2800      	cmp	r0, #0
 800930a:	d07a      	beq.n	8009402 <_strtod_l+0xa8a>
 800930c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800930e:	2b00      	cmp	r3, #0
 8009310:	d04a      	beq.n	80093a8 <_strtod_l+0xa30>
 8009312:	4b95      	ldr	r3, [pc, #596]	; (8009568 <_strtod_l+0xbf0>)
 8009314:	2200      	movs	r2, #0
 8009316:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800931a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009568 <_strtod_l+0xbf0>
 800931e:	f04f 0800 	mov.w	r8, #0
 8009322:	4b92      	ldr	r3, [pc, #584]	; (800956c <_strtod_l+0xbf4>)
 8009324:	403b      	ands	r3, r7
 8009326:	930d      	str	r3, [sp, #52]	; 0x34
 8009328:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800932a:	4b91      	ldr	r3, [pc, #580]	; (8009570 <_strtod_l+0xbf8>)
 800932c:	429a      	cmp	r2, r3
 800932e:	f040 80b0 	bne.w	8009492 <_strtod_l+0xb1a>
 8009332:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009336:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800933a:	ec4b ab10 	vmov	d0, sl, fp
 800933e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009342:	f001 ff31 	bl	800b1a8 <__ulp>
 8009346:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800934a:	ec53 2b10 	vmov	r2, r3, d0
 800934e:	f7f7 f953 	bl	80005f8 <__aeabi_dmul>
 8009352:	4652      	mov	r2, sl
 8009354:	465b      	mov	r3, fp
 8009356:	f7f6 ff99 	bl	800028c <__adddf3>
 800935a:	460b      	mov	r3, r1
 800935c:	4983      	ldr	r1, [pc, #524]	; (800956c <_strtod_l+0xbf4>)
 800935e:	4a85      	ldr	r2, [pc, #532]	; (8009574 <_strtod_l+0xbfc>)
 8009360:	4019      	ands	r1, r3
 8009362:	4291      	cmp	r1, r2
 8009364:	4682      	mov	sl, r0
 8009366:	d960      	bls.n	800942a <_strtod_l+0xab2>
 8009368:	ee18 3a90 	vmov	r3, s17
 800936c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009370:	4293      	cmp	r3, r2
 8009372:	d104      	bne.n	800937e <_strtod_l+0xa06>
 8009374:	ee18 3a10 	vmov	r3, s16
 8009378:	3301      	adds	r3, #1
 800937a:	f43f ad45 	beq.w	8008e08 <_strtod_l+0x490>
 800937e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009580 <_strtod_l+0xc08>
 8009382:	f04f 3aff 	mov.w	sl, #4294967295
 8009386:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009388:	4620      	mov	r0, r4
 800938a:	f001 fbdb 	bl	800ab44 <_Bfree>
 800938e:	9905      	ldr	r1, [sp, #20]
 8009390:	4620      	mov	r0, r4
 8009392:	f001 fbd7 	bl	800ab44 <_Bfree>
 8009396:	4631      	mov	r1, r6
 8009398:	4620      	mov	r0, r4
 800939a:	f001 fbd3 	bl	800ab44 <_Bfree>
 800939e:	4629      	mov	r1, r5
 80093a0:	4620      	mov	r0, r4
 80093a2:	f001 fbcf 	bl	800ab44 <_Bfree>
 80093a6:	e61a      	b.n	8008fde <_strtod_l+0x666>
 80093a8:	f1ba 0f00 	cmp.w	sl, #0
 80093ac:	d11b      	bne.n	80093e6 <_strtod_l+0xa6e>
 80093ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80093b2:	b9f3      	cbnz	r3, 80093f2 <_strtod_l+0xa7a>
 80093b4:	4b6c      	ldr	r3, [pc, #432]	; (8009568 <_strtod_l+0xbf0>)
 80093b6:	2200      	movs	r2, #0
 80093b8:	4640      	mov	r0, r8
 80093ba:	4649      	mov	r1, r9
 80093bc:	f7f7 fb8e 	bl	8000adc <__aeabi_dcmplt>
 80093c0:	b9d0      	cbnz	r0, 80093f8 <_strtod_l+0xa80>
 80093c2:	4640      	mov	r0, r8
 80093c4:	4649      	mov	r1, r9
 80093c6:	4b6c      	ldr	r3, [pc, #432]	; (8009578 <_strtod_l+0xc00>)
 80093c8:	2200      	movs	r2, #0
 80093ca:	f7f7 f915 	bl	80005f8 <__aeabi_dmul>
 80093ce:	4680      	mov	r8, r0
 80093d0:	4689      	mov	r9, r1
 80093d2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80093d6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80093da:	9315      	str	r3, [sp, #84]	; 0x54
 80093dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80093e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80093e4:	e79d      	b.n	8009322 <_strtod_l+0x9aa>
 80093e6:	f1ba 0f01 	cmp.w	sl, #1
 80093ea:	d102      	bne.n	80093f2 <_strtod_l+0xa7a>
 80093ec:	2f00      	cmp	r7, #0
 80093ee:	f43f ad83 	beq.w	8008ef8 <_strtod_l+0x580>
 80093f2:	4b62      	ldr	r3, [pc, #392]	; (800957c <_strtod_l+0xc04>)
 80093f4:	2200      	movs	r2, #0
 80093f6:	e78e      	b.n	8009316 <_strtod_l+0x99e>
 80093f8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009578 <_strtod_l+0xc00>
 80093fc:	f04f 0800 	mov.w	r8, #0
 8009400:	e7e7      	b.n	80093d2 <_strtod_l+0xa5a>
 8009402:	4b5d      	ldr	r3, [pc, #372]	; (8009578 <_strtod_l+0xc00>)
 8009404:	4640      	mov	r0, r8
 8009406:	4649      	mov	r1, r9
 8009408:	2200      	movs	r2, #0
 800940a:	f7f7 f8f5 	bl	80005f8 <__aeabi_dmul>
 800940e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009410:	4680      	mov	r8, r0
 8009412:	4689      	mov	r9, r1
 8009414:	b933      	cbnz	r3, 8009424 <_strtod_l+0xaac>
 8009416:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800941a:	900e      	str	r0, [sp, #56]	; 0x38
 800941c:	930f      	str	r3, [sp, #60]	; 0x3c
 800941e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009422:	e7dd      	b.n	80093e0 <_strtod_l+0xa68>
 8009424:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009428:	e7f9      	b.n	800941e <_strtod_l+0xaa6>
 800942a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800942e:	9b04      	ldr	r3, [sp, #16]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d1a8      	bne.n	8009386 <_strtod_l+0xa0e>
 8009434:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009438:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800943a:	0d1b      	lsrs	r3, r3, #20
 800943c:	051b      	lsls	r3, r3, #20
 800943e:	429a      	cmp	r2, r3
 8009440:	d1a1      	bne.n	8009386 <_strtod_l+0xa0e>
 8009442:	4640      	mov	r0, r8
 8009444:	4649      	mov	r1, r9
 8009446:	f7f7 fc37 	bl	8000cb8 <__aeabi_d2lz>
 800944a:	f7f7 f8a7 	bl	800059c <__aeabi_l2d>
 800944e:	4602      	mov	r2, r0
 8009450:	460b      	mov	r3, r1
 8009452:	4640      	mov	r0, r8
 8009454:	4649      	mov	r1, r9
 8009456:	f7f6 ff17 	bl	8000288 <__aeabi_dsub>
 800945a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800945c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009460:	ea43 030a 	orr.w	r3, r3, sl
 8009464:	4313      	orrs	r3, r2
 8009466:	4680      	mov	r8, r0
 8009468:	4689      	mov	r9, r1
 800946a:	d055      	beq.n	8009518 <_strtod_l+0xba0>
 800946c:	a336      	add	r3, pc, #216	; (adr r3, 8009548 <_strtod_l+0xbd0>)
 800946e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009472:	f7f7 fb33 	bl	8000adc <__aeabi_dcmplt>
 8009476:	2800      	cmp	r0, #0
 8009478:	f47f acd0 	bne.w	8008e1c <_strtod_l+0x4a4>
 800947c:	a334      	add	r3, pc, #208	; (adr r3, 8009550 <_strtod_l+0xbd8>)
 800947e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009482:	4640      	mov	r0, r8
 8009484:	4649      	mov	r1, r9
 8009486:	f7f7 fb47 	bl	8000b18 <__aeabi_dcmpgt>
 800948a:	2800      	cmp	r0, #0
 800948c:	f43f af7b 	beq.w	8009386 <_strtod_l+0xa0e>
 8009490:	e4c4      	b.n	8008e1c <_strtod_l+0x4a4>
 8009492:	9b04      	ldr	r3, [sp, #16]
 8009494:	b333      	cbz	r3, 80094e4 <_strtod_l+0xb6c>
 8009496:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009498:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800949c:	d822      	bhi.n	80094e4 <_strtod_l+0xb6c>
 800949e:	a32e      	add	r3, pc, #184	; (adr r3, 8009558 <_strtod_l+0xbe0>)
 80094a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a4:	4640      	mov	r0, r8
 80094a6:	4649      	mov	r1, r9
 80094a8:	f7f7 fb22 	bl	8000af0 <__aeabi_dcmple>
 80094ac:	b1a0      	cbz	r0, 80094d8 <_strtod_l+0xb60>
 80094ae:	4649      	mov	r1, r9
 80094b0:	4640      	mov	r0, r8
 80094b2:	f7f7 fb79 	bl	8000ba8 <__aeabi_d2uiz>
 80094b6:	2801      	cmp	r0, #1
 80094b8:	bf38      	it	cc
 80094ba:	2001      	movcc	r0, #1
 80094bc:	f7f7 f822 	bl	8000504 <__aeabi_ui2d>
 80094c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094c2:	4680      	mov	r8, r0
 80094c4:	4689      	mov	r9, r1
 80094c6:	bb23      	cbnz	r3, 8009512 <_strtod_l+0xb9a>
 80094c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094cc:	9010      	str	r0, [sp, #64]	; 0x40
 80094ce:	9311      	str	r3, [sp, #68]	; 0x44
 80094d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80094d4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80094d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80094dc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80094e0:	1a9b      	subs	r3, r3, r2
 80094e2:	9309      	str	r3, [sp, #36]	; 0x24
 80094e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80094e8:	eeb0 0a48 	vmov.f32	s0, s16
 80094ec:	eef0 0a68 	vmov.f32	s1, s17
 80094f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80094f4:	f001 fe58 	bl	800b1a8 <__ulp>
 80094f8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80094fc:	ec53 2b10 	vmov	r2, r3, d0
 8009500:	f7f7 f87a 	bl	80005f8 <__aeabi_dmul>
 8009504:	ec53 2b18 	vmov	r2, r3, d8
 8009508:	f7f6 fec0 	bl	800028c <__adddf3>
 800950c:	4682      	mov	sl, r0
 800950e:	468b      	mov	fp, r1
 8009510:	e78d      	b.n	800942e <_strtod_l+0xab6>
 8009512:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009516:	e7db      	b.n	80094d0 <_strtod_l+0xb58>
 8009518:	a311      	add	r3, pc, #68	; (adr r3, 8009560 <_strtod_l+0xbe8>)
 800951a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951e:	f7f7 fadd 	bl	8000adc <__aeabi_dcmplt>
 8009522:	e7b2      	b.n	800948a <_strtod_l+0xb12>
 8009524:	2300      	movs	r3, #0
 8009526:	930a      	str	r3, [sp, #40]	; 0x28
 8009528:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800952a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800952c:	6013      	str	r3, [r2, #0]
 800952e:	f7ff ba6b 	b.w	8008a08 <_strtod_l+0x90>
 8009532:	2a65      	cmp	r2, #101	; 0x65
 8009534:	f43f ab5f 	beq.w	8008bf6 <_strtod_l+0x27e>
 8009538:	2a45      	cmp	r2, #69	; 0x45
 800953a:	f43f ab5c 	beq.w	8008bf6 <_strtod_l+0x27e>
 800953e:	2301      	movs	r3, #1
 8009540:	f7ff bb94 	b.w	8008c6c <_strtod_l+0x2f4>
 8009544:	f3af 8000 	nop.w
 8009548:	94a03595 	.word	0x94a03595
 800954c:	3fdfffff 	.word	0x3fdfffff
 8009550:	35afe535 	.word	0x35afe535
 8009554:	3fe00000 	.word	0x3fe00000
 8009558:	ffc00000 	.word	0xffc00000
 800955c:	41dfffff 	.word	0x41dfffff
 8009560:	94a03595 	.word	0x94a03595
 8009564:	3fcfffff 	.word	0x3fcfffff
 8009568:	3ff00000 	.word	0x3ff00000
 800956c:	7ff00000 	.word	0x7ff00000
 8009570:	7fe00000 	.word	0x7fe00000
 8009574:	7c9fffff 	.word	0x7c9fffff
 8009578:	3fe00000 	.word	0x3fe00000
 800957c:	bff00000 	.word	0xbff00000
 8009580:	7fefffff 	.word	0x7fefffff

08009584 <_strtod_r>:
 8009584:	4b01      	ldr	r3, [pc, #4]	; (800958c <_strtod_r+0x8>)
 8009586:	f7ff b9f7 	b.w	8008978 <_strtod_l>
 800958a:	bf00      	nop
 800958c:	20000074 	.word	0x20000074

08009590 <_strtol_l.constprop.0>:
 8009590:	2b01      	cmp	r3, #1
 8009592:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009596:	d001      	beq.n	800959c <_strtol_l.constprop.0+0xc>
 8009598:	2b24      	cmp	r3, #36	; 0x24
 800959a:	d906      	bls.n	80095aa <_strtol_l.constprop.0+0x1a>
 800959c:	f7fe fafc 	bl	8007b98 <__errno>
 80095a0:	2316      	movs	r3, #22
 80095a2:	6003      	str	r3, [r0, #0]
 80095a4:	2000      	movs	r0, #0
 80095a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095aa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009690 <_strtol_l.constprop.0+0x100>
 80095ae:	460d      	mov	r5, r1
 80095b0:	462e      	mov	r6, r5
 80095b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80095b6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80095ba:	f017 0708 	ands.w	r7, r7, #8
 80095be:	d1f7      	bne.n	80095b0 <_strtol_l.constprop.0+0x20>
 80095c0:	2c2d      	cmp	r4, #45	; 0x2d
 80095c2:	d132      	bne.n	800962a <_strtol_l.constprop.0+0x9a>
 80095c4:	782c      	ldrb	r4, [r5, #0]
 80095c6:	2701      	movs	r7, #1
 80095c8:	1cb5      	adds	r5, r6, #2
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d05b      	beq.n	8009686 <_strtol_l.constprop.0+0xf6>
 80095ce:	2b10      	cmp	r3, #16
 80095d0:	d109      	bne.n	80095e6 <_strtol_l.constprop.0+0x56>
 80095d2:	2c30      	cmp	r4, #48	; 0x30
 80095d4:	d107      	bne.n	80095e6 <_strtol_l.constprop.0+0x56>
 80095d6:	782c      	ldrb	r4, [r5, #0]
 80095d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80095dc:	2c58      	cmp	r4, #88	; 0x58
 80095de:	d14d      	bne.n	800967c <_strtol_l.constprop.0+0xec>
 80095e0:	786c      	ldrb	r4, [r5, #1]
 80095e2:	2310      	movs	r3, #16
 80095e4:	3502      	adds	r5, #2
 80095e6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80095ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80095ee:	f04f 0c00 	mov.w	ip, #0
 80095f2:	fbb8 f9f3 	udiv	r9, r8, r3
 80095f6:	4666      	mov	r6, ip
 80095f8:	fb03 8a19 	mls	sl, r3, r9, r8
 80095fc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009600:	f1be 0f09 	cmp.w	lr, #9
 8009604:	d816      	bhi.n	8009634 <_strtol_l.constprop.0+0xa4>
 8009606:	4674      	mov	r4, lr
 8009608:	42a3      	cmp	r3, r4
 800960a:	dd24      	ble.n	8009656 <_strtol_l.constprop.0+0xc6>
 800960c:	f1bc 0f00 	cmp.w	ip, #0
 8009610:	db1e      	blt.n	8009650 <_strtol_l.constprop.0+0xc0>
 8009612:	45b1      	cmp	r9, r6
 8009614:	d31c      	bcc.n	8009650 <_strtol_l.constprop.0+0xc0>
 8009616:	d101      	bne.n	800961c <_strtol_l.constprop.0+0x8c>
 8009618:	45a2      	cmp	sl, r4
 800961a:	db19      	blt.n	8009650 <_strtol_l.constprop.0+0xc0>
 800961c:	fb06 4603 	mla	r6, r6, r3, r4
 8009620:	f04f 0c01 	mov.w	ip, #1
 8009624:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009628:	e7e8      	b.n	80095fc <_strtol_l.constprop.0+0x6c>
 800962a:	2c2b      	cmp	r4, #43	; 0x2b
 800962c:	bf04      	itt	eq
 800962e:	782c      	ldrbeq	r4, [r5, #0]
 8009630:	1cb5      	addeq	r5, r6, #2
 8009632:	e7ca      	b.n	80095ca <_strtol_l.constprop.0+0x3a>
 8009634:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009638:	f1be 0f19 	cmp.w	lr, #25
 800963c:	d801      	bhi.n	8009642 <_strtol_l.constprop.0+0xb2>
 800963e:	3c37      	subs	r4, #55	; 0x37
 8009640:	e7e2      	b.n	8009608 <_strtol_l.constprop.0+0x78>
 8009642:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009646:	f1be 0f19 	cmp.w	lr, #25
 800964a:	d804      	bhi.n	8009656 <_strtol_l.constprop.0+0xc6>
 800964c:	3c57      	subs	r4, #87	; 0x57
 800964e:	e7db      	b.n	8009608 <_strtol_l.constprop.0+0x78>
 8009650:	f04f 3cff 	mov.w	ip, #4294967295
 8009654:	e7e6      	b.n	8009624 <_strtol_l.constprop.0+0x94>
 8009656:	f1bc 0f00 	cmp.w	ip, #0
 800965a:	da05      	bge.n	8009668 <_strtol_l.constprop.0+0xd8>
 800965c:	2322      	movs	r3, #34	; 0x22
 800965e:	6003      	str	r3, [r0, #0]
 8009660:	4646      	mov	r6, r8
 8009662:	b942      	cbnz	r2, 8009676 <_strtol_l.constprop.0+0xe6>
 8009664:	4630      	mov	r0, r6
 8009666:	e79e      	b.n	80095a6 <_strtol_l.constprop.0+0x16>
 8009668:	b107      	cbz	r7, 800966c <_strtol_l.constprop.0+0xdc>
 800966a:	4276      	negs	r6, r6
 800966c:	2a00      	cmp	r2, #0
 800966e:	d0f9      	beq.n	8009664 <_strtol_l.constprop.0+0xd4>
 8009670:	f1bc 0f00 	cmp.w	ip, #0
 8009674:	d000      	beq.n	8009678 <_strtol_l.constprop.0+0xe8>
 8009676:	1e69      	subs	r1, r5, #1
 8009678:	6011      	str	r1, [r2, #0]
 800967a:	e7f3      	b.n	8009664 <_strtol_l.constprop.0+0xd4>
 800967c:	2430      	movs	r4, #48	; 0x30
 800967e:	2b00      	cmp	r3, #0
 8009680:	d1b1      	bne.n	80095e6 <_strtol_l.constprop.0+0x56>
 8009682:	2308      	movs	r3, #8
 8009684:	e7af      	b.n	80095e6 <_strtol_l.constprop.0+0x56>
 8009686:	2c30      	cmp	r4, #48	; 0x30
 8009688:	d0a5      	beq.n	80095d6 <_strtol_l.constprop.0+0x46>
 800968a:	230a      	movs	r3, #10
 800968c:	e7ab      	b.n	80095e6 <_strtol_l.constprop.0+0x56>
 800968e:	bf00      	nop
 8009690:	0800f489 	.word	0x0800f489

08009694 <_strtol_r>:
 8009694:	f7ff bf7c 	b.w	8009590 <_strtol_l.constprop.0>

08009698 <quorem>:
 8009698:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800969c:	6903      	ldr	r3, [r0, #16]
 800969e:	690c      	ldr	r4, [r1, #16]
 80096a0:	42a3      	cmp	r3, r4
 80096a2:	4607      	mov	r7, r0
 80096a4:	f2c0 8081 	blt.w	80097aa <quorem+0x112>
 80096a8:	3c01      	subs	r4, #1
 80096aa:	f101 0814 	add.w	r8, r1, #20
 80096ae:	f100 0514 	add.w	r5, r0, #20
 80096b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096b6:	9301      	str	r3, [sp, #4]
 80096b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80096bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096c0:	3301      	adds	r3, #1
 80096c2:	429a      	cmp	r2, r3
 80096c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80096c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80096cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80096d0:	d331      	bcc.n	8009736 <quorem+0x9e>
 80096d2:	f04f 0e00 	mov.w	lr, #0
 80096d6:	4640      	mov	r0, r8
 80096d8:	46ac      	mov	ip, r5
 80096da:	46f2      	mov	sl, lr
 80096dc:	f850 2b04 	ldr.w	r2, [r0], #4
 80096e0:	b293      	uxth	r3, r2
 80096e2:	fb06 e303 	mla	r3, r6, r3, lr
 80096e6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	ebaa 0303 	sub.w	r3, sl, r3
 80096f0:	f8dc a000 	ldr.w	sl, [ip]
 80096f4:	0c12      	lsrs	r2, r2, #16
 80096f6:	fa13 f38a 	uxtah	r3, r3, sl
 80096fa:	fb06 e202 	mla	r2, r6, r2, lr
 80096fe:	9300      	str	r3, [sp, #0]
 8009700:	9b00      	ldr	r3, [sp, #0]
 8009702:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009706:	b292      	uxth	r2, r2
 8009708:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800970c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009710:	f8bd 3000 	ldrh.w	r3, [sp]
 8009714:	4581      	cmp	r9, r0
 8009716:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800971a:	f84c 3b04 	str.w	r3, [ip], #4
 800971e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009722:	d2db      	bcs.n	80096dc <quorem+0x44>
 8009724:	f855 300b 	ldr.w	r3, [r5, fp]
 8009728:	b92b      	cbnz	r3, 8009736 <quorem+0x9e>
 800972a:	9b01      	ldr	r3, [sp, #4]
 800972c:	3b04      	subs	r3, #4
 800972e:	429d      	cmp	r5, r3
 8009730:	461a      	mov	r2, r3
 8009732:	d32e      	bcc.n	8009792 <quorem+0xfa>
 8009734:	613c      	str	r4, [r7, #16]
 8009736:	4638      	mov	r0, r7
 8009738:	f001 fc90 	bl	800b05c <__mcmp>
 800973c:	2800      	cmp	r0, #0
 800973e:	db24      	blt.n	800978a <quorem+0xf2>
 8009740:	3601      	adds	r6, #1
 8009742:	4628      	mov	r0, r5
 8009744:	f04f 0c00 	mov.w	ip, #0
 8009748:	f858 2b04 	ldr.w	r2, [r8], #4
 800974c:	f8d0 e000 	ldr.w	lr, [r0]
 8009750:	b293      	uxth	r3, r2
 8009752:	ebac 0303 	sub.w	r3, ip, r3
 8009756:	0c12      	lsrs	r2, r2, #16
 8009758:	fa13 f38e 	uxtah	r3, r3, lr
 800975c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009760:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009764:	b29b      	uxth	r3, r3
 8009766:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800976a:	45c1      	cmp	r9, r8
 800976c:	f840 3b04 	str.w	r3, [r0], #4
 8009770:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009774:	d2e8      	bcs.n	8009748 <quorem+0xb0>
 8009776:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800977a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800977e:	b922      	cbnz	r2, 800978a <quorem+0xf2>
 8009780:	3b04      	subs	r3, #4
 8009782:	429d      	cmp	r5, r3
 8009784:	461a      	mov	r2, r3
 8009786:	d30a      	bcc.n	800979e <quorem+0x106>
 8009788:	613c      	str	r4, [r7, #16]
 800978a:	4630      	mov	r0, r6
 800978c:	b003      	add	sp, #12
 800978e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009792:	6812      	ldr	r2, [r2, #0]
 8009794:	3b04      	subs	r3, #4
 8009796:	2a00      	cmp	r2, #0
 8009798:	d1cc      	bne.n	8009734 <quorem+0x9c>
 800979a:	3c01      	subs	r4, #1
 800979c:	e7c7      	b.n	800972e <quorem+0x96>
 800979e:	6812      	ldr	r2, [r2, #0]
 80097a0:	3b04      	subs	r3, #4
 80097a2:	2a00      	cmp	r2, #0
 80097a4:	d1f0      	bne.n	8009788 <quorem+0xf0>
 80097a6:	3c01      	subs	r4, #1
 80097a8:	e7eb      	b.n	8009782 <quorem+0xea>
 80097aa:	2000      	movs	r0, #0
 80097ac:	e7ee      	b.n	800978c <quorem+0xf4>
	...

080097b0 <_dtoa_r>:
 80097b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b4:	ed2d 8b04 	vpush	{d8-d9}
 80097b8:	ec57 6b10 	vmov	r6, r7, d0
 80097bc:	b093      	sub	sp, #76	; 0x4c
 80097be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80097c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80097c4:	9106      	str	r1, [sp, #24]
 80097c6:	ee10 aa10 	vmov	sl, s0
 80097ca:	4604      	mov	r4, r0
 80097cc:	9209      	str	r2, [sp, #36]	; 0x24
 80097ce:	930c      	str	r3, [sp, #48]	; 0x30
 80097d0:	46bb      	mov	fp, r7
 80097d2:	b975      	cbnz	r5, 80097f2 <_dtoa_r+0x42>
 80097d4:	2010      	movs	r0, #16
 80097d6:	f001 f94d 	bl	800aa74 <malloc>
 80097da:	4602      	mov	r2, r0
 80097dc:	6260      	str	r0, [r4, #36]	; 0x24
 80097de:	b920      	cbnz	r0, 80097ea <_dtoa_r+0x3a>
 80097e0:	4ba7      	ldr	r3, [pc, #668]	; (8009a80 <_dtoa_r+0x2d0>)
 80097e2:	21ea      	movs	r1, #234	; 0xea
 80097e4:	48a7      	ldr	r0, [pc, #668]	; (8009a84 <_dtoa_r+0x2d4>)
 80097e6:	f002 f8bd 	bl	800b964 <__assert_func>
 80097ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80097ee:	6005      	str	r5, [r0, #0]
 80097f0:	60c5      	str	r5, [r0, #12]
 80097f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097f4:	6819      	ldr	r1, [r3, #0]
 80097f6:	b151      	cbz	r1, 800980e <_dtoa_r+0x5e>
 80097f8:	685a      	ldr	r2, [r3, #4]
 80097fa:	604a      	str	r2, [r1, #4]
 80097fc:	2301      	movs	r3, #1
 80097fe:	4093      	lsls	r3, r2
 8009800:	608b      	str	r3, [r1, #8]
 8009802:	4620      	mov	r0, r4
 8009804:	f001 f99e 	bl	800ab44 <_Bfree>
 8009808:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800980a:	2200      	movs	r2, #0
 800980c:	601a      	str	r2, [r3, #0]
 800980e:	1e3b      	subs	r3, r7, #0
 8009810:	bfaa      	itet	ge
 8009812:	2300      	movge	r3, #0
 8009814:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009818:	f8c8 3000 	strge.w	r3, [r8]
 800981c:	4b9a      	ldr	r3, [pc, #616]	; (8009a88 <_dtoa_r+0x2d8>)
 800981e:	bfbc      	itt	lt
 8009820:	2201      	movlt	r2, #1
 8009822:	f8c8 2000 	strlt.w	r2, [r8]
 8009826:	ea33 030b 	bics.w	r3, r3, fp
 800982a:	d11b      	bne.n	8009864 <_dtoa_r+0xb4>
 800982c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800982e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009832:	6013      	str	r3, [r2, #0]
 8009834:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009838:	4333      	orrs	r3, r6
 800983a:	f000 8592 	beq.w	800a362 <_dtoa_r+0xbb2>
 800983e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009840:	b963      	cbnz	r3, 800985c <_dtoa_r+0xac>
 8009842:	4b92      	ldr	r3, [pc, #584]	; (8009a8c <_dtoa_r+0x2dc>)
 8009844:	e022      	b.n	800988c <_dtoa_r+0xdc>
 8009846:	4b92      	ldr	r3, [pc, #584]	; (8009a90 <_dtoa_r+0x2e0>)
 8009848:	9301      	str	r3, [sp, #4]
 800984a:	3308      	adds	r3, #8
 800984c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800984e:	6013      	str	r3, [r2, #0]
 8009850:	9801      	ldr	r0, [sp, #4]
 8009852:	b013      	add	sp, #76	; 0x4c
 8009854:	ecbd 8b04 	vpop	{d8-d9}
 8009858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800985c:	4b8b      	ldr	r3, [pc, #556]	; (8009a8c <_dtoa_r+0x2dc>)
 800985e:	9301      	str	r3, [sp, #4]
 8009860:	3303      	adds	r3, #3
 8009862:	e7f3      	b.n	800984c <_dtoa_r+0x9c>
 8009864:	2200      	movs	r2, #0
 8009866:	2300      	movs	r3, #0
 8009868:	4650      	mov	r0, sl
 800986a:	4659      	mov	r1, fp
 800986c:	f7f7 f92c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009870:	ec4b ab19 	vmov	d9, sl, fp
 8009874:	4680      	mov	r8, r0
 8009876:	b158      	cbz	r0, 8009890 <_dtoa_r+0xe0>
 8009878:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800987a:	2301      	movs	r3, #1
 800987c:	6013      	str	r3, [r2, #0]
 800987e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009880:	2b00      	cmp	r3, #0
 8009882:	f000 856b 	beq.w	800a35c <_dtoa_r+0xbac>
 8009886:	4883      	ldr	r0, [pc, #524]	; (8009a94 <_dtoa_r+0x2e4>)
 8009888:	6018      	str	r0, [r3, #0]
 800988a:	1e43      	subs	r3, r0, #1
 800988c:	9301      	str	r3, [sp, #4]
 800988e:	e7df      	b.n	8009850 <_dtoa_r+0xa0>
 8009890:	ec4b ab10 	vmov	d0, sl, fp
 8009894:	aa10      	add	r2, sp, #64	; 0x40
 8009896:	a911      	add	r1, sp, #68	; 0x44
 8009898:	4620      	mov	r0, r4
 800989a:	f001 fd01 	bl	800b2a0 <__d2b>
 800989e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80098a2:	ee08 0a10 	vmov	s16, r0
 80098a6:	2d00      	cmp	r5, #0
 80098a8:	f000 8084 	beq.w	80099b4 <_dtoa_r+0x204>
 80098ac:	ee19 3a90 	vmov	r3, s19
 80098b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80098b8:	4656      	mov	r6, sl
 80098ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80098be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80098c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80098c6:	4b74      	ldr	r3, [pc, #464]	; (8009a98 <_dtoa_r+0x2e8>)
 80098c8:	2200      	movs	r2, #0
 80098ca:	4630      	mov	r0, r6
 80098cc:	4639      	mov	r1, r7
 80098ce:	f7f6 fcdb 	bl	8000288 <__aeabi_dsub>
 80098d2:	a365      	add	r3, pc, #404	; (adr r3, 8009a68 <_dtoa_r+0x2b8>)
 80098d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d8:	f7f6 fe8e 	bl	80005f8 <__aeabi_dmul>
 80098dc:	a364      	add	r3, pc, #400	; (adr r3, 8009a70 <_dtoa_r+0x2c0>)
 80098de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e2:	f7f6 fcd3 	bl	800028c <__adddf3>
 80098e6:	4606      	mov	r6, r0
 80098e8:	4628      	mov	r0, r5
 80098ea:	460f      	mov	r7, r1
 80098ec:	f7f6 fe1a 	bl	8000524 <__aeabi_i2d>
 80098f0:	a361      	add	r3, pc, #388	; (adr r3, 8009a78 <_dtoa_r+0x2c8>)
 80098f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f6:	f7f6 fe7f 	bl	80005f8 <__aeabi_dmul>
 80098fa:	4602      	mov	r2, r0
 80098fc:	460b      	mov	r3, r1
 80098fe:	4630      	mov	r0, r6
 8009900:	4639      	mov	r1, r7
 8009902:	f7f6 fcc3 	bl	800028c <__adddf3>
 8009906:	4606      	mov	r6, r0
 8009908:	460f      	mov	r7, r1
 800990a:	f7f7 f925 	bl	8000b58 <__aeabi_d2iz>
 800990e:	2200      	movs	r2, #0
 8009910:	9000      	str	r0, [sp, #0]
 8009912:	2300      	movs	r3, #0
 8009914:	4630      	mov	r0, r6
 8009916:	4639      	mov	r1, r7
 8009918:	f7f7 f8e0 	bl	8000adc <__aeabi_dcmplt>
 800991c:	b150      	cbz	r0, 8009934 <_dtoa_r+0x184>
 800991e:	9800      	ldr	r0, [sp, #0]
 8009920:	f7f6 fe00 	bl	8000524 <__aeabi_i2d>
 8009924:	4632      	mov	r2, r6
 8009926:	463b      	mov	r3, r7
 8009928:	f7f7 f8ce 	bl	8000ac8 <__aeabi_dcmpeq>
 800992c:	b910      	cbnz	r0, 8009934 <_dtoa_r+0x184>
 800992e:	9b00      	ldr	r3, [sp, #0]
 8009930:	3b01      	subs	r3, #1
 8009932:	9300      	str	r3, [sp, #0]
 8009934:	9b00      	ldr	r3, [sp, #0]
 8009936:	2b16      	cmp	r3, #22
 8009938:	d85a      	bhi.n	80099f0 <_dtoa_r+0x240>
 800993a:	9a00      	ldr	r2, [sp, #0]
 800993c:	4b57      	ldr	r3, [pc, #348]	; (8009a9c <_dtoa_r+0x2ec>)
 800993e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009946:	ec51 0b19 	vmov	r0, r1, d9
 800994a:	f7f7 f8c7 	bl	8000adc <__aeabi_dcmplt>
 800994e:	2800      	cmp	r0, #0
 8009950:	d050      	beq.n	80099f4 <_dtoa_r+0x244>
 8009952:	9b00      	ldr	r3, [sp, #0]
 8009954:	3b01      	subs	r3, #1
 8009956:	9300      	str	r3, [sp, #0]
 8009958:	2300      	movs	r3, #0
 800995a:	930b      	str	r3, [sp, #44]	; 0x2c
 800995c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800995e:	1b5d      	subs	r5, r3, r5
 8009960:	1e6b      	subs	r3, r5, #1
 8009962:	9305      	str	r3, [sp, #20]
 8009964:	bf45      	ittet	mi
 8009966:	f1c5 0301 	rsbmi	r3, r5, #1
 800996a:	9304      	strmi	r3, [sp, #16]
 800996c:	2300      	movpl	r3, #0
 800996e:	2300      	movmi	r3, #0
 8009970:	bf4c      	ite	mi
 8009972:	9305      	strmi	r3, [sp, #20]
 8009974:	9304      	strpl	r3, [sp, #16]
 8009976:	9b00      	ldr	r3, [sp, #0]
 8009978:	2b00      	cmp	r3, #0
 800997a:	db3d      	blt.n	80099f8 <_dtoa_r+0x248>
 800997c:	9b05      	ldr	r3, [sp, #20]
 800997e:	9a00      	ldr	r2, [sp, #0]
 8009980:	920a      	str	r2, [sp, #40]	; 0x28
 8009982:	4413      	add	r3, r2
 8009984:	9305      	str	r3, [sp, #20]
 8009986:	2300      	movs	r3, #0
 8009988:	9307      	str	r3, [sp, #28]
 800998a:	9b06      	ldr	r3, [sp, #24]
 800998c:	2b09      	cmp	r3, #9
 800998e:	f200 8089 	bhi.w	8009aa4 <_dtoa_r+0x2f4>
 8009992:	2b05      	cmp	r3, #5
 8009994:	bfc4      	itt	gt
 8009996:	3b04      	subgt	r3, #4
 8009998:	9306      	strgt	r3, [sp, #24]
 800999a:	9b06      	ldr	r3, [sp, #24]
 800999c:	f1a3 0302 	sub.w	r3, r3, #2
 80099a0:	bfcc      	ite	gt
 80099a2:	2500      	movgt	r5, #0
 80099a4:	2501      	movle	r5, #1
 80099a6:	2b03      	cmp	r3, #3
 80099a8:	f200 8087 	bhi.w	8009aba <_dtoa_r+0x30a>
 80099ac:	e8df f003 	tbb	[pc, r3]
 80099b0:	59383a2d 	.word	0x59383a2d
 80099b4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80099b8:	441d      	add	r5, r3
 80099ba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80099be:	2b20      	cmp	r3, #32
 80099c0:	bfc1      	itttt	gt
 80099c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80099c6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80099ca:	fa0b f303 	lslgt.w	r3, fp, r3
 80099ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 80099d2:	bfda      	itte	le
 80099d4:	f1c3 0320 	rsble	r3, r3, #32
 80099d8:	fa06 f003 	lslle.w	r0, r6, r3
 80099dc:	4318      	orrgt	r0, r3
 80099de:	f7f6 fd91 	bl	8000504 <__aeabi_ui2d>
 80099e2:	2301      	movs	r3, #1
 80099e4:	4606      	mov	r6, r0
 80099e6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80099ea:	3d01      	subs	r5, #1
 80099ec:	930e      	str	r3, [sp, #56]	; 0x38
 80099ee:	e76a      	b.n	80098c6 <_dtoa_r+0x116>
 80099f0:	2301      	movs	r3, #1
 80099f2:	e7b2      	b.n	800995a <_dtoa_r+0x1aa>
 80099f4:	900b      	str	r0, [sp, #44]	; 0x2c
 80099f6:	e7b1      	b.n	800995c <_dtoa_r+0x1ac>
 80099f8:	9b04      	ldr	r3, [sp, #16]
 80099fa:	9a00      	ldr	r2, [sp, #0]
 80099fc:	1a9b      	subs	r3, r3, r2
 80099fe:	9304      	str	r3, [sp, #16]
 8009a00:	4253      	negs	r3, r2
 8009a02:	9307      	str	r3, [sp, #28]
 8009a04:	2300      	movs	r3, #0
 8009a06:	930a      	str	r3, [sp, #40]	; 0x28
 8009a08:	e7bf      	b.n	800998a <_dtoa_r+0x1da>
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	9308      	str	r3, [sp, #32]
 8009a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	dc55      	bgt.n	8009ac0 <_dtoa_r+0x310>
 8009a14:	2301      	movs	r3, #1
 8009a16:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	9209      	str	r2, [sp, #36]	; 0x24
 8009a1e:	e00c      	b.n	8009a3a <_dtoa_r+0x28a>
 8009a20:	2301      	movs	r3, #1
 8009a22:	e7f3      	b.n	8009a0c <_dtoa_r+0x25c>
 8009a24:	2300      	movs	r3, #0
 8009a26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a28:	9308      	str	r3, [sp, #32]
 8009a2a:	9b00      	ldr	r3, [sp, #0]
 8009a2c:	4413      	add	r3, r2
 8009a2e:	9302      	str	r3, [sp, #8]
 8009a30:	3301      	adds	r3, #1
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	9303      	str	r3, [sp, #12]
 8009a36:	bfb8      	it	lt
 8009a38:	2301      	movlt	r3, #1
 8009a3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	6042      	str	r2, [r0, #4]
 8009a40:	2204      	movs	r2, #4
 8009a42:	f102 0614 	add.w	r6, r2, #20
 8009a46:	429e      	cmp	r6, r3
 8009a48:	6841      	ldr	r1, [r0, #4]
 8009a4a:	d93d      	bls.n	8009ac8 <_dtoa_r+0x318>
 8009a4c:	4620      	mov	r0, r4
 8009a4e:	f001 f839 	bl	800aac4 <_Balloc>
 8009a52:	9001      	str	r0, [sp, #4]
 8009a54:	2800      	cmp	r0, #0
 8009a56:	d13b      	bne.n	8009ad0 <_dtoa_r+0x320>
 8009a58:	4b11      	ldr	r3, [pc, #68]	; (8009aa0 <_dtoa_r+0x2f0>)
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009a60:	e6c0      	b.n	80097e4 <_dtoa_r+0x34>
 8009a62:	2301      	movs	r3, #1
 8009a64:	e7df      	b.n	8009a26 <_dtoa_r+0x276>
 8009a66:	bf00      	nop
 8009a68:	636f4361 	.word	0x636f4361
 8009a6c:	3fd287a7 	.word	0x3fd287a7
 8009a70:	8b60c8b3 	.word	0x8b60c8b3
 8009a74:	3fc68a28 	.word	0x3fc68a28
 8009a78:	509f79fb 	.word	0x509f79fb
 8009a7c:	3fd34413 	.word	0x3fd34413
 8009a80:	0800f596 	.word	0x0800f596
 8009a84:	0800f5ad 	.word	0x0800f5ad
 8009a88:	7ff00000 	.word	0x7ff00000
 8009a8c:	0800f592 	.word	0x0800f592
 8009a90:	0800f589 	.word	0x0800f589
 8009a94:	0800f409 	.word	0x0800f409
 8009a98:	3ff80000 	.word	0x3ff80000
 8009a9c:	0800f718 	.word	0x0800f718
 8009aa0:	0800f608 	.word	0x0800f608
 8009aa4:	2501      	movs	r5, #1
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	9306      	str	r3, [sp, #24]
 8009aaa:	9508      	str	r5, [sp, #32]
 8009aac:	f04f 33ff 	mov.w	r3, #4294967295
 8009ab0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	2312      	movs	r3, #18
 8009ab8:	e7b0      	b.n	8009a1c <_dtoa_r+0x26c>
 8009aba:	2301      	movs	r3, #1
 8009abc:	9308      	str	r3, [sp, #32]
 8009abe:	e7f5      	b.n	8009aac <_dtoa_r+0x2fc>
 8009ac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ac2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009ac6:	e7b8      	b.n	8009a3a <_dtoa_r+0x28a>
 8009ac8:	3101      	adds	r1, #1
 8009aca:	6041      	str	r1, [r0, #4]
 8009acc:	0052      	lsls	r2, r2, #1
 8009ace:	e7b8      	b.n	8009a42 <_dtoa_r+0x292>
 8009ad0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ad2:	9a01      	ldr	r2, [sp, #4]
 8009ad4:	601a      	str	r2, [r3, #0]
 8009ad6:	9b03      	ldr	r3, [sp, #12]
 8009ad8:	2b0e      	cmp	r3, #14
 8009ada:	f200 809d 	bhi.w	8009c18 <_dtoa_r+0x468>
 8009ade:	2d00      	cmp	r5, #0
 8009ae0:	f000 809a 	beq.w	8009c18 <_dtoa_r+0x468>
 8009ae4:	9b00      	ldr	r3, [sp, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	dd32      	ble.n	8009b50 <_dtoa_r+0x3a0>
 8009aea:	4ab7      	ldr	r2, [pc, #732]	; (8009dc8 <_dtoa_r+0x618>)
 8009aec:	f003 030f 	and.w	r3, r3, #15
 8009af0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009af4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009af8:	9b00      	ldr	r3, [sp, #0]
 8009afa:	05d8      	lsls	r0, r3, #23
 8009afc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009b00:	d516      	bpl.n	8009b30 <_dtoa_r+0x380>
 8009b02:	4bb2      	ldr	r3, [pc, #712]	; (8009dcc <_dtoa_r+0x61c>)
 8009b04:	ec51 0b19 	vmov	r0, r1, d9
 8009b08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b0c:	f7f6 fe9e 	bl	800084c <__aeabi_ddiv>
 8009b10:	f007 070f 	and.w	r7, r7, #15
 8009b14:	4682      	mov	sl, r0
 8009b16:	468b      	mov	fp, r1
 8009b18:	2503      	movs	r5, #3
 8009b1a:	4eac      	ldr	r6, [pc, #688]	; (8009dcc <_dtoa_r+0x61c>)
 8009b1c:	b957      	cbnz	r7, 8009b34 <_dtoa_r+0x384>
 8009b1e:	4642      	mov	r2, r8
 8009b20:	464b      	mov	r3, r9
 8009b22:	4650      	mov	r0, sl
 8009b24:	4659      	mov	r1, fp
 8009b26:	f7f6 fe91 	bl	800084c <__aeabi_ddiv>
 8009b2a:	4682      	mov	sl, r0
 8009b2c:	468b      	mov	fp, r1
 8009b2e:	e028      	b.n	8009b82 <_dtoa_r+0x3d2>
 8009b30:	2502      	movs	r5, #2
 8009b32:	e7f2      	b.n	8009b1a <_dtoa_r+0x36a>
 8009b34:	07f9      	lsls	r1, r7, #31
 8009b36:	d508      	bpl.n	8009b4a <_dtoa_r+0x39a>
 8009b38:	4640      	mov	r0, r8
 8009b3a:	4649      	mov	r1, r9
 8009b3c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b40:	f7f6 fd5a 	bl	80005f8 <__aeabi_dmul>
 8009b44:	3501      	adds	r5, #1
 8009b46:	4680      	mov	r8, r0
 8009b48:	4689      	mov	r9, r1
 8009b4a:	107f      	asrs	r7, r7, #1
 8009b4c:	3608      	adds	r6, #8
 8009b4e:	e7e5      	b.n	8009b1c <_dtoa_r+0x36c>
 8009b50:	f000 809b 	beq.w	8009c8a <_dtoa_r+0x4da>
 8009b54:	9b00      	ldr	r3, [sp, #0]
 8009b56:	4f9d      	ldr	r7, [pc, #628]	; (8009dcc <_dtoa_r+0x61c>)
 8009b58:	425e      	negs	r6, r3
 8009b5a:	4b9b      	ldr	r3, [pc, #620]	; (8009dc8 <_dtoa_r+0x618>)
 8009b5c:	f006 020f 	and.w	r2, r6, #15
 8009b60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b68:	ec51 0b19 	vmov	r0, r1, d9
 8009b6c:	f7f6 fd44 	bl	80005f8 <__aeabi_dmul>
 8009b70:	1136      	asrs	r6, r6, #4
 8009b72:	4682      	mov	sl, r0
 8009b74:	468b      	mov	fp, r1
 8009b76:	2300      	movs	r3, #0
 8009b78:	2502      	movs	r5, #2
 8009b7a:	2e00      	cmp	r6, #0
 8009b7c:	d17a      	bne.n	8009c74 <_dtoa_r+0x4c4>
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d1d3      	bne.n	8009b2a <_dtoa_r+0x37a>
 8009b82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	f000 8082 	beq.w	8009c8e <_dtoa_r+0x4de>
 8009b8a:	4b91      	ldr	r3, [pc, #580]	; (8009dd0 <_dtoa_r+0x620>)
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	4650      	mov	r0, sl
 8009b90:	4659      	mov	r1, fp
 8009b92:	f7f6 ffa3 	bl	8000adc <__aeabi_dcmplt>
 8009b96:	2800      	cmp	r0, #0
 8009b98:	d079      	beq.n	8009c8e <_dtoa_r+0x4de>
 8009b9a:	9b03      	ldr	r3, [sp, #12]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d076      	beq.n	8009c8e <_dtoa_r+0x4de>
 8009ba0:	9b02      	ldr	r3, [sp, #8]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	dd36      	ble.n	8009c14 <_dtoa_r+0x464>
 8009ba6:	9b00      	ldr	r3, [sp, #0]
 8009ba8:	4650      	mov	r0, sl
 8009baa:	4659      	mov	r1, fp
 8009bac:	1e5f      	subs	r7, r3, #1
 8009bae:	2200      	movs	r2, #0
 8009bb0:	4b88      	ldr	r3, [pc, #544]	; (8009dd4 <_dtoa_r+0x624>)
 8009bb2:	f7f6 fd21 	bl	80005f8 <__aeabi_dmul>
 8009bb6:	9e02      	ldr	r6, [sp, #8]
 8009bb8:	4682      	mov	sl, r0
 8009bba:	468b      	mov	fp, r1
 8009bbc:	3501      	adds	r5, #1
 8009bbe:	4628      	mov	r0, r5
 8009bc0:	f7f6 fcb0 	bl	8000524 <__aeabi_i2d>
 8009bc4:	4652      	mov	r2, sl
 8009bc6:	465b      	mov	r3, fp
 8009bc8:	f7f6 fd16 	bl	80005f8 <__aeabi_dmul>
 8009bcc:	4b82      	ldr	r3, [pc, #520]	; (8009dd8 <_dtoa_r+0x628>)
 8009bce:	2200      	movs	r2, #0
 8009bd0:	f7f6 fb5c 	bl	800028c <__adddf3>
 8009bd4:	46d0      	mov	r8, sl
 8009bd6:	46d9      	mov	r9, fp
 8009bd8:	4682      	mov	sl, r0
 8009bda:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009bde:	2e00      	cmp	r6, #0
 8009be0:	d158      	bne.n	8009c94 <_dtoa_r+0x4e4>
 8009be2:	4b7e      	ldr	r3, [pc, #504]	; (8009ddc <_dtoa_r+0x62c>)
 8009be4:	2200      	movs	r2, #0
 8009be6:	4640      	mov	r0, r8
 8009be8:	4649      	mov	r1, r9
 8009bea:	f7f6 fb4d 	bl	8000288 <__aeabi_dsub>
 8009bee:	4652      	mov	r2, sl
 8009bf0:	465b      	mov	r3, fp
 8009bf2:	4680      	mov	r8, r0
 8009bf4:	4689      	mov	r9, r1
 8009bf6:	f7f6 ff8f 	bl	8000b18 <__aeabi_dcmpgt>
 8009bfa:	2800      	cmp	r0, #0
 8009bfc:	f040 8295 	bne.w	800a12a <_dtoa_r+0x97a>
 8009c00:	4652      	mov	r2, sl
 8009c02:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009c06:	4640      	mov	r0, r8
 8009c08:	4649      	mov	r1, r9
 8009c0a:	f7f6 ff67 	bl	8000adc <__aeabi_dcmplt>
 8009c0e:	2800      	cmp	r0, #0
 8009c10:	f040 8289 	bne.w	800a126 <_dtoa_r+0x976>
 8009c14:	ec5b ab19 	vmov	sl, fp, d9
 8009c18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	f2c0 8148 	blt.w	8009eb0 <_dtoa_r+0x700>
 8009c20:	9a00      	ldr	r2, [sp, #0]
 8009c22:	2a0e      	cmp	r2, #14
 8009c24:	f300 8144 	bgt.w	8009eb0 <_dtoa_r+0x700>
 8009c28:	4b67      	ldr	r3, [pc, #412]	; (8009dc8 <_dtoa_r+0x618>)
 8009c2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009c32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	f280 80d5 	bge.w	8009de4 <_dtoa_r+0x634>
 8009c3a:	9b03      	ldr	r3, [sp, #12]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	f300 80d1 	bgt.w	8009de4 <_dtoa_r+0x634>
 8009c42:	f040 826f 	bne.w	800a124 <_dtoa_r+0x974>
 8009c46:	4b65      	ldr	r3, [pc, #404]	; (8009ddc <_dtoa_r+0x62c>)
 8009c48:	2200      	movs	r2, #0
 8009c4a:	4640      	mov	r0, r8
 8009c4c:	4649      	mov	r1, r9
 8009c4e:	f7f6 fcd3 	bl	80005f8 <__aeabi_dmul>
 8009c52:	4652      	mov	r2, sl
 8009c54:	465b      	mov	r3, fp
 8009c56:	f7f6 ff55 	bl	8000b04 <__aeabi_dcmpge>
 8009c5a:	9e03      	ldr	r6, [sp, #12]
 8009c5c:	4637      	mov	r7, r6
 8009c5e:	2800      	cmp	r0, #0
 8009c60:	f040 8245 	bne.w	800a0ee <_dtoa_r+0x93e>
 8009c64:	9d01      	ldr	r5, [sp, #4]
 8009c66:	2331      	movs	r3, #49	; 0x31
 8009c68:	f805 3b01 	strb.w	r3, [r5], #1
 8009c6c:	9b00      	ldr	r3, [sp, #0]
 8009c6e:	3301      	adds	r3, #1
 8009c70:	9300      	str	r3, [sp, #0]
 8009c72:	e240      	b.n	800a0f6 <_dtoa_r+0x946>
 8009c74:	07f2      	lsls	r2, r6, #31
 8009c76:	d505      	bpl.n	8009c84 <_dtoa_r+0x4d4>
 8009c78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c7c:	f7f6 fcbc 	bl	80005f8 <__aeabi_dmul>
 8009c80:	3501      	adds	r5, #1
 8009c82:	2301      	movs	r3, #1
 8009c84:	1076      	asrs	r6, r6, #1
 8009c86:	3708      	adds	r7, #8
 8009c88:	e777      	b.n	8009b7a <_dtoa_r+0x3ca>
 8009c8a:	2502      	movs	r5, #2
 8009c8c:	e779      	b.n	8009b82 <_dtoa_r+0x3d2>
 8009c8e:	9f00      	ldr	r7, [sp, #0]
 8009c90:	9e03      	ldr	r6, [sp, #12]
 8009c92:	e794      	b.n	8009bbe <_dtoa_r+0x40e>
 8009c94:	9901      	ldr	r1, [sp, #4]
 8009c96:	4b4c      	ldr	r3, [pc, #304]	; (8009dc8 <_dtoa_r+0x618>)
 8009c98:	4431      	add	r1, r6
 8009c9a:	910d      	str	r1, [sp, #52]	; 0x34
 8009c9c:	9908      	ldr	r1, [sp, #32]
 8009c9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009ca2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009ca6:	2900      	cmp	r1, #0
 8009ca8:	d043      	beq.n	8009d32 <_dtoa_r+0x582>
 8009caa:	494d      	ldr	r1, [pc, #308]	; (8009de0 <_dtoa_r+0x630>)
 8009cac:	2000      	movs	r0, #0
 8009cae:	f7f6 fdcd 	bl	800084c <__aeabi_ddiv>
 8009cb2:	4652      	mov	r2, sl
 8009cb4:	465b      	mov	r3, fp
 8009cb6:	f7f6 fae7 	bl	8000288 <__aeabi_dsub>
 8009cba:	9d01      	ldr	r5, [sp, #4]
 8009cbc:	4682      	mov	sl, r0
 8009cbe:	468b      	mov	fp, r1
 8009cc0:	4649      	mov	r1, r9
 8009cc2:	4640      	mov	r0, r8
 8009cc4:	f7f6 ff48 	bl	8000b58 <__aeabi_d2iz>
 8009cc8:	4606      	mov	r6, r0
 8009cca:	f7f6 fc2b 	bl	8000524 <__aeabi_i2d>
 8009cce:	4602      	mov	r2, r0
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	4640      	mov	r0, r8
 8009cd4:	4649      	mov	r1, r9
 8009cd6:	f7f6 fad7 	bl	8000288 <__aeabi_dsub>
 8009cda:	3630      	adds	r6, #48	; 0x30
 8009cdc:	f805 6b01 	strb.w	r6, [r5], #1
 8009ce0:	4652      	mov	r2, sl
 8009ce2:	465b      	mov	r3, fp
 8009ce4:	4680      	mov	r8, r0
 8009ce6:	4689      	mov	r9, r1
 8009ce8:	f7f6 fef8 	bl	8000adc <__aeabi_dcmplt>
 8009cec:	2800      	cmp	r0, #0
 8009cee:	d163      	bne.n	8009db8 <_dtoa_r+0x608>
 8009cf0:	4642      	mov	r2, r8
 8009cf2:	464b      	mov	r3, r9
 8009cf4:	4936      	ldr	r1, [pc, #216]	; (8009dd0 <_dtoa_r+0x620>)
 8009cf6:	2000      	movs	r0, #0
 8009cf8:	f7f6 fac6 	bl	8000288 <__aeabi_dsub>
 8009cfc:	4652      	mov	r2, sl
 8009cfe:	465b      	mov	r3, fp
 8009d00:	f7f6 feec 	bl	8000adc <__aeabi_dcmplt>
 8009d04:	2800      	cmp	r0, #0
 8009d06:	f040 80b5 	bne.w	8009e74 <_dtoa_r+0x6c4>
 8009d0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d0c:	429d      	cmp	r5, r3
 8009d0e:	d081      	beq.n	8009c14 <_dtoa_r+0x464>
 8009d10:	4b30      	ldr	r3, [pc, #192]	; (8009dd4 <_dtoa_r+0x624>)
 8009d12:	2200      	movs	r2, #0
 8009d14:	4650      	mov	r0, sl
 8009d16:	4659      	mov	r1, fp
 8009d18:	f7f6 fc6e 	bl	80005f8 <__aeabi_dmul>
 8009d1c:	4b2d      	ldr	r3, [pc, #180]	; (8009dd4 <_dtoa_r+0x624>)
 8009d1e:	4682      	mov	sl, r0
 8009d20:	468b      	mov	fp, r1
 8009d22:	4640      	mov	r0, r8
 8009d24:	4649      	mov	r1, r9
 8009d26:	2200      	movs	r2, #0
 8009d28:	f7f6 fc66 	bl	80005f8 <__aeabi_dmul>
 8009d2c:	4680      	mov	r8, r0
 8009d2e:	4689      	mov	r9, r1
 8009d30:	e7c6      	b.n	8009cc0 <_dtoa_r+0x510>
 8009d32:	4650      	mov	r0, sl
 8009d34:	4659      	mov	r1, fp
 8009d36:	f7f6 fc5f 	bl	80005f8 <__aeabi_dmul>
 8009d3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d3c:	9d01      	ldr	r5, [sp, #4]
 8009d3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d40:	4682      	mov	sl, r0
 8009d42:	468b      	mov	fp, r1
 8009d44:	4649      	mov	r1, r9
 8009d46:	4640      	mov	r0, r8
 8009d48:	f7f6 ff06 	bl	8000b58 <__aeabi_d2iz>
 8009d4c:	4606      	mov	r6, r0
 8009d4e:	f7f6 fbe9 	bl	8000524 <__aeabi_i2d>
 8009d52:	3630      	adds	r6, #48	; 0x30
 8009d54:	4602      	mov	r2, r0
 8009d56:	460b      	mov	r3, r1
 8009d58:	4640      	mov	r0, r8
 8009d5a:	4649      	mov	r1, r9
 8009d5c:	f7f6 fa94 	bl	8000288 <__aeabi_dsub>
 8009d60:	f805 6b01 	strb.w	r6, [r5], #1
 8009d64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d66:	429d      	cmp	r5, r3
 8009d68:	4680      	mov	r8, r0
 8009d6a:	4689      	mov	r9, r1
 8009d6c:	f04f 0200 	mov.w	r2, #0
 8009d70:	d124      	bne.n	8009dbc <_dtoa_r+0x60c>
 8009d72:	4b1b      	ldr	r3, [pc, #108]	; (8009de0 <_dtoa_r+0x630>)
 8009d74:	4650      	mov	r0, sl
 8009d76:	4659      	mov	r1, fp
 8009d78:	f7f6 fa88 	bl	800028c <__adddf3>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	460b      	mov	r3, r1
 8009d80:	4640      	mov	r0, r8
 8009d82:	4649      	mov	r1, r9
 8009d84:	f7f6 fec8 	bl	8000b18 <__aeabi_dcmpgt>
 8009d88:	2800      	cmp	r0, #0
 8009d8a:	d173      	bne.n	8009e74 <_dtoa_r+0x6c4>
 8009d8c:	4652      	mov	r2, sl
 8009d8e:	465b      	mov	r3, fp
 8009d90:	4913      	ldr	r1, [pc, #76]	; (8009de0 <_dtoa_r+0x630>)
 8009d92:	2000      	movs	r0, #0
 8009d94:	f7f6 fa78 	bl	8000288 <__aeabi_dsub>
 8009d98:	4602      	mov	r2, r0
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	4640      	mov	r0, r8
 8009d9e:	4649      	mov	r1, r9
 8009da0:	f7f6 fe9c 	bl	8000adc <__aeabi_dcmplt>
 8009da4:	2800      	cmp	r0, #0
 8009da6:	f43f af35 	beq.w	8009c14 <_dtoa_r+0x464>
 8009daa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009dac:	1e6b      	subs	r3, r5, #1
 8009dae:	930f      	str	r3, [sp, #60]	; 0x3c
 8009db0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009db4:	2b30      	cmp	r3, #48	; 0x30
 8009db6:	d0f8      	beq.n	8009daa <_dtoa_r+0x5fa>
 8009db8:	9700      	str	r7, [sp, #0]
 8009dba:	e049      	b.n	8009e50 <_dtoa_r+0x6a0>
 8009dbc:	4b05      	ldr	r3, [pc, #20]	; (8009dd4 <_dtoa_r+0x624>)
 8009dbe:	f7f6 fc1b 	bl	80005f8 <__aeabi_dmul>
 8009dc2:	4680      	mov	r8, r0
 8009dc4:	4689      	mov	r9, r1
 8009dc6:	e7bd      	b.n	8009d44 <_dtoa_r+0x594>
 8009dc8:	0800f718 	.word	0x0800f718
 8009dcc:	0800f6f0 	.word	0x0800f6f0
 8009dd0:	3ff00000 	.word	0x3ff00000
 8009dd4:	40240000 	.word	0x40240000
 8009dd8:	401c0000 	.word	0x401c0000
 8009ddc:	40140000 	.word	0x40140000
 8009de0:	3fe00000 	.word	0x3fe00000
 8009de4:	9d01      	ldr	r5, [sp, #4]
 8009de6:	4656      	mov	r6, sl
 8009de8:	465f      	mov	r7, fp
 8009dea:	4642      	mov	r2, r8
 8009dec:	464b      	mov	r3, r9
 8009dee:	4630      	mov	r0, r6
 8009df0:	4639      	mov	r1, r7
 8009df2:	f7f6 fd2b 	bl	800084c <__aeabi_ddiv>
 8009df6:	f7f6 feaf 	bl	8000b58 <__aeabi_d2iz>
 8009dfa:	4682      	mov	sl, r0
 8009dfc:	f7f6 fb92 	bl	8000524 <__aeabi_i2d>
 8009e00:	4642      	mov	r2, r8
 8009e02:	464b      	mov	r3, r9
 8009e04:	f7f6 fbf8 	bl	80005f8 <__aeabi_dmul>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	4630      	mov	r0, r6
 8009e0e:	4639      	mov	r1, r7
 8009e10:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009e14:	f7f6 fa38 	bl	8000288 <__aeabi_dsub>
 8009e18:	f805 6b01 	strb.w	r6, [r5], #1
 8009e1c:	9e01      	ldr	r6, [sp, #4]
 8009e1e:	9f03      	ldr	r7, [sp, #12]
 8009e20:	1bae      	subs	r6, r5, r6
 8009e22:	42b7      	cmp	r7, r6
 8009e24:	4602      	mov	r2, r0
 8009e26:	460b      	mov	r3, r1
 8009e28:	d135      	bne.n	8009e96 <_dtoa_r+0x6e6>
 8009e2a:	f7f6 fa2f 	bl	800028c <__adddf3>
 8009e2e:	4642      	mov	r2, r8
 8009e30:	464b      	mov	r3, r9
 8009e32:	4606      	mov	r6, r0
 8009e34:	460f      	mov	r7, r1
 8009e36:	f7f6 fe6f 	bl	8000b18 <__aeabi_dcmpgt>
 8009e3a:	b9d0      	cbnz	r0, 8009e72 <_dtoa_r+0x6c2>
 8009e3c:	4642      	mov	r2, r8
 8009e3e:	464b      	mov	r3, r9
 8009e40:	4630      	mov	r0, r6
 8009e42:	4639      	mov	r1, r7
 8009e44:	f7f6 fe40 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e48:	b110      	cbz	r0, 8009e50 <_dtoa_r+0x6a0>
 8009e4a:	f01a 0f01 	tst.w	sl, #1
 8009e4e:	d110      	bne.n	8009e72 <_dtoa_r+0x6c2>
 8009e50:	4620      	mov	r0, r4
 8009e52:	ee18 1a10 	vmov	r1, s16
 8009e56:	f000 fe75 	bl	800ab44 <_Bfree>
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	9800      	ldr	r0, [sp, #0]
 8009e5e:	702b      	strb	r3, [r5, #0]
 8009e60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e62:	3001      	adds	r0, #1
 8009e64:	6018      	str	r0, [r3, #0]
 8009e66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	f43f acf1 	beq.w	8009850 <_dtoa_r+0xa0>
 8009e6e:	601d      	str	r5, [r3, #0]
 8009e70:	e4ee      	b.n	8009850 <_dtoa_r+0xa0>
 8009e72:	9f00      	ldr	r7, [sp, #0]
 8009e74:	462b      	mov	r3, r5
 8009e76:	461d      	mov	r5, r3
 8009e78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e7c:	2a39      	cmp	r2, #57	; 0x39
 8009e7e:	d106      	bne.n	8009e8e <_dtoa_r+0x6de>
 8009e80:	9a01      	ldr	r2, [sp, #4]
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d1f7      	bne.n	8009e76 <_dtoa_r+0x6c6>
 8009e86:	9901      	ldr	r1, [sp, #4]
 8009e88:	2230      	movs	r2, #48	; 0x30
 8009e8a:	3701      	adds	r7, #1
 8009e8c:	700a      	strb	r2, [r1, #0]
 8009e8e:	781a      	ldrb	r2, [r3, #0]
 8009e90:	3201      	adds	r2, #1
 8009e92:	701a      	strb	r2, [r3, #0]
 8009e94:	e790      	b.n	8009db8 <_dtoa_r+0x608>
 8009e96:	4ba6      	ldr	r3, [pc, #664]	; (800a130 <_dtoa_r+0x980>)
 8009e98:	2200      	movs	r2, #0
 8009e9a:	f7f6 fbad 	bl	80005f8 <__aeabi_dmul>
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	4606      	mov	r6, r0
 8009ea4:	460f      	mov	r7, r1
 8009ea6:	f7f6 fe0f 	bl	8000ac8 <__aeabi_dcmpeq>
 8009eaa:	2800      	cmp	r0, #0
 8009eac:	d09d      	beq.n	8009dea <_dtoa_r+0x63a>
 8009eae:	e7cf      	b.n	8009e50 <_dtoa_r+0x6a0>
 8009eb0:	9a08      	ldr	r2, [sp, #32]
 8009eb2:	2a00      	cmp	r2, #0
 8009eb4:	f000 80d7 	beq.w	800a066 <_dtoa_r+0x8b6>
 8009eb8:	9a06      	ldr	r2, [sp, #24]
 8009eba:	2a01      	cmp	r2, #1
 8009ebc:	f300 80ba 	bgt.w	800a034 <_dtoa_r+0x884>
 8009ec0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ec2:	2a00      	cmp	r2, #0
 8009ec4:	f000 80b2 	beq.w	800a02c <_dtoa_r+0x87c>
 8009ec8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009ecc:	9e07      	ldr	r6, [sp, #28]
 8009ece:	9d04      	ldr	r5, [sp, #16]
 8009ed0:	9a04      	ldr	r2, [sp, #16]
 8009ed2:	441a      	add	r2, r3
 8009ed4:	9204      	str	r2, [sp, #16]
 8009ed6:	9a05      	ldr	r2, [sp, #20]
 8009ed8:	2101      	movs	r1, #1
 8009eda:	441a      	add	r2, r3
 8009edc:	4620      	mov	r0, r4
 8009ede:	9205      	str	r2, [sp, #20]
 8009ee0:	f000 ff32 	bl	800ad48 <__i2b>
 8009ee4:	4607      	mov	r7, r0
 8009ee6:	2d00      	cmp	r5, #0
 8009ee8:	dd0c      	ble.n	8009f04 <_dtoa_r+0x754>
 8009eea:	9b05      	ldr	r3, [sp, #20]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	dd09      	ble.n	8009f04 <_dtoa_r+0x754>
 8009ef0:	42ab      	cmp	r3, r5
 8009ef2:	9a04      	ldr	r2, [sp, #16]
 8009ef4:	bfa8      	it	ge
 8009ef6:	462b      	movge	r3, r5
 8009ef8:	1ad2      	subs	r2, r2, r3
 8009efa:	9204      	str	r2, [sp, #16]
 8009efc:	9a05      	ldr	r2, [sp, #20]
 8009efe:	1aed      	subs	r5, r5, r3
 8009f00:	1ad3      	subs	r3, r2, r3
 8009f02:	9305      	str	r3, [sp, #20]
 8009f04:	9b07      	ldr	r3, [sp, #28]
 8009f06:	b31b      	cbz	r3, 8009f50 <_dtoa_r+0x7a0>
 8009f08:	9b08      	ldr	r3, [sp, #32]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	f000 80af 	beq.w	800a06e <_dtoa_r+0x8be>
 8009f10:	2e00      	cmp	r6, #0
 8009f12:	dd13      	ble.n	8009f3c <_dtoa_r+0x78c>
 8009f14:	4639      	mov	r1, r7
 8009f16:	4632      	mov	r2, r6
 8009f18:	4620      	mov	r0, r4
 8009f1a:	f000 ffd5 	bl	800aec8 <__pow5mult>
 8009f1e:	ee18 2a10 	vmov	r2, s16
 8009f22:	4601      	mov	r1, r0
 8009f24:	4607      	mov	r7, r0
 8009f26:	4620      	mov	r0, r4
 8009f28:	f000 ff24 	bl	800ad74 <__multiply>
 8009f2c:	ee18 1a10 	vmov	r1, s16
 8009f30:	4680      	mov	r8, r0
 8009f32:	4620      	mov	r0, r4
 8009f34:	f000 fe06 	bl	800ab44 <_Bfree>
 8009f38:	ee08 8a10 	vmov	s16, r8
 8009f3c:	9b07      	ldr	r3, [sp, #28]
 8009f3e:	1b9a      	subs	r2, r3, r6
 8009f40:	d006      	beq.n	8009f50 <_dtoa_r+0x7a0>
 8009f42:	ee18 1a10 	vmov	r1, s16
 8009f46:	4620      	mov	r0, r4
 8009f48:	f000 ffbe 	bl	800aec8 <__pow5mult>
 8009f4c:	ee08 0a10 	vmov	s16, r0
 8009f50:	2101      	movs	r1, #1
 8009f52:	4620      	mov	r0, r4
 8009f54:	f000 fef8 	bl	800ad48 <__i2b>
 8009f58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	4606      	mov	r6, r0
 8009f5e:	f340 8088 	ble.w	800a072 <_dtoa_r+0x8c2>
 8009f62:	461a      	mov	r2, r3
 8009f64:	4601      	mov	r1, r0
 8009f66:	4620      	mov	r0, r4
 8009f68:	f000 ffae 	bl	800aec8 <__pow5mult>
 8009f6c:	9b06      	ldr	r3, [sp, #24]
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	4606      	mov	r6, r0
 8009f72:	f340 8081 	ble.w	800a078 <_dtoa_r+0x8c8>
 8009f76:	f04f 0800 	mov.w	r8, #0
 8009f7a:	6933      	ldr	r3, [r6, #16]
 8009f7c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009f80:	6918      	ldr	r0, [r3, #16]
 8009f82:	f000 fe91 	bl	800aca8 <__hi0bits>
 8009f86:	f1c0 0020 	rsb	r0, r0, #32
 8009f8a:	9b05      	ldr	r3, [sp, #20]
 8009f8c:	4418      	add	r0, r3
 8009f8e:	f010 001f 	ands.w	r0, r0, #31
 8009f92:	f000 8092 	beq.w	800a0ba <_dtoa_r+0x90a>
 8009f96:	f1c0 0320 	rsb	r3, r0, #32
 8009f9a:	2b04      	cmp	r3, #4
 8009f9c:	f340 808a 	ble.w	800a0b4 <_dtoa_r+0x904>
 8009fa0:	f1c0 001c 	rsb	r0, r0, #28
 8009fa4:	9b04      	ldr	r3, [sp, #16]
 8009fa6:	4403      	add	r3, r0
 8009fa8:	9304      	str	r3, [sp, #16]
 8009faa:	9b05      	ldr	r3, [sp, #20]
 8009fac:	4403      	add	r3, r0
 8009fae:	4405      	add	r5, r0
 8009fb0:	9305      	str	r3, [sp, #20]
 8009fb2:	9b04      	ldr	r3, [sp, #16]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	dd07      	ble.n	8009fc8 <_dtoa_r+0x818>
 8009fb8:	ee18 1a10 	vmov	r1, s16
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	f000 ffdc 	bl	800af7c <__lshift>
 8009fc4:	ee08 0a10 	vmov	s16, r0
 8009fc8:	9b05      	ldr	r3, [sp, #20]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	dd05      	ble.n	8009fda <_dtoa_r+0x82a>
 8009fce:	4631      	mov	r1, r6
 8009fd0:	461a      	mov	r2, r3
 8009fd2:	4620      	mov	r0, r4
 8009fd4:	f000 ffd2 	bl	800af7c <__lshift>
 8009fd8:	4606      	mov	r6, r0
 8009fda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d06e      	beq.n	800a0be <_dtoa_r+0x90e>
 8009fe0:	ee18 0a10 	vmov	r0, s16
 8009fe4:	4631      	mov	r1, r6
 8009fe6:	f001 f839 	bl	800b05c <__mcmp>
 8009fea:	2800      	cmp	r0, #0
 8009fec:	da67      	bge.n	800a0be <_dtoa_r+0x90e>
 8009fee:	9b00      	ldr	r3, [sp, #0]
 8009ff0:	3b01      	subs	r3, #1
 8009ff2:	ee18 1a10 	vmov	r1, s16
 8009ff6:	9300      	str	r3, [sp, #0]
 8009ff8:	220a      	movs	r2, #10
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	4620      	mov	r0, r4
 8009ffe:	f000 fdc3 	bl	800ab88 <__multadd>
 800a002:	9b08      	ldr	r3, [sp, #32]
 800a004:	ee08 0a10 	vmov	s16, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	f000 81b1 	beq.w	800a370 <_dtoa_r+0xbc0>
 800a00e:	2300      	movs	r3, #0
 800a010:	4639      	mov	r1, r7
 800a012:	220a      	movs	r2, #10
 800a014:	4620      	mov	r0, r4
 800a016:	f000 fdb7 	bl	800ab88 <__multadd>
 800a01a:	9b02      	ldr	r3, [sp, #8]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	4607      	mov	r7, r0
 800a020:	f300 808e 	bgt.w	800a140 <_dtoa_r+0x990>
 800a024:	9b06      	ldr	r3, [sp, #24]
 800a026:	2b02      	cmp	r3, #2
 800a028:	dc51      	bgt.n	800a0ce <_dtoa_r+0x91e>
 800a02a:	e089      	b.n	800a140 <_dtoa_r+0x990>
 800a02c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a02e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a032:	e74b      	b.n	8009ecc <_dtoa_r+0x71c>
 800a034:	9b03      	ldr	r3, [sp, #12]
 800a036:	1e5e      	subs	r6, r3, #1
 800a038:	9b07      	ldr	r3, [sp, #28]
 800a03a:	42b3      	cmp	r3, r6
 800a03c:	bfbf      	itttt	lt
 800a03e:	9b07      	ldrlt	r3, [sp, #28]
 800a040:	9607      	strlt	r6, [sp, #28]
 800a042:	1af2      	sublt	r2, r6, r3
 800a044:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a046:	bfb6      	itet	lt
 800a048:	189b      	addlt	r3, r3, r2
 800a04a:	1b9e      	subge	r6, r3, r6
 800a04c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a04e:	9b03      	ldr	r3, [sp, #12]
 800a050:	bfb8      	it	lt
 800a052:	2600      	movlt	r6, #0
 800a054:	2b00      	cmp	r3, #0
 800a056:	bfb7      	itett	lt
 800a058:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a05c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a060:	1a9d      	sublt	r5, r3, r2
 800a062:	2300      	movlt	r3, #0
 800a064:	e734      	b.n	8009ed0 <_dtoa_r+0x720>
 800a066:	9e07      	ldr	r6, [sp, #28]
 800a068:	9d04      	ldr	r5, [sp, #16]
 800a06a:	9f08      	ldr	r7, [sp, #32]
 800a06c:	e73b      	b.n	8009ee6 <_dtoa_r+0x736>
 800a06e:	9a07      	ldr	r2, [sp, #28]
 800a070:	e767      	b.n	8009f42 <_dtoa_r+0x792>
 800a072:	9b06      	ldr	r3, [sp, #24]
 800a074:	2b01      	cmp	r3, #1
 800a076:	dc18      	bgt.n	800a0aa <_dtoa_r+0x8fa>
 800a078:	f1ba 0f00 	cmp.w	sl, #0
 800a07c:	d115      	bne.n	800a0aa <_dtoa_r+0x8fa>
 800a07e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a082:	b993      	cbnz	r3, 800a0aa <_dtoa_r+0x8fa>
 800a084:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a088:	0d1b      	lsrs	r3, r3, #20
 800a08a:	051b      	lsls	r3, r3, #20
 800a08c:	b183      	cbz	r3, 800a0b0 <_dtoa_r+0x900>
 800a08e:	9b04      	ldr	r3, [sp, #16]
 800a090:	3301      	adds	r3, #1
 800a092:	9304      	str	r3, [sp, #16]
 800a094:	9b05      	ldr	r3, [sp, #20]
 800a096:	3301      	adds	r3, #1
 800a098:	9305      	str	r3, [sp, #20]
 800a09a:	f04f 0801 	mov.w	r8, #1
 800a09e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	f47f af6a 	bne.w	8009f7a <_dtoa_r+0x7ca>
 800a0a6:	2001      	movs	r0, #1
 800a0a8:	e76f      	b.n	8009f8a <_dtoa_r+0x7da>
 800a0aa:	f04f 0800 	mov.w	r8, #0
 800a0ae:	e7f6      	b.n	800a09e <_dtoa_r+0x8ee>
 800a0b0:	4698      	mov	r8, r3
 800a0b2:	e7f4      	b.n	800a09e <_dtoa_r+0x8ee>
 800a0b4:	f43f af7d 	beq.w	8009fb2 <_dtoa_r+0x802>
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	301c      	adds	r0, #28
 800a0bc:	e772      	b.n	8009fa4 <_dtoa_r+0x7f4>
 800a0be:	9b03      	ldr	r3, [sp, #12]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	dc37      	bgt.n	800a134 <_dtoa_r+0x984>
 800a0c4:	9b06      	ldr	r3, [sp, #24]
 800a0c6:	2b02      	cmp	r3, #2
 800a0c8:	dd34      	ble.n	800a134 <_dtoa_r+0x984>
 800a0ca:	9b03      	ldr	r3, [sp, #12]
 800a0cc:	9302      	str	r3, [sp, #8]
 800a0ce:	9b02      	ldr	r3, [sp, #8]
 800a0d0:	b96b      	cbnz	r3, 800a0ee <_dtoa_r+0x93e>
 800a0d2:	4631      	mov	r1, r6
 800a0d4:	2205      	movs	r2, #5
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	f000 fd56 	bl	800ab88 <__multadd>
 800a0dc:	4601      	mov	r1, r0
 800a0de:	4606      	mov	r6, r0
 800a0e0:	ee18 0a10 	vmov	r0, s16
 800a0e4:	f000 ffba 	bl	800b05c <__mcmp>
 800a0e8:	2800      	cmp	r0, #0
 800a0ea:	f73f adbb 	bgt.w	8009c64 <_dtoa_r+0x4b4>
 800a0ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0f0:	9d01      	ldr	r5, [sp, #4]
 800a0f2:	43db      	mvns	r3, r3
 800a0f4:	9300      	str	r3, [sp, #0]
 800a0f6:	f04f 0800 	mov.w	r8, #0
 800a0fa:	4631      	mov	r1, r6
 800a0fc:	4620      	mov	r0, r4
 800a0fe:	f000 fd21 	bl	800ab44 <_Bfree>
 800a102:	2f00      	cmp	r7, #0
 800a104:	f43f aea4 	beq.w	8009e50 <_dtoa_r+0x6a0>
 800a108:	f1b8 0f00 	cmp.w	r8, #0
 800a10c:	d005      	beq.n	800a11a <_dtoa_r+0x96a>
 800a10e:	45b8      	cmp	r8, r7
 800a110:	d003      	beq.n	800a11a <_dtoa_r+0x96a>
 800a112:	4641      	mov	r1, r8
 800a114:	4620      	mov	r0, r4
 800a116:	f000 fd15 	bl	800ab44 <_Bfree>
 800a11a:	4639      	mov	r1, r7
 800a11c:	4620      	mov	r0, r4
 800a11e:	f000 fd11 	bl	800ab44 <_Bfree>
 800a122:	e695      	b.n	8009e50 <_dtoa_r+0x6a0>
 800a124:	2600      	movs	r6, #0
 800a126:	4637      	mov	r7, r6
 800a128:	e7e1      	b.n	800a0ee <_dtoa_r+0x93e>
 800a12a:	9700      	str	r7, [sp, #0]
 800a12c:	4637      	mov	r7, r6
 800a12e:	e599      	b.n	8009c64 <_dtoa_r+0x4b4>
 800a130:	40240000 	.word	0x40240000
 800a134:	9b08      	ldr	r3, [sp, #32]
 800a136:	2b00      	cmp	r3, #0
 800a138:	f000 80ca 	beq.w	800a2d0 <_dtoa_r+0xb20>
 800a13c:	9b03      	ldr	r3, [sp, #12]
 800a13e:	9302      	str	r3, [sp, #8]
 800a140:	2d00      	cmp	r5, #0
 800a142:	dd05      	ble.n	800a150 <_dtoa_r+0x9a0>
 800a144:	4639      	mov	r1, r7
 800a146:	462a      	mov	r2, r5
 800a148:	4620      	mov	r0, r4
 800a14a:	f000 ff17 	bl	800af7c <__lshift>
 800a14e:	4607      	mov	r7, r0
 800a150:	f1b8 0f00 	cmp.w	r8, #0
 800a154:	d05b      	beq.n	800a20e <_dtoa_r+0xa5e>
 800a156:	6879      	ldr	r1, [r7, #4]
 800a158:	4620      	mov	r0, r4
 800a15a:	f000 fcb3 	bl	800aac4 <_Balloc>
 800a15e:	4605      	mov	r5, r0
 800a160:	b928      	cbnz	r0, 800a16e <_dtoa_r+0x9be>
 800a162:	4b87      	ldr	r3, [pc, #540]	; (800a380 <_dtoa_r+0xbd0>)
 800a164:	4602      	mov	r2, r0
 800a166:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a16a:	f7ff bb3b 	b.w	80097e4 <_dtoa_r+0x34>
 800a16e:	693a      	ldr	r2, [r7, #16]
 800a170:	3202      	adds	r2, #2
 800a172:	0092      	lsls	r2, r2, #2
 800a174:	f107 010c 	add.w	r1, r7, #12
 800a178:	300c      	adds	r0, #12
 800a17a:	f000 fc95 	bl	800aaa8 <memcpy>
 800a17e:	2201      	movs	r2, #1
 800a180:	4629      	mov	r1, r5
 800a182:	4620      	mov	r0, r4
 800a184:	f000 fefa 	bl	800af7c <__lshift>
 800a188:	9b01      	ldr	r3, [sp, #4]
 800a18a:	f103 0901 	add.w	r9, r3, #1
 800a18e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a192:	4413      	add	r3, r2
 800a194:	9305      	str	r3, [sp, #20]
 800a196:	f00a 0301 	and.w	r3, sl, #1
 800a19a:	46b8      	mov	r8, r7
 800a19c:	9304      	str	r3, [sp, #16]
 800a19e:	4607      	mov	r7, r0
 800a1a0:	4631      	mov	r1, r6
 800a1a2:	ee18 0a10 	vmov	r0, s16
 800a1a6:	f7ff fa77 	bl	8009698 <quorem>
 800a1aa:	4641      	mov	r1, r8
 800a1ac:	9002      	str	r0, [sp, #8]
 800a1ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a1b2:	ee18 0a10 	vmov	r0, s16
 800a1b6:	f000 ff51 	bl	800b05c <__mcmp>
 800a1ba:	463a      	mov	r2, r7
 800a1bc:	9003      	str	r0, [sp, #12]
 800a1be:	4631      	mov	r1, r6
 800a1c0:	4620      	mov	r0, r4
 800a1c2:	f000 ff67 	bl	800b094 <__mdiff>
 800a1c6:	68c2      	ldr	r2, [r0, #12]
 800a1c8:	f109 3bff 	add.w	fp, r9, #4294967295
 800a1cc:	4605      	mov	r5, r0
 800a1ce:	bb02      	cbnz	r2, 800a212 <_dtoa_r+0xa62>
 800a1d0:	4601      	mov	r1, r0
 800a1d2:	ee18 0a10 	vmov	r0, s16
 800a1d6:	f000 ff41 	bl	800b05c <__mcmp>
 800a1da:	4602      	mov	r2, r0
 800a1dc:	4629      	mov	r1, r5
 800a1de:	4620      	mov	r0, r4
 800a1e0:	9207      	str	r2, [sp, #28]
 800a1e2:	f000 fcaf 	bl	800ab44 <_Bfree>
 800a1e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a1ea:	ea43 0102 	orr.w	r1, r3, r2
 800a1ee:	9b04      	ldr	r3, [sp, #16]
 800a1f0:	430b      	orrs	r3, r1
 800a1f2:	464d      	mov	r5, r9
 800a1f4:	d10f      	bne.n	800a216 <_dtoa_r+0xa66>
 800a1f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a1fa:	d02a      	beq.n	800a252 <_dtoa_r+0xaa2>
 800a1fc:	9b03      	ldr	r3, [sp, #12]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	dd02      	ble.n	800a208 <_dtoa_r+0xa58>
 800a202:	9b02      	ldr	r3, [sp, #8]
 800a204:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a208:	f88b a000 	strb.w	sl, [fp]
 800a20c:	e775      	b.n	800a0fa <_dtoa_r+0x94a>
 800a20e:	4638      	mov	r0, r7
 800a210:	e7ba      	b.n	800a188 <_dtoa_r+0x9d8>
 800a212:	2201      	movs	r2, #1
 800a214:	e7e2      	b.n	800a1dc <_dtoa_r+0xa2c>
 800a216:	9b03      	ldr	r3, [sp, #12]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	db04      	blt.n	800a226 <_dtoa_r+0xa76>
 800a21c:	9906      	ldr	r1, [sp, #24]
 800a21e:	430b      	orrs	r3, r1
 800a220:	9904      	ldr	r1, [sp, #16]
 800a222:	430b      	orrs	r3, r1
 800a224:	d122      	bne.n	800a26c <_dtoa_r+0xabc>
 800a226:	2a00      	cmp	r2, #0
 800a228:	ddee      	ble.n	800a208 <_dtoa_r+0xa58>
 800a22a:	ee18 1a10 	vmov	r1, s16
 800a22e:	2201      	movs	r2, #1
 800a230:	4620      	mov	r0, r4
 800a232:	f000 fea3 	bl	800af7c <__lshift>
 800a236:	4631      	mov	r1, r6
 800a238:	ee08 0a10 	vmov	s16, r0
 800a23c:	f000 ff0e 	bl	800b05c <__mcmp>
 800a240:	2800      	cmp	r0, #0
 800a242:	dc03      	bgt.n	800a24c <_dtoa_r+0xa9c>
 800a244:	d1e0      	bne.n	800a208 <_dtoa_r+0xa58>
 800a246:	f01a 0f01 	tst.w	sl, #1
 800a24a:	d0dd      	beq.n	800a208 <_dtoa_r+0xa58>
 800a24c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a250:	d1d7      	bne.n	800a202 <_dtoa_r+0xa52>
 800a252:	2339      	movs	r3, #57	; 0x39
 800a254:	f88b 3000 	strb.w	r3, [fp]
 800a258:	462b      	mov	r3, r5
 800a25a:	461d      	mov	r5, r3
 800a25c:	3b01      	subs	r3, #1
 800a25e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a262:	2a39      	cmp	r2, #57	; 0x39
 800a264:	d071      	beq.n	800a34a <_dtoa_r+0xb9a>
 800a266:	3201      	adds	r2, #1
 800a268:	701a      	strb	r2, [r3, #0]
 800a26a:	e746      	b.n	800a0fa <_dtoa_r+0x94a>
 800a26c:	2a00      	cmp	r2, #0
 800a26e:	dd07      	ble.n	800a280 <_dtoa_r+0xad0>
 800a270:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a274:	d0ed      	beq.n	800a252 <_dtoa_r+0xaa2>
 800a276:	f10a 0301 	add.w	r3, sl, #1
 800a27a:	f88b 3000 	strb.w	r3, [fp]
 800a27e:	e73c      	b.n	800a0fa <_dtoa_r+0x94a>
 800a280:	9b05      	ldr	r3, [sp, #20]
 800a282:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a286:	4599      	cmp	r9, r3
 800a288:	d047      	beq.n	800a31a <_dtoa_r+0xb6a>
 800a28a:	ee18 1a10 	vmov	r1, s16
 800a28e:	2300      	movs	r3, #0
 800a290:	220a      	movs	r2, #10
 800a292:	4620      	mov	r0, r4
 800a294:	f000 fc78 	bl	800ab88 <__multadd>
 800a298:	45b8      	cmp	r8, r7
 800a29a:	ee08 0a10 	vmov	s16, r0
 800a29e:	f04f 0300 	mov.w	r3, #0
 800a2a2:	f04f 020a 	mov.w	r2, #10
 800a2a6:	4641      	mov	r1, r8
 800a2a8:	4620      	mov	r0, r4
 800a2aa:	d106      	bne.n	800a2ba <_dtoa_r+0xb0a>
 800a2ac:	f000 fc6c 	bl	800ab88 <__multadd>
 800a2b0:	4680      	mov	r8, r0
 800a2b2:	4607      	mov	r7, r0
 800a2b4:	f109 0901 	add.w	r9, r9, #1
 800a2b8:	e772      	b.n	800a1a0 <_dtoa_r+0x9f0>
 800a2ba:	f000 fc65 	bl	800ab88 <__multadd>
 800a2be:	4639      	mov	r1, r7
 800a2c0:	4680      	mov	r8, r0
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	220a      	movs	r2, #10
 800a2c6:	4620      	mov	r0, r4
 800a2c8:	f000 fc5e 	bl	800ab88 <__multadd>
 800a2cc:	4607      	mov	r7, r0
 800a2ce:	e7f1      	b.n	800a2b4 <_dtoa_r+0xb04>
 800a2d0:	9b03      	ldr	r3, [sp, #12]
 800a2d2:	9302      	str	r3, [sp, #8]
 800a2d4:	9d01      	ldr	r5, [sp, #4]
 800a2d6:	ee18 0a10 	vmov	r0, s16
 800a2da:	4631      	mov	r1, r6
 800a2dc:	f7ff f9dc 	bl	8009698 <quorem>
 800a2e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a2e4:	9b01      	ldr	r3, [sp, #4]
 800a2e6:	f805 ab01 	strb.w	sl, [r5], #1
 800a2ea:	1aea      	subs	r2, r5, r3
 800a2ec:	9b02      	ldr	r3, [sp, #8]
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	dd09      	ble.n	800a306 <_dtoa_r+0xb56>
 800a2f2:	ee18 1a10 	vmov	r1, s16
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	220a      	movs	r2, #10
 800a2fa:	4620      	mov	r0, r4
 800a2fc:	f000 fc44 	bl	800ab88 <__multadd>
 800a300:	ee08 0a10 	vmov	s16, r0
 800a304:	e7e7      	b.n	800a2d6 <_dtoa_r+0xb26>
 800a306:	9b02      	ldr	r3, [sp, #8]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	bfc8      	it	gt
 800a30c:	461d      	movgt	r5, r3
 800a30e:	9b01      	ldr	r3, [sp, #4]
 800a310:	bfd8      	it	le
 800a312:	2501      	movle	r5, #1
 800a314:	441d      	add	r5, r3
 800a316:	f04f 0800 	mov.w	r8, #0
 800a31a:	ee18 1a10 	vmov	r1, s16
 800a31e:	2201      	movs	r2, #1
 800a320:	4620      	mov	r0, r4
 800a322:	f000 fe2b 	bl	800af7c <__lshift>
 800a326:	4631      	mov	r1, r6
 800a328:	ee08 0a10 	vmov	s16, r0
 800a32c:	f000 fe96 	bl	800b05c <__mcmp>
 800a330:	2800      	cmp	r0, #0
 800a332:	dc91      	bgt.n	800a258 <_dtoa_r+0xaa8>
 800a334:	d102      	bne.n	800a33c <_dtoa_r+0xb8c>
 800a336:	f01a 0f01 	tst.w	sl, #1
 800a33a:	d18d      	bne.n	800a258 <_dtoa_r+0xaa8>
 800a33c:	462b      	mov	r3, r5
 800a33e:	461d      	mov	r5, r3
 800a340:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a344:	2a30      	cmp	r2, #48	; 0x30
 800a346:	d0fa      	beq.n	800a33e <_dtoa_r+0xb8e>
 800a348:	e6d7      	b.n	800a0fa <_dtoa_r+0x94a>
 800a34a:	9a01      	ldr	r2, [sp, #4]
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d184      	bne.n	800a25a <_dtoa_r+0xaaa>
 800a350:	9b00      	ldr	r3, [sp, #0]
 800a352:	3301      	adds	r3, #1
 800a354:	9300      	str	r3, [sp, #0]
 800a356:	2331      	movs	r3, #49	; 0x31
 800a358:	7013      	strb	r3, [r2, #0]
 800a35a:	e6ce      	b.n	800a0fa <_dtoa_r+0x94a>
 800a35c:	4b09      	ldr	r3, [pc, #36]	; (800a384 <_dtoa_r+0xbd4>)
 800a35e:	f7ff ba95 	b.w	800988c <_dtoa_r+0xdc>
 800a362:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a364:	2b00      	cmp	r3, #0
 800a366:	f47f aa6e 	bne.w	8009846 <_dtoa_r+0x96>
 800a36a:	4b07      	ldr	r3, [pc, #28]	; (800a388 <_dtoa_r+0xbd8>)
 800a36c:	f7ff ba8e 	b.w	800988c <_dtoa_r+0xdc>
 800a370:	9b02      	ldr	r3, [sp, #8]
 800a372:	2b00      	cmp	r3, #0
 800a374:	dcae      	bgt.n	800a2d4 <_dtoa_r+0xb24>
 800a376:	9b06      	ldr	r3, [sp, #24]
 800a378:	2b02      	cmp	r3, #2
 800a37a:	f73f aea8 	bgt.w	800a0ce <_dtoa_r+0x91e>
 800a37e:	e7a9      	b.n	800a2d4 <_dtoa_r+0xb24>
 800a380:	0800f608 	.word	0x0800f608
 800a384:	0800f408 	.word	0x0800f408
 800a388:	0800f589 	.word	0x0800f589

0800a38c <rshift>:
 800a38c:	6903      	ldr	r3, [r0, #16]
 800a38e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a392:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a396:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a39a:	f100 0414 	add.w	r4, r0, #20
 800a39e:	dd45      	ble.n	800a42c <rshift+0xa0>
 800a3a0:	f011 011f 	ands.w	r1, r1, #31
 800a3a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a3a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a3ac:	d10c      	bne.n	800a3c8 <rshift+0x3c>
 800a3ae:	f100 0710 	add.w	r7, r0, #16
 800a3b2:	4629      	mov	r1, r5
 800a3b4:	42b1      	cmp	r1, r6
 800a3b6:	d334      	bcc.n	800a422 <rshift+0x96>
 800a3b8:	1a9b      	subs	r3, r3, r2
 800a3ba:	009b      	lsls	r3, r3, #2
 800a3bc:	1eea      	subs	r2, r5, #3
 800a3be:	4296      	cmp	r6, r2
 800a3c0:	bf38      	it	cc
 800a3c2:	2300      	movcc	r3, #0
 800a3c4:	4423      	add	r3, r4
 800a3c6:	e015      	b.n	800a3f4 <rshift+0x68>
 800a3c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a3cc:	f1c1 0820 	rsb	r8, r1, #32
 800a3d0:	40cf      	lsrs	r7, r1
 800a3d2:	f105 0e04 	add.w	lr, r5, #4
 800a3d6:	46a1      	mov	r9, r4
 800a3d8:	4576      	cmp	r6, lr
 800a3da:	46f4      	mov	ip, lr
 800a3dc:	d815      	bhi.n	800a40a <rshift+0x7e>
 800a3de:	1a9a      	subs	r2, r3, r2
 800a3e0:	0092      	lsls	r2, r2, #2
 800a3e2:	3a04      	subs	r2, #4
 800a3e4:	3501      	adds	r5, #1
 800a3e6:	42ae      	cmp	r6, r5
 800a3e8:	bf38      	it	cc
 800a3ea:	2200      	movcc	r2, #0
 800a3ec:	18a3      	adds	r3, r4, r2
 800a3ee:	50a7      	str	r7, [r4, r2]
 800a3f0:	b107      	cbz	r7, 800a3f4 <rshift+0x68>
 800a3f2:	3304      	adds	r3, #4
 800a3f4:	1b1a      	subs	r2, r3, r4
 800a3f6:	42a3      	cmp	r3, r4
 800a3f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a3fc:	bf08      	it	eq
 800a3fe:	2300      	moveq	r3, #0
 800a400:	6102      	str	r2, [r0, #16]
 800a402:	bf08      	it	eq
 800a404:	6143      	streq	r3, [r0, #20]
 800a406:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a40a:	f8dc c000 	ldr.w	ip, [ip]
 800a40e:	fa0c fc08 	lsl.w	ip, ip, r8
 800a412:	ea4c 0707 	orr.w	r7, ip, r7
 800a416:	f849 7b04 	str.w	r7, [r9], #4
 800a41a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a41e:	40cf      	lsrs	r7, r1
 800a420:	e7da      	b.n	800a3d8 <rshift+0x4c>
 800a422:	f851 cb04 	ldr.w	ip, [r1], #4
 800a426:	f847 cf04 	str.w	ip, [r7, #4]!
 800a42a:	e7c3      	b.n	800a3b4 <rshift+0x28>
 800a42c:	4623      	mov	r3, r4
 800a42e:	e7e1      	b.n	800a3f4 <rshift+0x68>

0800a430 <__hexdig_fun>:
 800a430:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a434:	2b09      	cmp	r3, #9
 800a436:	d802      	bhi.n	800a43e <__hexdig_fun+0xe>
 800a438:	3820      	subs	r0, #32
 800a43a:	b2c0      	uxtb	r0, r0
 800a43c:	4770      	bx	lr
 800a43e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a442:	2b05      	cmp	r3, #5
 800a444:	d801      	bhi.n	800a44a <__hexdig_fun+0x1a>
 800a446:	3847      	subs	r0, #71	; 0x47
 800a448:	e7f7      	b.n	800a43a <__hexdig_fun+0xa>
 800a44a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a44e:	2b05      	cmp	r3, #5
 800a450:	d801      	bhi.n	800a456 <__hexdig_fun+0x26>
 800a452:	3827      	subs	r0, #39	; 0x27
 800a454:	e7f1      	b.n	800a43a <__hexdig_fun+0xa>
 800a456:	2000      	movs	r0, #0
 800a458:	4770      	bx	lr
	...

0800a45c <__gethex>:
 800a45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a460:	ed2d 8b02 	vpush	{d8}
 800a464:	b089      	sub	sp, #36	; 0x24
 800a466:	ee08 0a10 	vmov	s16, r0
 800a46a:	9304      	str	r3, [sp, #16]
 800a46c:	4bb4      	ldr	r3, [pc, #720]	; (800a740 <__gethex+0x2e4>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	9301      	str	r3, [sp, #4]
 800a472:	4618      	mov	r0, r3
 800a474:	468b      	mov	fp, r1
 800a476:	4690      	mov	r8, r2
 800a478:	f7f5 feaa 	bl	80001d0 <strlen>
 800a47c:	9b01      	ldr	r3, [sp, #4]
 800a47e:	f8db 2000 	ldr.w	r2, [fp]
 800a482:	4403      	add	r3, r0
 800a484:	4682      	mov	sl, r0
 800a486:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a48a:	9305      	str	r3, [sp, #20]
 800a48c:	1c93      	adds	r3, r2, #2
 800a48e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a492:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a496:	32fe      	adds	r2, #254	; 0xfe
 800a498:	18d1      	adds	r1, r2, r3
 800a49a:	461f      	mov	r7, r3
 800a49c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a4a0:	9100      	str	r1, [sp, #0]
 800a4a2:	2830      	cmp	r0, #48	; 0x30
 800a4a4:	d0f8      	beq.n	800a498 <__gethex+0x3c>
 800a4a6:	f7ff ffc3 	bl	800a430 <__hexdig_fun>
 800a4aa:	4604      	mov	r4, r0
 800a4ac:	2800      	cmp	r0, #0
 800a4ae:	d13a      	bne.n	800a526 <__gethex+0xca>
 800a4b0:	9901      	ldr	r1, [sp, #4]
 800a4b2:	4652      	mov	r2, sl
 800a4b4:	4638      	mov	r0, r7
 800a4b6:	f001 fa33 	bl	800b920 <strncmp>
 800a4ba:	4605      	mov	r5, r0
 800a4bc:	2800      	cmp	r0, #0
 800a4be:	d168      	bne.n	800a592 <__gethex+0x136>
 800a4c0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a4c4:	eb07 060a 	add.w	r6, r7, sl
 800a4c8:	f7ff ffb2 	bl	800a430 <__hexdig_fun>
 800a4cc:	2800      	cmp	r0, #0
 800a4ce:	d062      	beq.n	800a596 <__gethex+0x13a>
 800a4d0:	4633      	mov	r3, r6
 800a4d2:	7818      	ldrb	r0, [r3, #0]
 800a4d4:	2830      	cmp	r0, #48	; 0x30
 800a4d6:	461f      	mov	r7, r3
 800a4d8:	f103 0301 	add.w	r3, r3, #1
 800a4dc:	d0f9      	beq.n	800a4d2 <__gethex+0x76>
 800a4de:	f7ff ffa7 	bl	800a430 <__hexdig_fun>
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	fab0 f480 	clz	r4, r0
 800a4e8:	0964      	lsrs	r4, r4, #5
 800a4ea:	4635      	mov	r5, r6
 800a4ec:	9300      	str	r3, [sp, #0]
 800a4ee:	463a      	mov	r2, r7
 800a4f0:	4616      	mov	r6, r2
 800a4f2:	3201      	adds	r2, #1
 800a4f4:	7830      	ldrb	r0, [r6, #0]
 800a4f6:	f7ff ff9b 	bl	800a430 <__hexdig_fun>
 800a4fa:	2800      	cmp	r0, #0
 800a4fc:	d1f8      	bne.n	800a4f0 <__gethex+0x94>
 800a4fe:	9901      	ldr	r1, [sp, #4]
 800a500:	4652      	mov	r2, sl
 800a502:	4630      	mov	r0, r6
 800a504:	f001 fa0c 	bl	800b920 <strncmp>
 800a508:	b980      	cbnz	r0, 800a52c <__gethex+0xd0>
 800a50a:	b94d      	cbnz	r5, 800a520 <__gethex+0xc4>
 800a50c:	eb06 050a 	add.w	r5, r6, sl
 800a510:	462a      	mov	r2, r5
 800a512:	4616      	mov	r6, r2
 800a514:	3201      	adds	r2, #1
 800a516:	7830      	ldrb	r0, [r6, #0]
 800a518:	f7ff ff8a 	bl	800a430 <__hexdig_fun>
 800a51c:	2800      	cmp	r0, #0
 800a51e:	d1f8      	bne.n	800a512 <__gethex+0xb6>
 800a520:	1bad      	subs	r5, r5, r6
 800a522:	00ad      	lsls	r5, r5, #2
 800a524:	e004      	b.n	800a530 <__gethex+0xd4>
 800a526:	2400      	movs	r4, #0
 800a528:	4625      	mov	r5, r4
 800a52a:	e7e0      	b.n	800a4ee <__gethex+0x92>
 800a52c:	2d00      	cmp	r5, #0
 800a52e:	d1f7      	bne.n	800a520 <__gethex+0xc4>
 800a530:	7833      	ldrb	r3, [r6, #0]
 800a532:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a536:	2b50      	cmp	r3, #80	; 0x50
 800a538:	d13b      	bne.n	800a5b2 <__gethex+0x156>
 800a53a:	7873      	ldrb	r3, [r6, #1]
 800a53c:	2b2b      	cmp	r3, #43	; 0x2b
 800a53e:	d02c      	beq.n	800a59a <__gethex+0x13e>
 800a540:	2b2d      	cmp	r3, #45	; 0x2d
 800a542:	d02e      	beq.n	800a5a2 <__gethex+0x146>
 800a544:	1c71      	adds	r1, r6, #1
 800a546:	f04f 0900 	mov.w	r9, #0
 800a54a:	7808      	ldrb	r0, [r1, #0]
 800a54c:	f7ff ff70 	bl	800a430 <__hexdig_fun>
 800a550:	1e43      	subs	r3, r0, #1
 800a552:	b2db      	uxtb	r3, r3
 800a554:	2b18      	cmp	r3, #24
 800a556:	d82c      	bhi.n	800a5b2 <__gethex+0x156>
 800a558:	f1a0 0210 	sub.w	r2, r0, #16
 800a55c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a560:	f7ff ff66 	bl	800a430 <__hexdig_fun>
 800a564:	1e43      	subs	r3, r0, #1
 800a566:	b2db      	uxtb	r3, r3
 800a568:	2b18      	cmp	r3, #24
 800a56a:	d91d      	bls.n	800a5a8 <__gethex+0x14c>
 800a56c:	f1b9 0f00 	cmp.w	r9, #0
 800a570:	d000      	beq.n	800a574 <__gethex+0x118>
 800a572:	4252      	negs	r2, r2
 800a574:	4415      	add	r5, r2
 800a576:	f8cb 1000 	str.w	r1, [fp]
 800a57a:	b1e4      	cbz	r4, 800a5b6 <__gethex+0x15a>
 800a57c:	9b00      	ldr	r3, [sp, #0]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	bf14      	ite	ne
 800a582:	2700      	movne	r7, #0
 800a584:	2706      	moveq	r7, #6
 800a586:	4638      	mov	r0, r7
 800a588:	b009      	add	sp, #36	; 0x24
 800a58a:	ecbd 8b02 	vpop	{d8}
 800a58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a592:	463e      	mov	r6, r7
 800a594:	4625      	mov	r5, r4
 800a596:	2401      	movs	r4, #1
 800a598:	e7ca      	b.n	800a530 <__gethex+0xd4>
 800a59a:	f04f 0900 	mov.w	r9, #0
 800a59e:	1cb1      	adds	r1, r6, #2
 800a5a0:	e7d3      	b.n	800a54a <__gethex+0xee>
 800a5a2:	f04f 0901 	mov.w	r9, #1
 800a5a6:	e7fa      	b.n	800a59e <__gethex+0x142>
 800a5a8:	230a      	movs	r3, #10
 800a5aa:	fb03 0202 	mla	r2, r3, r2, r0
 800a5ae:	3a10      	subs	r2, #16
 800a5b0:	e7d4      	b.n	800a55c <__gethex+0x100>
 800a5b2:	4631      	mov	r1, r6
 800a5b4:	e7df      	b.n	800a576 <__gethex+0x11a>
 800a5b6:	1bf3      	subs	r3, r6, r7
 800a5b8:	3b01      	subs	r3, #1
 800a5ba:	4621      	mov	r1, r4
 800a5bc:	2b07      	cmp	r3, #7
 800a5be:	dc0b      	bgt.n	800a5d8 <__gethex+0x17c>
 800a5c0:	ee18 0a10 	vmov	r0, s16
 800a5c4:	f000 fa7e 	bl	800aac4 <_Balloc>
 800a5c8:	4604      	mov	r4, r0
 800a5ca:	b940      	cbnz	r0, 800a5de <__gethex+0x182>
 800a5cc:	4b5d      	ldr	r3, [pc, #372]	; (800a744 <__gethex+0x2e8>)
 800a5ce:	4602      	mov	r2, r0
 800a5d0:	21de      	movs	r1, #222	; 0xde
 800a5d2:	485d      	ldr	r0, [pc, #372]	; (800a748 <__gethex+0x2ec>)
 800a5d4:	f001 f9c6 	bl	800b964 <__assert_func>
 800a5d8:	3101      	adds	r1, #1
 800a5da:	105b      	asrs	r3, r3, #1
 800a5dc:	e7ee      	b.n	800a5bc <__gethex+0x160>
 800a5de:	f100 0914 	add.w	r9, r0, #20
 800a5e2:	f04f 0b00 	mov.w	fp, #0
 800a5e6:	f1ca 0301 	rsb	r3, sl, #1
 800a5ea:	f8cd 9008 	str.w	r9, [sp, #8]
 800a5ee:	f8cd b000 	str.w	fp, [sp]
 800a5f2:	9306      	str	r3, [sp, #24]
 800a5f4:	42b7      	cmp	r7, r6
 800a5f6:	d340      	bcc.n	800a67a <__gethex+0x21e>
 800a5f8:	9802      	ldr	r0, [sp, #8]
 800a5fa:	9b00      	ldr	r3, [sp, #0]
 800a5fc:	f840 3b04 	str.w	r3, [r0], #4
 800a600:	eba0 0009 	sub.w	r0, r0, r9
 800a604:	1080      	asrs	r0, r0, #2
 800a606:	0146      	lsls	r6, r0, #5
 800a608:	6120      	str	r0, [r4, #16]
 800a60a:	4618      	mov	r0, r3
 800a60c:	f000 fb4c 	bl	800aca8 <__hi0bits>
 800a610:	1a30      	subs	r0, r6, r0
 800a612:	f8d8 6000 	ldr.w	r6, [r8]
 800a616:	42b0      	cmp	r0, r6
 800a618:	dd63      	ble.n	800a6e2 <__gethex+0x286>
 800a61a:	1b87      	subs	r7, r0, r6
 800a61c:	4639      	mov	r1, r7
 800a61e:	4620      	mov	r0, r4
 800a620:	f000 fef0 	bl	800b404 <__any_on>
 800a624:	4682      	mov	sl, r0
 800a626:	b1a8      	cbz	r0, 800a654 <__gethex+0x1f8>
 800a628:	1e7b      	subs	r3, r7, #1
 800a62a:	1159      	asrs	r1, r3, #5
 800a62c:	f003 021f 	and.w	r2, r3, #31
 800a630:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a634:	f04f 0a01 	mov.w	sl, #1
 800a638:	fa0a f202 	lsl.w	r2, sl, r2
 800a63c:	420a      	tst	r2, r1
 800a63e:	d009      	beq.n	800a654 <__gethex+0x1f8>
 800a640:	4553      	cmp	r3, sl
 800a642:	dd05      	ble.n	800a650 <__gethex+0x1f4>
 800a644:	1eb9      	subs	r1, r7, #2
 800a646:	4620      	mov	r0, r4
 800a648:	f000 fedc 	bl	800b404 <__any_on>
 800a64c:	2800      	cmp	r0, #0
 800a64e:	d145      	bne.n	800a6dc <__gethex+0x280>
 800a650:	f04f 0a02 	mov.w	sl, #2
 800a654:	4639      	mov	r1, r7
 800a656:	4620      	mov	r0, r4
 800a658:	f7ff fe98 	bl	800a38c <rshift>
 800a65c:	443d      	add	r5, r7
 800a65e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a662:	42ab      	cmp	r3, r5
 800a664:	da4c      	bge.n	800a700 <__gethex+0x2a4>
 800a666:	ee18 0a10 	vmov	r0, s16
 800a66a:	4621      	mov	r1, r4
 800a66c:	f000 fa6a 	bl	800ab44 <_Bfree>
 800a670:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a672:	2300      	movs	r3, #0
 800a674:	6013      	str	r3, [r2, #0]
 800a676:	27a3      	movs	r7, #163	; 0xa3
 800a678:	e785      	b.n	800a586 <__gethex+0x12a>
 800a67a:	1e73      	subs	r3, r6, #1
 800a67c:	9a05      	ldr	r2, [sp, #20]
 800a67e:	9303      	str	r3, [sp, #12]
 800a680:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a684:	4293      	cmp	r3, r2
 800a686:	d019      	beq.n	800a6bc <__gethex+0x260>
 800a688:	f1bb 0f20 	cmp.w	fp, #32
 800a68c:	d107      	bne.n	800a69e <__gethex+0x242>
 800a68e:	9b02      	ldr	r3, [sp, #8]
 800a690:	9a00      	ldr	r2, [sp, #0]
 800a692:	f843 2b04 	str.w	r2, [r3], #4
 800a696:	9302      	str	r3, [sp, #8]
 800a698:	2300      	movs	r3, #0
 800a69a:	9300      	str	r3, [sp, #0]
 800a69c:	469b      	mov	fp, r3
 800a69e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a6a2:	f7ff fec5 	bl	800a430 <__hexdig_fun>
 800a6a6:	9b00      	ldr	r3, [sp, #0]
 800a6a8:	f000 000f 	and.w	r0, r0, #15
 800a6ac:	fa00 f00b 	lsl.w	r0, r0, fp
 800a6b0:	4303      	orrs	r3, r0
 800a6b2:	9300      	str	r3, [sp, #0]
 800a6b4:	f10b 0b04 	add.w	fp, fp, #4
 800a6b8:	9b03      	ldr	r3, [sp, #12]
 800a6ba:	e00d      	b.n	800a6d8 <__gethex+0x27c>
 800a6bc:	9b03      	ldr	r3, [sp, #12]
 800a6be:	9a06      	ldr	r2, [sp, #24]
 800a6c0:	4413      	add	r3, r2
 800a6c2:	42bb      	cmp	r3, r7
 800a6c4:	d3e0      	bcc.n	800a688 <__gethex+0x22c>
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	9901      	ldr	r1, [sp, #4]
 800a6ca:	9307      	str	r3, [sp, #28]
 800a6cc:	4652      	mov	r2, sl
 800a6ce:	f001 f927 	bl	800b920 <strncmp>
 800a6d2:	9b07      	ldr	r3, [sp, #28]
 800a6d4:	2800      	cmp	r0, #0
 800a6d6:	d1d7      	bne.n	800a688 <__gethex+0x22c>
 800a6d8:	461e      	mov	r6, r3
 800a6da:	e78b      	b.n	800a5f4 <__gethex+0x198>
 800a6dc:	f04f 0a03 	mov.w	sl, #3
 800a6e0:	e7b8      	b.n	800a654 <__gethex+0x1f8>
 800a6e2:	da0a      	bge.n	800a6fa <__gethex+0x29e>
 800a6e4:	1a37      	subs	r7, r6, r0
 800a6e6:	4621      	mov	r1, r4
 800a6e8:	ee18 0a10 	vmov	r0, s16
 800a6ec:	463a      	mov	r2, r7
 800a6ee:	f000 fc45 	bl	800af7c <__lshift>
 800a6f2:	1bed      	subs	r5, r5, r7
 800a6f4:	4604      	mov	r4, r0
 800a6f6:	f100 0914 	add.w	r9, r0, #20
 800a6fa:	f04f 0a00 	mov.w	sl, #0
 800a6fe:	e7ae      	b.n	800a65e <__gethex+0x202>
 800a700:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a704:	42a8      	cmp	r0, r5
 800a706:	dd72      	ble.n	800a7ee <__gethex+0x392>
 800a708:	1b45      	subs	r5, r0, r5
 800a70a:	42ae      	cmp	r6, r5
 800a70c:	dc36      	bgt.n	800a77c <__gethex+0x320>
 800a70e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a712:	2b02      	cmp	r3, #2
 800a714:	d02a      	beq.n	800a76c <__gethex+0x310>
 800a716:	2b03      	cmp	r3, #3
 800a718:	d02c      	beq.n	800a774 <__gethex+0x318>
 800a71a:	2b01      	cmp	r3, #1
 800a71c:	d11c      	bne.n	800a758 <__gethex+0x2fc>
 800a71e:	42ae      	cmp	r6, r5
 800a720:	d11a      	bne.n	800a758 <__gethex+0x2fc>
 800a722:	2e01      	cmp	r6, #1
 800a724:	d112      	bne.n	800a74c <__gethex+0x2f0>
 800a726:	9a04      	ldr	r2, [sp, #16]
 800a728:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a72c:	6013      	str	r3, [r2, #0]
 800a72e:	2301      	movs	r3, #1
 800a730:	6123      	str	r3, [r4, #16]
 800a732:	f8c9 3000 	str.w	r3, [r9]
 800a736:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a738:	2762      	movs	r7, #98	; 0x62
 800a73a:	601c      	str	r4, [r3, #0]
 800a73c:	e723      	b.n	800a586 <__gethex+0x12a>
 800a73e:	bf00      	nop
 800a740:	0800f680 	.word	0x0800f680
 800a744:	0800f608 	.word	0x0800f608
 800a748:	0800f619 	.word	0x0800f619
 800a74c:	1e71      	subs	r1, r6, #1
 800a74e:	4620      	mov	r0, r4
 800a750:	f000 fe58 	bl	800b404 <__any_on>
 800a754:	2800      	cmp	r0, #0
 800a756:	d1e6      	bne.n	800a726 <__gethex+0x2ca>
 800a758:	ee18 0a10 	vmov	r0, s16
 800a75c:	4621      	mov	r1, r4
 800a75e:	f000 f9f1 	bl	800ab44 <_Bfree>
 800a762:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a764:	2300      	movs	r3, #0
 800a766:	6013      	str	r3, [r2, #0]
 800a768:	2750      	movs	r7, #80	; 0x50
 800a76a:	e70c      	b.n	800a586 <__gethex+0x12a>
 800a76c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d1f2      	bne.n	800a758 <__gethex+0x2fc>
 800a772:	e7d8      	b.n	800a726 <__gethex+0x2ca>
 800a774:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a776:	2b00      	cmp	r3, #0
 800a778:	d1d5      	bne.n	800a726 <__gethex+0x2ca>
 800a77a:	e7ed      	b.n	800a758 <__gethex+0x2fc>
 800a77c:	1e6f      	subs	r7, r5, #1
 800a77e:	f1ba 0f00 	cmp.w	sl, #0
 800a782:	d131      	bne.n	800a7e8 <__gethex+0x38c>
 800a784:	b127      	cbz	r7, 800a790 <__gethex+0x334>
 800a786:	4639      	mov	r1, r7
 800a788:	4620      	mov	r0, r4
 800a78a:	f000 fe3b 	bl	800b404 <__any_on>
 800a78e:	4682      	mov	sl, r0
 800a790:	117b      	asrs	r3, r7, #5
 800a792:	2101      	movs	r1, #1
 800a794:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a798:	f007 071f 	and.w	r7, r7, #31
 800a79c:	fa01 f707 	lsl.w	r7, r1, r7
 800a7a0:	421f      	tst	r7, r3
 800a7a2:	4629      	mov	r1, r5
 800a7a4:	4620      	mov	r0, r4
 800a7a6:	bf18      	it	ne
 800a7a8:	f04a 0a02 	orrne.w	sl, sl, #2
 800a7ac:	1b76      	subs	r6, r6, r5
 800a7ae:	f7ff fded 	bl	800a38c <rshift>
 800a7b2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a7b6:	2702      	movs	r7, #2
 800a7b8:	f1ba 0f00 	cmp.w	sl, #0
 800a7bc:	d048      	beq.n	800a850 <__gethex+0x3f4>
 800a7be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a7c2:	2b02      	cmp	r3, #2
 800a7c4:	d015      	beq.n	800a7f2 <__gethex+0x396>
 800a7c6:	2b03      	cmp	r3, #3
 800a7c8:	d017      	beq.n	800a7fa <__gethex+0x39e>
 800a7ca:	2b01      	cmp	r3, #1
 800a7cc:	d109      	bne.n	800a7e2 <__gethex+0x386>
 800a7ce:	f01a 0f02 	tst.w	sl, #2
 800a7d2:	d006      	beq.n	800a7e2 <__gethex+0x386>
 800a7d4:	f8d9 0000 	ldr.w	r0, [r9]
 800a7d8:	ea4a 0a00 	orr.w	sl, sl, r0
 800a7dc:	f01a 0f01 	tst.w	sl, #1
 800a7e0:	d10e      	bne.n	800a800 <__gethex+0x3a4>
 800a7e2:	f047 0710 	orr.w	r7, r7, #16
 800a7e6:	e033      	b.n	800a850 <__gethex+0x3f4>
 800a7e8:	f04f 0a01 	mov.w	sl, #1
 800a7ec:	e7d0      	b.n	800a790 <__gethex+0x334>
 800a7ee:	2701      	movs	r7, #1
 800a7f0:	e7e2      	b.n	800a7b8 <__gethex+0x35c>
 800a7f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7f4:	f1c3 0301 	rsb	r3, r3, #1
 800a7f8:	9315      	str	r3, [sp, #84]	; 0x54
 800a7fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d0f0      	beq.n	800a7e2 <__gethex+0x386>
 800a800:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a804:	f104 0314 	add.w	r3, r4, #20
 800a808:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a80c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a810:	f04f 0c00 	mov.w	ip, #0
 800a814:	4618      	mov	r0, r3
 800a816:	f853 2b04 	ldr.w	r2, [r3], #4
 800a81a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a81e:	d01c      	beq.n	800a85a <__gethex+0x3fe>
 800a820:	3201      	adds	r2, #1
 800a822:	6002      	str	r2, [r0, #0]
 800a824:	2f02      	cmp	r7, #2
 800a826:	f104 0314 	add.w	r3, r4, #20
 800a82a:	d13f      	bne.n	800a8ac <__gethex+0x450>
 800a82c:	f8d8 2000 	ldr.w	r2, [r8]
 800a830:	3a01      	subs	r2, #1
 800a832:	42b2      	cmp	r2, r6
 800a834:	d10a      	bne.n	800a84c <__gethex+0x3f0>
 800a836:	1171      	asrs	r1, r6, #5
 800a838:	2201      	movs	r2, #1
 800a83a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a83e:	f006 061f 	and.w	r6, r6, #31
 800a842:	fa02 f606 	lsl.w	r6, r2, r6
 800a846:	421e      	tst	r6, r3
 800a848:	bf18      	it	ne
 800a84a:	4617      	movne	r7, r2
 800a84c:	f047 0720 	orr.w	r7, r7, #32
 800a850:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a852:	601c      	str	r4, [r3, #0]
 800a854:	9b04      	ldr	r3, [sp, #16]
 800a856:	601d      	str	r5, [r3, #0]
 800a858:	e695      	b.n	800a586 <__gethex+0x12a>
 800a85a:	4299      	cmp	r1, r3
 800a85c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a860:	d8d8      	bhi.n	800a814 <__gethex+0x3b8>
 800a862:	68a3      	ldr	r3, [r4, #8]
 800a864:	459b      	cmp	fp, r3
 800a866:	db19      	blt.n	800a89c <__gethex+0x440>
 800a868:	6861      	ldr	r1, [r4, #4]
 800a86a:	ee18 0a10 	vmov	r0, s16
 800a86e:	3101      	adds	r1, #1
 800a870:	f000 f928 	bl	800aac4 <_Balloc>
 800a874:	4681      	mov	r9, r0
 800a876:	b918      	cbnz	r0, 800a880 <__gethex+0x424>
 800a878:	4b1a      	ldr	r3, [pc, #104]	; (800a8e4 <__gethex+0x488>)
 800a87a:	4602      	mov	r2, r0
 800a87c:	2184      	movs	r1, #132	; 0x84
 800a87e:	e6a8      	b.n	800a5d2 <__gethex+0x176>
 800a880:	6922      	ldr	r2, [r4, #16]
 800a882:	3202      	adds	r2, #2
 800a884:	f104 010c 	add.w	r1, r4, #12
 800a888:	0092      	lsls	r2, r2, #2
 800a88a:	300c      	adds	r0, #12
 800a88c:	f000 f90c 	bl	800aaa8 <memcpy>
 800a890:	4621      	mov	r1, r4
 800a892:	ee18 0a10 	vmov	r0, s16
 800a896:	f000 f955 	bl	800ab44 <_Bfree>
 800a89a:	464c      	mov	r4, r9
 800a89c:	6923      	ldr	r3, [r4, #16]
 800a89e:	1c5a      	adds	r2, r3, #1
 800a8a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a8a4:	6122      	str	r2, [r4, #16]
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	615a      	str	r2, [r3, #20]
 800a8aa:	e7bb      	b.n	800a824 <__gethex+0x3c8>
 800a8ac:	6922      	ldr	r2, [r4, #16]
 800a8ae:	455a      	cmp	r2, fp
 800a8b0:	dd0b      	ble.n	800a8ca <__gethex+0x46e>
 800a8b2:	2101      	movs	r1, #1
 800a8b4:	4620      	mov	r0, r4
 800a8b6:	f7ff fd69 	bl	800a38c <rshift>
 800a8ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a8be:	3501      	adds	r5, #1
 800a8c0:	42ab      	cmp	r3, r5
 800a8c2:	f6ff aed0 	blt.w	800a666 <__gethex+0x20a>
 800a8c6:	2701      	movs	r7, #1
 800a8c8:	e7c0      	b.n	800a84c <__gethex+0x3f0>
 800a8ca:	f016 061f 	ands.w	r6, r6, #31
 800a8ce:	d0fa      	beq.n	800a8c6 <__gethex+0x46a>
 800a8d0:	4453      	add	r3, sl
 800a8d2:	f1c6 0620 	rsb	r6, r6, #32
 800a8d6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a8da:	f000 f9e5 	bl	800aca8 <__hi0bits>
 800a8de:	42b0      	cmp	r0, r6
 800a8e0:	dbe7      	blt.n	800a8b2 <__gethex+0x456>
 800a8e2:	e7f0      	b.n	800a8c6 <__gethex+0x46a>
 800a8e4:	0800f608 	.word	0x0800f608

0800a8e8 <L_shift>:
 800a8e8:	f1c2 0208 	rsb	r2, r2, #8
 800a8ec:	0092      	lsls	r2, r2, #2
 800a8ee:	b570      	push	{r4, r5, r6, lr}
 800a8f0:	f1c2 0620 	rsb	r6, r2, #32
 800a8f4:	6843      	ldr	r3, [r0, #4]
 800a8f6:	6804      	ldr	r4, [r0, #0]
 800a8f8:	fa03 f506 	lsl.w	r5, r3, r6
 800a8fc:	432c      	orrs	r4, r5
 800a8fe:	40d3      	lsrs	r3, r2
 800a900:	6004      	str	r4, [r0, #0]
 800a902:	f840 3f04 	str.w	r3, [r0, #4]!
 800a906:	4288      	cmp	r0, r1
 800a908:	d3f4      	bcc.n	800a8f4 <L_shift+0xc>
 800a90a:	bd70      	pop	{r4, r5, r6, pc}

0800a90c <__match>:
 800a90c:	b530      	push	{r4, r5, lr}
 800a90e:	6803      	ldr	r3, [r0, #0]
 800a910:	3301      	adds	r3, #1
 800a912:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a916:	b914      	cbnz	r4, 800a91e <__match+0x12>
 800a918:	6003      	str	r3, [r0, #0]
 800a91a:	2001      	movs	r0, #1
 800a91c:	bd30      	pop	{r4, r5, pc}
 800a91e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a922:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a926:	2d19      	cmp	r5, #25
 800a928:	bf98      	it	ls
 800a92a:	3220      	addls	r2, #32
 800a92c:	42a2      	cmp	r2, r4
 800a92e:	d0f0      	beq.n	800a912 <__match+0x6>
 800a930:	2000      	movs	r0, #0
 800a932:	e7f3      	b.n	800a91c <__match+0x10>

0800a934 <__hexnan>:
 800a934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a938:	680b      	ldr	r3, [r1, #0]
 800a93a:	115e      	asrs	r6, r3, #5
 800a93c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a940:	f013 031f 	ands.w	r3, r3, #31
 800a944:	b087      	sub	sp, #28
 800a946:	bf18      	it	ne
 800a948:	3604      	addne	r6, #4
 800a94a:	2500      	movs	r5, #0
 800a94c:	1f37      	subs	r7, r6, #4
 800a94e:	4690      	mov	r8, r2
 800a950:	6802      	ldr	r2, [r0, #0]
 800a952:	9301      	str	r3, [sp, #4]
 800a954:	4682      	mov	sl, r0
 800a956:	f846 5c04 	str.w	r5, [r6, #-4]
 800a95a:	46b9      	mov	r9, r7
 800a95c:	463c      	mov	r4, r7
 800a95e:	9502      	str	r5, [sp, #8]
 800a960:	46ab      	mov	fp, r5
 800a962:	7851      	ldrb	r1, [r2, #1]
 800a964:	1c53      	adds	r3, r2, #1
 800a966:	9303      	str	r3, [sp, #12]
 800a968:	b341      	cbz	r1, 800a9bc <__hexnan+0x88>
 800a96a:	4608      	mov	r0, r1
 800a96c:	9205      	str	r2, [sp, #20]
 800a96e:	9104      	str	r1, [sp, #16]
 800a970:	f7ff fd5e 	bl	800a430 <__hexdig_fun>
 800a974:	2800      	cmp	r0, #0
 800a976:	d14f      	bne.n	800aa18 <__hexnan+0xe4>
 800a978:	9904      	ldr	r1, [sp, #16]
 800a97a:	9a05      	ldr	r2, [sp, #20]
 800a97c:	2920      	cmp	r1, #32
 800a97e:	d818      	bhi.n	800a9b2 <__hexnan+0x7e>
 800a980:	9b02      	ldr	r3, [sp, #8]
 800a982:	459b      	cmp	fp, r3
 800a984:	dd13      	ble.n	800a9ae <__hexnan+0x7a>
 800a986:	454c      	cmp	r4, r9
 800a988:	d206      	bcs.n	800a998 <__hexnan+0x64>
 800a98a:	2d07      	cmp	r5, #7
 800a98c:	dc04      	bgt.n	800a998 <__hexnan+0x64>
 800a98e:	462a      	mov	r2, r5
 800a990:	4649      	mov	r1, r9
 800a992:	4620      	mov	r0, r4
 800a994:	f7ff ffa8 	bl	800a8e8 <L_shift>
 800a998:	4544      	cmp	r4, r8
 800a99a:	d950      	bls.n	800aa3e <__hexnan+0x10a>
 800a99c:	2300      	movs	r3, #0
 800a99e:	f1a4 0904 	sub.w	r9, r4, #4
 800a9a2:	f844 3c04 	str.w	r3, [r4, #-4]
 800a9a6:	f8cd b008 	str.w	fp, [sp, #8]
 800a9aa:	464c      	mov	r4, r9
 800a9ac:	461d      	mov	r5, r3
 800a9ae:	9a03      	ldr	r2, [sp, #12]
 800a9b0:	e7d7      	b.n	800a962 <__hexnan+0x2e>
 800a9b2:	2929      	cmp	r1, #41	; 0x29
 800a9b4:	d156      	bne.n	800aa64 <__hexnan+0x130>
 800a9b6:	3202      	adds	r2, #2
 800a9b8:	f8ca 2000 	str.w	r2, [sl]
 800a9bc:	f1bb 0f00 	cmp.w	fp, #0
 800a9c0:	d050      	beq.n	800aa64 <__hexnan+0x130>
 800a9c2:	454c      	cmp	r4, r9
 800a9c4:	d206      	bcs.n	800a9d4 <__hexnan+0xa0>
 800a9c6:	2d07      	cmp	r5, #7
 800a9c8:	dc04      	bgt.n	800a9d4 <__hexnan+0xa0>
 800a9ca:	462a      	mov	r2, r5
 800a9cc:	4649      	mov	r1, r9
 800a9ce:	4620      	mov	r0, r4
 800a9d0:	f7ff ff8a 	bl	800a8e8 <L_shift>
 800a9d4:	4544      	cmp	r4, r8
 800a9d6:	d934      	bls.n	800aa42 <__hexnan+0x10e>
 800a9d8:	f1a8 0204 	sub.w	r2, r8, #4
 800a9dc:	4623      	mov	r3, r4
 800a9de:	f853 1b04 	ldr.w	r1, [r3], #4
 800a9e2:	f842 1f04 	str.w	r1, [r2, #4]!
 800a9e6:	429f      	cmp	r7, r3
 800a9e8:	d2f9      	bcs.n	800a9de <__hexnan+0xaa>
 800a9ea:	1b3b      	subs	r3, r7, r4
 800a9ec:	f023 0303 	bic.w	r3, r3, #3
 800a9f0:	3304      	adds	r3, #4
 800a9f2:	3401      	adds	r4, #1
 800a9f4:	3e03      	subs	r6, #3
 800a9f6:	42b4      	cmp	r4, r6
 800a9f8:	bf88      	it	hi
 800a9fa:	2304      	movhi	r3, #4
 800a9fc:	4443      	add	r3, r8
 800a9fe:	2200      	movs	r2, #0
 800aa00:	f843 2b04 	str.w	r2, [r3], #4
 800aa04:	429f      	cmp	r7, r3
 800aa06:	d2fb      	bcs.n	800aa00 <__hexnan+0xcc>
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	b91b      	cbnz	r3, 800aa14 <__hexnan+0xe0>
 800aa0c:	4547      	cmp	r7, r8
 800aa0e:	d127      	bne.n	800aa60 <__hexnan+0x12c>
 800aa10:	2301      	movs	r3, #1
 800aa12:	603b      	str	r3, [r7, #0]
 800aa14:	2005      	movs	r0, #5
 800aa16:	e026      	b.n	800aa66 <__hexnan+0x132>
 800aa18:	3501      	adds	r5, #1
 800aa1a:	2d08      	cmp	r5, #8
 800aa1c:	f10b 0b01 	add.w	fp, fp, #1
 800aa20:	dd06      	ble.n	800aa30 <__hexnan+0xfc>
 800aa22:	4544      	cmp	r4, r8
 800aa24:	d9c3      	bls.n	800a9ae <__hexnan+0x7a>
 800aa26:	2300      	movs	r3, #0
 800aa28:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa2c:	2501      	movs	r5, #1
 800aa2e:	3c04      	subs	r4, #4
 800aa30:	6822      	ldr	r2, [r4, #0]
 800aa32:	f000 000f 	and.w	r0, r0, #15
 800aa36:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800aa3a:	6022      	str	r2, [r4, #0]
 800aa3c:	e7b7      	b.n	800a9ae <__hexnan+0x7a>
 800aa3e:	2508      	movs	r5, #8
 800aa40:	e7b5      	b.n	800a9ae <__hexnan+0x7a>
 800aa42:	9b01      	ldr	r3, [sp, #4]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d0df      	beq.n	800aa08 <__hexnan+0xd4>
 800aa48:	f04f 32ff 	mov.w	r2, #4294967295
 800aa4c:	f1c3 0320 	rsb	r3, r3, #32
 800aa50:	fa22 f303 	lsr.w	r3, r2, r3
 800aa54:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800aa58:	401a      	ands	r2, r3
 800aa5a:	f846 2c04 	str.w	r2, [r6, #-4]
 800aa5e:	e7d3      	b.n	800aa08 <__hexnan+0xd4>
 800aa60:	3f04      	subs	r7, #4
 800aa62:	e7d1      	b.n	800aa08 <__hexnan+0xd4>
 800aa64:	2004      	movs	r0, #4
 800aa66:	b007      	add	sp, #28
 800aa68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aa6c <_localeconv_r>:
 800aa6c:	4800      	ldr	r0, [pc, #0]	; (800aa70 <_localeconv_r+0x4>)
 800aa6e:	4770      	bx	lr
 800aa70:	20000164 	.word	0x20000164

0800aa74 <malloc>:
 800aa74:	4b02      	ldr	r3, [pc, #8]	; (800aa80 <malloc+0xc>)
 800aa76:	4601      	mov	r1, r0
 800aa78:	6818      	ldr	r0, [r3, #0]
 800aa7a:	f000 bd67 	b.w	800b54c <_malloc_r>
 800aa7e:	bf00      	nop
 800aa80:	2000000c 	.word	0x2000000c

0800aa84 <__ascii_mbtowc>:
 800aa84:	b082      	sub	sp, #8
 800aa86:	b901      	cbnz	r1, 800aa8a <__ascii_mbtowc+0x6>
 800aa88:	a901      	add	r1, sp, #4
 800aa8a:	b142      	cbz	r2, 800aa9e <__ascii_mbtowc+0x1a>
 800aa8c:	b14b      	cbz	r3, 800aaa2 <__ascii_mbtowc+0x1e>
 800aa8e:	7813      	ldrb	r3, [r2, #0]
 800aa90:	600b      	str	r3, [r1, #0]
 800aa92:	7812      	ldrb	r2, [r2, #0]
 800aa94:	1e10      	subs	r0, r2, #0
 800aa96:	bf18      	it	ne
 800aa98:	2001      	movne	r0, #1
 800aa9a:	b002      	add	sp, #8
 800aa9c:	4770      	bx	lr
 800aa9e:	4610      	mov	r0, r2
 800aaa0:	e7fb      	b.n	800aa9a <__ascii_mbtowc+0x16>
 800aaa2:	f06f 0001 	mvn.w	r0, #1
 800aaa6:	e7f8      	b.n	800aa9a <__ascii_mbtowc+0x16>

0800aaa8 <memcpy>:
 800aaa8:	440a      	add	r2, r1
 800aaaa:	4291      	cmp	r1, r2
 800aaac:	f100 33ff 	add.w	r3, r0, #4294967295
 800aab0:	d100      	bne.n	800aab4 <memcpy+0xc>
 800aab2:	4770      	bx	lr
 800aab4:	b510      	push	{r4, lr}
 800aab6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aaba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aabe:	4291      	cmp	r1, r2
 800aac0:	d1f9      	bne.n	800aab6 <memcpy+0xe>
 800aac2:	bd10      	pop	{r4, pc}

0800aac4 <_Balloc>:
 800aac4:	b570      	push	{r4, r5, r6, lr}
 800aac6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aac8:	4604      	mov	r4, r0
 800aaca:	460d      	mov	r5, r1
 800aacc:	b976      	cbnz	r6, 800aaec <_Balloc+0x28>
 800aace:	2010      	movs	r0, #16
 800aad0:	f7ff ffd0 	bl	800aa74 <malloc>
 800aad4:	4602      	mov	r2, r0
 800aad6:	6260      	str	r0, [r4, #36]	; 0x24
 800aad8:	b920      	cbnz	r0, 800aae4 <_Balloc+0x20>
 800aada:	4b18      	ldr	r3, [pc, #96]	; (800ab3c <_Balloc+0x78>)
 800aadc:	4818      	ldr	r0, [pc, #96]	; (800ab40 <_Balloc+0x7c>)
 800aade:	2166      	movs	r1, #102	; 0x66
 800aae0:	f000 ff40 	bl	800b964 <__assert_func>
 800aae4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aae8:	6006      	str	r6, [r0, #0]
 800aaea:	60c6      	str	r6, [r0, #12]
 800aaec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800aaee:	68f3      	ldr	r3, [r6, #12]
 800aaf0:	b183      	cbz	r3, 800ab14 <_Balloc+0x50>
 800aaf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aaf4:	68db      	ldr	r3, [r3, #12]
 800aaf6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aafa:	b9b8      	cbnz	r0, 800ab2c <_Balloc+0x68>
 800aafc:	2101      	movs	r1, #1
 800aafe:	fa01 f605 	lsl.w	r6, r1, r5
 800ab02:	1d72      	adds	r2, r6, #5
 800ab04:	0092      	lsls	r2, r2, #2
 800ab06:	4620      	mov	r0, r4
 800ab08:	f000 fc9d 	bl	800b446 <_calloc_r>
 800ab0c:	b160      	cbz	r0, 800ab28 <_Balloc+0x64>
 800ab0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ab12:	e00e      	b.n	800ab32 <_Balloc+0x6e>
 800ab14:	2221      	movs	r2, #33	; 0x21
 800ab16:	2104      	movs	r1, #4
 800ab18:	4620      	mov	r0, r4
 800ab1a:	f000 fc94 	bl	800b446 <_calloc_r>
 800ab1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab20:	60f0      	str	r0, [r6, #12]
 800ab22:	68db      	ldr	r3, [r3, #12]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d1e4      	bne.n	800aaf2 <_Balloc+0x2e>
 800ab28:	2000      	movs	r0, #0
 800ab2a:	bd70      	pop	{r4, r5, r6, pc}
 800ab2c:	6802      	ldr	r2, [r0, #0]
 800ab2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ab32:	2300      	movs	r3, #0
 800ab34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab38:	e7f7      	b.n	800ab2a <_Balloc+0x66>
 800ab3a:	bf00      	nop
 800ab3c:	0800f596 	.word	0x0800f596
 800ab40:	0800f694 	.word	0x0800f694

0800ab44 <_Bfree>:
 800ab44:	b570      	push	{r4, r5, r6, lr}
 800ab46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ab48:	4605      	mov	r5, r0
 800ab4a:	460c      	mov	r4, r1
 800ab4c:	b976      	cbnz	r6, 800ab6c <_Bfree+0x28>
 800ab4e:	2010      	movs	r0, #16
 800ab50:	f7ff ff90 	bl	800aa74 <malloc>
 800ab54:	4602      	mov	r2, r0
 800ab56:	6268      	str	r0, [r5, #36]	; 0x24
 800ab58:	b920      	cbnz	r0, 800ab64 <_Bfree+0x20>
 800ab5a:	4b09      	ldr	r3, [pc, #36]	; (800ab80 <_Bfree+0x3c>)
 800ab5c:	4809      	ldr	r0, [pc, #36]	; (800ab84 <_Bfree+0x40>)
 800ab5e:	218a      	movs	r1, #138	; 0x8a
 800ab60:	f000 ff00 	bl	800b964 <__assert_func>
 800ab64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab68:	6006      	str	r6, [r0, #0]
 800ab6a:	60c6      	str	r6, [r0, #12]
 800ab6c:	b13c      	cbz	r4, 800ab7e <_Bfree+0x3a>
 800ab6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ab70:	6862      	ldr	r2, [r4, #4]
 800ab72:	68db      	ldr	r3, [r3, #12]
 800ab74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab78:	6021      	str	r1, [r4, #0]
 800ab7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ab7e:	bd70      	pop	{r4, r5, r6, pc}
 800ab80:	0800f596 	.word	0x0800f596
 800ab84:	0800f694 	.word	0x0800f694

0800ab88 <__multadd>:
 800ab88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab8c:	690d      	ldr	r5, [r1, #16]
 800ab8e:	4607      	mov	r7, r0
 800ab90:	460c      	mov	r4, r1
 800ab92:	461e      	mov	r6, r3
 800ab94:	f101 0c14 	add.w	ip, r1, #20
 800ab98:	2000      	movs	r0, #0
 800ab9a:	f8dc 3000 	ldr.w	r3, [ip]
 800ab9e:	b299      	uxth	r1, r3
 800aba0:	fb02 6101 	mla	r1, r2, r1, r6
 800aba4:	0c1e      	lsrs	r6, r3, #16
 800aba6:	0c0b      	lsrs	r3, r1, #16
 800aba8:	fb02 3306 	mla	r3, r2, r6, r3
 800abac:	b289      	uxth	r1, r1
 800abae:	3001      	adds	r0, #1
 800abb0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800abb4:	4285      	cmp	r5, r0
 800abb6:	f84c 1b04 	str.w	r1, [ip], #4
 800abba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800abbe:	dcec      	bgt.n	800ab9a <__multadd+0x12>
 800abc0:	b30e      	cbz	r6, 800ac06 <__multadd+0x7e>
 800abc2:	68a3      	ldr	r3, [r4, #8]
 800abc4:	42ab      	cmp	r3, r5
 800abc6:	dc19      	bgt.n	800abfc <__multadd+0x74>
 800abc8:	6861      	ldr	r1, [r4, #4]
 800abca:	4638      	mov	r0, r7
 800abcc:	3101      	adds	r1, #1
 800abce:	f7ff ff79 	bl	800aac4 <_Balloc>
 800abd2:	4680      	mov	r8, r0
 800abd4:	b928      	cbnz	r0, 800abe2 <__multadd+0x5a>
 800abd6:	4602      	mov	r2, r0
 800abd8:	4b0c      	ldr	r3, [pc, #48]	; (800ac0c <__multadd+0x84>)
 800abda:	480d      	ldr	r0, [pc, #52]	; (800ac10 <__multadd+0x88>)
 800abdc:	21b5      	movs	r1, #181	; 0xb5
 800abde:	f000 fec1 	bl	800b964 <__assert_func>
 800abe2:	6922      	ldr	r2, [r4, #16]
 800abe4:	3202      	adds	r2, #2
 800abe6:	f104 010c 	add.w	r1, r4, #12
 800abea:	0092      	lsls	r2, r2, #2
 800abec:	300c      	adds	r0, #12
 800abee:	f7ff ff5b 	bl	800aaa8 <memcpy>
 800abf2:	4621      	mov	r1, r4
 800abf4:	4638      	mov	r0, r7
 800abf6:	f7ff ffa5 	bl	800ab44 <_Bfree>
 800abfa:	4644      	mov	r4, r8
 800abfc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ac00:	3501      	adds	r5, #1
 800ac02:	615e      	str	r6, [r3, #20]
 800ac04:	6125      	str	r5, [r4, #16]
 800ac06:	4620      	mov	r0, r4
 800ac08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac0c:	0800f608 	.word	0x0800f608
 800ac10:	0800f694 	.word	0x0800f694

0800ac14 <__s2b>:
 800ac14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac18:	460c      	mov	r4, r1
 800ac1a:	4615      	mov	r5, r2
 800ac1c:	461f      	mov	r7, r3
 800ac1e:	2209      	movs	r2, #9
 800ac20:	3308      	adds	r3, #8
 800ac22:	4606      	mov	r6, r0
 800ac24:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac28:	2100      	movs	r1, #0
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	db09      	blt.n	800ac44 <__s2b+0x30>
 800ac30:	4630      	mov	r0, r6
 800ac32:	f7ff ff47 	bl	800aac4 <_Balloc>
 800ac36:	b940      	cbnz	r0, 800ac4a <__s2b+0x36>
 800ac38:	4602      	mov	r2, r0
 800ac3a:	4b19      	ldr	r3, [pc, #100]	; (800aca0 <__s2b+0x8c>)
 800ac3c:	4819      	ldr	r0, [pc, #100]	; (800aca4 <__s2b+0x90>)
 800ac3e:	21ce      	movs	r1, #206	; 0xce
 800ac40:	f000 fe90 	bl	800b964 <__assert_func>
 800ac44:	0052      	lsls	r2, r2, #1
 800ac46:	3101      	adds	r1, #1
 800ac48:	e7f0      	b.n	800ac2c <__s2b+0x18>
 800ac4a:	9b08      	ldr	r3, [sp, #32]
 800ac4c:	6143      	str	r3, [r0, #20]
 800ac4e:	2d09      	cmp	r5, #9
 800ac50:	f04f 0301 	mov.w	r3, #1
 800ac54:	6103      	str	r3, [r0, #16]
 800ac56:	dd16      	ble.n	800ac86 <__s2b+0x72>
 800ac58:	f104 0909 	add.w	r9, r4, #9
 800ac5c:	46c8      	mov	r8, r9
 800ac5e:	442c      	add	r4, r5
 800ac60:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ac64:	4601      	mov	r1, r0
 800ac66:	3b30      	subs	r3, #48	; 0x30
 800ac68:	220a      	movs	r2, #10
 800ac6a:	4630      	mov	r0, r6
 800ac6c:	f7ff ff8c 	bl	800ab88 <__multadd>
 800ac70:	45a0      	cmp	r8, r4
 800ac72:	d1f5      	bne.n	800ac60 <__s2b+0x4c>
 800ac74:	f1a5 0408 	sub.w	r4, r5, #8
 800ac78:	444c      	add	r4, r9
 800ac7a:	1b2d      	subs	r5, r5, r4
 800ac7c:	1963      	adds	r3, r4, r5
 800ac7e:	42bb      	cmp	r3, r7
 800ac80:	db04      	blt.n	800ac8c <__s2b+0x78>
 800ac82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac86:	340a      	adds	r4, #10
 800ac88:	2509      	movs	r5, #9
 800ac8a:	e7f6      	b.n	800ac7a <__s2b+0x66>
 800ac8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ac90:	4601      	mov	r1, r0
 800ac92:	3b30      	subs	r3, #48	; 0x30
 800ac94:	220a      	movs	r2, #10
 800ac96:	4630      	mov	r0, r6
 800ac98:	f7ff ff76 	bl	800ab88 <__multadd>
 800ac9c:	e7ee      	b.n	800ac7c <__s2b+0x68>
 800ac9e:	bf00      	nop
 800aca0:	0800f608 	.word	0x0800f608
 800aca4:	0800f694 	.word	0x0800f694

0800aca8 <__hi0bits>:
 800aca8:	0c03      	lsrs	r3, r0, #16
 800acaa:	041b      	lsls	r3, r3, #16
 800acac:	b9d3      	cbnz	r3, 800ace4 <__hi0bits+0x3c>
 800acae:	0400      	lsls	r0, r0, #16
 800acb0:	2310      	movs	r3, #16
 800acb2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800acb6:	bf04      	itt	eq
 800acb8:	0200      	lsleq	r0, r0, #8
 800acba:	3308      	addeq	r3, #8
 800acbc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800acc0:	bf04      	itt	eq
 800acc2:	0100      	lsleq	r0, r0, #4
 800acc4:	3304      	addeq	r3, #4
 800acc6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800acca:	bf04      	itt	eq
 800accc:	0080      	lsleq	r0, r0, #2
 800acce:	3302      	addeq	r3, #2
 800acd0:	2800      	cmp	r0, #0
 800acd2:	db05      	blt.n	800ace0 <__hi0bits+0x38>
 800acd4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800acd8:	f103 0301 	add.w	r3, r3, #1
 800acdc:	bf08      	it	eq
 800acde:	2320      	moveq	r3, #32
 800ace0:	4618      	mov	r0, r3
 800ace2:	4770      	bx	lr
 800ace4:	2300      	movs	r3, #0
 800ace6:	e7e4      	b.n	800acb2 <__hi0bits+0xa>

0800ace8 <__lo0bits>:
 800ace8:	6803      	ldr	r3, [r0, #0]
 800acea:	f013 0207 	ands.w	r2, r3, #7
 800acee:	4601      	mov	r1, r0
 800acf0:	d00b      	beq.n	800ad0a <__lo0bits+0x22>
 800acf2:	07da      	lsls	r2, r3, #31
 800acf4:	d423      	bmi.n	800ad3e <__lo0bits+0x56>
 800acf6:	0798      	lsls	r0, r3, #30
 800acf8:	bf49      	itett	mi
 800acfa:	085b      	lsrmi	r3, r3, #1
 800acfc:	089b      	lsrpl	r3, r3, #2
 800acfe:	2001      	movmi	r0, #1
 800ad00:	600b      	strmi	r3, [r1, #0]
 800ad02:	bf5c      	itt	pl
 800ad04:	600b      	strpl	r3, [r1, #0]
 800ad06:	2002      	movpl	r0, #2
 800ad08:	4770      	bx	lr
 800ad0a:	b298      	uxth	r0, r3
 800ad0c:	b9a8      	cbnz	r0, 800ad3a <__lo0bits+0x52>
 800ad0e:	0c1b      	lsrs	r3, r3, #16
 800ad10:	2010      	movs	r0, #16
 800ad12:	b2da      	uxtb	r2, r3
 800ad14:	b90a      	cbnz	r2, 800ad1a <__lo0bits+0x32>
 800ad16:	3008      	adds	r0, #8
 800ad18:	0a1b      	lsrs	r3, r3, #8
 800ad1a:	071a      	lsls	r2, r3, #28
 800ad1c:	bf04      	itt	eq
 800ad1e:	091b      	lsreq	r3, r3, #4
 800ad20:	3004      	addeq	r0, #4
 800ad22:	079a      	lsls	r2, r3, #30
 800ad24:	bf04      	itt	eq
 800ad26:	089b      	lsreq	r3, r3, #2
 800ad28:	3002      	addeq	r0, #2
 800ad2a:	07da      	lsls	r2, r3, #31
 800ad2c:	d403      	bmi.n	800ad36 <__lo0bits+0x4e>
 800ad2e:	085b      	lsrs	r3, r3, #1
 800ad30:	f100 0001 	add.w	r0, r0, #1
 800ad34:	d005      	beq.n	800ad42 <__lo0bits+0x5a>
 800ad36:	600b      	str	r3, [r1, #0]
 800ad38:	4770      	bx	lr
 800ad3a:	4610      	mov	r0, r2
 800ad3c:	e7e9      	b.n	800ad12 <__lo0bits+0x2a>
 800ad3e:	2000      	movs	r0, #0
 800ad40:	4770      	bx	lr
 800ad42:	2020      	movs	r0, #32
 800ad44:	4770      	bx	lr
	...

0800ad48 <__i2b>:
 800ad48:	b510      	push	{r4, lr}
 800ad4a:	460c      	mov	r4, r1
 800ad4c:	2101      	movs	r1, #1
 800ad4e:	f7ff feb9 	bl	800aac4 <_Balloc>
 800ad52:	4602      	mov	r2, r0
 800ad54:	b928      	cbnz	r0, 800ad62 <__i2b+0x1a>
 800ad56:	4b05      	ldr	r3, [pc, #20]	; (800ad6c <__i2b+0x24>)
 800ad58:	4805      	ldr	r0, [pc, #20]	; (800ad70 <__i2b+0x28>)
 800ad5a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ad5e:	f000 fe01 	bl	800b964 <__assert_func>
 800ad62:	2301      	movs	r3, #1
 800ad64:	6144      	str	r4, [r0, #20]
 800ad66:	6103      	str	r3, [r0, #16]
 800ad68:	bd10      	pop	{r4, pc}
 800ad6a:	bf00      	nop
 800ad6c:	0800f608 	.word	0x0800f608
 800ad70:	0800f694 	.word	0x0800f694

0800ad74 <__multiply>:
 800ad74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad78:	4691      	mov	r9, r2
 800ad7a:	690a      	ldr	r2, [r1, #16]
 800ad7c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ad80:	429a      	cmp	r2, r3
 800ad82:	bfb8      	it	lt
 800ad84:	460b      	movlt	r3, r1
 800ad86:	460c      	mov	r4, r1
 800ad88:	bfbc      	itt	lt
 800ad8a:	464c      	movlt	r4, r9
 800ad8c:	4699      	movlt	r9, r3
 800ad8e:	6927      	ldr	r7, [r4, #16]
 800ad90:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ad94:	68a3      	ldr	r3, [r4, #8]
 800ad96:	6861      	ldr	r1, [r4, #4]
 800ad98:	eb07 060a 	add.w	r6, r7, sl
 800ad9c:	42b3      	cmp	r3, r6
 800ad9e:	b085      	sub	sp, #20
 800ada0:	bfb8      	it	lt
 800ada2:	3101      	addlt	r1, #1
 800ada4:	f7ff fe8e 	bl	800aac4 <_Balloc>
 800ada8:	b930      	cbnz	r0, 800adb8 <__multiply+0x44>
 800adaa:	4602      	mov	r2, r0
 800adac:	4b44      	ldr	r3, [pc, #272]	; (800aec0 <__multiply+0x14c>)
 800adae:	4845      	ldr	r0, [pc, #276]	; (800aec4 <__multiply+0x150>)
 800adb0:	f240 115d 	movw	r1, #349	; 0x15d
 800adb4:	f000 fdd6 	bl	800b964 <__assert_func>
 800adb8:	f100 0514 	add.w	r5, r0, #20
 800adbc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800adc0:	462b      	mov	r3, r5
 800adc2:	2200      	movs	r2, #0
 800adc4:	4543      	cmp	r3, r8
 800adc6:	d321      	bcc.n	800ae0c <__multiply+0x98>
 800adc8:	f104 0314 	add.w	r3, r4, #20
 800adcc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800add0:	f109 0314 	add.w	r3, r9, #20
 800add4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800add8:	9202      	str	r2, [sp, #8]
 800adda:	1b3a      	subs	r2, r7, r4
 800addc:	3a15      	subs	r2, #21
 800adde:	f022 0203 	bic.w	r2, r2, #3
 800ade2:	3204      	adds	r2, #4
 800ade4:	f104 0115 	add.w	r1, r4, #21
 800ade8:	428f      	cmp	r7, r1
 800adea:	bf38      	it	cc
 800adec:	2204      	movcc	r2, #4
 800adee:	9201      	str	r2, [sp, #4]
 800adf0:	9a02      	ldr	r2, [sp, #8]
 800adf2:	9303      	str	r3, [sp, #12]
 800adf4:	429a      	cmp	r2, r3
 800adf6:	d80c      	bhi.n	800ae12 <__multiply+0x9e>
 800adf8:	2e00      	cmp	r6, #0
 800adfa:	dd03      	ble.n	800ae04 <__multiply+0x90>
 800adfc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d05a      	beq.n	800aeba <__multiply+0x146>
 800ae04:	6106      	str	r6, [r0, #16]
 800ae06:	b005      	add	sp, #20
 800ae08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae0c:	f843 2b04 	str.w	r2, [r3], #4
 800ae10:	e7d8      	b.n	800adc4 <__multiply+0x50>
 800ae12:	f8b3 a000 	ldrh.w	sl, [r3]
 800ae16:	f1ba 0f00 	cmp.w	sl, #0
 800ae1a:	d024      	beq.n	800ae66 <__multiply+0xf2>
 800ae1c:	f104 0e14 	add.w	lr, r4, #20
 800ae20:	46a9      	mov	r9, r5
 800ae22:	f04f 0c00 	mov.w	ip, #0
 800ae26:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ae2a:	f8d9 1000 	ldr.w	r1, [r9]
 800ae2e:	fa1f fb82 	uxth.w	fp, r2
 800ae32:	b289      	uxth	r1, r1
 800ae34:	fb0a 110b 	mla	r1, sl, fp, r1
 800ae38:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ae3c:	f8d9 2000 	ldr.w	r2, [r9]
 800ae40:	4461      	add	r1, ip
 800ae42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ae46:	fb0a c20b 	mla	r2, sl, fp, ip
 800ae4a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ae4e:	b289      	uxth	r1, r1
 800ae50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ae54:	4577      	cmp	r7, lr
 800ae56:	f849 1b04 	str.w	r1, [r9], #4
 800ae5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ae5e:	d8e2      	bhi.n	800ae26 <__multiply+0xb2>
 800ae60:	9a01      	ldr	r2, [sp, #4]
 800ae62:	f845 c002 	str.w	ip, [r5, r2]
 800ae66:	9a03      	ldr	r2, [sp, #12]
 800ae68:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ae6c:	3304      	adds	r3, #4
 800ae6e:	f1b9 0f00 	cmp.w	r9, #0
 800ae72:	d020      	beq.n	800aeb6 <__multiply+0x142>
 800ae74:	6829      	ldr	r1, [r5, #0]
 800ae76:	f104 0c14 	add.w	ip, r4, #20
 800ae7a:	46ae      	mov	lr, r5
 800ae7c:	f04f 0a00 	mov.w	sl, #0
 800ae80:	f8bc b000 	ldrh.w	fp, [ip]
 800ae84:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ae88:	fb09 220b 	mla	r2, r9, fp, r2
 800ae8c:	4492      	add	sl, r2
 800ae8e:	b289      	uxth	r1, r1
 800ae90:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ae94:	f84e 1b04 	str.w	r1, [lr], #4
 800ae98:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ae9c:	f8be 1000 	ldrh.w	r1, [lr]
 800aea0:	0c12      	lsrs	r2, r2, #16
 800aea2:	fb09 1102 	mla	r1, r9, r2, r1
 800aea6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800aeaa:	4567      	cmp	r7, ip
 800aeac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aeb0:	d8e6      	bhi.n	800ae80 <__multiply+0x10c>
 800aeb2:	9a01      	ldr	r2, [sp, #4]
 800aeb4:	50a9      	str	r1, [r5, r2]
 800aeb6:	3504      	adds	r5, #4
 800aeb8:	e79a      	b.n	800adf0 <__multiply+0x7c>
 800aeba:	3e01      	subs	r6, #1
 800aebc:	e79c      	b.n	800adf8 <__multiply+0x84>
 800aebe:	bf00      	nop
 800aec0:	0800f608 	.word	0x0800f608
 800aec4:	0800f694 	.word	0x0800f694

0800aec8 <__pow5mult>:
 800aec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aecc:	4615      	mov	r5, r2
 800aece:	f012 0203 	ands.w	r2, r2, #3
 800aed2:	4606      	mov	r6, r0
 800aed4:	460f      	mov	r7, r1
 800aed6:	d007      	beq.n	800aee8 <__pow5mult+0x20>
 800aed8:	4c25      	ldr	r4, [pc, #148]	; (800af70 <__pow5mult+0xa8>)
 800aeda:	3a01      	subs	r2, #1
 800aedc:	2300      	movs	r3, #0
 800aede:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aee2:	f7ff fe51 	bl	800ab88 <__multadd>
 800aee6:	4607      	mov	r7, r0
 800aee8:	10ad      	asrs	r5, r5, #2
 800aeea:	d03d      	beq.n	800af68 <__pow5mult+0xa0>
 800aeec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800aeee:	b97c      	cbnz	r4, 800af10 <__pow5mult+0x48>
 800aef0:	2010      	movs	r0, #16
 800aef2:	f7ff fdbf 	bl	800aa74 <malloc>
 800aef6:	4602      	mov	r2, r0
 800aef8:	6270      	str	r0, [r6, #36]	; 0x24
 800aefa:	b928      	cbnz	r0, 800af08 <__pow5mult+0x40>
 800aefc:	4b1d      	ldr	r3, [pc, #116]	; (800af74 <__pow5mult+0xac>)
 800aefe:	481e      	ldr	r0, [pc, #120]	; (800af78 <__pow5mult+0xb0>)
 800af00:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800af04:	f000 fd2e 	bl	800b964 <__assert_func>
 800af08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af0c:	6004      	str	r4, [r0, #0]
 800af0e:	60c4      	str	r4, [r0, #12]
 800af10:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800af14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af18:	b94c      	cbnz	r4, 800af2e <__pow5mult+0x66>
 800af1a:	f240 2171 	movw	r1, #625	; 0x271
 800af1e:	4630      	mov	r0, r6
 800af20:	f7ff ff12 	bl	800ad48 <__i2b>
 800af24:	2300      	movs	r3, #0
 800af26:	f8c8 0008 	str.w	r0, [r8, #8]
 800af2a:	4604      	mov	r4, r0
 800af2c:	6003      	str	r3, [r0, #0]
 800af2e:	f04f 0900 	mov.w	r9, #0
 800af32:	07eb      	lsls	r3, r5, #31
 800af34:	d50a      	bpl.n	800af4c <__pow5mult+0x84>
 800af36:	4639      	mov	r1, r7
 800af38:	4622      	mov	r2, r4
 800af3a:	4630      	mov	r0, r6
 800af3c:	f7ff ff1a 	bl	800ad74 <__multiply>
 800af40:	4639      	mov	r1, r7
 800af42:	4680      	mov	r8, r0
 800af44:	4630      	mov	r0, r6
 800af46:	f7ff fdfd 	bl	800ab44 <_Bfree>
 800af4a:	4647      	mov	r7, r8
 800af4c:	106d      	asrs	r5, r5, #1
 800af4e:	d00b      	beq.n	800af68 <__pow5mult+0xa0>
 800af50:	6820      	ldr	r0, [r4, #0]
 800af52:	b938      	cbnz	r0, 800af64 <__pow5mult+0x9c>
 800af54:	4622      	mov	r2, r4
 800af56:	4621      	mov	r1, r4
 800af58:	4630      	mov	r0, r6
 800af5a:	f7ff ff0b 	bl	800ad74 <__multiply>
 800af5e:	6020      	str	r0, [r4, #0]
 800af60:	f8c0 9000 	str.w	r9, [r0]
 800af64:	4604      	mov	r4, r0
 800af66:	e7e4      	b.n	800af32 <__pow5mult+0x6a>
 800af68:	4638      	mov	r0, r7
 800af6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af6e:	bf00      	nop
 800af70:	0800f7e0 	.word	0x0800f7e0
 800af74:	0800f596 	.word	0x0800f596
 800af78:	0800f694 	.word	0x0800f694

0800af7c <__lshift>:
 800af7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af80:	460c      	mov	r4, r1
 800af82:	6849      	ldr	r1, [r1, #4]
 800af84:	6923      	ldr	r3, [r4, #16]
 800af86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800af8a:	68a3      	ldr	r3, [r4, #8]
 800af8c:	4607      	mov	r7, r0
 800af8e:	4691      	mov	r9, r2
 800af90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800af94:	f108 0601 	add.w	r6, r8, #1
 800af98:	42b3      	cmp	r3, r6
 800af9a:	db0b      	blt.n	800afb4 <__lshift+0x38>
 800af9c:	4638      	mov	r0, r7
 800af9e:	f7ff fd91 	bl	800aac4 <_Balloc>
 800afa2:	4605      	mov	r5, r0
 800afa4:	b948      	cbnz	r0, 800afba <__lshift+0x3e>
 800afa6:	4602      	mov	r2, r0
 800afa8:	4b2a      	ldr	r3, [pc, #168]	; (800b054 <__lshift+0xd8>)
 800afaa:	482b      	ldr	r0, [pc, #172]	; (800b058 <__lshift+0xdc>)
 800afac:	f240 11d9 	movw	r1, #473	; 0x1d9
 800afb0:	f000 fcd8 	bl	800b964 <__assert_func>
 800afb4:	3101      	adds	r1, #1
 800afb6:	005b      	lsls	r3, r3, #1
 800afb8:	e7ee      	b.n	800af98 <__lshift+0x1c>
 800afba:	2300      	movs	r3, #0
 800afbc:	f100 0114 	add.w	r1, r0, #20
 800afc0:	f100 0210 	add.w	r2, r0, #16
 800afc4:	4618      	mov	r0, r3
 800afc6:	4553      	cmp	r3, sl
 800afc8:	db37      	blt.n	800b03a <__lshift+0xbe>
 800afca:	6920      	ldr	r0, [r4, #16]
 800afcc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800afd0:	f104 0314 	add.w	r3, r4, #20
 800afd4:	f019 091f 	ands.w	r9, r9, #31
 800afd8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800afdc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800afe0:	d02f      	beq.n	800b042 <__lshift+0xc6>
 800afe2:	f1c9 0e20 	rsb	lr, r9, #32
 800afe6:	468a      	mov	sl, r1
 800afe8:	f04f 0c00 	mov.w	ip, #0
 800afec:	681a      	ldr	r2, [r3, #0]
 800afee:	fa02 f209 	lsl.w	r2, r2, r9
 800aff2:	ea42 020c 	orr.w	r2, r2, ip
 800aff6:	f84a 2b04 	str.w	r2, [sl], #4
 800affa:	f853 2b04 	ldr.w	r2, [r3], #4
 800affe:	4298      	cmp	r0, r3
 800b000:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b004:	d8f2      	bhi.n	800afec <__lshift+0x70>
 800b006:	1b03      	subs	r3, r0, r4
 800b008:	3b15      	subs	r3, #21
 800b00a:	f023 0303 	bic.w	r3, r3, #3
 800b00e:	3304      	adds	r3, #4
 800b010:	f104 0215 	add.w	r2, r4, #21
 800b014:	4290      	cmp	r0, r2
 800b016:	bf38      	it	cc
 800b018:	2304      	movcc	r3, #4
 800b01a:	f841 c003 	str.w	ip, [r1, r3]
 800b01e:	f1bc 0f00 	cmp.w	ip, #0
 800b022:	d001      	beq.n	800b028 <__lshift+0xac>
 800b024:	f108 0602 	add.w	r6, r8, #2
 800b028:	3e01      	subs	r6, #1
 800b02a:	4638      	mov	r0, r7
 800b02c:	612e      	str	r6, [r5, #16]
 800b02e:	4621      	mov	r1, r4
 800b030:	f7ff fd88 	bl	800ab44 <_Bfree>
 800b034:	4628      	mov	r0, r5
 800b036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b03a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b03e:	3301      	adds	r3, #1
 800b040:	e7c1      	b.n	800afc6 <__lshift+0x4a>
 800b042:	3904      	subs	r1, #4
 800b044:	f853 2b04 	ldr.w	r2, [r3], #4
 800b048:	f841 2f04 	str.w	r2, [r1, #4]!
 800b04c:	4298      	cmp	r0, r3
 800b04e:	d8f9      	bhi.n	800b044 <__lshift+0xc8>
 800b050:	e7ea      	b.n	800b028 <__lshift+0xac>
 800b052:	bf00      	nop
 800b054:	0800f608 	.word	0x0800f608
 800b058:	0800f694 	.word	0x0800f694

0800b05c <__mcmp>:
 800b05c:	b530      	push	{r4, r5, lr}
 800b05e:	6902      	ldr	r2, [r0, #16]
 800b060:	690c      	ldr	r4, [r1, #16]
 800b062:	1b12      	subs	r2, r2, r4
 800b064:	d10e      	bne.n	800b084 <__mcmp+0x28>
 800b066:	f100 0314 	add.w	r3, r0, #20
 800b06a:	3114      	adds	r1, #20
 800b06c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b070:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b074:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b078:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b07c:	42a5      	cmp	r5, r4
 800b07e:	d003      	beq.n	800b088 <__mcmp+0x2c>
 800b080:	d305      	bcc.n	800b08e <__mcmp+0x32>
 800b082:	2201      	movs	r2, #1
 800b084:	4610      	mov	r0, r2
 800b086:	bd30      	pop	{r4, r5, pc}
 800b088:	4283      	cmp	r3, r0
 800b08a:	d3f3      	bcc.n	800b074 <__mcmp+0x18>
 800b08c:	e7fa      	b.n	800b084 <__mcmp+0x28>
 800b08e:	f04f 32ff 	mov.w	r2, #4294967295
 800b092:	e7f7      	b.n	800b084 <__mcmp+0x28>

0800b094 <__mdiff>:
 800b094:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b098:	460c      	mov	r4, r1
 800b09a:	4606      	mov	r6, r0
 800b09c:	4611      	mov	r1, r2
 800b09e:	4620      	mov	r0, r4
 800b0a0:	4690      	mov	r8, r2
 800b0a2:	f7ff ffdb 	bl	800b05c <__mcmp>
 800b0a6:	1e05      	subs	r5, r0, #0
 800b0a8:	d110      	bne.n	800b0cc <__mdiff+0x38>
 800b0aa:	4629      	mov	r1, r5
 800b0ac:	4630      	mov	r0, r6
 800b0ae:	f7ff fd09 	bl	800aac4 <_Balloc>
 800b0b2:	b930      	cbnz	r0, 800b0c2 <__mdiff+0x2e>
 800b0b4:	4b3a      	ldr	r3, [pc, #232]	; (800b1a0 <__mdiff+0x10c>)
 800b0b6:	4602      	mov	r2, r0
 800b0b8:	f240 2132 	movw	r1, #562	; 0x232
 800b0bc:	4839      	ldr	r0, [pc, #228]	; (800b1a4 <__mdiff+0x110>)
 800b0be:	f000 fc51 	bl	800b964 <__assert_func>
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b0c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0cc:	bfa4      	itt	ge
 800b0ce:	4643      	movge	r3, r8
 800b0d0:	46a0      	movge	r8, r4
 800b0d2:	4630      	mov	r0, r6
 800b0d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b0d8:	bfa6      	itte	ge
 800b0da:	461c      	movge	r4, r3
 800b0dc:	2500      	movge	r5, #0
 800b0de:	2501      	movlt	r5, #1
 800b0e0:	f7ff fcf0 	bl	800aac4 <_Balloc>
 800b0e4:	b920      	cbnz	r0, 800b0f0 <__mdiff+0x5c>
 800b0e6:	4b2e      	ldr	r3, [pc, #184]	; (800b1a0 <__mdiff+0x10c>)
 800b0e8:	4602      	mov	r2, r0
 800b0ea:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b0ee:	e7e5      	b.n	800b0bc <__mdiff+0x28>
 800b0f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b0f4:	6926      	ldr	r6, [r4, #16]
 800b0f6:	60c5      	str	r5, [r0, #12]
 800b0f8:	f104 0914 	add.w	r9, r4, #20
 800b0fc:	f108 0514 	add.w	r5, r8, #20
 800b100:	f100 0e14 	add.w	lr, r0, #20
 800b104:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b108:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b10c:	f108 0210 	add.w	r2, r8, #16
 800b110:	46f2      	mov	sl, lr
 800b112:	2100      	movs	r1, #0
 800b114:	f859 3b04 	ldr.w	r3, [r9], #4
 800b118:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b11c:	fa1f f883 	uxth.w	r8, r3
 800b120:	fa11 f18b 	uxtah	r1, r1, fp
 800b124:	0c1b      	lsrs	r3, r3, #16
 800b126:	eba1 0808 	sub.w	r8, r1, r8
 800b12a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b12e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b132:	fa1f f888 	uxth.w	r8, r8
 800b136:	1419      	asrs	r1, r3, #16
 800b138:	454e      	cmp	r6, r9
 800b13a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b13e:	f84a 3b04 	str.w	r3, [sl], #4
 800b142:	d8e7      	bhi.n	800b114 <__mdiff+0x80>
 800b144:	1b33      	subs	r3, r6, r4
 800b146:	3b15      	subs	r3, #21
 800b148:	f023 0303 	bic.w	r3, r3, #3
 800b14c:	3304      	adds	r3, #4
 800b14e:	3415      	adds	r4, #21
 800b150:	42a6      	cmp	r6, r4
 800b152:	bf38      	it	cc
 800b154:	2304      	movcc	r3, #4
 800b156:	441d      	add	r5, r3
 800b158:	4473      	add	r3, lr
 800b15a:	469e      	mov	lr, r3
 800b15c:	462e      	mov	r6, r5
 800b15e:	4566      	cmp	r6, ip
 800b160:	d30e      	bcc.n	800b180 <__mdiff+0xec>
 800b162:	f10c 0203 	add.w	r2, ip, #3
 800b166:	1b52      	subs	r2, r2, r5
 800b168:	f022 0203 	bic.w	r2, r2, #3
 800b16c:	3d03      	subs	r5, #3
 800b16e:	45ac      	cmp	ip, r5
 800b170:	bf38      	it	cc
 800b172:	2200      	movcc	r2, #0
 800b174:	441a      	add	r2, r3
 800b176:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b17a:	b17b      	cbz	r3, 800b19c <__mdiff+0x108>
 800b17c:	6107      	str	r7, [r0, #16]
 800b17e:	e7a3      	b.n	800b0c8 <__mdiff+0x34>
 800b180:	f856 8b04 	ldr.w	r8, [r6], #4
 800b184:	fa11 f288 	uxtah	r2, r1, r8
 800b188:	1414      	asrs	r4, r2, #16
 800b18a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b18e:	b292      	uxth	r2, r2
 800b190:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b194:	f84e 2b04 	str.w	r2, [lr], #4
 800b198:	1421      	asrs	r1, r4, #16
 800b19a:	e7e0      	b.n	800b15e <__mdiff+0xca>
 800b19c:	3f01      	subs	r7, #1
 800b19e:	e7ea      	b.n	800b176 <__mdiff+0xe2>
 800b1a0:	0800f608 	.word	0x0800f608
 800b1a4:	0800f694 	.word	0x0800f694

0800b1a8 <__ulp>:
 800b1a8:	b082      	sub	sp, #8
 800b1aa:	ed8d 0b00 	vstr	d0, [sp]
 800b1ae:	9b01      	ldr	r3, [sp, #4]
 800b1b0:	4912      	ldr	r1, [pc, #72]	; (800b1fc <__ulp+0x54>)
 800b1b2:	4019      	ands	r1, r3
 800b1b4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b1b8:	2900      	cmp	r1, #0
 800b1ba:	dd05      	ble.n	800b1c8 <__ulp+0x20>
 800b1bc:	2200      	movs	r2, #0
 800b1be:	460b      	mov	r3, r1
 800b1c0:	ec43 2b10 	vmov	d0, r2, r3
 800b1c4:	b002      	add	sp, #8
 800b1c6:	4770      	bx	lr
 800b1c8:	4249      	negs	r1, r1
 800b1ca:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b1ce:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b1d2:	f04f 0200 	mov.w	r2, #0
 800b1d6:	f04f 0300 	mov.w	r3, #0
 800b1da:	da04      	bge.n	800b1e6 <__ulp+0x3e>
 800b1dc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b1e0:	fa41 f300 	asr.w	r3, r1, r0
 800b1e4:	e7ec      	b.n	800b1c0 <__ulp+0x18>
 800b1e6:	f1a0 0114 	sub.w	r1, r0, #20
 800b1ea:	291e      	cmp	r1, #30
 800b1ec:	bfda      	itte	le
 800b1ee:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b1f2:	fa20 f101 	lsrle.w	r1, r0, r1
 800b1f6:	2101      	movgt	r1, #1
 800b1f8:	460a      	mov	r2, r1
 800b1fa:	e7e1      	b.n	800b1c0 <__ulp+0x18>
 800b1fc:	7ff00000 	.word	0x7ff00000

0800b200 <__b2d>:
 800b200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b202:	6905      	ldr	r5, [r0, #16]
 800b204:	f100 0714 	add.w	r7, r0, #20
 800b208:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b20c:	1f2e      	subs	r6, r5, #4
 800b20e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b212:	4620      	mov	r0, r4
 800b214:	f7ff fd48 	bl	800aca8 <__hi0bits>
 800b218:	f1c0 0320 	rsb	r3, r0, #32
 800b21c:	280a      	cmp	r0, #10
 800b21e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b29c <__b2d+0x9c>
 800b222:	600b      	str	r3, [r1, #0]
 800b224:	dc14      	bgt.n	800b250 <__b2d+0x50>
 800b226:	f1c0 0e0b 	rsb	lr, r0, #11
 800b22a:	fa24 f10e 	lsr.w	r1, r4, lr
 800b22e:	42b7      	cmp	r7, r6
 800b230:	ea41 030c 	orr.w	r3, r1, ip
 800b234:	bf34      	ite	cc
 800b236:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b23a:	2100      	movcs	r1, #0
 800b23c:	3015      	adds	r0, #21
 800b23e:	fa04 f000 	lsl.w	r0, r4, r0
 800b242:	fa21 f10e 	lsr.w	r1, r1, lr
 800b246:	ea40 0201 	orr.w	r2, r0, r1
 800b24a:	ec43 2b10 	vmov	d0, r2, r3
 800b24e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b250:	42b7      	cmp	r7, r6
 800b252:	bf3a      	itte	cc
 800b254:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b258:	f1a5 0608 	subcc.w	r6, r5, #8
 800b25c:	2100      	movcs	r1, #0
 800b25e:	380b      	subs	r0, #11
 800b260:	d017      	beq.n	800b292 <__b2d+0x92>
 800b262:	f1c0 0c20 	rsb	ip, r0, #32
 800b266:	fa04 f500 	lsl.w	r5, r4, r0
 800b26a:	42be      	cmp	r6, r7
 800b26c:	fa21 f40c 	lsr.w	r4, r1, ip
 800b270:	ea45 0504 	orr.w	r5, r5, r4
 800b274:	bf8c      	ite	hi
 800b276:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b27a:	2400      	movls	r4, #0
 800b27c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b280:	fa01 f000 	lsl.w	r0, r1, r0
 800b284:	fa24 f40c 	lsr.w	r4, r4, ip
 800b288:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b28c:	ea40 0204 	orr.w	r2, r0, r4
 800b290:	e7db      	b.n	800b24a <__b2d+0x4a>
 800b292:	ea44 030c 	orr.w	r3, r4, ip
 800b296:	460a      	mov	r2, r1
 800b298:	e7d7      	b.n	800b24a <__b2d+0x4a>
 800b29a:	bf00      	nop
 800b29c:	3ff00000 	.word	0x3ff00000

0800b2a0 <__d2b>:
 800b2a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b2a4:	4689      	mov	r9, r1
 800b2a6:	2101      	movs	r1, #1
 800b2a8:	ec57 6b10 	vmov	r6, r7, d0
 800b2ac:	4690      	mov	r8, r2
 800b2ae:	f7ff fc09 	bl	800aac4 <_Balloc>
 800b2b2:	4604      	mov	r4, r0
 800b2b4:	b930      	cbnz	r0, 800b2c4 <__d2b+0x24>
 800b2b6:	4602      	mov	r2, r0
 800b2b8:	4b25      	ldr	r3, [pc, #148]	; (800b350 <__d2b+0xb0>)
 800b2ba:	4826      	ldr	r0, [pc, #152]	; (800b354 <__d2b+0xb4>)
 800b2bc:	f240 310a 	movw	r1, #778	; 0x30a
 800b2c0:	f000 fb50 	bl	800b964 <__assert_func>
 800b2c4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b2c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b2cc:	bb35      	cbnz	r5, 800b31c <__d2b+0x7c>
 800b2ce:	2e00      	cmp	r6, #0
 800b2d0:	9301      	str	r3, [sp, #4]
 800b2d2:	d028      	beq.n	800b326 <__d2b+0x86>
 800b2d4:	4668      	mov	r0, sp
 800b2d6:	9600      	str	r6, [sp, #0]
 800b2d8:	f7ff fd06 	bl	800ace8 <__lo0bits>
 800b2dc:	9900      	ldr	r1, [sp, #0]
 800b2de:	b300      	cbz	r0, 800b322 <__d2b+0x82>
 800b2e0:	9a01      	ldr	r2, [sp, #4]
 800b2e2:	f1c0 0320 	rsb	r3, r0, #32
 800b2e6:	fa02 f303 	lsl.w	r3, r2, r3
 800b2ea:	430b      	orrs	r3, r1
 800b2ec:	40c2      	lsrs	r2, r0
 800b2ee:	6163      	str	r3, [r4, #20]
 800b2f0:	9201      	str	r2, [sp, #4]
 800b2f2:	9b01      	ldr	r3, [sp, #4]
 800b2f4:	61a3      	str	r3, [r4, #24]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	bf14      	ite	ne
 800b2fa:	2202      	movne	r2, #2
 800b2fc:	2201      	moveq	r2, #1
 800b2fe:	6122      	str	r2, [r4, #16]
 800b300:	b1d5      	cbz	r5, 800b338 <__d2b+0x98>
 800b302:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b306:	4405      	add	r5, r0
 800b308:	f8c9 5000 	str.w	r5, [r9]
 800b30c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b310:	f8c8 0000 	str.w	r0, [r8]
 800b314:	4620      	mov	r0, r4
 800b316:	b003      	add	sp, #12
 800b318:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b31c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b320:	e7d5      	b.n	800b2ce <__d2b+0x2e>
 800b322:	6161      	str	r1, [r4, #20]
 800b324:	e7e5      	b.n	800b2f2 <__d2b+0x52>
 800b326:	a801      	add	r0, sp, #4
 800b328:	f7ff fcde 	bl	800ace8 <__lo0bits>
 800b32c:	9b01      	ldr	r3, [sp, #4]
 800b32e:	6163      	str	r3, [r4, #20]
 800b330:	2201      	movs	r2, #1
 800b332:	6122      	str	r2, [r4, #16]
 800b334:	3020      	adds	r0, #32
 800b336:	e7e3      	b.n	800b300 <__d2b+0x60>
 800b338:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b33c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b340:	f8c9 0000 	str.w	r0, [r9]
 800b344:	6918      	ldr	r0, [r3, #16]
 800b346:	f7ff fcaf 	bl	800aca8 <__hi0bits>
 800b34a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b34e:	e7df      	b.n	800b310 <__d2b+0x70>
 800b350:	0800f608 	.word	0x0800f608
 800b354:	0800f694 	.word	0x0800f694

0800b358 <__ratio>:
 800b358:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b35c:	4688      	mov	r8, r1
 800b35e:	4669      	mov	r1, sp
 800b360:	4681      	mov	r9, r0
 800b362:	f7ff ff4d 	bl	800b200 <__b2d>
 800b366:	a901      	add	r1, sp, #4
 800b368:	4640      	mov	r0, r8
 800b36a:	ec55 4b10 	vmov	r4, r5, d0
 800b36e:	f7ff ff47 	bl	800b200 <__b2d>
 800b372:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b376:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b37a:	eba3 0c02 	sub.w	ip, r3, r2
 800b37e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b382:	1a9b      	subs	r3, r3, r2
 800b384:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b388:	ec51 0b10 	vmov	r0, r1, d0
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	bfd6      	itet	le
 800b390:	460a      	movle	r2, r1
 800b392:	462a      	movgt	r2, r5
 800b394:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b398:	468b      	mov	fp, r1
 800b39a:	462f      	mov	r7, r5
 800b39c:	bfd4      	ite	le
 800b39e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b3a2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b3a6:	4620      	mov	r0, r4
 800b3a8:	ee10 2a10 	vmov	r2, s0
 800b3ac:	465b      	mov	r3, fp
 800b3ae:	4639      	mov	r1, r7
 800b3b0:	f7f5 fa4c 	bl	800084c <__aeabi_ddiv>
 800b3b4:	ec41 0b10 	vmov	d0, r0, r1
 800b3b8:	b003      	add	sp, #12
 800b3ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b3be <__copybits>:
 800b3be:	3901      	subs	r1, #1
 800b3c0:	b570      	push	{r4, r5, r6, lr}
 800b3c2:	1149      	asrs	r1, r1, #5
 800b3c4:	6914      	ldr	r4, [r2, #16]
 800b3c6:	3101      	adds	r1, #1
 800b3c8:	f102 0314 	add.w	r3, r2, #20
 800b3cc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b3d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b3d4:	1f05      	subs	r5, r0, #4
 800b3d6:	42a3      	cmp	r3, r4
 800b3d8:	d30c      	bcc.n	800b3f4 <__copybits+0x36>
 800b3da:	1aa3      	subs	r3, r4, r2
 800b3dc:	3b11      	subs	r3, #17
 800b3de:	f023 0303 	bic.w	r3, r3, #3
 800b3e2:	3211      	adds	r2, #17
 800b3e4:	42a2      	cmp	r2, r4
 800b3e6:	bf88      	it	hi
 800b3e8:	2300      	movhi	r3, #0
 800b3ea:	4418      	add	r0, r3
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	4288      	cmp	r0, r1
 800b3f0:	d305      	bcc.n	800b3fe <__copybits+0x40>
 800b3f2:	bd70      	pop	{r4, r5, r6, pc}
 800b3f4:	f853 6b04 	ldr.w	r6, [r3], #4
 800b3f8:	f845 6f04 	str.w	r6, [r5, #4]!
 800b3fc:	e7eb      	b.n	800b3d6 <__copybits+0x18>
 800b3fe:	f840 3b04 	str.w	r3, [r0], #4
 800b402:	e7f4      	b.n	800b3ee <__copybits+0x30>

0800b404 <__any_on>:
 800b404:	f100 0214 	add.w	r2, r0, #20
 800b408:	6900      	ldr	r0, [r0, #16]
 800b40a:	114b      	asrs	r3, r1, #5
 800b40c:	4298      	cmp	r0, r3
 800b40e:	b510      	push	{r4, lr}
 800b410:	db11      	blt.n	800b436 <__any_on+0x32>
 800b412:	dd0a      	ble.n	800b42a <__any_on+0x26>
 800b414:	f011 011f 	ands.w	r1, r1, #31
 800b418:	d007      	beq.n	800b42a <__any_on+0x26>
 800b41a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b41e:	fa24 f001 	lsr.w	r0, r4, r1
 800b422:	fa00 f101 	lsl.w	r1, r0, r1
 800b426:	428c      	cmp	r4, r1
 800b428:	d10b      	bne.n	800b442 <__any_on+0x3e>
 800b42a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b42e:	4293      	cmp	r3, r2
 800b430:	d803      	bhi.n	800b43a <__any_on+0x36>
 800b432:	2000      	movs	r0, #0
 800b434:	bd10      	pop	{r4, pc}
 800b436:	4603      	mov	r3, r0
 800b438:	e7f7      	b.n	800b42a <__any_on+0x26>
 800b43a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b43e:	2900      	cmp	r1, #0
 800b440:	d0f5      	beq.n	800b42e <__any_on+0x2a>
 800b442:	2001      	movs	r0, #1
 800b444:	e7f6      	b.n	800b434 <__any_on+0x30>

0800b446 <_calloc_r>:
 800b446:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b448:	fba1 2402 	umull	r2, r4, r1, r2
 800b44c:	b94c      	cbnz	r4, 800b462 <_calloc_r+0x1c>
 800b44e:	4611      	mov	r1, r2
 800b450:	9201      	str	r2, [sp, #4]
 800b452:	f000 f87b 	bl	800b54c <_malloc_r>
 800b456:	9a01      	ldr	r2, [sp, #4]
 800b458:	4605      	mov	r5, r0
 800b45a:	b930      	cbnz	r0, 800b46a <_calloc_r+0x24>
 800b45c:	4628      	mov	r0, r5
 800b45e:	b003      	add	sp, #12
 800b460:	bd30      	pop	{r4, r5, pc}
 800b462:	220c      	movs	r2, #12
 800b464:	6002      	str	r2, [r0, #0]
 800b466:	2500      	movs	r5, #0
 800b468:	e7f8      	b.n	800b45c <_calloc_r+0x16>
 800b46a:	4621      	mov	r1, r4
 800b46c:	f7fc fbbe 	bl	8007bec <memset>
 800b470:	e7f4      	b.n	800b45c <_calloc_r+0x16>
	...

0800b474 <_free_r>:
 800b474:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b476:	2900      	cmp	r1, #0
 800b478:	d044      	beq.n	800b504 <_free_r+0x90>
 800b47a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b47e:	9001      	str	r0, [sp, #4]
 800b480:	2b00      	cmp	r3, #0
 800b482:	f1a1 0404 	sub.w	r4, r1, #4
 800b486:	bfb8      	it	lt
 800b488:	18e4      	addlt	r4, r4, r3
 800b48a:	f000 fab5 	bl	800b9f8 <__malloc_lock>
 800b48e:	4a1e      	ldr	r2, [pc, #120]	; (800b508 <_free_r+0x94>)
 800b490:	9801      	ldr	r0, [sp, #4]
 800b492:	6813      	ldr	r3, [r2, #0]
 800b494:	b933      	cbnz	r3, 800b4a4 <_free_r+0x30>
 800b496:	6063      	str	r3, [r4, #4]
 800b498:	6014      	str	r4, [r2, #0]
 800b49a:	b003      	add	sp, #12
 800b49c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b4a0:	f000 bab0 	b.w	800ba04 <__malloc_unlock>
 800b4a4:	42a3      	cmp	r3, r4
 800b4a6:	d908      	bls.n	800b4ba <_free_r+0x46>
 800b4a8:	6825      	ldr	r5, [r4, #0]
 800b4aa:	1961      	adds	r1, r4, r5
 800b4ac:	428b      	cmp	r3, r1
 800b4ae:	bf01      	itttt	eq
 800b4b0:	6819      	ldreq	r1, [r3, #0]
 800b4b2:	685b      	ldreq	r3, [r3, #4]
 800b4b4:	1949      	addeq	r1, r1, r5
 800b4b6:	6021      	streq	r1, [r4, #0]
 800b4b8:	e7ed      	b.n	800b496 <_free_r+0x22>
 800b4ba:	461a      	mov	r2, r3
 800b4bc:	685b      	ldr	r3, [r3, #4]
 800b4be:	b10b      	cbz	r3, 800b4c4 <_free_r+0x50>
 800b4c0:	42a3      	cmp	r3, r4
 800b4c2:	d9fa      	bls.n	800b4ba <_free_r+0x46>
 800b4c4:	6811      	ldr	r1, [r2, #0]
 800b4c6:	1855      	adds	r5, r2, r1
 800b4c8:	42a5      	cmp	r5, r4
 800b4ca:	d10b      	bne.n	800b4e4 <_free_r+0x70>
 800b4cc:	6824      	ldr	r4, [r4, #0]
 800b4ce:	4421      	add	r1, r4
 800b4d0:	1854      	adds	r4, r2, r1
 800b4d2:	42a3      	cmp	r3, r4
 800b4d4:	6011      	str	r1, [r2, #0]
 800b4d6:	d1e0      	bne.n	800b49a <_free_r+0x26>
 800b4d8:	681c      	ldr	r4, [r3, #0]
 800b4da:	685b      	ldr	r3, [r3, #4]
 800b4dc:	6053      	str	r3, [r2, #4]
 800b4de:	4421      	add	r1, r4
 800b4e0:	6011      	str	r1, [r2, #0]
 800b4e2:	e7da      	b.n	800b49a <_free_r+0x26>
 800b4e4:	d902      	bls.n	800b4ec <_free_r+0x78>
 800b4e6:	230c      	movs	r3, #12
 800b4e8:	6003      	str	r3, [r0, #0]
 800b4ea:	e7d6      	b.n	800b49a <_free_r+0x26>
 800b4ec:	6825      	ldr	r5, [r4, #0]
 800b4ee:	1961      	adds	r1, r4, r5
 800b4f0:	428b      	cmp	r3, r1
 800b4f2:	bf04      	itt	eq
 800b4f4:	6819      	ldreq	r1, [r3, #0]
 800b4f6:	685b      	ldreq	r3, [r3, #4]
 800b4f8:	6063      	str	r3, [r4, #4]
 800b4fa:	bf04      	itt	eq
 800b4fc:	1949      	addeq	r1, r1, r5
 800b4fe:	6021      	streq	r1, [r4, #0]
 800b500:	6054      	str	r4, [r2, #4]
 800b502:	e7ca      	b.n	800b49a <_free_r+0x26>
 800b504:	b003      	add	sp, #12
 800b506:	bd30      	pop	{r4, r5, pc}
 800b508:	20004444 	.word	0x20004444

0800b50c <sbrk_aligned>:
 800b50c:	b570      	push	{r4, r5, r6, lr}
 800b50e:	4e0e      	ldr	r6, [pc, #56]	; (800b548 <sbrk_aligned+0x3c>)
 800b510:	460c      	mov	r4, r1
 800b512:	6831      	ldr	r1, [r6, #0]
 800b514:	4605      	mov	r5, r0
 800b516:	b911      	cbnz	r1, 800b51e <sbrk_aligned+0x12>
 800b518:	f000 f9f2 	bl	800b900 <_sbrk_r>
 800b51c:	6030      	str	r0, [r6, #0]
 800b51e:	4621      	mov	r1, r4
 800b520:	4628      	mov	r0, r5
 800b522:	f000 f9ed 	bl	800b900 <_sbrk_r>
 800b526:	1c43      	adds	r3, r0, #1
 800b528:	d00a      	beq.n	800b540 <sbrk_aligned+0x34>
 800b52a:	1cc4      	adds	r4, r0, #3
 800b52c:	f024 0403 	bic.w	r4, r4, #3
 800b530:	42a0      	cmp	r0, r4
 800b532:	d007      	beq.n	800b544 <sbrk_aligned+0x38>
 800b534:	1a21      	subs	r1, r4, r0
 800b536:	4628      	mov	r0, r5
 800b538:	f000 f9e2 	bl	800b900 <_sbrk_r>
 800b53c:	3001      	adds	r0, #1
 800b53e:	d101      	bne.n	800b544 <sbrk_aligned+0x38>
 800b540:	f04f 34ff 	mov.w	r4, #4294967295
 800b544:	4620      	mov	r0, r4
 800b546:	bd70      	pop	{r4, r5, r6, pc}
 800b548:	20004448 	.word	0x20004448

0800b54c <_malloc_r>:
 800b54c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b550:	1ccd      	adds	r5, r1, #3
 800b552:	f025 0503 	bic.w	r5, r5, #3
 800b556:	3508      	adds	r5, #8
 800b558:	2d0c      	cmp	r5, #12
 800b55a:	bf38      	it	cc
 800b55c:	250c      	movcc	r5, #12
 800b55e:	2d00      	cmp	r5, #0
 800b560:	4607      	mov	r7, r0
 800b562:	db01      	blt.n	800b568 <_malloc_r+0x1c>
 800b564:	42a9      	cmp	r1, r5
 800b566:	d905      	bls.n	800b574 <_malloc_r+0x28>
 800b568:	230c      	movs	r3, #12
 800b56a:	603b      	str	r3, [r7, #0]
 800b56c:	2600      	movs	r6, #0
 800b56e:	4630      	mov	r0, r6
 800b570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b574:	4e2e      	ldr	r6, [pc, #184]	; (800b630 <_malloc_r+0xe4>)
 800b576:	f000 fa3f 	bl	800b9f8 <__malloc_lock>
 800b57a:	6833      	ldr	r3, [r6, #0]
 800b57c:	461c      	mov	r4, r3
 800b57e:	bb34      	cbnz	r4, 800b5ce <_malloc_r+0x82>
 800b580:	4629      	mov	r1, r5
 800b582:	4638      	mov	r0, r7
 800b584:	f7ff ffc2 	bl	800b50c <sbrk_aligned>
 800b588:	1c43      	adds	r3, r0, #1
 800b58a:	4604      	mov	r4, r0
 800b58c:	d14d      	bne.n	800b62a <_malloc_r+0xde>
 800b58e:	6834      	ldr	r4, [r6, #0]
 800b590:	4626      	mov	r6, r4
 800b592:	2e00      	cmp	r6, #0
 800b594:	d140      	bne.n	800b618 <_malloc_r+0xcc>
 800b596:	6823      	ldr	r3, [r4, #0]
 800b598:	4631      	mov	r1, r6
 800b59a:	4638      	mov	r0, r7
 800b59c:	eb04 0803 	add.w	r8, r4, r3
 800b5a0:	f000 f9ae 	bl	800b900 <_sbrk_r>
 800b5a4:	4580      	cmp	r8, r0
 800b5a6:	d13a      	bne.n	800b61e <_malloc_r+0xd2>
 800b5a8:	6821      	ldr	r1, [r4, #0]
 800b5aa:	3503      	adds	r5, #3
 800b5ac:	1a6d      	subs	r5, r5, r1
 800b5ae:	f025 0503 	bic.w	r5, r5, #3
 800b5b2:	3508      	adds	r5, #8
 800b5b4:	2d0c      	cmp	r5, #12
 800b5b6:	bf38      	it	cc
 800b5b8:	250c      	movcc	r5, #12
 800b5ba:	4629      	mov	r1, r5
 800b5bc:	4638      	mov	r0, r7
 800b5be:	f7ff ffa5 	bl	800b50c <sbrk_aligned>
 800b5c2:	3001      	adds	r0, #1
 800b5c4:	d02b      	beq.n	800b61e <_malloc_r+0xd2>
 800b5c6:	6823      	ldr	r3, [r4, #0]
 800b5c8:	442b      	add	r3, r5
 800b5ca:	6023      	str	r3, [r4, #0]
 800b5cc:	e00e      	b.n	800b5ec <_malloc_r+0xa0>
 800b5ce:	6822      	ldr	r2, [r4, #0]
 800b5d0:	1b52      	subs	r2, r2, r5
 800b5d2:	d41e      	bmi.n	800b612 <_malloc_r+0xc6>
 800b5d4:	2a0b      	cmp	r2, #11
 800b5d6:	d916      	bls.n	800b606 <_malloc_r+0xba>
 800b5d8:	1961      	adds	r1, r4, r5
 800b5da:	42a3      	cmp	r3, r4
 800b5dc:	6025      	str	r5, [r4, #0]
 800b5de:	bf18      	it	ne
 800b5e0:	6059      	strne	r1, [r3, #4]
 800b5e2:	6863      	ldr	r3, [r4, #4]
 800b5e4:	bf08      	it	eq
 800b5e6:	6031      	streq	r1, [r6, #0]
 800b5e8:	5162      	str	r2, [r4, r5]
 800b5ea:	604b      	str	r3, [r1, #4]
 800b5ec:	4638      	mov	r0, r7
 800b5ee:	f104 060b 	add.w	r6, r4, #11
 800b5f2:	f000 fa07 	bl	800ba04 <__malloc_unlock>
 800b5f6:	f026 0607 	bic.w	r6, r6, #7
 800b5fa:	1d23      	adds	r3, r4, #4
 800b5fc:	1af2      	subs	r2, r6, r3
 800b5fe:	d0b6      	beq.n	800b56e <_malloc_r+0x22>
 800b600:	1b9b      	subs	r3, r3, r6
 800b602:	50a3      	str	r3, [r4, r2]
 800b604:	e7b3      	b.n	800b56e <_malloc_r+0x22>
 800b606:	6862      	ldr	r2, [r4, #4]
 800b608:	42a3      	cmp	r3, r4
 800b60a:	bf0c      	ite	eq
 800b60c:	6032      	streq	r2, [r6, #0]
 800b60e:	605a      	strne	r2, [r3, #4]
 800b610:	e7ec      	b.n	800b5ec <_malloc_r+0xa0>
 800b612:	4623      	mov	r3, r4
 800b614:	6864      	ldr	r4, [r4, #4]
 800b616:	e7b2      	b.n	800b57e <_malloc_r+0x32>
 800b618:	4634      	mov	r4, r6
 800b61a:	6876      	ldr	r6, [r6, #4]
 800b61c:	e7b9      	b.n	800b592 <_malloc_r+0x46>
 800b61e:	230c      	movs	r3, #12
 800b620:	603b      	str	r3, [r7, #0]
 800b622:	4638      	mov	r0, r7
 800b624:	f000 f9ee 	bl	800ba04 <__malloc_unlock>
 800b628:	e7a1      	b.n	800b56e <_malloc_r+0x22>
 800b62a:	6025      	str	r5, [r4, #0]
 800b62c:	e7de      	b.n	800b5ec <_malloc_r+0xa0>
 800b62e:	bf00      	nop
 800b630:	20004444 	.word	0x20004444

0800b634 <__ssputs_r>:
 800b634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b638:	688e      	ldr	r6, [r1, #8]
 800b63a:	429e      	cmp	r6, r3
 800b63c:	4682      	mov	sl, r0
 800b63e:	460c      	mov	r4, r1
 800b640:	4690      	mov	r8, r2
 800b642:	461f      	mov	r7, r3
 800b644:	d838      	bhi.n	800b6b8 <__ssputs_r+0x84>
 800b646:	898a      	ldrh	r2, [r1, #12]
 800b648:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b64c:	d032      	beq.n	800b6b4 <__ssputs_r+0x80>
 800b64e:	6825      	ldr	r5, [r4, #0]
 800b650:	6909      	ldr	r1, [r1, #16]
 800b652:	eba5 0901 	sub.w	r9, r5, r1
 800b656:	6965      	ldr	r5, [r4, #20]
 800b658:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b65c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b660:	3301      	adds	r3, #1
 800b662:	444b      	add	r3, r9
 800b664:	106d      	asrs	r5, r5, #1
 800b666:	429d      	cmp	r5, r3
 800b668:	bf38      	it	cc
 800b66a:	461d      	movcc	r5, r3
 800b66c:	0553      	lsls	r3, r2, #21
 800b66e:	d531      	bpl.n	800b6d4 <__ssputs_r+0xa0>
 800b670:	4629      	mov	r1, r5
 800b672:	f7ff ff6b 	bl	800b54c <_malloc_r>
 800b676:	4606      	mov	r6, r0
 800b678:	b950      	cbnz	r0, 800b690 <__ssputs_r+0x5c>
 800b67a:	230c      	movs	r3, #12
 800b67c:	f8ca 3000 	str.w	r3, [sl]
 800b680:	89a3      	ldrh	r3, [r4, #12]
 800b682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b686:	81a3      	strh	r3, [r4, #12]
 800b688:	f04f 30ff 	mov.w	r0, #4294967295
 800b68c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b690:	6921      	ldr	r1, [r4, #16]
 800b692:	464a      	mov	r2, r9
 800b694:	f7ff fa08 	bl	800aaa8 <memcpy>
 800b698:	89a3      	ldrh	r3, [r4, #12]
 800b69a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b69e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6a2:	81a3      	strh	r3, [r4, #12]
 800b6a4:	6126      	str	r6, [r4, #16]
 800b6a6:	6165      	str	r5, [r4, #20]
 800b6a8:	444e      	add	r6, r9
 800b6aa:	eba5 0509 	sub.w	r5, r5, r9
 800b6ae:	6026      	str	r6, [r4, #0]
 800b6b0:	60a5      	str	r5, [r4, #8]
 800b6b2:	463e      	mov	r6, r7
 800b6b4:	42be      	cmp	r6, r7
 800b6b6:	d900      	bls.n	800b6ba <__ssputs_r+0x86>
 800b6b8:	463e      	mov	r6, r7
 800b6ba:	6820      	ldr	r0, [r4, #0]
 800b6bc:	4632      	mov	r2, r6
 800b6be:	4641      	mov	r1, r8
 800b6c0:	f000 f980 	bl	800b9c4 <memmove>
 800b6c4:	68a3      	ldr	r3, [r4, #8]
 800b6c6:	1b9b      	subs	r3, r3, r6
 800b6c8:	60a3      	str	r3, [r4, #8]
 800b6ca:	6823      	ldr	r3, [r4, #0]
 800b6cc:	4433      	add	r3, r6
 800b6ce:	6023      	str	r3, [r4, #0]
 800b6d0:	2000      	movs	r0, #0
 800b6d2:	e7db      	b.n	800b68c <__ssputs_r+0x58>
 800b6d4:	462a      	mov	r2, r5
 800b6d6:	f000 f99b 	bl	800ba10 <_realloc_r>
 800b6da:	4606      	mov	r6, r0
 800b6dc:	2800      	cmp	r0, #0
 800b6de:	d1e1      	bne.n	800b6a4 <__ssputs_r+0x70>
 800b6e0:	6921      	ldr	r1, [r4, #16]
 800b6e2:	4650      	mov	r0, sl
 800b6e4:	f7ff fec6 	bl	800b474 <_free_r>
 800b6e8:	e7c7      	b.n	800b67a <__ssputs_r+0x46>
	...

0800b6ec <_svfiprintf_r>:
 800b6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6f0:	4698      	mov	r8, r3
 800b6f2:	898b      	ldrh	r3, [r1, #12]
 800b6f4:	061b      	lsls	r3, r3, #24
 800b6f6:	b09d      	sub	sp, #116	; 0x74
 800b6f8:	4607      	mov	r7, r0
 800b6fa:	460d      	mov	r5, r1
 800b6fc:	4614      	mov	r4, r2
 800b6fe:	d50e      	bpl.n	800b71e <_svfiprintf_r+0x32>
 800b700:	690b      	ldr	r3, [r1, #16]
 800b702:	b963      	cbnz	r3, 800b71e <_svfiprintf_r+0x32>
 800b704:	2140      	movs	r1, #64	; 0x40
 800b706:	f7ff ff21 	bl	800b54c <_malloc_r>
 800b70a:	6028      	str	r0, [r5, #0]
 800b70c:	6128      	str	r0, [r5, #16]
 800b70e:	b920      	cbnz	r0, 800b71a <_svfiprintf_r+0x2e>
 800b710:	230c      	movs	r3, #12
 800b712:	603b      	str	r3, [r7, #0]
 800b714:	f04f 30ff 	mov.w	r0, #4294967295
 800b718:	e0d1      	b.n	800b8be <_svfiprintf_r+0x1d2>
 800b71a:	2340      	movs	r3, #64	; 0x40
 800b71c:	616b      	str	r3, [r5, #20]
 800b71e:	2300      	movs	r3, #0
 800b720:	9309      	str	r3, [sp, #36]	; 0x24
 800b722:	2320      	movs	r3, #32
 800b724:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b728:	f8cd 800c 	str.w	r8, [sp, #12]
 800b72c:	2330      	movs	r3, #48	; 0x30
 800b72e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b8d8 <_svfiprintf_r+0x1ec>
 800b732:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b736:	f04f 0901 	mov.w	r9, #1
 800b73a:	4623      	mov	r3, r4
 800b73c:	469a      	mov	sl, r3
 800b73e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b742:	b10a      	cbz	r2, 800b748 <_svfiprintf_r+0x5c>
 800b744:	2a25      	cmp	r2, #37	; 0x25
 800b746:	d1f9      	bne.n	800b73c <_svfiprintf_r+0x50>
 800b748:	ebba 0b04 	subs.w	fp, sl, r4
 800b74c:	d00b      	beq.n	800b766 <_svfiprintf_r+0x7a>
 800b74e:	465b      	mov	r3, fp
 800b750:	4622      	mov	r2, r4
 800b752:	4629      	mov	r1, r5
 800b754:	4638      	mov	r0, r7
 800b756:	f7ff ff6d 	bl	800b634 <__ssputs_r>
 800b75a:	3001      	adds	r0, #1
 800b75c:	f000 80aa 	beq.w	800b8b4 <_svfiprintf_r+0x1c8>
 800b760:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b762:	445a      	add	r2, fp
 800b764:	9209      	str	r2, [sp, #36]	; 0x24
 800b766:	f89a 3000 	ldrb.w	r3, [sl]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	f000 80a2 	beq.w	800b8b4 <_svfiprintf_r+0x1c8>
 800b770:	2300      	movs	r3, #0
 800b772:	f04f 32ff 	mov.w	r2, #4294967295
 800b776:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b77a:	f10a 0a01 	add.w	sl, sl, #1
 800b77e:	9304      	str	r3, [sp, #16]
 800b780:	9307      	str	r3, [sp, #28]
 800b782:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b786:	931a      	str	r3, [sp, #104]	; 0x68
 800b788:	4654      	mov	r4, sl
 800b78a:	2205      	movs	r2, #5
 800b78c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b790:	4851      	ldr	r0, [pc, #324]	; (800b8d8 <_svfiprintf_r+0x1ec>)
 800b792:	f7f4 fd25 	bl	80001e0 <memchr>
 800b796:	9a04      	ldr	r2, [sp, #16]
 800b798:	b9d8      	cbnz	r0, 800b7d2 <_svfiprintf_r+0xe6>
 800b79a:	06d0      	lsls	r0, r2, #27
 800b79c:	bf44      	itt	mi
 800b79e:	2320      	movmi	r3, #32
 800b7a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7a4:	0711      	lsls	r1, r2, #28
 800b7a6:	bf44      	itt	mi
 800b7a8:	232b      	movmi	r3, #43	; 0x2b
 800b7aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7ae:	f89a 3000 	ldrb.w	r3, [sl]
 800b7b2:	2b2a      	cmp	r3, #42	; 0x2a
 800b7b4:	d015      	beq.n	800b7e2 <_svfiprintf_r+0xf6>
 800b7b6:	9a07      	ldr	r2, [sp, #28]
 800b7b8:	4654      	mov	r4, sl
 800b7ba:	2000      	movs	r0, #0
 800b7bc:	f04f 0c0a 	mov.w	ip, #10
 800b7c0:	4621      	mov	r1, r4
 800b7c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7c6:	3b30      	subs	r3, #48	; 0x30
 800b7c8:	2b09      	cmp	r3, #9
 800b7ca:	d94e      	bls.n	800b86a <_svfiprintf_r+0x17e>
 800b7cc:	b1b0      	cbz	r0, 800b7fc <_svfiprintf_r+0x110>
 800b7ce:	9207      	str	r2, [sp, #28]
 800b7d0:	e014      	b.n	800b7fc <_svfiprintf_r+0x110>
 800b7d2:	eba0 0308 	sub.w	r3, r0, r8
 800b7d6:	fa09 f303 	lsl.w	r3, r9, r3
 800b7da:	4313      	orrs	r3, r2
 800b7dc:	9304      	str	r3, [sp, #16]
 800b7de:	46a2      	mov	sl, r4
 800b7e0:	e7d2      	b.n	800b788 <_svfiprintf_r+0x9c>
 800b7e2:	9b03      	ldr	r3, [sp, #12]
 800b7e4:	1d19      	adds	r1, r3, #4
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	9103      	str	r1, [sp, #12]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	bfbb      	ittet	lt
 800b7ee:	425b      	neglt	r3, r3
 800b7f0:	f042 0202 	orrlt.w	r2, r2, #2
 800b7f4:	9307      	strge	r3, [sp, #28]
 800b7f6:	9307      	strlt	r3, [sp, #28]
 800b7f8:	bfb8      	it	lt
 800b7fa:	9204      	strlt	r2, [sp, #16]
 800b7fc:	7823      	ldrb	r3, [r4, #0]
 800b7fe:	2b2e      	cmp	r3, #46	; 0x2e
 800b800:	d10c      	bne.n	800b81c <_svfiprintf_r+0x130>
 800b802:	7863      	ldrb	r3, [r4, #1]
 800b804:	2b2a      	cmp	r3, #42	; 0x2a
 800b806:	d135      	bne.n	800b874 <_svfiprintf_r+0x188>
 800b808:	9b03      	ldr	r3, [sp, #12]
 800b80a:	1d1a      	adds	r2, r3, #4
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	9203      	str	r2, [sp, #12]
 800b810:	2b00      	cmp	r3, #0
 800b812:	bfb8      	it	lt
 800b814:	f04f 33ff 	movlt.w	r3, #4294967295
 800b818:	3402      	adds	r4, #2
 800b81a:	9305      	str	r3, [sp, #20]
 800b81c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b8e8 <_svfiprintf_r+0x1fc>
 800b820:	7821      	ldrb	r1, [r4, #0]
 800b822:	2203      	movs	r2, #3
 800b824:	4650      	mov	r0, sl
 800b826:	f7f4 fcdb 	bl	80001e0 <memchr>
 800b82a:	b140      	cbz	r0, 800b83e <_svfiprintf_r+0x152>
 800b82c:	2340      	movs	r3, #64	; 0x40
 800b82e:	eba0 000a 	sub.w	r0, r0, sl
 800b832:	fa03 f000 	lsl.w	r0, r3, r0
 800b836:	9b04      	ldr	r3, [sp, #16]
 800b838:	4303      	orrs	r3, r0
 800b83a:	3401      	adds	r4, #1
 800b83c:	9304      	str	r3, [sp, #16]
 800b83e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b842:	4826      	ldr	r0, [pc, #152]	; (800b8dc <_svfiprintf_r+0x1f0>)
 800b844:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b848:	2206      	movs	r2, #6
 800b84a:	f7f4 fcc9 	bl	80001e0 <memchr>
 800b84e:	2800      	cmp	r0, #0
 800b850:	d038      	beq.n	800b8c4 <_svfiprintf_r+0x1d8>
 800b852:	4b23      	ldr	r3, [pc, #140]	; (800b8e0 <_svfiprintf_r+0x1f4>)
 800b854:	bb1b      	cbnz	r3, 800b89e <_svfiprintf_r+0x1b2>
 800b856:	9b03      	ldr	r3, [sp, #12]
 800b858:	3307      	adds	r3, #7
 800b85a:	f023 0307 	bic.w	r3, r3, #7
 800b85e:	3308      	adds	r3, #8
 800b860:	9303      	str	r3, [sp, #12]
 800b862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b864:	4433      	add	r3, r6
 800b866:	9309      	str	r3, [sp, #36]	; 0x24
 800b868:	e767      	b.n	800b73a <_svfiprintf_r+0x4e>
 800b86a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b86e:	460c      	mov	r4, r1
 800b870:	2001      	movs	r0, #1
 800b872:	e7a5      	b.n	800b7c0 <_svfiprintf_r+0xd4>
 800b874:	2300      	movs	r3, #0
 800b876:	3401      	adds	r4, #1
 800b878:	9305      	str	r3, [sp, #20]
 800b87a:	4619      	mov	r1, r3
 800b87c:	f04f 0c0a 	mov.w	ip, #10
 800b880:	4620      	mov	r0, r4
 800b882:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b886:	3a30      	subs	r2, #48	; 0x30
 800b888:	2a09      	cmp	r2, #9
 800b88a:	d903      	bls.n	800b894 <_svfiprintf_r+0x1a8>
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d0c5      	beq.n	800b81c <_svfiprintf_r+0x130>
 800b890:	9105      	str	r1, [sp, #20]
 800b892:	e7c3      	b.n	800b81c <_svfiprintf_r+0x130>
 800b894:	fb0c 2101 	mla	r1, ip, r1, r2
 800b898:	4604      	mov	r4, r0
 800b89a:	2301      	movs	r3, #1
 800b89c:	e7f0      	b.n	800b880 <_svfiprintf_r+0x194>
 800b89e:	ab03      	add	r3, sp, #12
 800b8a0:	9300      	str	r3, [sp, #0]
 800b8a2:	462a      	mov	r2, r5
 800b8a4:	4b0f      	ldr	r3, [pc, #60]	; (800b8e4 <_svfiprintf_r+0x1f8>)
 800b8a6:	a904      	add	r1, sp, #16
 800b8a8:	4638      	mov	r0, r7
 800b8aa:	f7fc fa47 	bl	8007d3c <_printf_float>
 800b8ae:	1c42      	adds	r2, r0, #1
 800b8b0:	4606      	mov	r6, r0
 800b8b2:	d1d6      	bne.n	800b862 <_svfiprintf_r+0x176>
 800b8b4:	89ab      	ldrh	r3, [r5, #12]
 800b8b6:	065b      	lsls	r3, r3, #25
 800b8b8:	f53f af2c 	bmi.w	800b714 <_svfiprintf_r+0x28>
 800b8bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b8be:	b01d      	add	sp, #116	; 0x74
 800b8c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8c4:	ab03      	add	r3, sp, #12
 800b8c6:	9300      	str	r3, [sp, #0]
 800b8c8:	462a      	mov	r2, r5
 800b8ca:	4b06      	ldr	r3, [pc, #24]	; (800b8e4 <_svfiprintf_r+0x1f8>)
 800b8cc:	a904      	add	r1, sp, #16
 800b8ce:	4638      	mov	r0, r7
 800b8d0:	f7fc fcd8 	bl	8008284 <_printf_i>
 800b8d4:	e7eb      	b.n	800b8ae <_svfiprintf_r+0x1c2>
 800b8d6:	bf00      	nop
 800b8d8:	0800f7ec 	.word	0x0800f7ec
 800b8dc:	0800f7f6 	.word	0x0800f7f6
 800b8e0:	08007d3d 	.word	0x08007d3d
 800b8e4:	0800b635 	.word	0x0800b635
 800b8e8:	0800f7f2 	.word	0x0800f7f2
 800b8ec:	00000000 	.word	0x00000000

0800b8f0 <nan>:
 800b8f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b8f8 <nan+0x8>
 800b8f4:	4770      	bx	lr
 800b8f6:	bf00      	nop
 800b8f8:	00000000 	.word	0x00000000
 800b8fc:	7ff80000 	.word	0x7ff80000

0800b900 <_sbrk_r>:
 800b900:	b538      	push	{r3, r4, r5, lr}
 800b902:	4d06      	ldr	r5, [pc, #24]	; (800b91c <_sbrk_r+0x1c>)
 800b904:	2300      	movs	r3, #0
 800b906:	4604      	mov	r4, r0
 800b908:	4608      	mov	r0, r1
 800b90a:	602b      	str	r3, [r5, #0]
 800b90c:	f7f6 f98e 	bl	8001c2c <_sbrk>
 800b910:	1c43      	adds	r3, r0, #1
 800b912:	d102      	bne.n	800b91a <_sbrk_r+0x1a>
 800b914:	682b      	ldr	r3, [r5, #0]
 800b916:	b103      	cbz	r3, 800b91a <_sbrk_r+0x1a>
 800b918:	6023      	str	r3, [r4, #0]
 800b91a:	bd38      	pop	{r3, r4, r5, pc}
 800b91c:	2000444c 	.word	0x2000444c

0800b920 <strncmp>:
 800b920:	b510      	push	{r4, lr}
 800b922:	b17a      	cbz	r2, 800b944 <strncmp+0x24>
 800b924:	4603      	mov	r3, r0
 800b926:	3901      	subs	r1, #1
 800b928:	1884      	adds	r4, r0, r2
 800b92a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b92e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b932:	4290      	cmp	r0, r2
 800b934:	d101      	bne.n	800b93a <strncmp+0x1a>
 800b936:	42a3      	cmp	r3, r4
 800b938:	d101      	bne.n	800b93e <strncmp+0x1e>
 800b93a:	1a80      	subs	r0, r0, r2
 800b93c:	bd10      	pop	{r4, pc}
 800b93e:	2800      	cmp	r0, #0
 800b940:	d1f3      	bne.n	800b92a <strncmp+0xa>
 800b942:	e7fa      	b.n	800b93a <strncmp+0x1a>
 800b944:	4610      	mov	r0, r2
 800b946:	e7f9      	b.n	800b93c <strncmp+0x1c>

0800b948 <__ascii_wctomb>:
 800b948:	b149      	cbz	r1, 800b95e <__ascii_wctomb+0x16>
 800b94a:	2aff      	cmp	r2, #255	; 0xff
 800b94c:	bf85      	ittet	hi
 800b94e:	238a      	movhi	r3, #138	; 0x8a
 800b950:	6003      	strhi	r3, [r0, #0]
 800b952:	700a      	strbls	r2, [r1, #0]
 800b954:	f04f 30ff 	movhi.w	r0, #4294967295
 800b958:	bf98      	it	ls
 800b95a:	2001      	movls	r0, #1
 800b95c:	4770      	bx	lr
 800b95e:	4608      	mov	r0, r1
 800b960:	4770      	bx	lr
	...

0800b964 <__assert_func>:
 800b964:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b966:	4614      	mov	r4, r2
 800b968:	461a      	mov	r2, r3
 800b96a:	4b09      	ldr	r3, [pc, #36]	; (800b990 <__assert_func+0x2c>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	4605      	mov	r5, r0
 800b970:	68d8      	ldr	r0, [r3, #12]
 800b972:	b14c      	cbz	r4, 800b988 <__assert_func+0x24>
 800b974:	4b07      	ldr	r3, [pc, #28]	; (800b994 <__assert_func+0x30>)
 800b976:	9100      	str	r1, [sp, #0]
 800b978:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b97c:	4906      	ldr	r1, [pc, #24]	; (800b998 <__assert_func+0x34>)
 800b97e:	462b      	mov	r3, r5
 800b980:	f000 f80e 	bl	800b9a0 <fiprintf>
 800b984:	f000 fa8c 	bl	800bea0 <abort>
 800b988:	4b04      	ldr	r3, [pc, #16]	; (800b99c <__assert_func+0x38>)
 800b98a:	461c      	mov	r4, r3
 800b98c:	e7f3      	b.n	800b976 <__assert_func+0x12>
 800b98e:	bf00      	nop
 800b990:	2000000c 	.word	0x2000000c
 800b994:	0800f7fd 	.word	0x0800f7fd
 800b998:	0800f80a 	.word	0x0800f80a
 800b99c:	0800f838 	.word	0x0800f838

0800b9a0 <fiprintf>:
 800b9a0:	b40e      	push	{r1, r2, r3}
 800b9a2:	b503      	push	{r0, r1, lr}
 800b9a4:	4601      	mov	r1, r0
 800b9a6:	ab03      	add	r3, sp, #12
 800b9a8:	4805      	ldr	r0, [pc, #20]	; (800b9c0 <fiprintf+0x20>)
 800b9aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9ae:	6800      	ldr	r0, [r0, #0]
 800b9b0:	9301      	str	r3, [sp, #4]
 800b9b2:	f000 f885 	bl	800bac0 <_vfiprintf_r>
 800b9b6:	b002      	add	sp, #8
 800b9b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9bc:	b003      	add	sp, #12
 800b9be:	4770      	bx	lr
 800b9c0:	2000000c 	.word	0x2000000c

0800b9c4 <memmove>:
 800b9c4:	4288      	cmp	r0, r1
 800b9c6:	b510      	push	{r4, lr}
 800b9c8:	eb01 0402 	add.w	r4, r1, r2
 800b9cc:	d902      	bls.n	800b9d4 <memmove+0x10>
 800b9ce:	4284      	cmp	r4, r0
 800b9d0:	4623      	mov	r3, r4
 800b9d2:	d807      	bhi.n	800b9e4 <memmove+0x20>
 800b9d4:	1e43      	subs	r3, r0, #1
 800b9d6:	42a1      	cmp	r1, r4
 800b9d8:	d008      	beq.n	800b9ec <memmove+0x28>
 800b9da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b9de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b9e2:	e7f8      	b.n	800b9d6 <memmove+0x12>
 800b9e4:	4402      	add	r2, r0
 800b9e6:	4601      	mov	r1, r0
 800b9e8:	428a      	cmp	r2, r1
 800b9ea:	d100      	bne.n	800b9ee <memmove+0x2a>
 800b9ec:	bd10      	pop	{r4, pc}
 800b9ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b9f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b9f6:	e7f7      	b.n	800b9e8 <memmove+0x24>

0800b9f8 <__malloc_lock>:
 800b9f8:	4801      	ldr	r0, [pc, #4]	; (800ba00 <__malloc_lock+0x8>)
 800b9fa:	f000 bc11 	b.w	800c220 <__retarget_lock_acquire_recursive>
 800b9fe:	bf00      	nop
 800ba00:	20004450 	.word	0x20004450

0800ba04 <__malloc_unlock>:
 800ba04:	4801      	ldr	r0, [pc, #4]	; (800ba0c <__malloc_unlock+0x8>)
 800ba06:	f000 bc0c 	b.w	800c222 <__retarget_lock_release_recursive>
 800ba0a:	bf00      	nop
 800ba0c:	20004450 	.word	0x20004450

0800ba10 <_realloc_r>:
 800ba10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba14:	4680      	mov	r8, r0
 800ba16:	4614      	mov	r4, r2
 800ba18:	460e      	mov	r6, r1
 800ba1a:	b921      	cbnz	r1, 800ba26 <_realloc_r+0x16>
 800ba1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba20:	4611      	mov	r1, r2
 800ba22:	f7ff bd93 	b.w	800b54c <_malloc_r>
 800ba26:	b92a      	cbnz	r2, 800ba34 <_realloc_r+0x24>
 800ba28:	f7ff fd24 	bl	800b474 <_free_r>
 800ba2c:	4625      	mov	r5, r4
 800ba2e:	4628      	mov	r0, r5
 800ba30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba34:	f000 fc5c 	bl	800c2f0 <_malloc_usable_size_r>
 800ba38:	4284      	cmp	r4, r0
 800ba3a:	4607      	mov	r7, r0
 800ba3c:	d802      	bhi.n	800ba44 <_realloc_r+0x34>
 800ba3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ba42:	d812      	bhi.n	800ba6a <_realloc_r+0x5a>
 800ba44:	4621      	mov	r1, r4
 800ba46:	4640      	mov	r0, r8
 800ba48:	f7ff fd80 	bl	800b54c <_malloc_r>
 800ba4c:	4605      	mov	r5, r0
 800ba4e:	2800      	cmp	r0, #0
 800ba50:	d0ed      	beq.n	800ba2e <_realloc_r+0x1e>
 800ba52:	42bc      	cmp	r4, r7
 800ba54:	4622      	mov	r2, r4
 800ba56:	4631      	mov	r1, r6
 800ba58:	bf28      	it	cs
 800ba5a:	463a      	movcs	r2, r7
 800ba5c:	f7ff f824 	bl	800aaa8 <memcpy>
 800ba60:	4631      	mov	r1, r6
 800ba62:	4640      	mov	r0, r8
 800ba64:	f7ff fd06 	bl	800b474 <_free_r>
 800ba68:	e7e1      	b.n	800ba2e <_realloc_r+0x1e>
 800ba6a:	4635      	mov	r5, r6
 800ba6c:	e7df      	b.n	800ba2e <_realloc_r+0x1e>

0800ba6e <__sfputc_r>:
 800ba6e:	6893      	ldr	r3, [r2, #8]
 800ba70:	3b01      	subs	r3, #1
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	b410      	push	{r4}
 800ba76:	6093      	str	r3, [r2, #8]
 800ba78:	da08      	bge.n	800ba8c <__sfputc_r+0x1e>
 800ba7a:	6994      	ldr	r4, [r2, #24]
 800ba7c:	42a3      	cmp	r3, r4
 800ba7e:	db01      	blt.n	800ba84 <__sfputc_r+0x16>
 800ba80:	290a      	cmp	r1, #10
 800ba82:	d103      	bne.n	800ba8c <__sfputc_r+0x1e>
 800ba84:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba88:	f000 b94a 	b.w	800bd20 <__swbuf_r>
 800ba8c:	6813      	ldr	r3, [r2, #0]
 800ba8e:	1c58      	adds	r0, r3, #1
 800ba90:	6010      	str	r0, [r2, #0]
 800ba92:	7019      	strb	r1, [r3, #0]
 800ba94:	4608      	mov	r0, r1
 800ba96:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba9a:	4770      	bx	lr

0800ba9c <__sfputs_r>:
 800ba9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba9e:	4606      	mov	r6, r0
 800baa0:	460f      	mov	r7, r1
 800baa2:	4614      	mov	r4, r2
 800baa4:	18d5      	adds	r5, r2, r3
 800baa6:	42ac      	cmp	r4, r5
 800baa8:	d101      	bne.n	800baae <__sfputs_r+0x12>
 800baaa:	2000      	movs	r0, #0
 800baac:	e007      	b.n	800babe <__sfputs_r+0x22>
 800baae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bab2:	463a      	mov	r2, r7
 800bab4:	4630      	mov	r0, r6
 800bab6:	f7ff ffda 	bl	800ba6e <__sfputc_r>
 800baba:	1c43      	adds	r3, r0, #1
 800babc:	d1f3      	bne.n	800baa6 <__sfputs_r+0xa>
 800babe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bac0 <_vfiprintf_r>:
 800bac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bac4:	460d      	mov	r5, r1
 800bac6:	b09d      	sub	sp, #116	; 0x74
 800bac8:	4614      	mov	r4, r2
 800baca:	4698      	mov	r8, r3
 800bacc:	4606      	mov	r6, r0
 800bace:	b118      	cbz	r0, 800bad8 <_vfiprintf_r+0x18>
 800bad0:	6983      	ldr	r3, [r0, #24]
 800bad2:	b90b      	cbnz	r3, 800bad8 <_vfiprintf_r+0x18>
 800bad4:	f000 fb06 	bl	800c0e4 <__sinit>
 800bad8:	4b89      	ldr	r3, [pc, #548]	; (800bd00 <_vfiprintf_r+0x240>)
 800bada:	429d      	cmp	r5, r3
 800badc:	d11b      	bne.n	800bb16 <_vfiprintf_r+0x56>
 800bade:	6875      	ldr	r5, [r6, #4]
 800bae0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bae2:	07d9      	lsls	r1, r3, #31
 800bae4:	d405      	bmi.n	800baf2 <_vfiprintf_r+0x32>
 800bae6:	89ab      	ldrh	r3, [r5, #12]
 800bae8:	059a      	lsls	r2, r3, #22
 800baea:	d402      	bmi.n	800baf2 <_vfiprintf_r+0x32>
 800baec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800baee:	f000 fb97 	bl	800c220 <__retarget_lock_acquire_recursive>
 800baf2:	89ab      	ldrh	r3, [r5, #12]
 800baf4:	071b      	lsls	r3, r3, #28
 800baf6:	d501      	bpl.n	800bafc <_vfiprintf_r+0x3c>
 800baf8:	692b      	ldr	r3, [r5, #16]
 800bafa:	b9eb      	cbnz	r3, 800bb38 <_vfiprintf_r+0x78>
 800bafc:	4629      	mov	r1, r5
 800bafe:	4630      	mov	r0, r6
 800bb00:	f000 f960 	bl	800bdc4 <__swsetup_r>
 800bb04:	b1c0      	cbz	r0, 800bb38 <_vfiprintf_r+0x78>
 800bb06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb08:	07dc      	lsls	r4, r3, #31
 800bb0a:	d50e      	bpl.n	800bb2a <_vfiprintf_r+0x6a>
 800bb0c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb10:	b01d      	add	sp, #116	; 0x74
 800bb12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb16:	4b7b      	ldr	r3, [pc, #492]	; (800bd04 <_vfiprintf_r+0x244>)
 800bb18:	429d      	cmp	r5, r3
 800bb1a:	d101      	bne.n	800bb20 <_vfiprintf_r+0x60>
 800bb1c:	68b5      	ldr	r5, [r6, #8]
 800bb1e:	e7df      	b.n	800bae0 <_vfiprintf_r+0x20>
 800bb20:	4b79      	ldr	r3, [pc, #484]	; (800bd08 <_vfiprintf_r+0x248>)
 800bb22:	429d      	cmp	r5, r3
 800bb24:	bf08      	it	eq
 800bb26:	68f5      	ldreq	r5, [r6, #12]
 800bb28:	e7da      	b.n	800bae0 <_vfiprintf_r+0x20>
 800bb2a:	89ab      	ldrh	r3, [r5, #12]
 800bb2c:	0598      	lsls	r0, r3, #22
 800bb2e:	d4ed      	bmi.n	800bb0c <_vfiprintf_r+0x4c>
 800bb30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb32:	f000 fb76 	bl	800c222 <__retarget_lock_release_recursive>
 800bb36:	e7e9      	b.n	800bb0c <_vfiprintf_r+0x4c>
 800bb38:	2300      	movs	r3, #0
 800bb3a:	9309      	str	r3, [sp, #36]	; 0x24
 800bb3c:	2320      	movs	r3, #32
 800bb3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb42:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb46:	2330      	movs	r3, #48	; 0x30
 800bb48:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bd0c <_vfiprintf_r+0x24c>
 800bb4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb50:	f04f 0901 	mov.w	r9, #1
 800bb54:	4623      	mov	r3, r4
 800bb56:	469a      	mov	sl, r3
 800bb58:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb5c:	b10a      	cbz	r2, 800bb62 <_vfiprintf_r+0xa2>
 800bb5e:	2a25      	cmp	r2, #37	; 0x25
 800bb60:	d1f9      	bne.n	800bb56 <_vfiprintf_r+0x96>
 800bb62:	ebba 0b04 	subs.w	fp, sl, r4
 800bb66:	d00b      	beq.n	800bb80 <_vfiprintf_r+0xc0>
 800bb68:	465b      	mov	r3, fp
 800bb6a:	4622      	mov	r2, r4
 800bb6c:	4629      	mov	r1, r5
 800bb6e:	4630      	mov	r0, r6
 800bb70:	f7ff ff94 	bl	800ba9c <__sfputs_r>
 800bb74:	3001      	adds	r0, #1
 800bb76:	f000 80aa 	beq.w	800bcce <_vfiprintf_r+0x20e>
 800bb7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb7c:	445a      	add	r2, fp
 800bb7e:	9209      	str	r2, [sp, #36]	; 0x24
 800bb80:	f89a 3000 	ldrb.w	r3, [sl]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	f000 80a2 	beq.w	800bcce <_vfiprintf_r+0x20e>
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	f04f 32ff 	mov.w	r2, #4294967295
 800bb90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb94:	f10a 0a01 	add.w	sl, sl, #1
 800bb98:	9304      	str	r3, [sp, #16]
 800bb9a:	9307      	str	r3, [sp, #28]
 800bb9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bba0:	931a      	str	r3, [sp, #104]	; 0x68
 800bba2:	4654      	mov	r4, sl
 800bba4:	2205      	movs	r2, #5
 800bba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbaa:	4858      	ldr	r0, [pc, #352]	; (800bd0c <_vfiprintf_r+0x24c>)
 800bbac:	f7f4 fb18 	bl	80001e0 <memchr>
 800bbb0:	9a04      	ldr	r2, [sp, #16]
 800bbb2:	b9d8      	cbnz	r0, 800bbec <_vfiprintf_r+0x12c>
 800bbb4:	06d1      	lsls	r1, r2, #27
 800bbb6:	bf44      	itt	mi
 800bbb8:	2320      	movmi	r3, #32
 800bbba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbbe:	0713      	lsls	r3, r2, #28
 800bbc0:	bf44      	itt	mi
 800bbc2:	232b      	movmi	r3, #43	; 0x2b
 800bbc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbc8:	f89a 3000 	ldrb.w	r3, [sl]
 800bbcc:	2b2a      	cmp	r3, #42	; 0x2a
 800bbce:	d015      	beq.n	800bbfc <_vfiprintf_r+0x13c>
 800bbd0:	9a07      	ldr	r2, [sp, #28]
 800bbd2:	4654      	mov	r4, sl
 800bbd4:	2000      	movs	r0, #0
 800bbd6:	f04f 0c0a 	mov.w	ip, #10
 800bbda:	4621      	mov	r1, r4
 800bbdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbe0:	3b30      	subs	r3, #48	; 0x30
 800bbe2:	2b09      	cmp	r3, #9
 800bbe4:	d94e      	bls.n	800bc84 <_vfiprintf_r+0x1c4>
 800bbe6:	b1b0      	cbz	r0, 800bc16 <_vfiprintf_r+0x156>
 800bbe8:	9207      	str	r2, [sp, #28]
 800bbea:	e014      	b.n	800bc16 <_vfiprintf_r+0x156>
 800bbec:	eba0 0308 	sub.w	r3, r0, r8
 800bbf0:	fa09 f303 	lsl.w	r3, r9, r3
 800bbf4:	4313      	orrs	r3, r2
 800bbf6:	9304      	str	r3, [sp, #16]
 800bbf8:	46a2      	mov	sl, r4
 800bbfa:	e7d2      	b.n	800bba2 <_vfiprintf_r+0xe2>
 800bbfc:	9b03      	ldr	r3, [sp, #12]
 800bbfe:	1d19      	adds	r1, r3, #4
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	9103      	str	r1, [sp, #12]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	bfbb      	ittet	lt
 800bc08:	425b      	neglt	r3, r3
 800bc0a:	f042 0202 	orrlt.w	r2, r2, #2
 800bc0e:	9307      	strge	r3, [sp, #28]
 800bc10:	9307      	strlt	r3, [sp, #28]
 800bc12:	bfb8      	it	lt
 800bc14:	9204      	strlt	r2, [sp, #16]
 800bc16:	7823      	ldrb	r3, [r4, #0]
 800bc18:	2b2e      	cmp	r3, #46	; 0x2e
 800bc1a:	d10c      	bne.n	800bc36 <_vfiprintf_r+0x176>
 800bc1c:	7863      	ldrb	r3, [r4, #1]
 800bc1e:	2b2a      	cmp	r3, #42	; 0x2a
 800bc20:	d135      	bne.n	800bc8e <_vfiprintf_r+0x1ce>
 800bc22:	9b03      	ldr	r3, [sp, #12]
 800bc24:	1d1a      	adds	r2, r3, #4
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	9203      	str	r2, [sp, #12]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	bfb8      	it	lt
 800bc2e:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc32:	3402      	adds	r4, #2
 800bc34:	9305      	str	r3, [sp, #20]
 800bc36:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bd1c <_vfiprintf_r+0x25c>
 800bc3a:	7821      	ldrb	r1, [r4, #0]
 800bc3c:	2203      	movs	r2, #3
 800bc3e:	4650      	mov	r0, sl
 800bc40:	f7f4 face 	bl	80001e0 <memchr>
 800bc44:	b140      	cbz	r0, 800bc58 <_vfiprintf_r+0x198>
 800bc46:	2340      	movs	r3, #64	; 0x40
 800bc48:	eba0 000a 	sub.w	r0, r0, sl
 800bc4c:	fa03 f000 	lsl.w	r0, r3, r0
 800bc50:	9b04      	ldr	r3, [sp, #16]
 800bc52:	4303      	orrs	r3, r0
 800bc54:	3401      	adds	r4, #1
 800bc56:	9304      	str	r3, [sp, #16]
 800bc58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc5c:	482c      	ldr	r0, [pc, #176]	; (800bd10 <_vfiprintf_r+0x250>)
 800bc5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc62:	2206      	movs	r2, #6
 800bc64:	f7f4 fabc 	bl	80001e0 <memchr>
 800bc68:	2800      	cmp	r0, #0
 800bc6a:	d03f      	beq.n	800bcec <_vfiprintf_r+0x22c>
 800bc6c:	4b29      	ldr	r3, [pc, #164]	; (800bd14 <_vfiprintf_r+0x254>)
 800bc6e:	bb1b      	cbnz	r3, 800bcb8 <_vfiprintf_r+0x1f8>
 800bc70:	9b03      	ldr	r3, [sp, #12]
 800bc72:	3307      	adds	r3, #7
 800bc74:	f023 0307 	bic.w	r3, r3, #7
 800bc78:	3308      	adds	r3, #8
 800bc7a:	9303      	str	r3, [sp, #12]
 800bc7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc7e:	443b      	add	r3, r7
 800bc80:	9309      	str	r3, [sp, #36]	; 0x24
 800bc82:	e767      	b.n	800bb54 <_vfiprintf_r+0x94>
 800bc84:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc88:	460c      	mov	r4, r1
 800bc8a:	2001      	movs	r0, #1
 800bc8c:	e7a5      	b.n	800bbda <_vfiprintf_r+0x11a>
 800bc8e:	2300      	movs	r3, #0
 800bc90:	3401      	adds	r4, #1
 800bc92:	9305      	str	r3, [sp, #20]
 800bc94:	4619      	mov	r1, r3
 800bc96:	f04f 0c0a 	mov.w	ip, #10
 800bc9a:	4620      	mov	r0, r4
 800bc9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bca0:	3a30      	subs	r2, #48	; 0x30
 800bca2:	2a09      	cmp	r2, #9
 800bca4:	d903      	bls.n	800bcae <_vfiprintf_r+0x1ee>
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d0c5      	beq.n	800bc36 <_vfiprintf_r+0x176>
 800bcaa:	9105      	str	r1, [sp, #20]
 800bcac:	e7c3      	b.n	800bc36 <_vfiprintf_r+0x176>
 800bcae:	fb0c 2101 	mla	r1, ip, r1, r2
 800bcb2:	4604      	mov	r4, r0
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	e7f0      	b.n	800bc9a <_vfiprintf_r+0x1da>
 800bcb8:	ab03      	add	r3, sp, #12
 800bcba:	9300      	str	r3, [sp, #0]
 800bcbc:	462a      	mov	r2, r5
 800bcbe:	4b16      	ldr	r3, [pc, #88]	; (800bd18 <_vfiprintf_r+0x258>)
 800bcc0:	a904      	add	r1, sp, #16
 800bcc2:	4630      	mov	r0, r6
 800bcc4:	f7fc f83a 	bl	8007d3c <_printf_float>
 800bcc8:	4607      	mov	r7, r0
 800bcca:	1c78      	adds	r0, r7, #1
 800bccc:	d1d6      	bne.n	800bc7c <_vfiprintf_r+0x1bc>
 800bcce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bcd0:	07d9      	lsls	r1, r3, #31
 800bcd2:	d405      	bmi.n	800bce0 <_vfiprintf_r+0x220>
 800bcd4:	89ab      	ldrh	r3, [r5, #12]
 800bcd6:	059a      	lsls	r2, r3, #22
 800bcd8:	d402      	bmi.n	800bce0 <_vfiprintf_r+0x220>
 800bcda:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcdc:	f000 faa1 	bl	800c222 <__retarget_lock_release_recursive>
 800bce0:	89ab      	ldrh	r3, [r5, #12]
 800bce2:	065b      	lsls	r3, r3, #25
 800bce4:	f53f af12 	bmi.w	800bb0c <_vfiprintf_r+0x4c>
 800bce8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bcea:	e711      	b.n	800bb10 <_vfiprintf_r+0x50>
 800bcec:	ab03      	add	r3, sp, #12
 800bcee:	9300      	str	r3, [sp, #0]
 800bcf0:	462a      	mov	r2, r5
 800bcf2:	4b09      	ldr	r3, [pc, #36]	; (800bd18 <_vfiprintf_r+0x258>)
 800bcf4:	a904      	add	r1, sp, #16
 800bcf6:	4630      	mov	r0, r6
 800bcf8:	f7fc fac4 	bl	8008284 <_printf_i>
 800bcfc:	e7e4      	b.n	800bcc8 <_vfiprintf_r+0x208>
 800bcfe:	bf00      	nop
 800bd00:	0800f85c 	.word	0x0800f85c
 800bd04:	0800f87c 	.word	0x0800f87c
 800bd08:	0800f83c 	.word	0x0800f83c
 800bd0c:	0800f7ec 	.word	0x0800f7ec
 800bd10:	0800f7f6 	.word	0x0800f7f6
 800bd14:	08007d3d 	.word	0x08007d3d
 800bd18:	0800ba9d 	.word	0x0800ba9d
 800bd1c:	0800f7f2 	.word	0x0800f7f2

0800bd20 <__swbuf_r>:
 800bd20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd22:	460e      	mov	r6, r1
 800bd24:	4614      	mov	r4, r2
 800bd26:	4605      	mov	r5, r0
 800bd28:	b118      	cbz	r0, 800bd32 <__swbuf_r+0x12>
 800bd2a:	6983      	ldr	r3, [r0, #24]
 800bd2c:	b90b      	cbnz	r3, 800bd32 <__swbuf_r+0x12>
 800bd2e:	f000 f9d9 	bl	800c0e4 <__sinit>
 800bd32:	4b21      	ldr	r3, [pc, #132]	; (800bdb8 <__swbuf_r+0x98>)
 800bd34:	429c      	cmp	r4, r3
 800bd36:	d12b      	bne.n	800bd90 <__swbuf_r+0x70>
 800bd38:	686c      	ldr	r4, [r5, #4]
 800bd3a:	69a3      	ldr	r3, [r4, #24]
 800bd3c:	60a3      	str	r3, [r4, #8]
 800bd3e:	89a3      	ldrh	r3, [r4, #12]
 800bd40:	071a      	lsls	r2, r3, #28
 800bd42:	d52f      	bpl.n	800bda4 <__swbuf_r+0x84>
 800bd44:	6923      	ldr	r3, [r4, #16]
 800bd46:	b36b      	cbz	r3, 800bda4 <__swbuf_r+0x84>
 800bd48:	6923      	ldr	r3, [r4, #16]
 800bd4a:	6820      	ldr	r0, [r4, #0]
 800bd4c:	1ac0      	subs	r0, r0, r3
 800bd4e:	6963      	ldr	r3, [r4, #20]
 800bd50:	b2f6      	uxtb	r6, r6
 800bd52:	4283      	cmp	r3, r0
 800bd54:	4637      	mov	r7, r6
 800bd56:	dc04      	bgt.n	800bd62 <__swbuf_r+0x42>
 800bd58:	4621      	mov	r1, r4
 800bd5a:	4628      	mov	r0, r5
 800bd5c:	f000 f92e 	bl	800bfbc <_fflush_r>
 800bd60:	bb30      	cbnz	r0, 800bdb0 <__swbuf_r+0x90>
 800bd62:	68a3      	ldr	r3, [r4, #8]
 800bd64:	3b01      	subs	r3, #1
 800bd66:	60a3      	str	r3, [r4, #8]
 800bd68:	6823      	ldr	r3, [r4, #0]
 800bd6a:	1c5a      	adds	r2, r3, #1
 800bd6c:	6022      	str	r2, [r4, #0]
 800bd6e:	701e      	strb	r6, [r3, #0]
 800bd70:	6963      	ldr	r3, [r4, #20]
 800bd72:	3001      	adds	r0, #1
 800bd74:	4283      	cmp	r3, r0
 800bd76:	d004      	beq.n	800bd82 <__swbuf_r+0x62>
 800bd78:	89a3      	ldrh	r3, [r4, #12]
 800bd7a:	07db      	lsls	r3, r3, #31
 800bd7c:	d506      	bpl.n	800bd8c <__swbuf_r+0x6c>
 800bd7e:	2e0a      	cmp	r6, #10
 800bd80:	d104      	bne.n	800bd8c <__swbuf_r+0x6c>
 800bd82:	4621      	mov	r1, r4
 800bd84:	4628      	mov	r0, r5
 800bd86:	f000 f919 	bl	800bfbc <_fflush_r>
 800bd8a:	b988      	cbnz	r0, 800bdb0 <__swbuf_r+0x90>
 800bd8c:	4638      	mov	r0, r7
 800bd8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd90:	4b0a      	ldr	r3, [pc, #40]	; (800bdbc <__swbuf_r+0x9c>)
 800bd92:	429c      	cmp	r4, r3
 800bd94:	d101      	bne.n	800bd9a <__swbuf_r+0x7a>
 800bd96:	68ac      	ldr	r4, [r5, #8]
 800bd98:	e7cf      	b.n	800bd3a <__swbuf_r+0x1a>
 800bd9a:	4b09      	ldr	r3, [pc, #36]	; (800bdc0 <__swbuf_r+0xa0>)
 800bd9c:	429c      	cmp	r4, r3
 800bd9e:	bf08      	it	eq
 800bda0:	68ec      	ldreq	r4, [r5, #12]
 800bda2:	e7ca      	b.n	800bd3a <__swbuf_r+0x1a>
 800bda4:	4621      	mov	r1, r4
 800bda6:	4628      	mov	r0, r5
 800bda8:	f000 f80c 	bl	800bdc4 <__swsetup_r>
 800bdac:	2800      	cmp	r0, #0
 800bdae:	d0cb      	beq.n	800bd48 <__swbuf_r+0x28>
 800bdb0:	f04f 37ff 	mov.w	r7, #4294967295
 800bdb4:	e7ea      	b.n	800bd8c <__swbuf_r+0x6c>
 800bdb6:	bf00      	nop
 800bdb8:	0800f85c 	.word	0x0800f85c
 800bdbc:	0800f87c 	.word	0x0800f87c
 800bdc0:	0800f83c 	.word	0x0800f83c

0800bdc4 <__swsetup_r>:
 800bdc4:	4b32      	ldr	r3, [pc, #200]	; (800be90 <__swsetup_r+0xcc>)
 800bdc6:	b570      	push	{r4, r5, r6, lr}
 800bdc8:	681d      	ldr	r5, [r3, #0]
 800bdca:	4606      	mov	r6, r0
 800bdcc:	460c      	mov	r4, r1
 800bdce:	b125      	cbz	r5, 800bdda <__swsetup_r+0x16>
 800bdd0:	69ab      	ldr	r3, [r5, #24]
 800bdd2:	b913      	cbnz	r3, 800bdda <__swsetup_r+0x16>
 800bdd4:	4628      	mov	r0, r5
 800bdd6:	f000 f985 	bl	800c0e4 <__sinit>
 800bdda:	4b2e      	ldr	r3, [pc, #184]	; (800be94 <__swsetup_r+0xd0>)
 800bddc:	429c      	cmp	r4, r3
 800bdde:	d10f      	bne.n	800be00 <__swsetup_r+0x3c>
 800bde0:	686c      	ldr	r4, [r5, #4]
 800bde2:	89a3      	ldrh	r3, [r4, #12]
 800bde4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bde8:	0719      	lsls	r1, r3, #28
 800bdea:	d42c      	bmi.n	800be46 <__swsetup_r+0x82>
 800bdec:	06dd      	lsls	r5, r3, #27
 800bdee:	d411      	bmi.n	800be14 <__swsetup_r+0x50>
 800bdf0:	2309      	movs	r3, #9
 800bdf2:	6033      	str	r3, [r6, #0]
 800bdf4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bdf8:	81a3      	strh	r3, [r4, #12]
 800bdfa:	f04f 30ff 	mov.w	r0, #4294967295
 800bdfe:	e03e      	b.n	800be7e <__swsetup_r+0xba>
 800be00:	4b25      	ldr	r3, [pc, #148]	; (800be98 <__swsetup_r+0xd4>)
 800be02:	429c      	cmp	r4, r3
 800be04:	d101      	bne.n	800be0a <__swsetup_r+0x46>
 800be06:	68ac      	ldr	r4, [r5, #8]
 800be08:	e7eb      	b.n	800bde2 <__swsetup_r+0x1e>
 800be0a:	4b24      	ldr	r3, [pc, #144]	; (800be9c <__swsetup_r+0xd8>)
 800be0c:	429c      	cmp	r4, r3
 800be0e:	bf08      	it	eq
 800be10:	68ec      	ldreq	r4, [r5, #12]
 800be12:	e7e6      	b.n	800bde2 <__swsetup_r+0x1e>
 800be14:	0758      	lsls	r0, r3, #29
 800be16:	d512      	bpl.n	800be3e <__swsetup_r+0x7a>
 800be18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be1a:	b141      	cbz	r1, 800be2e <__swsetup_r+0x6a>
 800be1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be20:	4299      	cmp	r1, r3
 800be22:	d002      	beq.n	800be2a <__swsetup_r+0x66>
 800be24:	4630      	mov	r0, r6
 800be26:	f7ff fb25 	bl	800b474 <_free_r>
 800be2a:	2300      	movs	r3, #0
 800be2c:	6363      	str	r3, [r4, #52]	; 0x34
 800be2e:	89a3      	ldrh	r3, [r4, #12]
 800be30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800be34:	81a3      	strh	r3, [r4, #12]
 800be36:	2300      	movs	r3, #0
 800be38:	6063      	str	r3, [r4, #4]
 800be3a:	6923      	ldr	r3, [r4, #16]
 800be3c:	6023      	str	r3, [r4, #0]
 800be3e:	89a3      	ldrh	r3, [r4, #12]
 800be40:	f043 0308 	orr.w	r3, r3, #8
 800be44:	81a3      	strh	r3, [r4, #12]
 800be46:	6923      	ldr	r3, [r4, #16]
 800be48:	b94b      	cbnz	r3, 800be5e <__swsetup_r+0x9a>
 800be4a:	89a3      	ldrh	r3, [r4, #12]
 800be4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800be50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be54:	d003      	beq.n	800be5e <__swsetup_r+0x9a>
 800be56:	4621      	mov	r1, r4
 800be58:	4630      	mov	r0, r6
 800be5a:	f000 fa09 	bl	800c270 <__smakebuf_r>
 800be5e:	89a0      	ldrh	r0, [r4, #12]
 800be60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be64:	f010 0301 	ands.w	r3, r0, #1
 800be68:	d00a      	beq.n	800be80 <__swsetup_r+0xbc>
 800be6a:	2300      	movs	r3, #0
 800be6c:	60a3      	str	r3, [r4, #8]
 800be6e:	6963      	ldr	r3, [r4, #20]
 800be70:	425b      	negs	r3, r3
 800be72:	61a3      	str	r3, [r4, #24]
 800be74:	6923      	ldr	r3, [r4, #16]
 800be76:	b943      	cbnz	r3, 800be8a <__swsetup_r+0xc6>
 800be78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800be7c:	d1ba      	bne.n	800bdf4 <__swsetup_r+0x30>
 800be7e:	bd70      	pop	{r4, r5, r6, pc}
 800be80:	0781      	lsls	r1, r0, #30
 800be82:	bf58      	it	pl
 800be84:	6963      	ldrpl	r3, [r4, #20]
 800be86:	60a3      	str	r3, [r4, #8]
 800be88:	e7f4      	b.n	800be74 <__swsetup_r+0xb0>
 800be8a:	2000      	movs	r0, #0
 800be8c:	e7f7      	b.n	800be7e <__swsetup_r+0xba>
 800be8e:	bf00      	nop
 800be90:	2000000c 	.word	0x2000000c
 800be94:	0800f85c 	.word	0x0800f85c
 800be98:	0800f87c 	.word	0x0800f87c
 800be9c:	0800f83c 	.word	0x0800f83c

0800bea0 <abort>:
 800bea0:	b508      	push	{r3, lr}
 800bea2:	2006      	movs	r0, #6
 800bea4:	f000 fa54 	bl	800c350 <raise>
 800bea8:	2001      	movs	r0, #1
 800beaa:	f7f5 fe47 	bl	8001b3c <_exit>
	...

0800beb0 <__sflush_r>:
 800beb0:	898a      	ldrh	r2, [r1, #12]
 800beb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800beb6:	4605      	mov	r5, r0
 800beb8:	0710      	lsls	r0, r2, #28
 800beba:	460c      	mov	r4, r1
 800bebc:	d458      	bmi.n	800bf70 <__sflush_r+0xc0>
 800bebe:	684b      	ldr	r3, [r1, #4]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	dc05      	bgt.n	800bed0 <__sflush_r+0x20>
 800bec4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	dc02      	bgt.n	800bed0 <__sflush_r+0x20>
 800beca:	2000      	movs	r0, #0
 800becc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bed0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bed2:	2e00      	cmp	r6, #0
 800bed4:	d0f9      	beq.n	800beca <__sflush_r+0x1a>
 800bed6:	2300      	movs	r3, #0
 800bed8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bedc:	682f      	ldr	r7, [r5, #0]
 800bede:	602b      	str	r3, [r5, #0]
 800bee0:	d032      	beq.n	800bf48 <__sflush_r+0x98>
 800bee2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bee4:	89a3      	ldrh	r3, [r4, #12]
 800bee6:	075a      	lsls	r2, r3, #29
 800bee8:	d505      	bpl.n	800bef6 <__sflush_r+0x46>
 800beea:	6863      	ldr	r3, [r4, #4]
 800beec:	1ac0      	subs	r0, r0, r3
 800beee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bef0:	b10b      	cbz	r3, 800bef6 <__sflush_r+0x46>
 800bef2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bef4:	1ac0      	subs	r0, r0, r3
 800bef6:	2300      	movs	r3, #0
 800bef8:	4602      	mov	r2, r0
 800befa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800befc:	6a21      	ldr	r1, [r4, #32]
 800befe:	4628      	mov	r0, r5
 800bf00:	47b0      	blx	r6
 800bf02:	1c43      	adds	r3, r0, #1
 800bf04:	89a3      	ldrh	r3, [r4, #12]
 800bf06:	d106      	bne.n	800bf16 <__sflush_r+0x66>
 800bf08:	6829      	ldr	r1, [r5, #0]
 800bf0a:	291d      	cmp	r1, #29
 800bf0c:	d82c      	bhi.n	800bf68 <__sflush_r+0xb8>
 800bf0e:	4a2a      	ldr	r2, [pc, #168]	; (800bfb8 <__sflush_r+0x108>)
 800bf10:	40ca      	lsrs	r2, r1
 800bf12:	07d6      	lsls	r6, r2, #31
 800bf14:	d528      	bpl.n	800bf68 <__sflush_r+0xb8>
 800bf16:	2200      	movs	r2, #0
 800bf18:	6062      	str	r2, [r4, #4]
 800bf1a:	04d9      	lsls	r1, r3, #19
 800bf1c:	6922      	ldr	r2, [r4, #16]
 800bf1e:	6022      	str	r2, [r4, #0]
 800bf20:	d504      	bpl.n	800bf2c <__sflush_r+0x7c>
 800bf22:	1c42      	adds	r2, r0, #1
 800bf24:	d101      	bne.n	800bf2a <__sflush_r+0x7a>
 800bf26:	682b      	ldr	r3, [r5, #0]
 800bf28:	b903      	cbnz	r3, 800bf2c <__sflush_r+0x7c>
 800bf2a:	6560      	str	r0, [r4, #84]	; 0x54
 800bf2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf2e:	602f      	str	r7, [r5, #0]
 800bf30:	2900      	cmp	r1, #0
 800bf32:	d0ca      	beq.n	800beca <__sflush_r+0x1a>
 800bf34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf38:	4299      	cmp	r1, r3
 800bf3a:	d002      	beq.n	800bf42 <__sflush_r+0x92>
 800bf3c:	4628      	mov	r0, r5
 800bf3e:	f7ff fa99 	bl	800b474 <_free_r>
 800bf42:	2000      	movs	r0, #0
 800bf44:	6360      	str	r0, [r4, #52]	; 0x34
 800bf46:	e7c1      	b.n	800becc <__sflush_r+0x1c>
 800bf48:	6a21      	ldr	r1, [r4, #32]
 800bf4a:	2301      	movs	r3, #1
 800bf4c:	4628      	mov	r0, r5
 800bf4e:	47b0      	blx	r6
 800bf50:	1c41      	adds	r1, r0, #1
 800bf52:	d1c7      	bne.n	800bee4 <__sflush_r+0x34>
 800bf54:	682b      	ldr	r3, [r5, #0]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d0c4      	beq.n	800bee4 <__sflush_r+0x34>
 800bf5a:	2b1d      	cmp	r3, #29
 800bf5c:	d001      	beq.n	800bf62 <__sflush_r+0xb2>
 800bf5e:	2b16      	cmp	r3, #22
 800bf60:	d101      	bne.n	800bf66 <__sflush_r+0xb6>
 800bf62:	602f      	str	r7, [r5, #0]
 800bf64:	e7b1      	b.n	800beca <__sflush_r+0x1a>
 800bf66:	89a3      	ldrh	r3, [r4, #12]
 800bf68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf6c:	81a3      	strh	r3, [r4, #12]
 800bf6e:	e7ad      	b.n	800becc <__sflush_r+0x1c>
 800bf70:	690f      	ldr	r7, [r1, #16]
 800bf72:	2f00      	cmp	r7, #0
 800bf74:	d0a9      	beq.n	800beca <__sflush_r+0x1a>
 800bf76:	0793      	lsls	r3, r2, #30
 800bf78:	680e      	ldr	r6, [r1, #0]
 800bf7a:	bf08      	it	eq
 800bf7c:	694b      	ldreq	r3, [r1, #20]
 800bf7e:	600f      	str	r7, [r1, #0]
 800bf80:	bf18      	it	ne
 800bf82:	2300      	movne	r3, #0
 800bf84:	eba6 0807 	sub.w	r8, r6, r7
 800bf88:	608b      	str	r3, [r1, #8]
 800bf8a:	f1b8 0f00 	cmp.w	r8, #0
 800bf8e:	dd9c      	ble.n	800beca <__sflush_r+0x1a>
 800bf90:	6a21      	ldr	r1, [r4, #32]
 800bf92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bf94:	4643      	mov	r3, r8
 800bf96:	463a      	mov	r2, r7
 800bf98:	4628      	mov	r0, r5
 800bf9a:	47b0      	blx	r6
 800bf9c:	2800      	cmp	r0, #0
 800bf9e:	dc06      	bgt.n	800bfae <__sflush_r+0xfe>
 800bfa0:	89a3      	ldrh	r3, [r4, #12]
 800bfa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfa6:	81a3      	strh	r3, [r4, #12]
 800bfa8:	f04f 30ff 	mov.w	r0, #4294967295
 800bfac:	e78e      	b.n	800becc <__sflush_r+0x1c>
 800bfae:	4407      	add	r7, r0
 800bfb0:	eba8 0800 	sub.w	r8, r8, r0
 800bfb4:	e7e9      	b.n	800bf8a <__sflush_r+0xda>
 800bfb6:	bf00      	nop
 800bfb8:	20400001 	.word	0x20400001

0800bfbc <_fflush_r>:
 800bfbc:	b538      	push	{r3, r4, r5, lr}
 800bfbe:	690b      	ldr	r3, [r1, #16]
 800bfc0:	4605      	mov	r5, r0
 800bfc2:	460c      	mov	r4, r1
 800bfc4:	b913      	cbnz	r3, 800bfcc <_fflush_r+0x10>
 800bfc6:	2500      	movs	r5, #0
 800bfc8:	4628      	mov	r0, r5
 800bfca:	bd38      	pop	{r3, r4, r5, pc}
 800bfcc:	b118      	cbz	r0, 800bfd6 <_fflush_r+0x1a>
 800bfce:	6983      	ldr	r3, [r0, #24]
 800bfd0:	b90b      	cbnz	r3, 800bfd6 <_fflush_r+0x1a>
 800bfd2:	f000 f887 	bl	800c0e4 <__sinit>
 800bfd6:	4b14      	ldr	r3, [pc, #80]	; (800c028 <_fflush_r+0x6c>)
 800bfd8:	429c      	cmp	r4, r3
 800bfda:	d11b      	bne.n	800c014 <_fflush_r+0x58>
 800bfdc:	686c      	ldr	r4, [r5, #4]
 800bfde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d0ef      	beq.n	800bfc6 <_fflush_r+0xa>
 800bfe6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bfe8:	07d0      	lsls	r0, r2, #31
 800bfea:	d404      	bmi.n	800bff6 <_fflush_r+0x3a>
 800bfec:	0599      	lsls	r1, r3, #22
 800bfee:	d402      	bmi.n	800bff6 <_fflush_r+0x3a>
 800bff0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bff2:	f000 f915 	bl	800c220 <__retarget_lock_acquire_recursive>
 800bff6:	4628      	mov	r0, r5
 800bff8:	4621      	mov	r1, r4
 800bffa:	f7ff ff59 	bl	800beb0 <__sflush_r>
 800bffe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c000:	07da      	lsls	r2, r3, #31
 800c002:	4605      	mov	r5, r0
 800c004:	d4e0      	bmi.n	800bfc8 <_fflush_r+0xc>
 800c006:	89a3      	ldrh	r3, [r4, #12]
 800c008:	059b      	lsls	r3, r3, #22
 800c00a:	d4dd      	bmi.n	800bfc8 <_fflush_r+0xc>
 800c00c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c00e:	f000 f908 	bl	800c222 <__retarget_lock_release_recursive>
 800c012:	e7d9      	b.n	800bfc8 <_fflush_r+0xc>
 800c014:	4b05      	ldr	r3, [pc, #20]	; (800c02c <_fflush_r+0x70>)
 800c016:	429c      	cmp	r4, r3
 800c018:	d101      	bne.n	800c01e <_fflush_r+0x62>
 800c01a:	68ac      	ldr	r4, [r5, #8]
 800c01c:	e7df      	b.n	800bfde <_fflush_r+0x22>
 800c01e:	4b04      	ldr	r3, [pc, #16]	; (800c030 <_fflush_r+0x74>)
 800c020:	429c      	cmp	r4, r3
 800c022:	bf08      	it	eq
 800c024:	68ec      	ldreq	r4, [r5, #12]
 800c026:	e7da      	b.n	800bfde <_fflush_r+0x22>
 800c028:	0800f85c 	.word	0x0800f85c
 800c02c:	0800f87c 	.word	0x0800f87c
 800c030:	0800f83c 	.word	0x0800f83c

0800c034 <std>:
 800c034:	2300      	movs	r3, #0
 800c036:	b510      	push	{r4, lr}
 800c038:	4604      	mov	r4, r0
 800c03a:	e9c0 3300 	strd	r3, r3, [r0]
 800c03e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c042:	6083      	str	r3, [r0, #8]
 800c044:	8181      	strh	r1, [r0, #12]
 800c046:	6643      	str	r3, [r0, #100]	; 0x64
 800c048:	81c2      	strh	r2, [r0, #14]
 800c04a:	6183      	str	r3, [r0, #24]
 800c04c:	4619      	mov	r1, r3
 800c04e:	2208      	movs	r2, #8
 800c050:	305c      	adds	r0, #92	; 0x5c
 800c052:	f7fb fdcb 	bl	8007bec <memset>
 800c056:	4b05      	ldr	r3, [pc, #20]	; (800c06c <std+0x38>)
 800c058:	6263      	str	r3, [r4, #36]	; 0x24
 800c05a:	4b05      	ldr	r3, [pc, #20]	; (800c070 <std+0x3c>)
 800c05c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c05e:	4b05      	ldr	r3, [pc, #20]	; (800c074 <std+0x40>)
 800c060:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c062:	4b05      	ldr	r3, [pc, #20]	; (800c078 <std+0x44>)
 800c064:	6224      	str	r4, [r4, #32]
 800c066:	6323      	str	r3, [r4, #48]	; 0x30
 800c068:	bd10      	pop	{r4, pc}
 800c06a:	bf00      	nop
 800c06c:	0800c389 	.word	0x0800c389
 800c070:	0800c3ab 	.word	0x0800c3ab
 800c074:	0800c3e3 	.word	0x0800c3e3
 800c078:	0800c407 	.word	0x0800c407

0800c07c <_cleanup_r>:
 800c07c:	4901      	ldr	r1, [pc, #4]	; (800c084 <_cleanup_r+0x8>)
 800c07e:	f000 b8af 	b.w	800c1e0 <_fwalk_reent>
 800c082:	bf00      	nop
 800c084:	0800bfbd 	.word	0x0800bfbd

0800c088 <__sfmoreglue>:
 800c088:	b570      	push	{r4, r5, r6, lr}
 800c08a:	2268      	movs	r2, #104	; 0x68
 800c08c:	1e4d      	subs	r5, r1, #1
 800c08e:	4355      	muls	r5, r2
 800c090:	460e      	mov	r6, r1
 800c092:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c096:	f7ff fa59 	bl	800b54c <_malloc_r>
 800c09a:	4604      	mov	r4, r0
 800c09c:	b140      	cbz	r0, 800c0b0 <__sfmoreglue+0x28>
 800c09e:	2100      	movs	r1, #0
 800c0a0:	e9c0 1600 	strd	r1, r6, [r0]
 800c0a4:	300c      	adds	r0, #12
 800c0a6:	60a0      	str	r0, [r4, #8]
 800c0a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c0ac:	f7fb fd9e 	bl	8007bec <memset>
 800c0b0:	4620      	mov	r0, r4
 800c0b2:	bd70      	pop	{r4, r5, r6, pc}

0800c0b4 <__sfp_lock_acquire>:
 800c0b4:	4801      	ldr	r0, [pc, #4]	; (800c0bc <__sfp_lock_acquire+0x8>)
 800c0b6:	f000 b8b3 	b.w	800c220 <__retarget_lock_acquire_recursive>
 800c0ba:	bf00      	nop
 800c0bc:	20004451 	.word	0x20004451

0800c0c0 <__sfp_lock_release>:
 800c0c0:	4801      	ldr	r0, [pc, #4]	; (800c0c8 <__sfp_lock_release+0x8>)
 800c0c2:	f000 b8ae 	b.w	800c222 <__retarget_lock_release_recursive>
 800c0c6:	bf00      	nop
 800c0c8:	20004451 	.word	0x20004451

0800c0cc <__sinit_lock_acquire>:
 800c0cc:	4801      	ldr	r0, [pc, #4]	; (800c0d4 <__sinit_lock_acquire+0x8>)
 800c0ce:	f000 b8a7 	b.w	800c220 <__retarget_lock_acquire_recursive>
 800c0d2:	bf00      	nop
 800c0d4:	20004452 	.word	0x20004452

0800c0d8 <__sinit_lock_release>:
 800c0d8:	4801      	ldr	r0, [pc, #4]	; (800c0e0 <__sinit_lock_release+0x8>)
 800c0da:	f000 b8a2 	b.w	800c222 <__retarget_lock_release_recursive>
 800c0de:	bf00      	nop
 800c0e0:	20004452 	.word	0x20004452

0800c0e4 <__sinit>:
 800c0e4:	b510      	push	{r4, lr}
 800c0e6:	4604      	mov	r4, r0
 800c0e8:	f7ff fff0 	bl	800c0cc <__sinit_lock_acquire>
 800c0ec:	69a3      	ldr	r3, [r4, #24]
 800c0ee:	b11b      	cbz	r3, 800c0f8 <__sinit+0x14>
 800c0f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0f4:	f7ff bff0 	b.w	800c0d8 <__sinit_lock_release>
 800c0f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c0fc:	6523      	str	r3, [r4, #80]	; 0x50
 800c0fe:	4b13      	ldr	r3, [pc, #76]	; (800c14c <__sinit+0x68>)
 800c100:	4a13      	ldr	r2, [pc, #76]	; (800c150 <__sinit+0x6c>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	62a2      	str	r2, [r4, #40]	; 0x28
 800c106:	42a3      	cmp	r3, r4
 800c108:	bf04      	itt	eq
 800c10a:	2301      	moveq	r3, #1
 800c10c:	61a3      	streq	r3, [r4, #24]
 800c10e:	4620      	mov	r0, r4
 800c110:	f000 f820 	bl	800c154 <__sfp>
 800c114:	6060      	str	r0, [r4, #4]
 800c116:	4620      	mov	r0, r4
 800c118:	f000 f81c 	bl	800c154 <__sfp>
 800c11c:	60a0      	str	r0, [r4, #8]
 800c11e:	4620      	mov	r0, r4
 800c120:	f000 f818 	bl	800c154 <__sfp>
 800c124:	2200      	movs	r2, #0
 800c126:	60e0      	str	r0, [r4, #12]
 800c128:	2104      	movs	r1, #4
 800c12a:	6860      	ldr	r0, [r4, #4]
 800c12c:	f7ff ff82 	bl	800c034 <std>
 800c130:	68a0      	ldr	r0, [r4, #8]
 800c132:	2201      	movs	r2, #1
 800c134:	2109      	movs	r1, #9
 800c136:	f7ff ff7d 	bl	800c034 <std>
 800c13a:	68e0      	ldr	r0, [r4, #12]
 800c13c:	2202      	movs	r2, #2
 800c13e:	2112      	movs	r1, #18
 800c140:	f7ff ff78 	bl	800c034 <std>
 800c144:	2301      	movs	r3, #1
 800c146:	61a3      	str	r3, [r4, #24]
 800c148:	e7d2      	b.n	800c0f0 <__sinit+0xc>
 800c14a:	bf00      	nop
 800c14c:	0800f3f4 	.word	0x0800f3f4
 800c150:	0800c07d 	.word	0x0800c07d

0800c154 <__sfp>:
 800c154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c156:	4607      	mov	r7, r0
 800c158:	f7ff ffac 	bl	800c0b4 <__sfp_lock_acquire>
 800c15c:	4b1e      	ldr	r3, [pc, #120]	; (800c1d8 <__sfp+0x84>)
 800c15e:	681e      	ldr	r6, [r3, #0]
 800c160:	69b3      	ldr	r3, [r6, #24]
 800c162:	b913      	cbnz	r3, 800c16a <__sfp+0x16>
 800c164:	4630      	mov	r0, r6
 800c166:	f7ff ffbd 	bl	800c0e4 <__sinit>
 800c16a:	3648      	adds	r6, #72	; 0x48
 800c16c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c170:	3b01      	subs	r3, #1
 800c172:	d503      	bpl.n	800c17c <__sfp+0x28>
 800c174:	6833      	ldr	r3, [r6, #0]
 800c176:	b30b      	cbz	r3, 800c1bc <__sfp+0x68>
 800c178:	6836      	ldr	r6, [r6, #0]
 800c17a:	e7f7      	b.n	800c16c <__sfp+0x18>
 800c17c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c180:	b9d5      	cbnz	r5, 800c1b8 <__sfp+0x64>
 800c182:	4b16      	ldr	r3, [pc, #88]	; (800c1dc <__sfp+0x88>)
 800c184:	60e3      	str	r3, [r4, #12]
 800c186:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c18a:	6665      	str	r5, [r4, #100]	; 0x64
 800c18c:	f000 f847 	bl	800c21e <__retarget_lock_init_recursive>
 800c190:	f7ff ff96 	bl	800c0c0 <__sfp_lock_release>
 800c194:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c198:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c19c:	6025      	str	r5, [r4, #0]
 800c19e:	61a5      	str	r5, [r4, #24]
 800c1a0:	2208      	movs	r2, #8
 800c1a2:	4629      	mov	r1, r5
 800c1a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c1a8:	f7fb fd20 	bl	8007bec <memset>
 800c1ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c1b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c1b4:	4620      	mov	r0, r4
 800c1b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1b8:	3468      	adds	r4, #104	; 0x68
 800c1ba:	e7d9      	b.n	800c170 <__sfp+0x1c>
 800c1bc:	2104      	movs	r1, #4
 800c1be:	4638      	mov	r0, r7
 800c1c0:	f7ff ff62 	bl	800c088 <__sfmoreglue>
 800c1c4:	4604      	mov	r4, r0
 800c1c6:	6030      	str	r0, [r6, #0]
 800c1c8:	2800      	cmp	r0, #0
 800c1ca:	d1d5      	bne.n	800c178 <__sfp+0x24>
 800c1cc:	f7ff ff78 	bl	800c0c0 <__sfp_lock_release>
 800c1d0:	230c      	movs	r3, #12
 800c1d2:	603b      	str	r3, [r7, #0]
 800c1d4:	e7ee      	b.n	800c1b4 <__sfp+0x60>
 800c1d6:	bf00      	nop
 800c1d8:	0800f3f4 	.word	0x0800f3f4
 800c1dc:	ffff0001 	.word	0xffff0001

0800c1e0 <_fwalk_reent>:
 800c1e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1e4:	4606      	mov	r6, r0
 800c1e6:	4688      	mov	r8, r1
 800c1e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c1ec:	2700      	movs	r7, #0
 800c1ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c1f2:	f1b9 0901 	subs.w	r9, r9, #1
 800c1f6:	d505      	bpl.n	800c204 <_fwalk_reent+0x24>
 800c1f8:	6824      	ldr	r4, [r4, #0]
 800c1fa:	2c00      	cmp	r4, #0
 800c1fc:	d1f7      	bne.n	800c1ee <_fwalk_reent+0xe>
 800c1fe:	4638      	mov	r0, r7
 800c200:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c204:	89ab      	ldrh	r3, [r5, #12]
 800c206:	2b01      	cmp	r3, #1
 800c208:	d907      	bls.n	800c21a <_fwalk_reent+0x3a>
 800c20a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c20e:	3301      	adds	r3, #1
 800c210:	d003      	beq.n	800c21a <_fwalk_reent+0x3a>
 800c212:	4629      	mov	r1, r5
 800c214:	4630      	mov	r0, r6
 800c216:	47c0      	blx	r8
 800c218:	4307      	orrs	r7, r0
 800c21a:	3568      	adds	r5, #104	; 0x68
 800c21c:	e7e9      	b.n	800c1f2 <_fwalk_reent+0x12>

0800c21e <__retarget_lock_init_recursive>:
 800c21e:	4770      	bx	lr

0800c220 <__retarget_lock_acquire_recursive>:
 800c220:	4770      	bx	lr

0800c222 <__retarget_lock_release_recursive>:
 800c222:	4770      	bx	lr

0800c224 <__swhatbuf_r>:
 800c224:	b570      	push	{r4, r5, r6, lr}
 800c226:	460e      	mov	r6, r1
 800c228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c22c:	2900      	cmp	r1, #0
 800c22e:	b096      	sub	sp, #88	; 0x58
 800c230:	4614      	mov	r4, r2
 800c232:	461d      	mov	r5, r3
 800c234:	da08      	bge.n	800c248 <__swhatbuf_r+0x24>
 800c236:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c23a:	2200      	movs	r2, #0
 800c23c:	602a      	str	r2, [r5, #0]
 800c23e:	061a      	lsls	r2, r3, #24
 800c240:	d410      	bmi.n	800c264 <__swhatbuf_r+0x40>
 800c242:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c246:	e00e      	b.n	800c266 <__swhatbuf_r+0x42>
 800c248:	466a      	mov	r2, sp
 800c24a:	f000 f903 	bl	800c454 <_fstat_r>
 800c24e:	2800      	cmp	r0, #0
 800c250:	dbf1      	blt.n	800c236 <__swhatbuf_r+0x12>
 800c252:	9a01      	ldr	r2, [sp, #4]
 800c254:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c258:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c25c:	425a      	negs	r2, r3
 800c25e:	415a      	adcs	r2, r3
 800c260:	602a      	str	r2, [r5, #0]
 800c262:	e7ee      	b.n	800c242 <__swhatbuf_r+0x1e>
 800c264:	2340      	movs	r3, #64	; 0x40
 800c266:	2000      	movs	r0, #0
 800c268:	6023      	str	r3, [r4, #0]
 800c26a:	b016      	add	sp, #88	; 0x58
 800c26c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c270 <__smakebuf_r>:
 800c270:	898b      	ldrh	r3, [r1, #12]
 800c272:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c274:	079d      	lsls	r5, r3, #30
 800c276:	4606      	mov	r6, r0
 800c278:	460c      	mov	r4, r1
 800c27a:	d507      	bpl.n	800c28c <__smakebuf_r+0x1c>
 800c27c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c280:	6023      	str	r3, [r4, #0]
 800c282:	6123      	str	r3, [r4, #16]
 800c284:	2301      	movs	r3, #1
 800c286:	6163      	str	r3, [r4, #20]
 800c288:	b002      	add	sp, #8
 800c28a:	bd70      	pop	{r4, r5, r6, pc}
 800c28c:	ab01      	add	r3, sp, #4
 800c28e:	466a      	mov	r2, sp
 800c290:	f7ff ffc8 	bl	800c224 <__swhatbuf_r>
 800c294:	9900      	ldr	r1, [sp, #0]
 800c296:	4605      	mov	r5, r0
 800c298:	4630      	mov	r0, r6
 800c29a:	f7ff f957 	bl	800b54c <_malloc_r>
 800c29e:	b948      	cbnz	r0, 800c2b4 <__smakebuf_r+0x44>
 800c2a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2a4:	059a      	lsls	r2, r3, #22
 800c2a6:	d4ef      	bmi.n	800c288 <__smakebuf_r+0x18>
 800c2a8:	f023 0303 	bic.w	r3, r3, #3
 800c2ac:	f043 0302 	orr.w	r3, r3, #2
 800c2b0:	81a3      	strh	r3, [r4, #12]
 800c2b2:	e7e3      	b.n	800c27c <__smakebuf_r+0xc>
 800c2b4:	4b0d      	ldr	r3, [pc, #52]	; (800c2ec <__smakebuf_r+0x7c>)
 800c2b6:	62b3      	str	r3, [r6, #40]	; 0x28
 800c2b8:	89a3      	ldrh	r3, [r4, #12]
 800c2ba:	6020      	str	r0, [r4, #0]
 800c2bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2c0:	81a3      	strh	r3, [r4, #12]
 800c2c2:	9b00      	ldr	r3, [sp, #0]
 800c2c4:	6163      	str	r3, [r4, #20]
 800c2c6:	9b01      	ldr	r3, [sp, #4]
 800c2c8:	6120      	str	r0, [r4, #16]
 800c2ca:	b15b      	cbz	r3, 800c2e4 <__smakebuf_r+0x74>
 800c2cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2d0:	4630      	mov	r0, r6
 800c2d2:	f000 f8d1 	bl	800c478 <_isatty_r>
 800c2d6:	b128      	cbz	r0, 800c2e4 <__smakebuf_r+0x74>
 800c2d8:	89a3      	ldrh	r3, [r4, #12]
 800c2da:	f023 0303 	bic.w	r3, r3, #3
 800c2de:	f043 0301 	orr.w	r3, r3, #1
 800c2e2:	81a3      	strh	r3, [r4, #12]
 800c2e4:	89a0      	ldrh	r0, [r4, #12]
 800c2e6:	4305      	orrs	r5, r0
 800c2e8:	81a5      	strh	r5, [r4, #12]
 800c2ea:	e7cd      	b.n	800c288 <__smakebuf_r+0x18>
 800c2ec:	0800c07d 	.word	0x0800c07d

0800c2f0 <_malloc_usable_size_r>:
 800c2f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2f4:	1f18      	subs	r0, r3, #4
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	bfbc      	itt	lt
 800c2fa:	580b      	ldrlt	r3, [r1, r0]
 800c2fc:	18c0      	addlt	r0, r0, r3
 800c2fe:	4770      	bx	lr

0800c300 <_raise_r>:
 800c300:	291f      	cmp	r1, #31
 800c302:	b538      	push	{r3, r4, r5, lr}
 800c304:	4604      	mov	r4, r0
 800c306:	460d      	mov	r5, r1
 800c308:	d904      	bls.n	800c314 <_raise_r+0x14>
 800c30a:	2316      	movs	r3, #22
 800c30c:	6003      	str	r3, [r0, #0]
 800c30e:	f04f 30ff 	mov.w	r0, #4294967295
 800c312:	bd38      	pop	{r3, r4, r5, pc}
 800c314:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c316:	b112      	cbz	r2, 800c31e <_raise_r+0x1e>
 800c318:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c31c:	b94b      	cbnz	r3, 800c332 <_raise_r+0x32>
 800c31e:	4620      	mov	r0, r4
 800c320:	f000 f830 	bl	800c384 <_getpid_r>
 800c324:	462a      	mov	r2, r5
 800c326:	4601      	mov	r1, r0
 800c328:	4620      	mov	r0, r4
 800c32a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c32e:	f000 b817 	b.w	800c360 <_kill_r>
 800c332:	2b01      	cmp	r3, #1
 800c334:	d00a      	beq.n	800c34c <_raise_r+0x4c>
 800c336:	1c59      	adds	r1, r3, #1
 800c338:	d103      	bne.n	800c342 <_raise_r+0x42>
 800c33a:	2316      	movs	r3, #22
 800c33c:	6003      	str	r3, [r0, #0]
 800c33e:	2001      	movs	r0, #1
 800c340:	e7e7      	b.n	800c312 <_raise_r+0x12>
 800c342:	2400      	movs	r4, #0
 800c344:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c348:	4628      	mov	r0, r5
 800c34a:	4798      	blx	r3
 800c34c:	2000      	movs	r0, #0
 800c34e:	e7e0      	b.n	800c312 <_raise_r+0x12>

0800c350 <raise>:
 800c350:	4b02      	ldr	r3, [pc, #8]	; (800c35c <raise+0xc>)
 800c352:	4601      	mov	r1, r0
 800c354:	6818      	ldr	r0, [r3, #0]
 800c356:	f7ff bfd3 	b.w	800c300 <_raise_r>
 800c35a:	bf00      	nop
 800c35c:	2000000c 	.word	0x2000000c

0800c360 <_kill_r>:
 800c360:	b538      	push	{r3, r4, r5, lr}
 800c362:	4d07      	ldr	r5, [pc, #28]	; (800c380 <_kill_r+0x20>)
 800c364:	2300      	movs	r3, #0
 800c366:	4604      	mov	r4, r0
 800c368:	4608      	mov	r0, r1
 800c36a:	4611      	mov	r1, r2
 800c36c:	602b      	str	r3, [r5, #0]
 800c36e:	f7f5 fbd5 	bl	8001b1c <_kill>
 800c372:	1c43      	adds	r3, r0, #1
 800c374:	d102      	bne.n	800c37c <_kill_r+0x1c>
 800c376:	682b      	ldr	r3, [r5, #0]
 800c378:	b103      	cbz	r3, 800c37c <_kill_r+0x1c>
 800c37a:	6023      	str	r3, [r4, #0]
 800c37c:	bd38      	pop	{r3, r4, r5, pc}
 800c37e:	bf00      	nop
 800c380:	2000444c 	.word	0x2000444c

0800c384 <_getpid_r>:
 800c384:	f7f5 bbc2 	b.w	8001b0c <_getpid>

0800c388 <__sread>:
 800c388:	b510      	push	{r4, lr}
 800c38a:	460c      	mov	r4, r1
 800c38c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c390:	f000 f894 	bl	800c4bc <_read_r>
 800c394:	2800      	cmp	r0, #0
 800c396:	bfab      	itete	ge
 800c398:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c39a:	89a3      	ldrhlt	r3, [r4, #12]
 800c39c:	181b      	addge	r3, r3, r0
 800c39e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c3a2:	bfac      	ite	ge
 800c3a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800c3a6:	81a3      	strhlt	r3, [r4, #12]
 800c3a8:	bd10      	pop	{r4, pc}

0800c3aa <__swrite>:
 800c3aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3ae:	461f      	mov	r7, r3
 800c3b0:	898b      	ldrh	r3, [r1, #12]
 800c3b2:	05db      	lsls	r3, r3, #23
 800c3b4:	4605      	mov	r5, r0
 800c3b6:	460c      	mov	r4, r1
 800c3b8:	4616      	mov	r6, r2
 800c3ba:	d505      	bpl.n	800c3c8 <__swrite+0x1e>
 800c3bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3c0:	2302      	movs	r3, #2
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	f000 f868 	bl	800c498 <_lseek_r>
 800c3c8:	89a3      	ldrh	r3, [r4, #12]
 800c3ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c3d2:	81a3      	strh	r3, [r4, #12]
 800c3d4:	4632      	mov	r2, r6
 800c3d6:	463b      	mov	r3, r7
 800c3d8:	4628      	mov	r0, r5
 800c3da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3de:	f000 b817 	b.w	800c410 <_write_r>

0800c3e2 <__sseek>:
 800c3e2:	b510      	push	{r4, lr}
 800c3e4:	460c      	mov	r4, r1
 800c3e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3ea:	f000 f855 	bl	800c498 <_lseek_r>
 800c3ee:	1c43      	adds	r3, r0, #1
 800c3f0:	89a3      	ldrh	r3, [r4, #12]
 800c3f2:	bf15      	itete	ne
 800c3f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c3f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c3fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c3fe:	81a3      	strheq	r3, [r4, #12]
 800c400:	bf18      	it	ne
 800c402:	81a3      	strhne	r3, [r4, #12]
 800c404:	bd10      	pop	{r4, pc}

0800c406 <__sclose>:
 800c406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c40a:	f000 b813 	b.w	800c434 <_close_r>
	...

0800c410 <_write_r>:
 800c410:	b538      	push	{r3, r4, r5, lr}
 800c412:	4d07      	ldr	r5, [pc, #28]	; (800c430 <_write_r+0x20>)
 800c414:	4604      	mov	r4, r0
 800c416:	4608      	mov	r0, r1
 800c418:	4611      	mov	r1, r2
 800c41a:	2200      	movs	r2, #0
 800c41c:	602a      	str	r2, [r5, #0]
 800c41e:	461a      	mov	r2, r3
 800c420:	f7f5 fbb3 	bl	8001b8a <_write>
 800c424:	1c43      	adds	r3, r0, #1
 800c426:	d102      	bne.n	800c42e <_write_r+0x1e>
 800c428:	682b      	ldr	r3, [r5, #0]
 800c42a:	b103      	cbz	r3, 800c42e <_write_r+0x1e>
 800c42c:	6023      	str	r3, [r4, #0]
 800c42e:	bd38      	pop	{r3, r4, r5, pc}
 800c430:	2000444c 	.word	0x2000444c

0800c434 <_close_r>:
 800c434:	b538      	push	{r3, r4, r5, lr}
 800c436:	4d06      	ldr	r5, [pc, #24]	; (800c450 <_close_r+0x1c>)
 800c438:	2300      	movs	r3, #0
 800c43a:	4604      	mov	r4, r0
 800c43c:	4608      	mov	r0, r1
 800c43e:	602b      	str	r3, [r5, #0]
 800c440:	f7f5 fbbf 	bl	8001bc2 <_close>
 800c444:	1c43      	adds	r3, r0, #1
 800c446:	d102      	bne.n	800c44e <_close_r+0x1a>
 800c448:	682b      	ldr	r3, [r5, #0]
 800c44a:	b103      	cbz	r3, 800c44e <_close_r+0x1a>
 800c44c:	6023      	str	r3, [r4, #0]
 800c44e:	bd38      	pop	{r3, r4, r5, pc}
 800c450:	2000444c 	.word	0x2000444c

0800c454 <_fstat_r>:
 800c454:	b538      	push	{r3, r4, r5, lr}
 800c456:	4d07      	ldr	r5, [pc, #28]	; (800c474 <_fstat_r+0x20>)
 800c458:	2300      	movs	r3, #0
 800c45a:	4604      	mov	r4, r0
 800c45c:	4608      	mov	r0, r1
 800c45e:	4611      	mov	r1, r2
 800c460:	602b      	str	r3, [r5, #0]
 800c462:	f7f5 fbba 	bl	8001bda <_fstat>
 800c466:	1c43      	adds	r3, r0, #1
 800c468:	d102      	bne.n	800c470 <_fstat_r+0x1c>
 800c46a:	682b      	ldr	r3, [r5, #0]
 800c46c:	b103      	cbz	r3, 800c470 <_fstat_r+0x1c>
 800c46e:	6023      	str	r3, [r4, #0]
 800c470:	bd38      	pop	{r3, r4, r5, pc}
 800c472:	bf00      	nop
 800c474:	2000444c 	.word	0x2000444c

0800c478 <_isatty_r>:
 800c478:	b538      	push	{r3, r4, r5, lr}
 800c47a:	4d06      	ldr	r5, [pc, #24]	; (800c494 <_isatty_r+0x1c>)
 800c47c:	2300      	movs	r3, #0
 800c47e:	4604      	mov	r4, r0
 800c480:	4608      	mov	r0, r1
 800c482:	602b      	str	r3, [r5, #0]
 800c484:	f7f5 fbb9 	bl	8001bfa <_isatty>
 800c488:	1c43      	adds	r3, r0, #1
 800c48a:	d102      	bne.n	800c492 <_isatty_r+0x1a>
 800c48c:	682b      	ldr	r3, [r5, #0]
 800c48e:	b103      	cbz	r3, 800c492 <_isatty_r+0x1a>
 800c490:	6023      	str	r3, [r4, #0]
 800c492:	bd38      	pop	{r3, r4, r5, pc}
 800c494:	2000444c 	.word	0x2000444c

0800c498 <_lseek_r>:
 800c498:	b538      	push	{r3, r4, r5, lr}
 800c49a:	4d07      	ldr	r5, [pc, #28]	; (800c4b8 <_lseek_r+0x20>)
 800c49c:	4604      	mov	r4, r0
 800c49e:	4608      	mov	r0, r1
 800c4a0:	4611      	mov	r1, r2
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	602a      	str	r2, [r5, #0]
 800c4a6:	461a      	mov	r2, r3
 800c4a8:	f7f5 fbb2 	bl	8001c10 <_lseek>
 800c4ac:	1c43      	adds	r3, r0, #1
 800c4ae:	d102      	bne.n	800c4b6 <_lseek_r+0x1e>
 800c4b0:	682b      	ldr	r3, [r5, #0]
 800c4b2:	b103      	cbz	r3, 800c4b6 <_lseek_r+0x1e>
 800c4b4:	6023      	str	r3, [r4, #0]
 800c4b6:	bd38      	pop	{r3, r4, r5, pc}
 800c4b8:	2000444c 	.word	0x2000444c

0800c4bc <_read_r>:
 800c4bc:	b538      	push	{r3, r4, r5, lr}
 800c4be:	4d07      	ldr	r5, [pc, #28]	; (800c4dc <_read_r+0x20>)
 800c4c0:	4604      	mov	r4, r0
 800c4c2:	4608      	mov	r0, r1
 800c4c4:	4611      	mov	r1, r2
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	602a      	str	r2, [r5, #0]
 800c4ca:	461a      	mov	r2, r3
 800c4cc:	f7f5 fb40 	bl	8001b50 <_read>
 800c4d0:	1c43      	adds	r3, r0, #1
 800c4d2:	d102      	bne.n	800c4da <_read_r+0x1e>
 800c4d4:	682b      	ldr	r3, [r5, #0]
 800c4d6:	b103      	cbz	r3, 800c4da <_read_r+0x1e>
 800c4d8:	6023      	str	r3, [r4, #0]
 800c4da:	bd38      	pop	{r3, r4, r5, pc}
 800c4dc:	2000444c 	.word	0x2000444c

0800c4e0 <sqrtf>:
 800c4e0:	b508      	push	{r3, lr}
 800c4e2:	ed2d 8b02 	vpush	{d8}
 800c4e6:	eeb0 8a40 	vmov.f32	s16, s0
 800c4ea:	f000 f817 	bl	800c51c <__ieee754_sqrtf>
 800c4ee:	eeb4 8a48 	vcmp.f32	s16, s16
 800c4f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4f6:	d60c      	bvs.n	800c512 <sqrtf+0x32>
 800c4f8:	eddf 8a07 	vldr	s17, [pc, #28]	; 800c518 <sqrtf+0x38>
 800c4fc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c504:	d505      	bpl.n	800c512 <sqrtf+0x32>
 800c506:	f7fb fb47 	bl	8007b98 <__errno>
 800c50a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c50e:	2321      	movs	r3, #33	; 0x21
 800c510:	6003      	str	r3, [r0, #0]
 800c512:	ecbd 8b02 	vpop	{d8}
 800c516:	bd08      	pop	{r3, pc}
 800c518:	00000000 	.word	0x00000000

0800c51c <__ieee754_sqrtf>:
 800c51c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c520:	4770      	bx	lr
	...

0800c524 <_init>:
 800c524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c526:	bf00      	nop
 800c528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c52a:	bc08      	pop	{r3}
 800c52c:	469e      	mov	lr, r3
 800c52e:	4770      	bx	lr

0800c530 <_fini>:
 800c530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c532:	bf00      	nop
 800c534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c536:	bc08      	pop	{r3}
 800c538:	469e      	mov	lr, r3
 800c53a:	4770      	bx	lr
