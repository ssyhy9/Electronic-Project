
Project_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000596c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08005afc  08005afc  00015afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bf8  08005bf8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005bf8  08005bf8  00015bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c00  08005c00  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c00  08005c00  00015c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c04  08005c04  00015c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005c08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000070  08005c78  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  08005c78  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ad5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002696  00000000  00000000  00031b75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb0  00000000  00000000  00034210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d98  00000000  00000000  000350c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029ce4  00000000  00000000  00035e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012f7d  00000000  00000000  0005fb3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010441a  00000000  00000000  00072ab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00176ed3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043f0  00000000  00000000  00176f24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005ae4 	.word	0x08005ae4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005ae4 	.word	0x08005ae4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08a      	sub	sp, #40	; 0x28
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800057a:	f107 031c 	add.w	r3, r7, #28
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]
 8000594:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000596:	4b2f      	ldr	r3, [pc, #188]	; (8000654 <MX_ADC1_Init+0xe0>)
 8000598:	4a2f      	ldr	r2, [pc, #188]	; (8000658 <MX_ADC1_Init+0xe4>)
 800059a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800059c:	4b2d      	ldr	r3, [pc, #180]	; (8000654 <MX_ADC1_Init+0xe0>)
 800059e:	2200      	movs	r2, #0
 80005a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005a2:	4b2c      	ldr	r3, [pc, #176]	; (8000654 <MX_ADC1_Init+0xe0>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005a8:	4b2a      	ldr	r3, [pc, #168]	; (8000654 <MX_ADC1_Init+0xe0>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005ae:	4b29      	ldr	r3, [pc, #164]	; (8000654 <MX_ADC1_Init+0xe0>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005b4:	4b27      	ldr	r3, [pc, #156]	; (8000654 <MX_ADC1_Init+0xe0>)
 80005b6:	2204      	movs	r2, #4
 80005b8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005ba:	4b26      	ldr	r3, [pc, #152]	; (8000654 <MX_ADC1_Init+0xe0>)
 80005bc:	2200      	movs	r2, #0
 80005be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005c0:	4b24      	ldr	r3, [pc, #144]	; (8000654 <MX_ADC1_Init+0xe0>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005c6:	4b23      	ldr	r3, [pc, #140]	; (8000654 <MX_ADC1_Init+0xe0>)
 80005c8:	2201      	movs	r2, #1
 80005ca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005cc:	4b21      	ldr	r3, [pc, #132]	; (8000654 <MX_ADC1_Init+0xe0>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005d4:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <MX_ADC1_Init+0xe0>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005da:	4b1e      	ldr	r3, [pc, #120]	; (8000654 <MX_ADC1_Init+0xe0>)
 80005dc:	2200      	movs	r2, #0
 80005de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005e0:	4b1c      	ldr	r3, [pc, #112]	; (8000654 <MX_ADC1_Init+0xe0>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005e8:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <MX_ADC1_Init+0xe0>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005ee:	4b19      	ldr	r3, [pc, #100]	; (8000654 <MX_ADC1_Init+0xe0>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005f6:	4817      	ldr	r0, [pc, #92]	; (8000654 <MX_ADC1_Init+0xe0>)
 80005f8:	f000 fe28 	bl	800124c <HAL_ADC_Init>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000602:	f000 f98c 	bl	800091e <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000606:	2300      	movs	r3, #0
 8000608:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800060a:	f107 031c 	add.w	r3, r7, #28
 800060e:	4619      	mov	r1, r3
 8000610:	4810      	ldr	r0, [pc, #64]	; (8000654 <MX_ADC1_Init+0xe0>)
 8000612:	f001 fdb9 	bl	8002188 <HAL_ADCEx_MultiModeConfigChannel>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800061c:	f000 f97f 	bl	800091e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000620:	4b0e      	ldr	r3, [pc, #56]	; (800065c <MX_ADC1_Init+0xe8>)
 8000622:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000624:	2306      	movs	r3, #6
 8000626:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000628:	2302      	movs	r3, #2
 800062a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800062c:	237f      	movs	r3, #127	; 0x7f
 800062e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000630:	2304      	movs	r3, #4
 8000632:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	4619      	mov	r1, r3
 800063c:	4805      	ldr	r0, [pc, #20]	; (8000654 <MX_ADC1_Init+0xe0>)
 800063e:	f001 f8fb 	bl	8001838 <HAL_ADC_ConfigChannel>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000648:	f000 f969 	bl	800091e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800064c:	bf00      	nop
 800064e:	3728      	adds	r7, #40	; 0x28
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	2000008c 	.word	0x2000008c
 8000658:	50040000 	.word	0x50040000
 800065c:	32601000 	.word	0x32601000

08000660 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b0ac      	sub	sp, #176	; 0xb0
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000668:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	2288      	movs	r2, #136	; 0x88
 800067e:	2100      	movs	r1, #0
 8000680:	4618      	mov	r0, r3
 8000682:	f004 fa99 	bl	8004bb8 <memset>
  if(adcHandle->Instance==ADC1)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a27      	ldr	r2, [pc, #156]	; (8000728 <HAL_ADC_MspInit+0xc8>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d147      	bne.n	8000720 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000690:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000694:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000696:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800069a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800069e:	2302      	movs	r3, #2
 80006a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006a2:	2301      	movs	r3, #1
 80006a4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80006a6:	2308      	movs	r3, #8
 80006a8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80006aa:	2307      	movs	r3, #7
 80006ac:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006b2:	2302      	movs	r3, #2
 80006b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80006b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80006ba:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	4618      	mov	r0, r3
 80006c2:	f002 ff37 	bl	8003534 <HAL_RCCEx_PeriphCLKConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80006cc:	f000 f927 	bl	800091e <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80006d0:	4b16      	ldr	r3, [pc, #88]	; (800072c <HAL_ADC_MspInit+0xcc>)
 80006d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d4:	4a15      	ldr	r2, [pc, #84]	; (800072c <HAL_ADC_MspInit+0xcc>)
 80006d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006dc:	4b13      	ldr	r3, [pc, #76]	; (800072c <HAL_ADC_MspInit+0xcc>)
 80006de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006e4:	613b      	str	r3, [r7, #16]
 80006e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e8:	4b10      	ldr	r3, [pc, #64]	; (800072c <HAL_ADC_MspInit+0xcc>)
 80006ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ec:	4a0f      	ldr	r2, [pc, #60]	; (800072c <HAL_ADC_MspInit+0xcc>)
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f4:	4b0d      	ldr	r3, [pc, #52]	; (800072c <HAL_ADC_MspInit+0xcc>)
 80006f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f8:	f003 0301 	and.w	r3, r3, #1
 80006fc:	60fb      	str	r3, [r7, #12]
 80006fe:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000700:	2380      	movs	r3, #128	; 0x80
 8000702:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000706:	230b      	movs	r3, #11
 8000708:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000712:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000716:	4619      	mov	r1, r3
 8000718:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800071c:	f001 feca 	bl	80024b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000720:	bf00      	nop
 8000722:	37b0      	adds	r7, #176	; 0xb0
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	50040000 	.word	0x50040000
 800072c:	40021000 	.word	0x40021000

08000730 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08a      	sub	sp, #40	; 0x28
 8000734:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000746:	4b2b      	ldr	r3, [pc, #172]	; (80007f4 <MX_GPIO_Init+0xc4>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	4a2a      	ldr	r2, [pc, #168]	; (80007f4 <MX_GPIO_Init+0xc4>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000752:	4b28      	ldr	r3, [pc, #160]	; (80007f4 <MX_GPIO_Init+0xc4>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	f003 0304 	and.w	r3, r3, #4
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075e:	4b25      	ldr	r3, [pc, #148]	; (80007f4 <MX_GPIO_Init+0xc4>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	4a24      	ldr	r2, [pc, #144]	; (80007f4 <MX_GPIO_Init+0xc4>)
 8000764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000768:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076a:	4b22      	ldr	r3, [pc, #136]	; (80007f4 <MX_GPIO_Init+0xc4>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	4b1f      	ldr	r3, [pc, #124]	; (80007f4 <MX_GPIO_Init+0xc4>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	4a1e      	ldr	r2, [pc, #120]	; (80007f4 <MX_GPIO_Init+0xc4>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000782:	4b1c      	ldr	r3, [pc, #112]	; (80007f4 <MX_GPIO_Init+0xc4>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	4b19      	ldr	r3, [pc, #100]	; (80007f4 <MX_GPIO_Init+0xc4>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	4a18      	ldr	r2, [pc, #96]	; (80007f4 <MX_GPIO_Init+0xc4>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079a:	4b16      	ldr	r3, [pc, #88]	; (80007f4 <MX_GPIO_Init+0xc4>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2120      	movs	r1, #32
 80007aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ae:	f002 f82b 	bl	8002808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007b8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	4619      	mov	r1, r3
 80007c8:	480b      	ldr	r0, [pc, #44]	; (80007f8 <MX_GPIO_Init+0xc8>)
 80007ca:	f001 fe73 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007ce:	2320      	movs	r3, #32
 80007d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	2300      	movs	r3, #0
 80007dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4619      	mov	r1, r3
 80007e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e8:	f001 fe64 	bl	80024b4 <HAL_GPIO_Init>

}
 80007ec:	bf00      	nop
 80007ee:	3728      	adds	r7, #40	; 0x28
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40021000 	.word	0x40021000
 80007f8:	48000800 	.word	0x48000800

080007fc <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000804:	1d39      	adds	r1, r7, #4
 8000806:	f04f 33ff 	mov.w	r3, #4294967295
 800080a:	2201      	movs	r2, #1
 800080c:	4803      	ldr	r0, [pc, #12]	; (800081c <__io_putchar+0x20>)
 800080e:	f003 fcad 	bl	800416c <HAL_UART_Transmit>
  return ch;
 8000812:	687b      	ldr	r3, [r7, #4]
}
 8000814:	4618      	mov	r0, r3
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	2000011c 	.word	0x2000011c

08000820 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000824:	f000 fab2 	bl	8000d8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000828:	f000 f826 	bl	8000878 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800082c:	f7ff ff80 	bl	8000730 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000830:	f000 f9f6 	bl	8000c20 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000834:	f7ff fe9e 	bl	8000574 <MX_ADC1_Init>
  MX_RTC_Init();
 8000838:	f000 f894 	bl	8000964 <MX_RTC_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800083c:	2120      	movs	r1, #32
 800083e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000842:	f001 fff9 	bl	8002838 <HAL_GPIO_TogglePin>
	  	  cnt ++;
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <main+0x4c>)
 8000848:	881b      	ldrh	r3, [r3, #0]
 800084a:	3301      	adds	r3, #1
 800084c:	b29a      	uxth	r2, r3
 800084e:	4b07      	ldr	r3, [pc, #28]	; (800086c <main+0x4c>)
 8000850:	801a      	strh	r2, [r3, #0]
	  ADC_Value = Get_Adc();
 8000852:	f000 f869 	bl	8000928 <Get_Adc>
 8000856:	4603      	mov	r3, r0
 8000858:	461a      	mov	r2, r3
 800085a:	4b05      	ldr	r3, [pc, #20]	; (8000870 <main+0x50>)
 800085c:	801a      	strh	r2, [r3, #0]
	  printf("Digital Value of sine = %d\n", ADC_Value);
 800085e:	4b04      	ldr	r3, [pc, #16]	; (8000870 <main+0x50>)
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	4619      	mov	r1, r3
 8000864:	4803      	ldr	r0, [pc, #12]	; (8000874 <main+0x54>)
 8000866:	f004 f9af 	bl	8004bc8 <iprintf>
	  	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800086a:	e7e7      	b.n	800083c <main+0x1c>
 800086c:	200000f2 	.word	0x200000f2
 8000870:	200000f0 	.word	0x200000f0
 8000874:	08005afc 	.word	0x08005afc

08000878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b096      	sub	sp, #88	; 0x58
 800087c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	2244      	movs	r2, #68	; 0x44
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f004 f996 	bl	8004bb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800088c:	463b      	mov	r3, r7
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800089a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800089e:	f001 fff3 	bl	8002888 <HAL_PWREx_ControlVoltageScaling>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008a8:	f000 f839 	bl	800091e <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80008ac:	230a      	movs	r3, #10
 80008ae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008b6:	2310      	movs	r3, #16
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008ba:	2301      	movs	r3, #1
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008be:	2302      	movs	r3, #2
 80008c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008c2:	2302      	movs	r3, #2
 80008c4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008c6:	2301      	movs	r3, #1
 80008c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80008ca:	230a      	movs	r3, #10
 80008cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008ce:	2307      	movs	r3, #7
 80008d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008d2:	2302      	movs	r3, #2
 80008d4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008d6:	2302      	movs	r3, #2
 80008d8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	4618      	mov	r0, r3
 80008e0:	f002 f828 	bl	8002934 <HAL_RCC_OscConfig>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0x76>
  {
    Error_Handler();
 80008ea:	f000 f818 	bl	800091e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ee:	230f      	movs	r3, #15
 80008f0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f2:	2303      	movs	r3, #3
 80008f4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000902:	463b      	mov	r3, r7
 8000904:	2104      	movs	r1, #4
 8000906:	4618      	mov	r0, r3
 8000908:	f002 fbf0 	bl	80030ec <HAL_RCC_ClockConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000912:	f000 f804 	bl	800091e <Error_Handler>
  }
}
 8000916:	bf00      	nop
 8000918:	3758      	adds	r7, #88	; 0x58
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000922:	b672      	cpsid	i
}
 8000924:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000926:	e7fe      	b.n	8000926 <Error_Handler+0x8>

08000928 <Get_Adc>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

uint16_t Get_Adc(){
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  HAL_ADC_Start(&hadc1);
 800092c:	480c      	ldr	r0, [pc, #48]	; (8000960 <Get_Adc+0x38>)
 800092e:	f000 fde3 	bl	80014f8 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1,100);  //判断ADC是否转换成功
 8000932:	2164      	movs	r1, #100	; 0x64
 8000934:	480a      	ldr	r0, [pc, #40]	; (8000960 <Get_Adc+0x38>)
 8000936:	f000 fe99 	bl	800166c <HAL_ADC_PollForConversion>
  if(HAL_IS_BIT_SET(HAL_ADC_GetState(&hadc1),HAL_ADC_STATE_REG_EOC)){
 800093a:	4809      	ldr	r0, [pc, #36]	; (8000960 <Get_Adc+0x38>)
 800093c:	f001 fb6c 	bl	8002018 <HAL_ADC_GetState>
 8000940:	4603      	mov	r3, r0
 8000942:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000946:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800094a:	d105      	bne.n	8000958 <Get_Adc+0x30>
       return HAL_ADC_GetValue(&hadc1);
 800094c:	4804      	ldr	r0, [pc, #16]	; (8000960 <Get_Adc+0x38>)
 800094e:	f000 ff65 	bl	800181c <HAL_ADC_GetValue>
 8000952:	4603      	mov	r3, r0
 8000954:	b29b      	uxth	r3, r3
 8000956:	e000      	b.n	800095a <Get_Adc+0x32>
    }
    return 0;
 8000958:	2300      	movs	r3, #0
}
 800095a:	4618      	mov	r0, r3
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	2000008c 	.word	0x2000008c

08000964 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000968:	4b10      	ldr	r3, [pc, #64]	; (80009ac <MX_RTC_Init+0x48>)
 800096a:	4a11      	ldr	r2, [pc, #68]	; (80009b0 <MX_RTC_Init+0x4c>)
 800096c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800096e:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <MX_RTC_Init+0x48>)
 8000970:	2200      	movs	r2, #0
 8000972:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000974:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <MX_RTC_Init+0x48>)
 8000976:	227f      	movs	r2, #127	; 0x7f
 8000978:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800097a:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <MX_RTC_Init+0x48>)
 800097c:	22ff      	movs	r2, #255	; 0xff
 800097e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000980:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <MX_RTC_Init+0x48>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <MX_RTC_Init+0x48>)
 8000988:	2200      	movs	r2, #0
 800098a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800098c:	4b07      	ldr	r3, [pc, #28]	; (80009ac <MX_RTC_Init+0x48>)
 800098e:	2200      	movs	r2, #0
 8000990:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <MX_RTC_Init+0x48>)
 8000994:	2200      	movs	r2, #0
 8000996:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000998:	4804      	ldr	r0, [pc, #16]	; (80009ac <MX_RTC_Init+0x48>)
 800099a:	f003 fa87 	bl	8003eac <HAL_RTC_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80009a4:	f7ff ffbb 	bl	800091e <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	200000f4 	.word	0x200000f4
 80009b0:	40002800 	.word	0x40002800

080009b4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b0a4      	sub	sp, #144	; 0x90
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009bc:	f107 0308 	add.w	r3, r7, #8
 80009c0:	2288      	movs	r2, #136	; 0x88
 80009c2:	2100      	movs	r1, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f004 f8f7 	bl	8004bb8 <memset>
  if(rtcHandle->Instance==RTC)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a10      	ldr	r2, [pc, #64]	; (8000a10 <HAL_RTC_MspInit+0x5c>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d118      	bne.n	8000a06 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80009d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009d8:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80009da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009e2:	f107 0308 	add.w	r3, r7, #8
 80009e6:	4618      	mov	r0, r3
 80009e8:	f002 fda4 	bl	8003534 <HAL_RCCEx_PeriphCLKConfig>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80009f2:	f7ff ff94 	bl	800091e <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80009f6:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <HAL_RTC_MspInit+0x60>)
 80009f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80009fc:	4a05      	ldr	r2, [pc, #20]	; (8000a14 <HAL_RTC_MspInit+0x60>)
 80009fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000a06:	bf00      	nop
 8000a08:	3790      	adds	r7, #144	; 0x90
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40002800 	.word	0x40002800
 8000a14:	40021000 	.word	0x40021000

08000a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <HAL_MspInit+0x44>)
 8000a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a22:	4a0e      	ldr	r2, [pc, #56]	; (8000a5c <HAL_MspInit+0x44>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	6613      	str	r3, [r2, #96]	; 0x60
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <HAL_MspInit+0x44>)
 8000a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <HAL_MspInit+0x44>)
 8000a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a3a:	4a08      	ldr	r2, [pc, #32]	; (8000a5c <HAL_MspInit+0x44>)
 8000a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a40:	6593      	str	r3, [r2, #88]	; 0x58
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <HAL_MspInit+0x44>)
 8000a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	40021000 	.word	0x40021000

08000a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <NMI_Handler+0x4>

08000a66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a6a:	e7fe      	b.n	8000a6a <HardFault_Handler+0x4>

08000a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <MemManage_Handler+0x4>

08000a72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <BusFault_Handler+0x4>

08000a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <UsageFault_Handler+0x4>

08000a7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aac:	f000 f9ca 	bl	8000e44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]
 8000ac4:	e00a      	b.n	8000adc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ac6:	f3af 8000 	nop.w
 8000aca:	4601      	mov	r1, r0
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	1c5a      	adds	r2, r3, #1
 8000ad0:	60ba      	str	r2, [r7, #8]
 8000ad2:	b2ca      	uxtb	r2, r1
 8000ad4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	617b      	str	r3, [r7, #20]
 8000adc:	697a      	ldr	r2, [r7, #20]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	dbf0      	blt.n	8000ac6 <_read+0x12>
	}

return len;
 8000ae4:	687b      	ldr	r3, [r7, #4]
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3718      	adds	r7, #24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b086      	sub	sp, #24
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	60f8      	str	r0, [r7, #12]
 8000af6:	60b9      	str	r1, [r7, #8]
 8000af8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]
 8000afe:	e009      	b.n	8000b14 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	1c5a      	adds	r2, r3, #1
 8000b04:	60ba      	str	r2, [r7, #8]
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fe77 	bl	80007fc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	3301      	adds	r3, #1
 8000b12:	617b      	str	r3, [r7, #20]
 8000b14:	697a      	ldr	r2, [r7, #20]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	dbf1      	blt.n	8000b00 <_write+0x12>
	}
	return len;
 8000b1c:	687b      	ldr	r3, [r7, #4]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3718      	adds	r7, #24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <_close>:

int _close(int file)
{
 8000b26:	b480      	push	{r7}
 8000b28:	b083      	sub	sp, #12
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
	return -1;
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	b083      	sub	sp, #12
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
 8000b46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b4e:	605a      	str	r2, [r3, #4]
	return 0;
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <_isatty>:

int _isatty(int file)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	b083      	sub	sp, #12
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
	return 1;
 8000b66:	2301      	movs	r3, #1
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
	return 0;
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3714      	adds	r7, #20
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
	...

08000b90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b98:	4a14      	ldr	r2, [pc, #80]	; (8000bec <_sbrk+0x5c>)
 8000b9a:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <_sbrk+0x60>)
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba4:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <_sbrk+0x64>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d102      	bne.n	8000bb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bac:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <_sbrk+0x64>)
 8000bae:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <_sbrk+0x68>)
 8000bb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <_sbrk+0x64>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d207      	bcs.n	8000bd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bc0:	f003 ffd0 	bl	8004b64 <__errno>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295
 8000bce:	e009      	b.n	8000be4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <_sbrk+0x64>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bd6:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <_sbrk+0x64>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4413      	add	r3, r2
 8000bde:	4a05      	ldr	r2, [pc, #20]	; (8000bf4 <_sbrk+0x64>)
 8000be0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000be2:	68fb      	ldr	r3, [r7, #12]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3718      	adds	r7, #24
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20018000 	.word	0x20018000
 8000bf0:	00000400 	.word	0x00000400
 8000bf4:	20000118 	.word	0x20000118
 8000bf8:	200001b8 	.word	0x200001b8

08000bfc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <SystemInit+0x20>)
 8000c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c06:	4a05      	ldr	r2, [pc, #20]	; (8000c1c <SystemInit+0x20>)
 8000c08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c24:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <MX_USART2_UART_Init+0x58>)
 8000c26:	4a15      	ldr	r2, [pc, #84]	; (8000c7c <MX_USART2_UART_Init+0x5c>)
 8000c28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c2a:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <MX_USART2_UART_Init+0x58>)
 8000c2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c32:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <MX_USART2_UART_Init+0x58>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c38:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <MX_USART2_UART_Init+0x58>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <MX_USART2_UART_Init+0x58>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <MX_USART2_UART_Init+0x58>)
 8000c46:	220c      	movs	r2, #12
 8000c48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <MX_USART2_UART_Init+0x58>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c50:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <MX_USART2_UART_Init+0x58>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <MX_USART2_UART_Init+0x58>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <MX_USART2_UART_Init+0x58>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c62:	4805      	ldr	r0, [pc, #20]	; (8000c78 <MX_USART2_UART_Init+0x58>)
 8000c64:	f003 fa34 	bl	80040d0 <HAL_UART_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c6e:	f7ff fe56 	bl	800091e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	2000011c 	.word	0x2000011c
 8000c7c:	40004400 	.word	0x40004400

08000c80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b0ac      	sub	sp, #176	; 0xb0
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	2288      	movs	r2, #136	; 0x88
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f003 ff89 	bl	8004bb8 <memset>
  if(uartHandle->Instance==USART2)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a21      	ldr	r2, [pc, #132]	; (8000d30 <HAL_UART_MspInit+0xb0>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d13b      	bne.n	8000d28 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f002 fc39 	bl	8003534 <HAL_RCCEx_PeriphCLKConfig>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cc8:	f7ff fe29 	bl	800091e <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ccc:	4b19      	ldr	r3, [pc, #100]	; (8000d34 <HAL_UART_MspInit+0xb4>)
 8000cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd0:	4a18      	ldr	r2, [pc, #96]	; (8000d34 <HAL_UART_MspInit+0xb4>)
 8000cd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd6:	6593      	str	r3, [r2, #88]	; 0x58
 8000cd8:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <HAL_UART_MspInit+0xb4>)
 8000cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce4:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <HAL_UART_MspInit+0xb4>)
 8000ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce8:	4a12      	ldr	r2, [pc, #72]	; (8000d34 <HAL_UART_MspInit+0xb4>)
 8000cea:	f043 0301 	orr.w	r3, r3, #1
 8000cee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cf0:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <HAL_UART_MspInit+0xb4>)
 8000cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf4:	f003 0301 	and.w	r3, r3, #1
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cfc:	230c      	movs	r3, #12
 8000cfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d14:	2307      	movs	r3, #7
 8000d16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d1e:	4619      	mov	r1, r3
 8000d20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d24:	f001 fbc6 	bl	80024b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d28:	bf00      	nop
 8000d2a:	37b0      	adds	r7, #176	; 0xb0
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40004400 	.word	0x40004400
 8000d34:	40021000 	.word	0x40021000

08000d38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d70 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d3c:	f7ff ff5e 	bl	8000bfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d40:	480c      	ldr	r0, [pc, #48]	; (8000d74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d42:	490d      	ldr	r1, [pc, #52]	; (8000d78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d44:	4a0d      	ldr	r2, [pc, #52]	; (8000d7c <LoopForever+0xe>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d48:	e002      	b.n	8000d50 <LoopCopyDataInit>

08000d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4e:	3304      	adds	r3, #4

08000d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d54:	d3f9      	bcc.n	8000d4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d56:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d58:	4c0a      	ldr	r4, [pc, #40]	; (8000d84 <LoopForever+0x16>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d5c:	e001      	b.n	8000d62 <LoopFillZerobss>

08000d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d60:	3204      	adds	r2, #4

08000d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d64:	d3fb      	bcc.n	8000d5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d66:	f003 ff03 	bl	8004b70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d6a:	f7ff fd59 	bl	8000820 <main>

08000d6e <LoopForever>:

LoopForever:
    b LoopForever
 8000d6e:	e7fe      	b.n	8000d6e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d70:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d78:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d7c:	08005c08 	.word	0x08005c08
  ldr r2, =_sbss
 8000d80:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d84:	200001b4 	.word	0x200001b4

08000d88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d88:	e7fe      	b.n	8000d88 <ADC1_2_IRQHandler>
	...

08000d8c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d92:	2300      	movs	r3, #0
 8000d94:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d96:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <HAL_Init+0x3c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a0b      	ldr	r2, [pc, #44]	; (8000dc8 <HAL_Init+0x3c>)
 8000d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000da0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da2:	2003      	movs	r0, #3
 8000da4:	f001 fb52 	bl	800244c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000da8:	2000      	movs	r0, #0
 8000daa:	f000 f80f 	bl	8000dcc <HAL_InitTick>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d002      	beq.n	8000dba <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000db4:	2301      	movs	r3, #1
 8000db6:	71fb      	strb	r3, [r7, #7]
 8000db8:	e001      	b.n	8000dbe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dba:	f7ff fe2d 	bl	8000a18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40022000 	.word	0x40022000

08000dcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000dd8:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <HAL_InitTick+0x6c>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d023      	beq.n	8000e28 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000de0:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <HAL_InitTick+0x70>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <HAL_InitTick+0x6c>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	4619      	mov	r1, r3
 8000dea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df6:	4618      	mov	r0, r3
 8000df8:	f001 fb4f 	bl	800249a <HAL_SYSTICK_Config>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d10f      	bne.n	8000e22 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2b0f      	cmp	r3, #15
 8000e06:	d809      	bhi.n	8000e1c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	6879      	ldr	r1, [r7, #4]
 8000e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e10:	f001 fb27 	bl	8002462 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e14:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <HAL_InitTick+0x74>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6013      	str	r3, [r2, #0]
 8000e1a:	e007      	b.n	8000e2c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	73fb      	strb	r3, [r7, #15]
 8000e20:	e004      	b.n	8000e2c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	73fb      	strb	r3, [r7, #15]
 8000e26:	e001      	b.n	8000e2c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000008 	.word	0x20000008
 8000e3c:	20000000 	.word	0x20000000
 8000e40:	20000004 	.word	0x20000004

08000e44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_IncTick+0x20>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <HAL_IncTick+0x24>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4413      	add	r3, r2
 8000e54:	4a04      	ldr	r2, [pc, #16]	; (8000e68 <HAL_IncTick+0x24>)
 8000e56:	6013      	str	r3, [r2, #0]
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	20000008 	.word	0x20000008
 8000e68:	200001a0 	.word	0x200001a0

08000e6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e70:	4b03      	ldr	r3, [pc, #12]	; (8000e80 <HAL_GetTick+0x14>)
 8000e72:	681b      	ldr	r3, [r3, #0]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	200001a0 	.word	0x200001a0

08000e84 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	431a      	orrs	r2, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	b083      	sub	sp, #12
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
 8000eb2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	431a      	orrs	r2, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b087      	sub	sp, #28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
 8000ef8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	3360      	adds	r3, #96	; 0x60
 8000efe:	461a      	mov	r2, r3
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	4413      	add	r3, r2
 8000f06:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <LL_ADC_SetOffset+0x44>)
 8000f0e:	4013      	ands	r3, r2
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000f16:	683a      	ldr	r2, [r7, #0]
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000f24:	bf00      	nop
 8000f26:	371c      	adds	r7, #28
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	03fff000 	.word	0x03fff000

08000f34 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	3360      	adds	r3, #96	; 0x60
 8000f42:	461a      	mov	r2, r3
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	4413      	add	r3, r2
 8000f4a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b087      	sub	sp, #28
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	3360      	adds	r3, #96	; 0x60
 8000f70:	461a      	mov	r2, r3
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	4413      	add	r3, r2
 8000f78:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	431a      	orrs	r2, r3
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000f8a:	bf00      	nop
 8000f8c:	371c      	adds	r7, #28
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000f96:	b480      	push	{r7}
 8000f98:	b083      	sub	sp, #12
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d101      	bne.n	8000fae <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000faa:	2301      	movs	r3, #1
 8000fac:	e000      	b.n	8000fb0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000fae:	2300      	movs	r3, #0
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b087      	sub	sp, #28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	3330      	adds	r3, #48	; 0x30
 8000fcc:	461a      	mov	r2, r3
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	0a1b      	lsrs	r3, r3, #8
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	f003 030c 	and.w	r3, r3, #12
 8000fd8:	4413      	add	r3, r2
 8000fda:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	f003 031f 	and.w	r3, r3, #31
 8000fe6:	211f      	movs	r1, #31
 8000fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	401a      	ands	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	0e9b      	lsrs	r3, r3, #26
 8000ff4:	f003 011f 	and.w	r1, r3, #31
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	f003 031f 	and.w	r3, r3, #31
 8000ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8001002:	431a      	orrs	r2, r3
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001008:	bf00      	nop
 800100a:	371c      	adds	r7, #28
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001014:	b480      	push	{r7}
 8001016:	b087      	sub	sp, #28
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	3314      	adds	r3, #20
 8001024:	461a      	mov	r2, r3
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	0e5b      	lsrs	r3, r3, #25
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	f003 0304 	and.w	r3, r3, #4
 8001030:	4413      	add	r3, r2
 8001032:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	0d1b      	lsrs	r3, r3, #20
 800103c:	f003 031f 	and.w	r3, r3, #31
 8001040:	2107      	movs	r1, #7
 8001042:	fa01 f303 	lsl.w	r3, r1, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	401a      	ands	r2, r3
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	0d1b      	lsrs	r3, r3, #20
 800104e:	f003 031f 	and.w	r3, r3, #31
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	fa01 f303 	lsl.w	r3, r1, r3
 8001058:	431a      	orrs	r2, r3
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800105e:	bf00      	nop
 8001060:	371c      	adds	r7, #28
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
	...

0800106c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001084:	43db      	mvns	r3, r3
 8001086:	401a      	ands	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f003 0318 	and.w	r3, r3, #24
 800108e:	4908      	ldr	r1, [pc, #32]	; (80010b0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001090:	40d9      	lsrs	r1, r3
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	400b      	ands	r3, r1
 8001096:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800109a:	431a      	orrs	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80010a2:	bf00      	nop
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	0007ffff 	.word	0x0007ffff

080010b4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	f003 031f 	and.w	r3, r3, #31
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80010fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	6093      	str	r3, [r2, #8]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001120:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001124:	d101      	bne.n	800112a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001126:	2301      	movs	r3, #1
 8001128:	e000      	b.n	800112c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800112a:	2300      	movs	r3, #0
}
 800112c:	4618      	mov	r0, r3
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001148:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800114c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001170:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001174:	d101      	bne.n	800117a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001176:	2301      	movs	r3, #1
 8001178:	e000      	b.n	800117c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800117a:	2300      	movs	r3, #0
}
 800117c:	4618      	mov	r0, r3
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001198:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800119c:	f043 0201 	orr.w	r2, r3, #1
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d101      	bne.n	80011c8 <LL_ADC_IsEnabled+0x18>
 80011c4:	2301      	movs	r3, #1
 80011c6:	e000      	b.n	80011ca <LL_ADC_IsEnabled+0x1a>
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011e6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011ea:	f043 0204 	orr.w	r2, r3, #4
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80011fe:	b480      	push	{r7}
 8001200:	b083      	sub	sp, #12
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 0304 	and.w	r3, r3, #4
 800120e:	2b04      	cmp	r3, #4
 8001210:	d101      	bne.n	8001216 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001212:	2301      	movs	r3, #1
 8001214:	e000      	b.n	8001218 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001216:	2300      	movs	r3, #0
}
 8001218:	4618      	mov	r0, r3
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f003 0308 	and.w	r3, r3, #8
 8001234:	2b08      	cmp	r3, #8
 8001236:	d101      	bne.n	800123c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001238:	2301      	movs	r3, #1
 800123a:	e000      	b.n	800123e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
	...

0800124c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800124c:	b590      	push	{r4, r7, lr}
 800124e:	b089      	sub	sp, #36	; 0x24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001254:	2300      	movs	r3, #0
 8001256:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001258:	2300      	movs	r3, #0
 800125a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e136      	b.n	80014d4 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001270:	2b00      	cmp	r3, #0
 8001272:	d109      	bne.n	8001288 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff f9f3 	bl	8000660 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff3f 	bl	8001110 <LL_ADC_IsDeepPowerDownEnabled>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d004      	beq.n	80012a2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff25 	bl	80010ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff ff5a 	bl	8001160 <LL_ADC_IsInternalRegulatorEnabled>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d115      	bne.n	80012de <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff ff3e 	bl	8001138 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80012bc:	4b87      	ldr	r3, [pc, #540]	; (80014dc <HAL_ADC_Init+0x290>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	099b      	lsrs	r3, r3, #6
 80012c2:	4a87      	ldr	r2, [pc, #540]	; (80014e0 <HAL_ADC_Init+0x294>)
 80012c4:	fba2 2303 	umull	r2, r3, r2, r3
 80012c8:	099b      	lsrs	r3, r3, #6
 80012ca:	3301      	adds	r3, #1
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80012d0:	e002      	b.n	80012d8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	3b01      	subs	r3, #1
 80012d6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d1f9      	bne.n	80012d2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff ff3c 	bl	8001160 <LL_ADC_IsInternalRegulatorEnabled>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d10d      	bne.n	800130a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012f2:	f043 0210 	orr.w	r2, r3, #16
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fe:	f043 0201 	orr.w	r2, r3, #1
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff ff75 	bl	80011fe <LL_ADC_REG_IsConversionOngoing>
 8001314:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800131a:	f003 0310 	and.w	r3, r3, #16
 800131e:	2b00      	cmp	r3, #0
 8001320:	f040 80cf 	bne.w	80014c2 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	2b00      	cmp	r3, #0
 8001328:	f040 80cb 	bne.w	80014c2 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001330:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001334:	f043 0202 	orr.w	r2, r3, #2
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff35 	bl	80011b0 <LL_ADC_IsEnabled>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d115      	bne.n	8001378 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800134c:	4865      	ldr	r0, [pc, #404]	; (80014e4 <HAL_ADC_Init+0x298>)
 800134e:	f7ff ff2f 	bl	80011b0 <LL_ADC_IsEnabled>
 8001352:	4604      	mov	r4, r0
 8001354:	4864      	ldr	r0, [pc, #400]	; (80014e8 <HAL_ADC_Init+0x29c>)
 8001356:	f7ff ff2b 	bl	80011b0 <LL_ADC_IsEnabled>
 800135a:	4603      	mov	r3, r0
 800135c:	431c      	orrs	r4, r3
 800135e:	4863      	ldr	r0, [pc, #396]	; (80014ec <HAL_ADC_Init+0x2a0>)
 8001360:	f7ff ff26 	bl	80011b0 <LL_ADC_IsEnabled>
 8001364:	4603      	mov	r3, r0
 8001366:	4323      	orrs	r3, r4
 8001368:	2b00      	cmp	r3, #0
 800136a:	d105      	bne.n	8001378 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	4619      	mov	r1, r3
 8001372:	485f      	ldr	r0, [pc, #380]	; (80014f0 <HAL_ADC_Init+0x2a4>)
 8001374:	f7ff fd86 	bl	8000e84 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	7e5b      	ldrb	r3, [r3, #25]
 800137c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001382:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001388:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800138e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001396:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001398:	4313      	orrs	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d106      	bne.n	80013b4 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013aa:	3b01      	subs	r3, #1
 80013ac:	045b      	lsls	r3, r3, #17
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d009      	beq.n	80013d0 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	68da      	ldr	r2, [r3, #12]
 80013d6:	4b47      	ldr	r3, [pc, #284]	; (80014f4 <HAL_ADC_Init+0x2a8>)
 80013d8:	4013      	ands	r3, r2
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	6812      	ldr	r2, [r2, #0]
 80013de:	69b9      	ldr	r1, [r7, #24]
 80013e0:	430b      	orrs	r3, r1
 80013e2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ff08 	bl	80011fe <LL_ADC_REG_IsConversionOngoing>
 80013ee:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ff15 	bl	8001224 <LL_ADC_INJ_IsConversionOngoing>
 80013fa:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d13d      	bne.n	800147e <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d13a      	bne.n	800147e <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800140c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001414:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001424:	f023 0302 	bic.w	r3, r3, #2
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	6812      	ldr	r2, [r2, #0]
 800142c:	69b9      	ldr	r1, [r7, #24]
 800142e:	430b      	orrs	r3, r1
 8001430:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001438:	2b01      	cmp	r3, #1
 800143a:	d118      	bne.n	800146e <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001446:	f023 0304 	bic.w	r3, r3, #4
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001452:	4311      	orrs	r1, r2
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001458:	4311      	orrs	r1, r2
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800145e:	430a      	orrs	r2, r1
 8001460:	431a      	orrs	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f042 0201 	orr.w	r2, r2, #1
 800146a:	611a      	str	r2, [r3, #16]
 800146c:	e007      	b.n	800147e <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	691a      	ldr	r2, [r3, #16]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f022 0201 	bic.w	r2, r2, #1
 800147c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d10c      	bne.n	80014a0 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148c:	f023 010f 	bic.w	r1, r3, #15
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	69db      	ldr	r3, [r3, #28]
 8001494:	1e5a      	subs	r2, r3, #1
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	430a      	orrs	r2, r1
 800149c:	631a      	str	r2, [r3, #48]	; 0x30
 800149e:	e007      	b.n	80014b0 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f022 020f 	bic.w	r2, r2, #15
 80014ae:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014b4:	f023 0303 	bic.w	r3, r3, #3
 80014b8:	f043 0201 	orr.w	r2, r3, #1
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	655a      	str	r2, [r3, #84]	; 0x54
 80014c0:	e007      	b.n	80014d2 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014c6:	f043 0210 	orr.w	r2, r3, #16
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80014d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3724      	adds	r7, #36	; 0x24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd90      	pop	{r4, r7, pc}
 80014dc:	20000000 	.word	0x20000000
 80014e0:	053e2d63 	.word	0x053e2d63
 80014e4:	50040000 	.word	0x50040000
 80014e8:	50040100 	.word	0x50040100
 80014ec:	50040200 	.word	0x50040200
 80014f0:	50040300 	.word	0x50040300
 80014f4:	fff0c007 	.word	0xfff0c007

080014f8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001500:	4857      	ldr	r0, [pc, #348]	; (8001660 <HAL_ADC_Start+0x168>)
 8001502:	f7ff fdd7 	bl	80010b4 <LL_ADC_GetMultimode>
 8001506:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fe76 	bl	80011fe <LL_ADC_REG_IsConversionOngoing>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	f040 809c 	bne.w	8001652 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001520:	2b01      	cmp	r3, #1
 8001522:	d101      	bne.n	8001528 <HAL_ADC_Start+0x30>
 8001524:	2302      	movs	r3, #2
 8001526:	e097      	b.n	8001658 <HAL_ADC_Start+0x160>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2201      	movs	r2, #1
 800152c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f000 fd7d 	bl	8002030 <ADC_Enable>
 8001536:	4603      	mov	r3, r0
 8001538:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800153a:	7dfb      	ldrb	r3, [r7, #23]
 800153c:	2b00      	cmp	r3, #0
 800153e:	f040 8083 	bne.w	8001648 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001546:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800154a:	f023 0301 	bic.w	r3, r3, #1
 800154e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a42      	ldr	r2, [pc, #264]	; (8001664 <HAL_ADC_Start+0x16c>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d002      	beq.n	8001566 <HAL_ADC_Start+0x6e>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	e000      	b.n	8001568 <HAL_ADC_Start+0x70>
 8001566:	4b40      	ldr	r3, [pc, #256]	; (8001668 <HAL_ADC_Start+0x170>)
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	6812      	ldr	r2, [r2, #0]
 800156c:	4293      	cmp	r3, r2
 800156e:	d002      	beq.n	8001576 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d105      	bne.n	8001582 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800157a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001586:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800158a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800158e:	d106      	bne.n	800159e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001594:	f023 0206 	bic.w	r2, r3, #6
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	659a      	str	r2, [r3, #88]	; 0x58
 800159c:	e002      	b.n	80015a4 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	221c      	movs	r2, #28
 80015aa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a2a      	ldr	r2, [pc, #168]	; (8001664 <HAL_ADC_Start+0x16c>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d002      	beq.n	80015c4 <HAL_ADC_Start+0xcc>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	e000      	b.n	80015c6 <HAL_ADC_Start+0xce>
 80015c4:	4b28      	ldr	r3, [pc, #160]	; (8001668 <HAL_ADC_Start+0x170>)
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	6812      	ldr	r2, [r2, #0]
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d008      	beq.n	80015e0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d005      	beq.n	80015e0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	2b05      	cmp	r3, #5
 80015d8:	d002      	beq.n	80015e0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	2b09      	cmp	r3, #9
 80015de:	d114      	bne.n	800160a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d007      	beq.n	80015fe <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fde7 	bl	80011d6 <LL_ADC_REG_StartConversion>
 8001608:	e025      	b.n	8001656 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800160e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a12      	ldr	r2, [pc, #72]	; (8001664 <HAL_ADC_Start+0x16c>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d002      	beq.n	8001626 <HAL_ADC_Start+0x12e>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	e000      	b.n	8001628 <HAL_ADC_Start+0x130>
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <HAL_ADC_Start+0x170>)
 8001628:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d00f      	beq.n	8001656 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800163a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800163e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	655a      	str	r2, [r3, #84]	; 0x54
 8001646:	e006      	b.n	8001656 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001650:	e001      	b.n	8001656 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001652:	2302      	movs	r3, #2
 8001654:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001656:	7dfb      	ldrb	r3, [r7, #23]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	50040300 	.word	0x50040300
 8001664:	50040100 	.word	0x50040100
 8001668:	50040000 	.word	0x50040000

0800166c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001676:	4866      	ldr	r0, [pc, #408]	; (8001810 <HAL_ADC_PollForConversion+0x1a4>)
 8001678:	f7ff fd1c 	bl	80010b4 <LL_ADC_GetMultimode>
 800167c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	2b08      	cmp	r3, #8
 8001684:	d102      	bne.n	800168c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001686:	2308      	movs	r3, #8
 8001688:	61fb      	str	r3, [r7, #28]
 800168a:	e02a      	b.n	80016e2 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d005      	beq.n	800169e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	2b05      	cmp	r3, #5
 8001696:	d002      	beq.n	800169e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	2b09      	cmp	r3, #9
 800169c:	d111      	bne.n	80016c2 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d007      	beq.n	80016bc <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016b0:	f043 0220 	orr.w	r2, r3, #32
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e0a4      	b.n	8001806 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80016bc:	2304      	movs	r3, #4
 80016be:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80016c0:	e00f      	b.n	80016e2 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80016c2:	4853      	ldr	r0, [pc, #332]	; (8001810 <HAL_ADC_PollForConversion+0x1a4>)
 80016c4:	f7ff fd04 	bl	80010d0 <LL_ADC_GetMultiDMATransfer>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d007      	beq.n	80016de <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d2:	f043 0220 	orr.w	r2, r3, #32
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e093      	b.n	8001806 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80016de:	2304      	movs	r3, #4
 80016e0:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80016e2:	f7ff fbc3 	bl	8000e6c <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80016e8:	e021      	b.n	800172e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f0:	d01d      	beq.n	800172e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80016f2:	f7ff fbbb 	bl	8000e6c <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d302      	bcc.n	8001708 <HAL_ADC_PollForConversion+0x9c>
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d112      	bne.n	800172e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	4013      	ands	r3, r2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d10b      	bne.n	800172e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800171a:	f043 0204 	orr.w	r2, r3, #4
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e06b      	b.n	8001806 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	4013      	ands	r3, r2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0d6      	beq.n	80016ea <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001740:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff fc22 	bl	8000f96 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d01c      	beq.n	8001792 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	7e5b      	ldrb	r3, [r3, #25]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d118      	bne.n	8001792 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0308 	and.w	r3, r3, #8
 800176a:	2b08      	cmp	r3, #8
 800176c:	d111      	bne.n	8001792 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001772:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800177e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d105      	bne.n	8001792 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800178a:	f043 0201 	orr.w	r2, r3, #1
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a1f      	ldr	r2, [pc, #124]	; (8001814 <HAL_ADC_PollForConversion+0x1a8>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d002      	beq.n	80017a2 <HAL_ADC_PollForConversion+0x136>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	e000      	b.n	80017a4 <HAL_ADC_PollForConversion+0x138>
 80017a2:	4b1d      	ldr	r3, [pc, #116]	; (8001818 <HAL_ADC_PollForConversion+0x1ac>)
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	6812      	ldr	r2, [r2, #0]
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d008      	beq.n	80017be <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d005      	beq.n	80017be <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	2b05      	cmp	r3, #5
 80017b6:	d002      	beq.n	80017be <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	2b09      	cmp	r3, #9
 80017bc:	d104      	bne.n	80017c8 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	61bb      	str	r3, [r7, #24]
 80017c6:	e00c      	b.n	80017e2 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a11      	ldr	r2, [pc, #68]	; (8001814 <HAL_ADC_PollForConversion+0x1a8>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d002      	beq.n	80017d8 <HAL_ADC_PollForConversion+0x16c>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	e000      	b.n	80017da <HAL_ADC_PollForConversion+0x16e>
 80017d8:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <HAL_ADC_PollForConversion+0x1ac>)
 80017da:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	2b08      	cmp	r3, #8
 80017e6:	d104      	bne.n	80017f2 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2208      	movs	r2, #8
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	e008      	b.n	8001804 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d103      	bne.n	8001804 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	220c      	movs	r2, #12
 8001802:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3720      	adds	r7, #32
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	50040300 	.word	0x50040300
 8001814:	50040100 	.word	0x50040100
 8001818:	50040000 	.word	0x50040000

0800181c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800182a:	4618      	mov	r0, r3
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
	...

08001838 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b0b6      	sub	sp, #216	; 0xd8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001842:	2300      	movs	r3, #0
 8001844:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001848:	2300      	movs	r3, #0
 800184a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001852:	2b01      	cmp	r3, #1
 8001854:	d101      	bne.n	800185a <HAL_ADC_ConfigChannel+0x22>
 8001856:	2302      	movs	r3, #2
 8001858:	e3c7      	b.n	8001fea <HAL_ADC_ConfigChannel+0x7b2>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2201      	movs	r2, #1
 800185e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fcc9 	bl	80011fe <LL_ADC_REG_IsConversionOngoing>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	f040 83a8 	bne.w	8001fc4 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b05      	cmp	r3, #5
 800187a:	d824      	bhi.n	80018c6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	3b02      	subs	r3, #2
 8001882:	2b03      	cmp	r3, #3
 8001884:	d81b      	bhi.n	80018be <HAL_ADC_ConfigChannel+0x86>
 8001886:	a201      	add	r2, pc, #4	; (adr r2, 800188c <HAL_ADC_ConfigChannel+0x54>)
 8001888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800188c:	0800189d 	.word	0x0800189d
 8001890:	080018a5 	.word	0x080018a5
 8001894:	080018ad 	.word	0x080018ad
 8001898:	080018b5 	.word	0x080018b5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	220c      	movs	r2, #12
 80018a0:	605a      	str	r2, [r3, #4]
          break;
 80018a2:	e011      	b.n	80018c8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	2212      	movs	r2, #18
 80018a8:	605a      	str	r2, [r3, #4]
          break;
 80018aa:	e00d      	b.n	80018c8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	2218      	movs	r2, #24
 80018b0:	605a      	str	r2, [r3, #4]
          break;
 80018b2:	e009      	b.n	80018c8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018ba:	605a      	str	r2, [r3, #4]
          break;
 80018bc:	e004      	b.n	80018c8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	2206      	movs	r2, #6
 80018c2:	605a      	str	r2, [r3, #4]
          break;
 80018c4:	e000      	b.n	80018c8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80018c6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6818      	ldr	r0, [r3, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	6859      	ldr	r1, [r3, #4]
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	461a      	mov	r2, r3
 80018d6:	f7ff fb71 	bl	8000fbc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff fc8d 	bl	80011fe <LL_ADC_REG_IsConversionOngoing>
 80018e4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff fc99 	bl	8001224 <LL_ADC_INJ_IsConversionOngoing>
 80018f2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f040 81a6 	bne.w	8001c4c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001900:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001904:	2b00      	cmp	r3, #0
 8001906:	f040 81a1 	bne.w	8001c4c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6818      	ldr	r0, [r3, #0]
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	6819      	ldr	r1, [r3, #0]
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	461a      	mov	r2, r3
 8001918:	f7ff fb7c 	bl	8001014 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	695a      	ldr	r2, [r3, #20]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	08db      	lsrs	r3, r3, #3
 8001928:	f003 0303 	and.w	r3, r3, #3
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	2b04      	cmp	r3, #4
 800193c:	d00a      	beq.n	8001954 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6818      	ldr	r0, [r3, #0]
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	6919      	ldr	r1, [r3, #16]
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800194e:	f7ff facd 	bl	8000eec <LL_ADC_SetOffset>
 8001952:	e17b      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2100      	movs	r1, #0
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff faea 	bl	8000f34 <LL_ADC_GetOffsetChannel>
 8001960:	4603      	mov	r3, r0
 8001962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001966:	2b00      	cmp	r3, #0
 8001968:	d10a      	bne.n	8001980 <HAL_ADC_ConfigChannel+0x148>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2100      	movs	r1, #0
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff fadf 	bl	8000f34 <LL_ADC_GetOffsetChannel>
 8001976:	4603      	mov	r3, r0
 8001978:	0e9b      	lsrs	r3, r3, #26
 800197a:	f003 021f 	and.w	r2, r3, #31
 800197e:	e01e      	b.n	80019be <HAL_ADC_ConfigChannel+0x186>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2100      	movs	r1, #0
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff fad4 	bl	8000f34 <LL_ADC_GetOffsetChannel>
 800198c:	4603      	mov	r3, r0
 800198e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001992:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001996:	fa93 f3a3 	rbit	r3, r3
 800199a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800199e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80019a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80019a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80019ae:	2320      	movs	r3, #32
 80019b0:	e004      	b.n	80019bc <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80019b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80019b6:	fab3 f383 	clz	r3, r3
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d105      	bne.n	80019d6 <HAL_ADC_ConfigChannel+0x19e>
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	0e9b      	lsrs	r3, r3, #26
 80019d0:	f003 031f 	and.w	r3, r3, #31
 80019d4:	e018      	b.n	8001a08 <HAL_ADC_ConfigChannel+0x1d0>
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80019e2:	fa93 f3a3 	rbit	r3, r3
 80019e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80019ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80019f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80019fa:	2320      	movs	r3, #32
 80019fc:	e004      	b.n	8001a08 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80019fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a02:	fab3 f383 	clz	r3, r3
 8001a06:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d106      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2200      	movs	r2, #0
 8001a12:	2100      	movs	r1, #0
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff faa3 	bl	8000f60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2101      	movs	r1, #1
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fa87 	bl	8000f34 <LL_ADC_GetOffsetChannel>
 8001a26:	4603      	mov	r3, r0
 8001a28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d10a      	bne.n	8001a46 <HAL_ADC_ConfigChannel+0x20e>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2101      	movs	r1, #1
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fa7c 	bl	8000f34 <LL_ADC_GetOffsetChannel>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	0e9b      	lsrs	r3, r3, #26
 8001a40:	f003 021f 	and.w	r2, r3, #31
 8001a44:	e01e      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x24c>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff fa71 	bl	8000f34 <LL_ADC_GetOffsetChannel>
 8001a52:	4603      	mov	r3, r0
 8001a54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a5c:	fa93 f3a3 	rbit	r3, r3
 8001a60:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001a64:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001a68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001a6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001a74:	2320      	movs	r3, #32
 8001a76:	e004      	b.n	8001a82 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001a78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a7c:	fab3 f383 	clz	r3, r3
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d105      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x264>
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	0e9b      	lsrs	r3, r3, #26
 8001a96:	f003 031f 	and.w	r3, r3, #31
 8001a9a:	e018      	b.n	8001ace <HAL_ADC_ConfigChannel+0x296>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001aa8:	fa93 f3a3 	rbit	r3, r3
 8001aac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001ab0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ab4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001ab8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d101      	bne.n	8001ac4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001ac0:	2320      	movs	r3, #32
 8001ac2:	e004      	b.n	8001ace <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001ac4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ac8:	fab3 f383 	clz	r3, r3
 8001acc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d106      	bne.n	8001ae0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2101      	movs	r1, #1
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff fa40 	bl	8000f60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2102      	movs	r1, #2
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff fa24 	bl	8000f34 <LL_ADC_GetOffsetChannel>
 8001aec:	4603      	mov	r3, r0
 8001aee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d10a      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x2d4>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2102      	movs	r1, #2
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff fa19 	bl	8000f34 <LL_ADC_GetOffsetChannel>
 8001b02:	4603      	mov	r3, r0
 8001b04:	0e9b      	lsrs	r3, r3, #26
 8001b06:	f003 021f 	and.w	r2, r3, #31
 8001b0a:	e01e      	b.n	8001b4a <HAL_ADC_ConfigChannel+0x312>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2102      	movs	r1, #2
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fa0e 	bl	8000f34 <LL_ADC_GetOffsetChannel>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b22:	fa93 f3a3 	rbit	r3, r3
 8001b26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001b2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001b32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001b3a:	2320      	movs	r3, #32
 8001b3c:	e004      	b.n	8001b48 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001b3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b42:	fab3 f383 	clz	r3, r3
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d105      	bne.n	8001b62 <HAL_ADC_ConfigChannel+0x32a>
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	0e9b      	lsrs	r3, r3, #26
 8001b5c:	f003 031f 	and.w	r3, r3, #31
 8001b60:	e016      	b.n	8001b90 <HAL_ADC_ConfigChannel+0x358>
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b6e:	fa93 f3a3 	rbit	r3, r3
 8001b72:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001b74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001b7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001b82:	2320      	movs	r3, #32
 8001b84:	e004      	b.n	8001b90 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001b86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b8a:	fab3 f383 	clz	r3, r3
 8001b8e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d106      	bne.n	8001ba2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	2102      	movs	r1, #2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff f9df 	bl	8000f60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2103      	movs	r1, #3
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff f9c3 	bl	8000f34 <LL_ADC_GetOffsetChannel>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d10a      	bne.n	8001bce <HAL_ADC_ConfigChannel+0x396>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2103      	movs	r1, #3
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff f9b8 	bl	8000f34 <LL_ADC_GetOffsetChannel>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	0e9b      	lsrs	r3, r3, #26
 8001bc8:	f003 021f 	and.w	r2, r3, #31
 8001bcc:	e017      	b.n	8001bfe <HAL_ADC_ConfigChannel+0x3c6>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2103      	movs	r1, #3
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff f9ad 	bl	8000f34 <LL_ADC_GetOffsetChannel>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001be0:	fa93 f3a3 	rbit	r3, r3
 8001be4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001be6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001be8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001bea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d101      	bne.n	8001bf4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001bf0:	2320      	movs	r3, #32
 8001bf2:	e003      	b.n	8001bfc <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001bf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bf6:	fab3 f383 	clz	r3, r3
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d105      	bne.n	8001c16 <HAL_ADC_ConfigChannel+0x3de>
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	0e9b      	lsrs	r3, r3, #26
 8001c10:	f003 031f 	and.w	r3, r3, #31
 8001c14:	e011      	b.n	8001c3a <HAL_ADC_ConfigChannel+0x402>
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c1e:	fa93 f3a3 	rbit	r3, r3
 8001c22:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001c24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c26:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001c28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001c2e:	2320      	movs	r3, #32
 8001c30:	e003      	b.n	8001c3a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c34:	fab3 f383 	clz	r3, r3
 8001c38:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d106      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2200      	movs	r2, #0
 8001c44:	2103      	movs	r1, #3
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff f98a 	bl	8000f60 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff faad 	bl	80011b0 <LL_ADC_IsEnabled>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f040 813f 	bne.w	8001edc <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6818      	ldr	r0, [r3, #0]
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	6819      	ldr	r1, [r3, #0]
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	f7ff f9fe 	bl	800106c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	4a8e      	ldr	r2, [pc, #568]	; (8001eb0 <HAL_ADC_ConfigChannel+0x678>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	f040 8130 	bne.w	8001edc <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d10b      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x46c>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	0e9b      	lsrs	r3, r3, #26
 8001c92:	3301      	adds	r3, #1
 8001c94:	f003 031f 	and.w	r3, r3, #31
 8001c98:	2b09      	cmp	r3, #9
 8001c9a:	bf94      	ite	ls
 8001c9c:	2301      	movls	r3, #1
 8001c9e:	2300      	movhi	r3, #0
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	e019      	b.n	8001cd8 <HAL_ADC_ConfigChannel+0x4a0>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001caa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cac:	fa93 f3a3 	rbit	r3, r3
 8001cb0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001cb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cb4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001cb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d101      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001cbc:	2320      	movs	r3, #32
 8001cbe:	e003      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001cc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cc2:	fab3 f383 	clz	r3, r3
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	3301      	adds	r3, #1
 8001cca:	f003 031f 	and.w	r3, r3, #31
 8001cce:	2b09      	cmp	r3, #9
 8001cd0:	bf94      	ite	ls
 8001cd2:	2301      	movls	r3, #1
 8001cd4:	2300      	movhi	r3, #0
 8001cd6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d079      	beq.n	8001dd0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d107      	bne.n	8001cf8 <HAL_ADC_ConfigChannel+0x4c0>
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	0e9b      	lsrs	r3, r3, #26
 8001cee:	3301      	adds	r3, #1
 8001cf0:	069b      	lsls	r3, r3, #26
 8001cf2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cf6:	e015      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x4ec>
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d00:	fa93 f3a3 	rbit	r3, r3
 8001d04:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d08:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001d0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001d10:	2320      	movs	r3, #32
 8001d12:	e003      	b.n	8001d1c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001d14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d16:	fab3 f383 	clz	r3, r3
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	069b      	lsls	r3, r3, #26
 8001d20:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d109      	bne.n	8001d44 <HAL_ADC_ConfigChannel+0x50c>
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	0e9b      	lsrs	r3, r3, #26
 8001d36:	3301      	adds	r3, #1
 8001d38:	f003 031f 	and.w	r3, r3, #31
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d42:	e017      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x53c>
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d4c:	fa93 f3a3 	rbit	r3, r3
 8001d50:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001d52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d54:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001d56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d101      	bne.n	8001d60 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001d5c:	2320      	movs	r3, #32
 8001d5e:	e003      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001d60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d62:	fab3 f383 	clz	r3, r3
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	3301      	adds	r3, #1
 8001d6a:	f003 031f 	and.w	r3, r3, #31
 8001d6e:	2101      	movs	r1, #1
 8001d70:	fa01 f303 	lsl.w	r3, r1, r3
 8001d74:	ea42 0103 	orr.w	r1, r2, r3
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d10a      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x562>
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	0e9b      	lsrs	r3, r3, #26
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	f003 021f 	and.w	r2, r3, #31
 8001d90:	4613      	mov	r3, r2
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	4413      	add	r3, r2
 8001d96:	051b      	lsls	r3, r3, #20
 8001d98:	e018      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x594>
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001da2:	fa93 f3a3 	rbit	r3, r3
 8001da6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001daa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001db2:	2320      	movs	r3, #32
 8001db4:	e003      	b.n	8001dbe <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001db8:	fab3 f383 	clz	r3, r3
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	f003 021f 	and.w	r2, r3, #31
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	4413      	add	r3, r2
 8001dca:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dcc:	430b      	orrs	r3, r1
 8001dce:	e080      	b.n	8001ed2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d107      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x5b4>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	0e9b      	lsrs	r3, r3, #26
 8001de2:	3301      	adds	r3, #1
 8001de4:	069b      	lsls	r3, r3, #26
 8001de6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dea:	e015      	b.n	8001e18 <HAL_ADC_ConfigChannel+0x5e0>
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df4:	fa93 f3a3 	rbit	r3, r3
 8001df8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dfc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001e04:	2320      	movs	r3, #32
 8001e06:	e003      	b.n	8001e10 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e0a:	fab3 f383 	clz	r3, r3
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	3301      	adds	r3, #1
 8001e12:	069b      	lsls	r3, r3, #26
 8001e14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d109      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x600>
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	0e9b      	lsrs	r3, r3, #26
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	f003 031f 	and.w	r3, r3, #31
 8001e30:	2101      	movs	r1, #1
 8001e32:	fa01 f303 	lsl.w	r3, r1, r3
 8001e36:	e017      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x630>
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3e:	6a3b      	ldr	r3, [r7, #32]
 8001e40:	fa93 f3a3 	rbit	r3, r3
 8001e44:	61fb      	str	r3, [r7, #28]
  return result;
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d101      	bne.n	8001e54 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001e50:	2320      	movs	r3, #32
 8001e52:	e003      	b.n	8001e5c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e56:	fab3 f383 	clz	r3, r3
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	f003 031f 	and.w	r3, r3, #31
 8001e62:	2101      	movs	r1, #1
 8001e64:	fa01 f303 	lsl.w	r3, r1, r3
 8001e68:	ea42 0103 	orr.w	r1, r2, r3
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d10d      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x65c>
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	0e9b      	lsrs	r3, r3, #26
 8001e7e:	3301      	adds	r3, #1
 8001e80:	f003 021f 	and.w	r2, r3, #31
 8001e84:	4613      	mov	r3, r2
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	4413      	add	r3, r2
 8001e8a:	3b1e      	subs	r3, #30
 8001e8c:	051b      	lsls	r3, r3, #20
 8001e8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e92:	e01d      	b.n	8001ed0 <HAL_ADC_ConfigChannel+0x698>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	fa93 f3a3 	rbit	r3, r3
 8001ea0:	613b      	str	r3, [r7, #16]
  return result;
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d103      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001eac:	2320      	movs	r3, #32
 8001eae:	e005      	b.n	8001ebc <HAL_ADC_ConfigChannel+0x684>
 8001eb0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	fab3 f383 	clz	r3, r3
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	f003 021f 	and.w	r2, r3, #31
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	4413      	add	r3, r2
 8001ec8:	3b1e      	subs	r3, #30
 8001eca:	051b      	lsls	r3, r3, #20
 8001ecc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ed0:	430b      	orrs	r3, r1
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	6892      	ldr	r2, [r2, #8]
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	f7ff f89c 	bl	8001014 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4b44      	ldr	r3, [pc, #272]	; (8001ff4 <HAL_ADC_ConfigChannel+0x7bc>)
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d07a      	beq.n	8001fde <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ee8:	4843      	ldr	r0, [pc, #268]	; (8001ff8 <HAL_ADC_ConfigChannel+0x7c0>)
 8001eea:	f7fe fff1 	bl	8000ed0 <LL_ADC_GetCommonPathInternalCh>
 8001eee:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a41      	ldr	r2, [pc, #260]	; (8001ffc <HAL_ADC_ConfigChannel+0x7c4>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d12c      	bne.n	8001f56 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001efc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d126      	bne.n	8001f56 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a3c      	ldr	r2, [pc, #240]	; (8002000 <HAL_ADC_ConfigChannel+0x7c8>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d004      	beq.n	8001f1c <HAL_ADC_ConfigChannel+0x6e4>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a3b      	ldr	r2, [pc, #236]	; (8002004 <HAL_ADC_ConfigChannel+0x7cc>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d15d      	bne.n	8001fd8 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f24:	4619      	mov	r1, r3
 8001f26:	4834      	ldr	r0, [pc, #208]	; (8001ff8 <HAL_ADC_ConfigChannel+0x7c0>)
 8001f28:	f7fe ffbf 	bl	8000eaa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f2c:	4b36      	ldr	r3, [pc, #216]	; (8002008 <HAL_ADC_ConfigChannel+0x7d0>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	099b      	lsrs	r3, r3, #6
 8001f32:	4a36      	ldr	r2, [pc, #216]	; (800200c <HAL_ADC_ConfigChannel+0x7d4>)
 8001f34:	fba2 2303 	umull	r2, r3, r2, r3
 8001f38:	099b      	lsrs	r3, r3, #6
 8001f3a:	1c5a      	adds	r2, r3, #1
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	4413      	add	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f46:	e002      	b.n	8001f4e <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1f9      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f54:	e040      	b.n	8001fd8 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a2d      	ldr	r2, [pc, #180]	; (8002010 <HAL_ADC_ConfigChannel+0x7d8>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d118      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x75a>
 8001f60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d112      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a23      	ldr	r2, [pc, #140]	; (8002000 <HAL_ADC_ConfigChannel+0x7c8>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d004      	beq.n	8001f80 <HAL_ADC_ConfigChannel+0x748>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a22      	ldr	r2, [pc, #136]	; (8002004 <HAL_ADC_ConfigChannel+0x7cc>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d12d      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f88:	4619      	mov	r1, r3
 8001f8a:	481b      	ldr	r0, [pc, #108]	; (8001ff8 <HAL_ADC_ConfigChannel+0x7c0>)
 8001f8c:	f7fe ff8d 	bl	8000eaa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f90:	e024      	b.n	8001fdc <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a1f      	ldr	r2, [pc, #124]	; (8002014 <HAL_ADC_ConfigChannel+0x7dc>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d120      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fa0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d11a      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a14      	ldr	r2, [pc, #80]	; (8002000 <HAL_ADC_ConfigChannel+0x7c8>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d115      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fb6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fba:	4619      	mov	r1, r3
 8001fbc:	480e      	ldr	r0, [pc, #56]	; (8001ff8 <HAL_ADC_ConfigChannel+0x7c0>)
 8001fbe:	f7fe ff74 	bl	8000eaa <LL_ADC_SetCommonPathInternalCh>
 8001fc2:	e00c      	b.n	8001fde <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc8:	f043 0220 	orr.w	r2, r3, #32
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001fd6:	e002      	b.n	8001fde <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fd8:	bf00      	nop
 8001fda:	e000      	b.n	8001fde <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fdc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001fe6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	37d8      	adds	r7, #216	; 0xd8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	80080000 	.word	0x80080000
 8001ff8:	50040300 	.word	0x50040300
 8001ffc:	c7520000 	.word	0xc7520000
 8002000:	50040000 	.word	0x50040000
 8002004:	50040200 	.word	0x50040200
 8002008:	20000000 	.word	0x20000000
 800200c:	053e2d63 	.word	0x053e2d63
 8002010:	cb840000 	.word	0xcb840000
 8002014:	80000001 	.word	0x80000001

08002018 <HAL_ADC_GetState>:
  *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
  * @param hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002024:	4618      	mov	r0, r3
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002038:	2300      	movs	r3, #0
 800203a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff f8b5 	bl	80011b0 <LL_ADC_IsEnabled>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d169      	bne.n	8002120 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	689a      	ldr	r2, [r3, #8]
 8002052:	4b36      	ldr	r3, [pc, #216]	; (800212c <ADC_Enable+0xfc>)
 8002054:	4013      	ands	r3, r2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00d      	beq.n	8002076 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800205e:	f043 0210 	orr.w	r2, r3, #16
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206a:	f043 0201 	orr.w	r2, r3, #1
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e055      	b.n	8002122 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff f884 	bl	8001188 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002080:	482b      	ldr	r0, [pc, #172]	; (8002130 <ADC_Enable+0x100>)
 8002082:	f7fe ff25 	bl	8000ed0 <LL_ADC_GetCommonPathInternalCh>
 8002086:	4603      	mov	r3, r0
 8002088:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d013      	beq.n	80020b8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002090:	4b28      	ldr	r3, [pc, #160]	; (8002134 <ADC_Enable+0x104>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	099b      	lsrs	r3, r3, #6
 8002096:	4a28      	ldr	r2, [pc, #160]	; (8002138 <ADC_Enable+0x108>)
 8002098:	fba2 2303 	umull	r2, r3, r2, r3
 800209c:	099b      	lsrs	r3, r3, #6
 800209e:	1c5a      	adds	r2, r3, #1
 80020a0:	4613      	mov	r3, r2
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	4413      	add	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80020aa:	e002      	b.n	80020b2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	3b01      	subs	r3, #1
 80020b0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1f9      	bne.n	80020ac <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80020b8:	f7fe fed8 	bl	8000e6c <HAL_GetTick>
 80020bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020be:	e028      	b.n	8002112 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff f873 	bl	80011b0 <LL_ADC_IsEnabled>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d104      	bne.n	80020da <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff f857 	bl	8001188 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80020da:	f7fe fec7 	bl	8000e6c <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d914      	bls.n	8002112 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d00d      	beq.n	8002112 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fa:	f043 0210 	orr.w	r2, r3, #16
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002106:	f043 0201 	orr.w	r2, r3, #1
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e007      	b.n	8002122 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	2b01      	cmp	r3, #1
 800211e:	d1cf      	bne.n	80020c0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	8000003f 	.word	0x8000003f
 8002130:	50040300 	.word	0x50040300
 8002134:	20000000 	.word	0x20000000
 8002138:	053e2d63 	.word	0x053e2d63

0800213c <LL_ADC_IsEnabled>:
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b01      	cmp	r3, #1
 800214e:	d101      	bne.n	8002154 <LL_ADC_IsEnabled+0x18>
 8002150:	2301      	movs	r3, #1
 8002152:	e000      	b.n	8002156 <LL_ADC_IsEnabled+0x1a>
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <LL_ADC_REG_IsConversionOngoing>:
{
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 0304 	and.w	r3, r3, #4
 8002172:	2b04      	cmp	r3, #4
 8002174:	d101      	bne.n	800217a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002176:	2301      	movs	r3, #1
 8002178:	e000      	b.n	800217c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002188:	b590      	push	{r4, r7, lr}
 800218a:	b09f      	sub	sp, #124	; 0x7c
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002192:	2300      	movs	r3, #0
 8002194:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d101      	bne.n	80021a6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80021a2:	2302      	movs	r3, #2
 80021a4:	e093      	b.n	80022ce <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80021ae:	2300      	movs	r3, #0
 80021b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80021b2:	2300      	movs	r3, #0
 80021b4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a47      	ldr	r2, [pc, #284]	; (80022d8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d102      	bne.n	80021c6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80021c0:	4b46      	ldr	r3, [pc, #280]	; (80022dc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80021c2:	60bb      	str	r3, [r7, #8]
 80021c4:	e001      	b.n	80021ca <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80021c6:	2300      	movs	r3, #0
 80021c8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d10b      	bne.n	80021e8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d4:	f043 0220 	orr.w	r2, r3, #32
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e072      	b.n	80022ce <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff ffb9 	bl	8002162 <LL_ADC_REG_IsConversionOngoing>
 80021f0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff ffb3 	bl	8002162 <LL_ADC_REG_IsConversionOngoing>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d154      	bne.n	80022ac <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002202:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002204:	2b00      	cmp	r3, #0
 8002206:	d151      	bne.n	80022ac <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002208:	4b35      	ldr	r3, [pc, #212]	; (80022e0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800220a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d02c      	beq.n	800226e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	6859      	ldr	r1, [r3, #4]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002226:	035b      	lsls	r3, r3, #13
 8002228:	430b      	orrs	r3, r1
 800222a:	431a      	orrs	r2, r3
 800222c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800222e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002230:	4829      	ldr	r0, [pc, #164]	; (80022d8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002232:	f7ff ff83 	bl	800213c <LL_ADC_IsEnabled>
 8002236:	4604      	mov	r4, r0
 8002238:	4828      	ldr	r0, [pc, #160]	; (80022dc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800223a:	f7ff ff7f 	bl	800213c <LL_ADC_IsEnabled>
 800223e:	4603      	mov	r3, r0
 8002240:	431c      	orrs	r4, r3
 8002242:	4828      	ldr	r0, [pc, #160]	; (80022e4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002244:	f7ff ff7a 	bl	800213c <LL_ADC_IsEnabled>
 8002248:	4603      	mov	r3, r0
 800224a:	4323      	orrs	r3, r4
 800224c:	2b00      	cmp	r3, #0
 800224e:	d137      	bne.n	80022c0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002258:	f023 030f 	bic.w	r3, r3, #15
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	6811      	ldr	r1, [r2, #0]
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	6892      	ldr	r2, [r2, #8]
 8002264:	430a      	orrs	r2, r1
 8002266:	431a      	orrs	r2, r3
 8002268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800226a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800226c:	e028      	b.n	80022c0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800226e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002278:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800227a:	4817      	ldr	r0, [pc, #92]	; (80022d8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800227c:	f7ff ff5e 	bl	800213c <LL_ADC_IsEnabled>
 8002280:	4604      	mov	r4, r0
 8002282:	4816      	ldr	r0, [pc, #88]	; (80022dc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002284:	f7ff ff5a 	bl	800213c <LL_ADC_IsEnabled>
 8002288:	4603      	mov	r3, r0
 800228a:	431c      	orrs	r4, r3
 800228c:	4815      	ldr	r0, [pc, #84]	; (80022e4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800228e:	f7ff ff55 	bl	800213c <LL_ADC_IsEnabled>
 8002292:	4603      	mov	r3, r0
 8002294:	4323      	orrs	r3, r4
 8002296:	2b00      	cmp	r3, #0
 8002298:	d112      	bne.n	80022c0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800229a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80022a2:	f023 030f 	bic.w	r3, r3, #15
 80022a6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80022a8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80022aa:	e009      	b.n	80022c0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b0:	f043 0220 	orr.w	r2, r3, #32
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80022be:	e000      	b.n	80022c2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80022c0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80022ca:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	377c      	adds	r7, #124	; 0x7c
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd90      	pop	{r4, r7, pc}
 80022d6:	bf00      	nop
 80022d8:	50040000 	.word	0x50040000
 80022dc:	50040100 	.word	0x50040100
 80022e0:	50040300 	.word	0x50040300
 80022e4:	50040200 	.word	0x50040200

080022e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022f8:	4b0c      	ldr	r3, [pc, #48]	; (800232c <__NVIC_SetPriorityGrouping+0x44>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002304:	4013      	ands	r3, r2
 8002306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002310:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800231a:	4a04      	ldr	r2, [pc, #16]	; (800232c <__NVIC_SetPriorityGrouping+0x44>)
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	60d3      	str	r3, [r2, #12]
}
 8002320:	bf00      	nop
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	e000ed00 	.word	0xe000ed00

08002330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002334:	4b04      	ldr	r3, [pc, #16]	; (8002348 <__NVIC_GetPriorityGrouping+0x18>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	0a1b      	lsrs	r3, r3, #8
 800233a:	f003 0307 	and.w	r3, r3, #7
}
 800233e:	4618      	mov	r0, r3
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	e000ed00 	.word	0xe000ed00

0800234c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	6039      	str	r1, [r7, #0]
 8002356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235c:	2b00      	cmp	r3, #0
 800235e:	db0a      	blt.n	8002376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	b2da      	uxtb	r2, r3
 8002364:	490c      	ldr	r1, [pc, #48]	; (8002398 <__NVIC_SetPriority+0x4c>)
 8002366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236a:	0112      	lsls	r2, r2, #4
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	440b      	add	r3, r1
 8002370:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002374:	e00a      	b.n	800238c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	b2da      	uxtb	r2, r3
 800237a:	4908      	ldr	r1, [pc, #32]	; (800239c <__NVIC_SetPriority+0x50>)
 800237c:	79fb      	ldrb	r3, [r7, #7]
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	3b04      	subs	r3, #4
 8002384:	0112      	lsls	r2, r2, #4
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	440b      	add	r3, r1
 800238a:	761a      	strb	r2, [r3, #24]
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	e000e100 	.word	0xe000e100
 800239c:	e000ed00 	.word	0xe000ed00

080023a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b089      	sub	sp, #36	; 0x24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	f1c3 0307 	rsb	r3, r3, #7
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	bf28      	it	cs
 80023be:	2304      	movcs	r3, #4
 80023c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	3304      	adds	r3, #4
 80023c6:	2b06      	cmp	r3, #6
 80023c8:	d902      	bls.n	80023d0 <NVIC_EncodePriority+0x30>
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	3b03      	subs	r3, #3
 80023ce:	e000      	b.n	80023d2 <NVIC_EncodePriority+0x32>
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d4:	f04f 32ff 	mov.w	r2, #4294967295
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43da      	mvns	r2, r3
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	401a      	ands	r2, r3
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023e8:	f04f 31ff 	mov.w	r1, #4294967295
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	fa01 f303 	lsl.w	r3, r1, r3
 80023f2:	43d9      	mvns	r1, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f8:	4313      	orrs	r3, r2
         );
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3724      	adds	r7, #36	; 0x24
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
	...

08002408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3b01      	subs	r3, #1
 8002414:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002418:	d301      	bcc.n	800241e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800241a:	2301      	movs	r3, #1
 800241c:	e00f      	b.n	800243e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800241e:	4a0a      	ldr	r2, [pc, #40]	; (8002448 <SysTick_Config+0x40>)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3b01      	subs	r3, #1
 8002424:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002426:	210f      	movs	r1, #15
 8002428:	f04f 30ff 	mov.w	r0, #4294967295
 800242c:	f7ff ff8e 	bl	800234c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002430:	4b05      	ldr	r3, [pc, #20]	; (8002448 <SysTick_Config+0x40>)
 8002432:	2200      	movs	r2, #0
 8002434:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002436:	4b04      	ldr	r3, [pc, #16]	; (8002448 <SysTick_Config+0x40>)
 8002438:	2207      	movs	r2, #7
 800243a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	e000e010 	.word	0xe000e010

0800244c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f7ff ff47 	bl	80022e8 <__NVIC_SetPriorityGrouping>
}
 800245a:	bf00      	nop
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b086      	sub	sp, #24
 8002466:	af00      	add	r7, sp, #0
 8002468:	4603      	mov	r3, r0
 800246a:	60b9      	str	r1, [r7, #8]
 800246c:	607a      	str	r2, [r7, #4]
 800246e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002470:	2300      	movs	r3, #0
 8002472:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002474:	f7ff ff5c 	bl	8002330 <__NVIC_GetPriorityGrouping>
 8002478:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	68b9      	ldr	r1, [r7, #8]
 800247e:	6978      	ldr	r0, [r7, #20]
 8002480:	f7ff ff8e 	bl	80023a0 <NVIC_EncodePriority>
 8002484:	4602      	mov	r2, r0
 8002486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800248a:	4611      	mov	r1, r2
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff ff5d 	bl	800234c <__NVIC_SetPriority>
}
 8002492:	bf00      	nop
 8002494:	3718      	adds	r7, #24
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b082      	sub	sp, #8
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7ff ffb0 	bl	8002408 <SysTick_Config>
 80024a8:	4603      	mov	r3, r0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b087      	sub	sp, #28
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024c2:	e17f      	b.n	80027c4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	2101      	movs	r1, #1
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	fa01 f303 	lsl.w	r3, r1, r3
 80024d0:	4013      	ands	r3, r2
 80024d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f000 8171 	beq.w	80027be <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 0303 	and.w	r3, r3, #3
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d005      	beq.n	80024f4 <HAL_GPIO_Init+0x40>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 0303 	and.w	r3, r3, #3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d130      	bne.n	8002556 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	2203      	movs	r2, #3
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	4013      	ands	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	68da      	ldr	r2, [r3, #12]
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	4313      	orrs	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800252a:	2201      	movs	r2, #1
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43db      	mvns	r3, r3
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	4013      	ands	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	091b      	lsrs	r3, r3, #4
 8002540:	f003 0201 	and.w	r2, r3, #1
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	4313      	orrs	r3, r2
 800254e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	2b03      	cmp	r3, #3
 8002560:	d118      	bne.n	8002594 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002566:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002568:	2201      	movs	r2, #1
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	4013      	ands	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	08db      	lsrs	r3, r3, #3
 800257e:	f003 0201 	and.w	r2, r3, #1
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	4313      	orrs	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 0303 	and.w	r3, r3, #3
 800259c:	2b03      	cmp	r3, #3
 800259e:	d017      	beq.n	80025d0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	2203      	movs	r2, #3
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	43db      	mvns	r3, r3
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4013      	ands	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f003 0303 	and.w	r3, r3, #3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d123      	bne.n	8002624 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	08da      	lsrs	r2, r3, #3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3208      	adds	r2, #8
 80025e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	220f      	movs	r2, #15
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	43db      	mvns	r3, r3
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	4013      	ands	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	691a      	ldr	r2, [r3, #16]
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	4313      	orrs	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	08da      	lsrs	r2, r3, #3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	3208      	adds	r2, #8
 800261e:	6939      	ldr	r1, [r7, #16]
 8002620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	2203      	movs	r2, #3
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	4013      	ands	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 0203 	and.w	r2, r3, #3
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	4313      	orrs	r3, r2
 8002650:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 80ac 	beq.w	80027be <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002666:	4b5f      	ldr	r3, [pc, #380]	; (80027e4 <HAL_GPIO_Init+0x330>)
 8002668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800266a:	4a5e      	ldr	r2, [pc, #376]	; (80027e4 <HAL_GPIO_Init+0x330>)
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	6613      	str	r3, [r2, #96]	; 0x60
 8002672:	4b5c      	ldr	r3, [pc, #368]	; (80027e4 <HAL_GPIO_Init+0x330>)
 8002674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	60bb      	str	r3, [r7, #8]
 800267c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800267e:	4a5a      	ldr	r2, [pc, #360]	; (80027e8 <HAL_GPIO_Init+0x334>)
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	089b      	lsrs	r3, r3, #2
 8002684:	3302      	adds	r3, #2
 8002686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800268a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	220f      	movs	r2, #15
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	43db      	mvns	r3, r3
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	4013      	ands	r3, r2
 80026a0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80026a8:	d025      	beq.n	80026f6 <HAL_GPIO_Init+0x242>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a4f      	ldr	r2, [pc, #316]	; (80027ec <HAL_GPIO_Init+0x338>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d01f      	beq.n	80026f2 <HAL_GPIO_Init+0x23e>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a4e      	ldr	r2, [pc, #312]	; (80027f0 <HAL_GPIO_Init+0x33c>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d019      	beq.n	80026ee <HAL_GPIO_Init+0x23a>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a4d      	ldr	r2, [pc, #308]	; (80027f4 <HAL_GPIO_Init+0x340>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d013      	beq.n	80026ea <HAL_GPIO_Init+0x236>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a4c      	ldr	r2, [pc, #304]	; (80027f8 <HAL_GPIO_Init+0x344>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d00d      	beq.n	80026e6 <HAL_GPIO_Init+0x232>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a4b      	ldr	r2, [pc, #300]	; (80027fc <HAL_GPIO_Init+0x348>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d007      	beq.n	80026e2 <HAL_GPIO_Init+0x22e>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a4a      	ldr	r2, [pc, #296]	; (8002800 <HAL_GPIO_Init+0x34c>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d101      	bne.n	80026de <HAL_GPIO_Init+0x22a>
 80026da:	2306      	movs	r3, #6
 80026dc:	e00c      	b.n	80026f8 <HAL_GPIO_Init+0x244>
 80026de:	2307      	movs	r3, #7
 80026e0:	e00a      	b.n	80026f8 <HAL_GPIO_Init+0x244>
 80026e2:	2305      	movs	r3, #5
 80026e4:	e008      	b.n	80026f8 <HAL_GPIO_Init+0x244>
 80026e6:	2304      	movs	r3, #4
 80026e8:	e006      	b.n	80026f8 <HAL_GPIO_Init+0x244>
 80026ea:	2303      	movs	r3, #3
 80026ec:	e004      	b.n	80026f8 <HAL_GPIO_Init+0x244>
 80026ee:	2302      	movs	r3, #2
 80026f0:	e002      	b.n	80026f8 <HAL_GPIO_Init+0x244>
 80026f2:	2301      	movs	r3, #1
 80026f4:	e000      	b.n	80026f8 <HAL_GPIO_Init+0x244>
 80026f6:	2300      	movs	r3, #0
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	f002 0203 	and.w	r2, r2, #3
 80026fe:	0092      	lsls	r2, r2, #2
 8002700:	4093      	lsls	r3, r2
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	4313      	orrs	r3, r2
 8002706:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002708:	4937      	ldr	r1, [pc, #220]	; (80027e8 <HAL_GPIO_Init+0x334>)
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	089b      	lsrs	r3, r3, #2
 800270e:	3302      	adds	r3, #2
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002716:	4b3b      	ldr	r3, [pc, #236]	; (8002804 <HAL_GPIO_Init+0x350>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	43db      	mvns	r3, r3
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	4013      	ands	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4313      	orrs	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800273a:	4a32      	ldr	r2, [pc, #200]	; (8002804 <HAL_GPIO_Init+0x350>)
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002740:	4b30      	ldr	r3, [pc, #192]	; (8002804 <HAL_GPIO_Init+0x350>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	43db      	mvns	r3, r3
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	4013      	ands	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	4313      	orrs	r3, r2
 8002762:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002764:	4a27      	ldr	r2, [pc, #156]	; (8002804 <HAL_GPIO_Init+0x350>)
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800276a:	4b26      	ldr	r3, [pc, #152]	; (8002804 <HAL_GPIO_Init+0x350>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	43db      	mvns	r3, r3
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	4013      	ands	r3, r2
 8002778:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4313      	orrs	r3, r2
 800278c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800278e:	4a1d      	ldr	r2, [pc, #116]	; (8002804 <HAL_GPIO_Init+0x350>)
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002794:	4b1b      	ldr	r3, [pc, #108]	; (8002804 <HAL_GPIO_Init+0x350>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	43db      	mvns	r3, r3
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	4013      	ands	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d003      	beq.n	80027b8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80027b8:	4a12      	ldr	r2, [pc, #72]	; (8002804 <HAL_GPIO_Init+0x350>)
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	3301      	adds	r3, #1
 80027c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	fa22 f303 	lsr.w	r3, r2, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f47f ae78 	bne.w	80024c4 <HAL_GPIO_Init+0x10>
  }
}
 80027d4:	bf00      	nop
 80027d6:	bf00      	nop
 80027d8:	371c      	adds	r7, #28
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	40021000 	.word	0x40021000
 80027e8:	40010000 	.word	0x40010000
 80027ec:	48000400 	.word	0x48000400
 80027f0:	48000800 	.word	0x48000800
 80027f4:	48000c00 	.word	0x48000c00
 80027f8:	48001000 	.word	0x48001000
 80027fc:	48001400 	.word	0x48001400
 8002800:	48001800 	.word	0x48001800
 8002804:	40010400 	.word	0x40010400

08002808 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	807b      	strh	r3, [r7, #2]
 8002814:	4613      	mov	r3, r2
 8002816:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002818:	787b      	ldrb	r3, [r7, #1]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800281e:	887a      	ldrh	r2, [r7, #2]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002824:	e002      	b.n	800282c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002826:	887a      	ldrh	r2, [r7, #2]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	460b      	mov	r3, r1
 8002842:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800284a:	887a      	ldrh	r2, [r7, #2]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4013      	ands	r3, r2
 8002850:	041a      	lsls	r2, r3, #16
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	43d9      	mvns	r1, r3
 8002856:	887b      	ldrh	r3, [r7, #2]
 8002858:	400b      	ands	r3, r1
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	619a      	str	r2, [r3, #24]
}
 8002860:	bf00      	nop
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002870:	4b04      	ldr	r3, [pc, #16]	; (8002884 <HAL_PWREx_GetVoltageRange+0x18>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002878:	4618      	mov	r0, r3
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	40007000 	.word	0x40007000

08002888 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002896:	d130      	bne.n	80028fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002898:	4b23      	ldr	r3, [pc, #140]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028a4:	d038      	beq.n	8002918 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028a6:	4b20      	ldr	r3, [pc, #128]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028ae:	4a1e      	ldr	r2, [pc, #120]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80028b6:	4b1d      	ldr	r3, [pc, #116]	; (800292c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2232      	movs	r2, #50	; 0x32
 80028bc:	fb02 f303 	mul.w	r3, r2, r3
 80028c0:	4a1b      	ldr	r2, [pc, #108]	; (8002930 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80028c2:	fba2 2303 	umull	r2, r3, r2, r3
 80028c6:	0c9b      	lsrs	r3, r3, #18
 80028c8:	3301      	adds	r3, #1
 80028ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028cc:	e002      	b.n	80028d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	3b01      	subs	r3, #1
 80028d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028d4:	4b14      	ldr	r3, [pc, #80]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028e0:	d102      	bne.n	80028e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1f2      	bne.n	80028ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028e8:	4b0f      	ldr	r3, [pc, #60]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028f4:	d110      	bne.n	8002918 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e00f      	b.n	800291a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80028fa:	4b0b      	ldr	r3, [pc, #44]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002902:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002906:	d007      	beq.n	8002918 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002908:	4b07      	ldr	r3, [pc, #28]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002910:	4a05      	ldr	r2, [pc, #20]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002912:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002916:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3714      	adds	r7, #20
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	40007000 	.word	0x40007000
 800292c:	20000000 	.word	0x20000000
 8002930:	431bde83 	.word	0x431bde83

08002934 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b088      	sub	sp, #32
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e3ca      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002946:	4b97      	ldr	r3, [pc, #604]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 030c 	and.w	r3, r3, #12
 800294e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002950:	4b94      	ldr	r3, [pc, #592]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f003 0303 	and.w	r3, r3, #3
 8002958:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0310 	and.w	r3, r3, #16
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 80e4 	beq.w	8002b30 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d007      	beq.n	800297e <HAL_RCC_OscConfig+0x4a>
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	2b0c      	cmp	r3, #12
 8002972:	f040 808b 	bne.w	8002a8c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	2b01      	cmp	r3, #1
 800297a:	f040 8087 	bne.w	8002a8c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800297e:	4b89      	ldr	r3, [pc, #548]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d005      	beq.n	8002996 <HAL_RCC_OscConfig+0x62>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e3a2      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a1a      	ldr	r2, [r3, #32]
 800299a:	4b82      	ldr	r3, [pc, #520]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0308 	and.w	r3, r3, #8
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d004      	beq.n	80029b0 <HAL_RCC_OscConfig+0x7c>
 80029a6:	4b7f      	ldr	r3, [pc, #508]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029ae:	e005      	b.n	80029bc <HAL_RCC_OscConfig+0x88>
 80029b0:	4b7c      	ldr	r3, [pc, #496]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 80029b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029b6:	091b      	lsrs	r3, r3, #4
 80029b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029bc:	4293      	cmp	r3, r2
 80029be:	d223      	bcs.n	8002a08 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f000 fd55 	bl	8003474 <RCC_SetFlashLatencyFromMSIRange>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e383      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029d4:	4b73      	ldr	r3, [pc, #460]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a72      	ldr	r2, [pc, #456]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 80029da:	f043 0308 	orr.w	r3, r3, #8
 80029de:	6013      	str	r3, [r2, #0]
 80029e0:	4b70      	ldr	r3, [pc, #448]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	496d      	ldr	r1, [pc, #436]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029f2:	4b6c      	ldr	r3, [pc, #432]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	021b      	lsls	r3, r3, #8
 8002a00:	4968      	ldr	r1, [pc, #416]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	604b      	str	r3, [r1, #4]
 8002a06:	e025      	b.n	8002a54 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a08:	4b66      	ldr	r3, [pc, #408]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a65      	ldr	r2, [pc, #404]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002a0e:	f043 0308 	orr.w	r3, r3, #8
 8002a12:	6013      	str	r3, [r2, #0]
 8002a14:	4b63      	ldr	r3, [pc, #396]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	4960      	ldr	r1, [pc, #384]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a26:	4b5f      	ldr	r3, [pc, #380]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	021b      	lsls	r3, r3, #8
 8002a34:	495b      	ldr	r1, [pc, #364]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d109      	bne.n	8002a54 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f000 fd15 	bl	8003474 <RCC_SetFlashLatencyFromMSIRange>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e343      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a54:	f000 fc4a 	bl	80032ec <HAL_RCC_GetSysClockFreq>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	4b52      	ldr	r3, [pc, #328]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	091b      	lsrs	r3, r3, #4
 8002a60:	f003 030f 	and.w	r3, r3, #15
 8002a64:	4950      	ldr	r1, [pc, #320]	; (8002ba8 <HAL_RCC_OscConfig+0x274>)
 8002a66:	5ccb      	ldrb	r3, [r1, r3]
 8002a68:	f003 031f 	and.w	r3, r3, #31
 8002a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a70:	4a4e      	ldr	r2, [pc, #312]	; (8002bac <HAL_RCC_OscConfig+0x278>)
 8002a72:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a74:	4b4e      	ldr	r3, [pc, #312]	; (8002bb0 <HAL_RCC_OscConfig+0x27c>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fe f9a7 	bl	8000dcc <HAL_InitTick>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a82:	7bfb      	ldrb	r3, [r7, #15]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d052      	beq.n	8002b2e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
 8002a8a:	e327      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d032      	beq.n	8002afa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a94:	4b43      	ldr	r3, [pc, #268]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a42      	ldr	r2, [pc, #264]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002aa0:	f7fe f9e4 	bl	8000e6c <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002aa8:	f7fe f9e0 	bl	8000e6c <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e310      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002aba:	4b3a      	ldr	r3, [pc, #232]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f0      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ac6:	4b37      	ldr	r3, [pc, #220]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a36      	ldr	r2, [pc, #216]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002acc:	f043 0308 	orr.w	r3, r3, #8
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	4b34      	ldr	r3, [pc, #208]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	4931      	ldr	r1, [pc, #196]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ae4:	4b2f      	ldr	r3, [pc, #188]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69db      	ldr	r3, [r3, #28]
 8002af0:	021b      	lsls	r3, r3, #8
 8002af2:	492c      	ldr	r1, [pc, #176]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	604b      	str	r3, [r1, #4]
 8002af8:	e01a      	b.n	8002b30 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002afa:	4b2a      	ldr	r3, [pc, #168]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a29      	ldr	r2, [pc, #164]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002b00:	f023 0301 	bic.w	r3, r3, #1
 8002b04:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b06:	f7fe f9b1 	bl	8000e6c <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b0e:	f7fe f9ad 	bl	8000e6c <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e2dd      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b20:	4b20      	ldr	r3, [pc, #128]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1f0      	bne.n	8002b0e <HAL_RCC_OscConfig+0x1da>
 8002b2c:	e000      	b.n	8002b30 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b2e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d074      	beq.n	8002c26 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	2b08      	cmp	r3, #8
 8002b40:	d005      	beq.n	8002b4e <HAL_RCC_OscConfig+0x21a>
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	2b0c      	cmp	r3, #12
 8002b46:	d10e      	bne.n	8002b66 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	2b03      	cmp	r3, #3
 8002b4c:	d10b      	bne.n	8002b66 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b4e:	4b15      	ldr	r3, [pc, #84]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d064      	beq.n	8002c24 <HAL_RCC_OscConfig+0x2f0>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d160      	bne.n	8002c24 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e2ba      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b6e:	d106      	bne.n	8002b7e <HAL_RCC_OscConfig+0x24a>
 8002b70:	4b0c      	ldr	r3, [pc, #48]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a0b      	ldr	r2, [pc, #44]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b7a:	6013      	str	r3, [r2, #0]
 8002b7c:	e026      	b.n	8002bcc <HAL_RCC_OscConfig+0x298>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b86:	d115      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x280>
 8002b88:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a05      	ldr	r2, [pc, #20]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002b8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b92:	6013      	str	r3, [r2, #0]
 8002b94:	4b03      	ldr	r3, [pc, #12]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a02      	ldr	r2, [pc, #8]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002b9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b9e:	6013      	str	r3, [r2, #0]
 8002ba0:	e014      	b.n	8002bcc <HAL_RCC_OscConfig+0x298>
 8002ba2:	bf00      	nop
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	08005b18 	.word	0x08005b18
 8002bac:	20000000 	.word	0x20000000
 8002bb0:	20000004 	.word	0x20000004
 8002bb4:	4ba0      	ldr	r3, [pc, #640]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a9f      	ldr	r2, [pc, #636]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bbe:	6013      	str	r3, [r2, #0]
 8002bc0:	4b9d      	ldr	r3, [pc, #628]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a9c      	ldr	r2, [pc, #624]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002bc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d013      	beq.n	8002bfc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd4:	f7fe f94a 	bl	8000e6c <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bdc:	f7fe f946 	bl	8000e6c <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b64      	cmp	r3, #100	; 0x64
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e276      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bee:	4b92      	ldr	r3, [pc, #584]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d0f0      	beq.n	8002bdc <HAL_RCC_OscConfig+0x2a8>
 8002bfa:	e014      	b.n	8002c26 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfc:	f7fe f936 	bl	8000e6c <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c04:	f7fe f932 	bl	8000e6c <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b64      	cmp	r3, #100	; 0x64
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e262      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c16:	4b88      	ldr	r3, [pc, #544]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1f0      	bne.n	8002c04 <HAL_RCC_OscConfig+0x2d0>
 8002c22:	e000      	b.n	8002c26 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d060      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	d005      	beq.n	8002c44 <HAL_RCC_OscConfig+0x310>
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	2b0c      	cmp	r3, #12
 8002c3c:	d119      	bne.n	8002c72 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d116      	bne.n	8002c72 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c44:	4b7c      	ldr	r3, [pc, #496]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d005      	beq.n	8002c5c <HAL_RCC_OscConfig+0x328>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e23f      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c5c:	4b76      	ldr	r3, [pc, #472]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	061b      	lsls	r3, r3, #24
 8002c6a:	4973      	ldr	r1, [pc, #460]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c70:	e040      	b.n	8002cf4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d023      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c7a:	4b6f      	ldr	r3, [pc, #444]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a6e      	ldr	r2, [pc, #440]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c86:	f7fe f8f1 	bl	8000e6c <HAL_GetTick>
 8002c8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c8c:	e008      	b.n	8002ca0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c8e:	f7fe f8ed 	bl	8000e6c <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e21d      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ca0:	4b65      	ldr	r3, [pc, #404]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0f0      	beq.n	8002c8e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cac:	4b62      	ldr	r3, [pc, #392]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	061b      	lsls	r3, r3, #24
 8002cba:	495f      	ldr	r1, [pc, #380]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	604b      	str	r3, [r1, #4]
 8002cc0:	e018      	b.n	8002cf4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cc2:	4b5d      	ldr	r3, [pc, #372]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a5c      	ldr	r2, [pc, #368]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002cc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ccc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cce:	f7fe f8cd 	bl	8000e6c <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cd4:	e008      	b.n	8002ce8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cd6:	f7fe f8c9 	bl	8000e6c <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e1f9      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ce8:	4b53      	ldr	r3, [pc, #332]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1f0      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0308 	and.w	r3, r3, #8
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d03c      	beq.n	8002d7a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d01c      	beq.n	8002d42 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d08:	4b4b      	ldr	r3, [pc, #300]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d0e:	4a4a      	ldr	r2, [pc, #296]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002d10:	f043 0301 	orr.w	r3, r3, #1
 8002d14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d18:	f7fe f8a8 	bl	8000e6c <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d20:	f7fe f8a4 	bl	8000e6c <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e1d4      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d32:	4b41      	ldr	r3, [pc, #260]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002d34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d0ef      	beq.n	8002d20 <HAL_RCC_OscConfig+0x3ec>
 8002d40:	e01b      	b.n	8002d7a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d42:	4b3d      	ldr	r3, [pc, #244]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002d44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d48:	4a3b      	ldr	r2, [pc, #236]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002d4a:	f023 0301 	bic.w	r3, r3, #1
 8002d4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d52:	f7fe f88b 	bl	8000e6c <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d58:	e008      	b.n	8002d6c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d5a:	f7fe f887 	bl	8000e6c <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e1b7      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d6c:	4b32      	ldr	r3, [pc, #200]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002d6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1ef      	bne.n	8002d5a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0304 	and.w	r3, r3, #4
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f000 80a6 	beq.w	8002ed4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d8c:	4b2a      	ldr	r3, [pc, #168]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10d      	bne.n	8002db4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d98:	4b27      	ldr	r3, [pc, #156]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9c:	4a26      	ldr	r2, [pc, #152]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da2:	6593      	str	r3, [r2, #88]	; 0x58
 8002da4:	4b24      	ldr	r3, [pc, #144]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dac:	60bb      	str	r3, [r7, #8]
 8002dae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002db0:	2301      	movs	r3, #1
 8002db2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002db4:	4b21      	ldr	r3, [pc, #132]	; (8002e3c <HAL_RCC_OscConfig+0x508>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d118      	bne.n	8002df2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dc0:	4b1e      	ldr	r3, [pc, #120]	; (8002e3c <HAL_RCC_OscConfig+0x508>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a1d      	ldr	r2, [pc, #116]	; (8002e3c <HAL_RCC_OscConfig+0x508>)
 8002dc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dcc:	f7fe f84e 	bl	8000e6c <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dd4:	f7fe f84a 	bl	8000e6c <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e17a      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002de6:	4b15      	ldr	r3, [pc, #84]	; (8002e3c <HAL_RCC_OscConfig+0x508>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d0f0      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d108      	bne.n	8002e0c <HAL_RCC_OscConfig+0x4d8>
 8002dfa:	4b0f      	ldr	r3, [pc, #60]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e00:	4a0d      	ldr	r2, [pc, #52]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002e02:	f043 0301 	orr.w	r3, r3, #1
 8002e06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e0a:	e029      	b.n	8002e60 <HAL_RCC_OscConfig+0x52c>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	2b05      	cmp	r3, #5
 8002e12:	d115      	bne.n	8002e40 <HAL_RCC_OscConfig+0x50c>
 8002e14:	4b08      	ldr	r3, [pc, #32]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1a:	4a07      	ldr	r2, [pc, #28]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002e1c:	f043 0304 	orr.w	r3, r3, #4
 8002e20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e24:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2a:	4a03      	ldr	r2, [pc, #12]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002e2c:	f043 0301 	orr.w	r3, r3, #1
 8002e30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e34:	e014      	b.n	8002e60 <HAL_RCC_OscConfig+0x52c>
 8002e36:	bf00      	nop
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	40007000 	.word	0x40007000
 8002e40:	4b9c      	ldr	r3, [pc, #624]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 8002e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e46:	4a9b      	ldr	r2, [pc, #620]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 8002e48:	f023 0301 	bic.w	r3, r3, #1
 8002e4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e50:	4b98      	ldr	r3, [pc, #608]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 8002e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e56:	4a97      	ldr	r2, [pc, #604]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 8002e58:	f023 0304 	bic.w	r3, r3, #4
 8002e5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d016      	beq.n	8002e96 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e68:	f7fe f800 	bl	8000e6c <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e6e:	e00a      	b.n	8002e86 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e70:	f7fd fffc 	bl	8000e6c <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e12a      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e86:	4b8b      	ldr	r3, [pc, #556]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 8002e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0ed      	beq.n	8002e70 <HAL_RCC_OscConfig+0x53c>
 8002e94:	e015      	b.n	8002ec2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e96:	f7fd ffe9 	bl	8000e6c <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e9c:	e00a      	b.n	8002eb4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e9e:	f7fd ffe5 	bl	8000e6c <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e113      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002eb4:	4b7f      	ldr	r3, [pc, #508]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 8002eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1ed      	bne.n	8002e9e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ec2:	7ffb      	ldrb	r3, [r7, #31]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d105      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ec8:	4b7a      	ldr	r3, [pc, #488]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 8002eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ecc:	4a79      	ldr	r2, [pc, #484]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 8002ece:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 80fe 	beq.w	80030da <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	f040 80d0 	bne.w	8003088 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ee8:	4b72      	ldr	r3, [pc, #456]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	f003 0203 	and.w	r2, r3, #3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d130      	bne.n	8002f5e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	3b01      	subs	r3, #1
 8002f08:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d127      	bne.n	8002f5e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f18:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d11f      	bne.n	8002f5e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f28:	2a07      	cmp	r2, #7
 8002f2a:	bf14      	ite	ne
 8002f2c:	2201      	movne	r2, #1
 8002f2e:	2200      	moveq	r2, #0
 8002f30:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d113      	bne.n	8002f5e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f40:	085b      	lsrs	r3, r3, #1
 8002f42:	3b01      	subs	r3, #1
 8002f44:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d109      	bne.n	8002f5e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	085b      	lsrs	r3, r3, #1
 8002f56:	3b01      	subs	r3, #1
 8002f58:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d06e      	beq.n	800303c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	2b0c      	cmp	r3, #12
 8002f62:	d069      	beq.n	8003038 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f64:	4b53      	ldr	r3, [pc, #332]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d105      	bne.n	8002f7c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002f70:	4b50      	ldr	r3, [pc, #320]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e0ad      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f80:	4b4c      	ldr	r3, [pc, #304]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a4b      	ldr	r2, [pc, #300]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 8002f86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f8a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f8c:	f7fd ff6e 	bl	8000e6c <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f94:	f7fd ff6a 	bl	8000e6c <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e09a      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fa6:	4b43      	ldr	r3, [pc, #268]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1f0      	bne.n	8002f94 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fb2:	4b40      	ldr	r3, [pc, #256]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 8002fb4:	68da      	ldr	r2, [r3, #12]
 8002fb6:	4b40      	ldr	r3, [pc, #256]	; (80030b8 <HAL_RCC_OscConfig+0x784>)
 8002fb8:	4013      	ands	r3, r2
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002fc2:	3a01      	subs	r2, #1
 8002fc4:	0112      	lsls	r2, r2, #4
 8002fc6:	4311      	orrs	r1, r2
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002fcc:	0212      	lsls	r2, r2, #8
 8002fce:	4311      	orrs	r1, r2
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002fd4:	0852      	lsrs	r2, r2, #1
 8002fd6:	3a01      	subs	r2, #1
 8002fd8:	0552      	lsls	r2, r2, #21
 8002fda:	4311      	orrs	r1, r2
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002fe0:	0852      	lsrs	r2, r2, #1
 8002fe2:	3a01      	subs	r2, #1
 8002fe4:	0652      	lsls	r2, r2, #25
 8002fe6:	4311      	orrs	r1, r2
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fec:	0912      	lsrs	r2, r2, #4
 8002fee:	0452      	lsls	r2, r2, #17
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	4930      	ldr	r1, [pc, #192]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ff8:	4b2e      	ldr	r3, [pc, #184]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a2d      	ldr	r2, [pc, #180]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 8002ffe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003002:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003004:	4b2b      	ldr	r3, [pc, #172]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	4a2a      	ldr	r2, [pc, #168]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 800300a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800300e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003010:	f7fd ff2c 	bl	8000e6c <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003018:	f7fd ff28 	bl	8000e6c <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e058      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800302a:	4b22      	ldr	r3, [pc, #136]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d0f0      	beq.n	8003018 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003036:	e050      	b.n	80030da <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e04f      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800303c:	4b1d      	ldr	r3, [pc, #116]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d148      	bne.n	80030da <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003048:	4b1a      	ldr	r3, [pc, #104]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a19      	ldr	r2, [pc, #100]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 800304e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003052:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003054:	4b17      	ldr	r3, [pc, #92]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	4a16      	ldr	r2, [pc, #88]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 800305a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800305e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003060:	f7fd ff04 	bl	8000e6c <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003068:	f7fd ff00 	bl	8000e6c <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e030      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800307a:	4b0e      	ldr	r3, [pc, #56]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0f0      	beq.n	8003068 <HAL_RCC_OscConfig+0x734>
 8003086:	e028      	b.n	80030da <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	2b0c      	cmp	r3, #12
 800308c:	d023      	beq.n	80030d6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800308e:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a08      	ldr	r2, [pc, #32]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 8003094:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003098:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309a:	f7fd fee7 	bl	8000e6c <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030a0:	e00c      	b.n	80030bc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a2:	f7fd fee3 	bl	8000e6c <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d905      	bls.n	80030bc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e013      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
 80030b4:	40021000 	.word	0x40021000
 80030b8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030bc:	4b09      	ldr	r3, [pc, #36]	; (80030e4 <HAL_RCC_OscConfig+0x7b0>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1ec      	bne.n	80030a2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80030c8:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <HAL_RCC_OscConfig+0x7b0>)
 80030ca:	68da      	ldr	r2, [r3, #12]
 80030cc:	4905      	ldr	r1, [pc, #20]	; (80030e4 <HAL_RCC_OscConfig+0x7b0>)
 80030ce:	4b06      	ldr	r3, [pc, #24]	; (80030e8 <HAL_RCC_OscConfig+0x7b4>)
 80030d0:	4013      	ands	r3, r2
 80030d2:	60cb      	str	r3, [r1, #12]
 80030d4:	e001      	b.n	80030da <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e000      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3720      	adds	r7, #32
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40021000 	.word	0x40021000
 80030e8:	feeefffc 	.word	0xfeeefffc

080030ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e0e7      	b.n	80032d0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003100:	4b75      	ldr	r3, [pc, #468]	; (80032d8 <HAL_RCC_ClockConfig+0x1ec>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0307 	and.w	r3, r3, #7
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	429a      	cmp	r2, r3
 800310c:	d910      	bls.n	8003130 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800310e:	4b72      	ldr	r3, [pc, #456]	; (80032d8 <HAL_RCC_ClockConfig+0x1ec>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f023 0207 	bic.w	r2, r3, #7
 8003116:	4970      	ldr	r1, [pc, #448]	; (80032d8 <HAL_RCC_ClockConfig+0x1ec>)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	4313      	orrs	r3, r2
 800311c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800311e:	4b6e      	ldr	r3, [pc, #440]	; (80032d8 <HAL_RCC_ClockConfig+0x1ec>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	429a      	cmp	r2, r3
 800312a:	d001      	beq.n	8003130 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e0cf      	b.n	80032d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d010      	beq.n	800315e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	4b66      	ldr	r3, [pc, #408]	; (80032dc <HAL_RCC_ClockConfig+0x1f0>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003148:	429a      	cmp	r2, r3
 800314a:	d908      	bls.n	800315e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800314c:	4b63      	ldr	r3, [pc, #396]	; (80032dc <HAL_RCC_ClockConfig+0x1f0>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	4960      	ldr	r1, [pc, #384]	; (80032dc <HAL_RCC_ClockConfig+0x1f0>)
 800315a:	4313      	orrs	r3, r2
 800315c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d04c      	beq.n	8003204 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2b03      	cmp	r3, #3
 8003170:	d107      	bne.n	8003182 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003172:	4b5a      	ldr	r3, [pc, #360]	; (80032dc <HAL_RCC_ClockConfig+0x1f0>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d121      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e0a6      	b.n	80032d0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b02      	cmp	r3, #2
 8003188:	d107      	bne.n	800319a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800318a:	4b54      	ldr	r3, [pc, #336]	; (80032dc <HAL_RCC_ClockConfig+0x1f0>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d115      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e09a      	b.n	80032d0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d107      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031a2:	4b4e      	ldr	r3, [pc, #312]	; (80032dc <HAL_RCC_ClockConfig+0x1f0>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d109      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e08e      	b.n	80032d0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031b2:	4b4a      	ldr	r3, [pc, #296]	; (80032dc <HAL_RCC_ClockConfig+0x1f0>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e086      	b.n	80032d0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031c2:	4b46      	ldr	r3, [pc, #280]	; (80032dc <HAL_RCC_ClockConfig+0x1f0>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f023 0203 	bic.w	r2, r3, #3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	4943      	ldr	r1, [pc, #268]	; (80032dc <HAL_RCC_ClockConfig+0x1f0>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031d4:	f7fd fe4a 	bl	8000e6c <HAL_GetTick>
 80031d8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031da:	e00a      	b.n	80031f2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031dc:	f7fd fe46 	bl	8000e6c <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e06e      	b.n	80032d0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031f2:	4b3a      	ldr	r3, [pc, #232]	; (80032dc <HAL_RCC_ClockConfig+0x1f0>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 020c 	and.w	r2, r3, #12
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	429a      	cmp	r2, r3
 8003202:	d1eb      	bne.n	80031dc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d010      	beq.n	8003232 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	4b31      	ldr	r3, [pc, #196]	; (80032dc <HAL_RCC_ClockConfig+0x1f0>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800321c:	429a      	cmp	r2, r3
 800321e:	d208      	bcs.n	8003232 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003220:	4b2e      	ldr	r3, [pc, #184]	; (80032dc <HAL_RCC_ClockConfig+0x1f0>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	492b      	ldr	r1, [pc, #172]	; (80032dc <HAL_RCC_ClockConfig+0x1f0>)
 800322e:	4313      	orrs	r3, r2
 8003230:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003232:	4b29      	ldr	r3, [pc, #164]	; (80032d8 <HAL_RCC_ClockConfig+0x1ec>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0307 	and.w	r3, r3, #7
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	429a      	cmp	r2, r3
 800323e:	d210      	bcs.n	8003262 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003240:	4b25      	ldr	r3, [pc, #148]	; (80032d8 <HAL_RCC_ClockConfig+0x1ec>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f023 0207 	bic.w	r2, r3, #7
 8003248:	4923      	ldr	r1, [pc, #140]	; (80032d8 <HAL_RCC_ClockConfig+0x1ec>)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	4313      	orrs	r3, r2
 800324e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003250:	4b21      	ldr	r3, [pc, #132]	; (80032d8 <HAL_RCC_ClockConfig+0x1ec>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	429a      	cmp	r2, r3
 800325c:	d001      	beq.n	8003262 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e036      	b.n	80032d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0304 	and.w	r3, r3, #4
 800326a:	2b00      	cmp	r3, #0
 800326c:	d008      	beq.n	8003280 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800326e:	4b1b      	ldr	r3, [pc, #108]	; (80032dc <HAL_RCC_ClockConfig+0x1f0>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	4918      	ldr	r1, [pc, #96]	; (80032dc <HAL_RCC_ClockConfig+0x1f0>)
 800327c:	4313      	orrs	r3, r2
 800327e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0308 	and.w	r3, r3, #8
 8003288:	2b00      	cmp	r3, #0
 800328a:	d009      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800328c:	4b13      	ldr	r3, [pc, #76]	; (80032dc <HAL_RCC_ClockConfig+0x1f0>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	4910      	ldr	r1, [pc, #64]	; (80032dc <HAL_RCC_ClockConfig+0x1f0>)
 800329c:	4313      	orrs	r3, r2
 800329e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032a0:	f000 f824 	bl	80032ec <HAL_RCC_GetSysClockFreq>
 80032a4:	4602      	mov	r2, r0
 80032a6:	4b0d      	ldr	r3, [pc, #52]	; (80032dc <HAL_RCC_ClockConfig+0x1f0>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	091b      	lsrs	r3, r3, #4
 80032ac:	f003 030f 	and.w	r3, r3, #15
 80032b0:	490b      	ldr	r1, [pc, #44]	; (80032e0 <HAL_RCC_ClockConfig+0x1f4>)
 80032b2:	5ccb      	ldrb	r3, [r1, r3]
 80032b4:	f003 031f 	and.w	r3, r3, #31
 80032b8:	fa22 f303 	lsr.w	r3, r2, r3
 80032bc:	4a09      	ldr	r2, [pc, #36]	; (80032e4 <HAL_RCC_ClockConfig+0x1f8>)
 80032be:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032c0:	4b09      	ldr	r3, [pc, #36]	; (80032e8 <HAL_RCC_ClockConfig+0x1fc>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7fd fd81 	bl	8000dcc <HAL_InitTick>
 80032ca:	4603      	mov	r3, r0
 80032cc:	72fb      	strb	r3, [r7, #11]

  return status;
 80032ce:	7afb      	ldrb	r3, [r7, #11]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	40022000 	.word	0x40022000
 80032dc:	40021000 	.word	0x40021000
 80032e0:	08005b18 	.word	0x08005b18
 80032e4:	20000000 	.word	0x20000000
 80032e8:	20000004 	.word	0x20000004

080032ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b089      	sub	sp, #36	; 0x24
 80032f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	61fb      	str	r3, [r7, #28]
 80032f6:	2300      	movs	r3, #0
 80032f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032fa:	4b3e      	ldr	r3, [pc, #248]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 030c 	and.w	r3, r3, #12
 8003302:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003304:	4b3b      	ldr	r3, [pc, #236]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f003 0303 	and.w	r3, r3, #3
 800330c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d005      	beq.n	8003320 <HAL_RCC_GetSysClockFreq+0x34>
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	2b0c      	cmp	r3, #12
 8003318:	d121      	bne.n	800335e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d11e      	bne.n	800335e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003320:	4b34      	ldr	r3, [pc, #208]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0308 	and.w	r3, r3, #8
 8003328:	2b00      	cmp	r3, #0
 800332a:	d107      	bne.n	800333c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800332c:	4b31      	ldr	r3, [pc, #196]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800332e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003332:	0a1b      	lsrs	r3, r3, #8
 8003334:	f003 030f 	and.w	r3, r3, #15
 8003338:	61fb      	str	r3, [r7, #28]
 800333a:	e005      	b.n	8003348 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800333c:	4b2d      	ldr	r3, [pc, #180]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	091b      	lsrs	r3, r3, #4
 8003342:	f003 030f 	and.w	r3, r3, #15
 8003346:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003348:	4a2b      	ldr	r2, [pc, #172]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003350:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10d      	bne.n	8003374 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800335c:	e00a      	b.n	8003374 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	2b04      	cmp	r3, #4
 8003362:	d102      	bne.n	800336a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003364:	4b25      	ldr	r3, [pc, #148]	; (80033fc <HAL_RCC_GetSysClockFreq+0x110>)
 8003366:	61bb      	str	r3, [r7, #24]
 8003368:	e004      	b.n	8003374 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	2b08      	cmp	r3, #8
 800336e:	d101      	bne.n	8003374 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003370:	4b23      	ldr	r3, [pc, #140]	; (8003400 <HAL_RCC_GetSysClockFreq+0x114>)
 8003372:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	2b0c      	cmp	r3, #12
 8003378:	d134      	bne.n	80033e4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800337a:	4b1e      	ldr	r3, [pc, #120]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	f003 0303 	and.w	r3, r3, #3
 8003382:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	2b02      	cmp	r3, #2
 8003388:	d003      	beq.n	8003392 <HAL_RCC_GetSysClockFreq+0xa6>
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	2b03      	cmp	r3, #3
 800338e:	d003      	beq.n	8003398 <HAL_RCC_GetSysClockFreq+0xac>
 8003390:	e005      	b.n	800339e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003392:	4b1a      	ldr	r3, [pc, #104]	; (80033fc <HAL_RCC_GetSysClockFreq+0x110>)
 8003394:	617b      	str	r3, [r7, #20]
      break;
 8003396:	e005      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003398:	4b19      	ldr	r3, [pc, #100]	; (8003400 <HAL_RCC_GetSysClockFreq+0x114>)
 800339a:	617b      	str	r3, [r7, #20]
      break;
 800339c:	e002      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	617b      	str	r3, [r7, #20]
      break;
 80033a2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033a4:	4b13      	ldr	r3, [pc, #76]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	091b      	lsrs	r3, r3, #4
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	3301      	adds	r3, #1
 80033b0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80033b2:	4b10      	ldr	r3, [pc, #64]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	0a1b      	lsrs	r3, r3, #8
 80033b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	fb03 f202 	mul.w	r2, r3, r2
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033ca:	4b0a      	ldr	r3, [pc, #40]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	0e5b      	lsrs	r3, r3, #25
 80033d0:	f003 0303 	and.w	r3, r3, #3
 80033d4:	3301      	adds	r3, #1
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80033e4:	69bb      	ldr	r3, [r7, #24]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3724      	adds	r7, #36	; 0x24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	40021000 	.word	0x40021000
 80033f8:	08005b30 	.word	0x08005b30
 80033fc:	00f42400 	.word	0x00f42400
 8003400:	007a1200 	.word	0x007a1200

08003404 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003408:	4b03      	ldr	r3, [pc, #12]	; (8003418 <HAL_RCC_GetHCLKFreq+0x14>)
 800340a:	681b      	ldr	r3, [r3, #0]
}
 800340c:	4618      	mov	r0, r3
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	20000000 	.word	0x20000000

0800341c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003420:	f7ff fff0 	bl	8003404 <HAL_RCC_GetHCLKFreq>
 8003424:	4602      	mov	r2, r0
 8003426:	4b06      	ldr	r3, [pc, #24]	; (8003440 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	0a1b      	lsrs	r3, r3, #8
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	4904      	ldr	r1, [pc, #16]	; (8003444 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003432:	5ccb      	ldrb	r3, [r1, r3]
 8003434:	f003 031f 	and.w	r3, r3, #31
 8003438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800343c:	4618      	mov	r0, r3
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40021000 	.word	0x40021000
 8003444:	08005b28 	.word	0x08005b28

08003448 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800344c:	f7ff ffda 	bl	8003404 <HAL_RCC_GetHCLKFreq>
 8003450:	4602      	mov	r2, r0
 8003452:	4b06      	ldr	r3, [pc, #24]	; (800346c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	0adb      	lsrs	r3, r3, #11
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	4904      	ldr	r1, [pc, #16]	; (8003470 <HAL_RCC_GetPCLK2Freq+0x28>)
 800345e:	5ccb      	ldrb	r3, [r1, r3]
 8003460:	f003 031f 	and.w	r3, r3, #31
 8003464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003468:	4618      	mov	r0, r3
 800346a:	bd80      	pop	{r7, pc}
 800346c:	40021000 	.word	0x40021000
 8003470:	08005b28 	.word	0x08005b28

08003474 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800347c:	2300      	movs	r3, #0
 800347e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003480:	4b2a      	ldr	r3, [pc, #168]	; (800352c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d003      	beq.n	8003494 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800348c:	f7ff f9ee 	bl	800286c <HAL_PWREx_GetVoltageRange>
 8003490:	6178      	str	r0, [r7, #20]
 8003492:	e014      	b.n	80034be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003494:	4b25      	ldr	r3, [pc, #148]	; (800352c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003498:	4a24      	ldr	r2, [pc, #144]	; (800352c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800349a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800349e:	6593      	str	r3, [r2, #88]	; 0x58
 80034a0:	4b22      	ldr	r3, [pc, #136]	; (800352c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80034ac:	f7ff f9de 	bl	800286c <HAL_PWREx_GetVoltageRange>
 80034b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80034b2:	4b1e      	ldr	r3, [pc, #120]	; (800352c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b6:	4a1d      	ldr	r2, [pc, #116]	; (800352c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034bc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034c4:	d10b      	bne.n	80034de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b80      	cmp	r3, #128	; 0x80
 80034ca:	d919      	bls.n	8003500 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2ba0      	cmp	r3, #160	; 0xa0
 80034d0:	d902      	bls.n	80034d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034d2:	2302      	movs	r3, #2
 80034d4:	613b      	str	r3, [r7, #16]
 80034d6:	e013      	b.n	8003500 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034d8:	2301      	movs	r3, #1
 80034da:	613b      	str	r3, [r7, #16]
 80034dc:	e010      	b.n	8003500 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2b80      	cmp	r3, #128	; 0x80
 80034e2:	d902      	bls.n	80034ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80034e4:	2303      	movs	r3, #3
 80034e6:	613b      	str	r3, [r7, #16]
 80034e8:	e00a      	b.n	8003500 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b80      	cmp	r3, #128	; 0x80
 80034ee:	d102      	bne.n	80034f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034f0:	2302      	movs	r3, #2
 80034f2:	613b      	str	r3, [r7, #16]
 80034f4:	e004      	b.n	8003500 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b70      	cmp	r3, #112	; 0x70
 80034fa:	d101      	bne.n	8003500 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034fc:	2301      	movs	r3, #1
 80034fe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003500:	4b0b      	ldr	r3, [pc, #44]	; (8003530 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f023 0207 	bic.w	r2, r3, #7
 8003508:	4909      	ldr	r1, [pc, #36]	; (8003530 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	4313      	orrs	r3, r2
 800350e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003510:	4b07      	ldr	r3, [pc, #28]	; (8003530 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	429a      	cmp	r2, r3
 800351c:	d001      	beq.n	8003522 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40021000 	.word	0x40021000
 8003530:	40022000 	.word	0x40022000

08003534 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800353c:	2300      	movs	r3, #0
 800353e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003540:	2300      	movs	r3, #0
 8003542:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800354c:	2b00      	cmp	r3, #0
 800354e:	d041      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003554:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003558:	d02a      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800355a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800355e:	d824      	bhi.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003560:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003564:	d008      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003566:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800356a:	d81e      	bhi.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00a      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003570:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003574:	d010      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003576:	e018      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003578:	4b86      	ldr	r3, [pc, #536]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	4a85      	ldr	r2, [pc, #532]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800357e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003582:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003584:	e015      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	3304      	adds	r3, #4
 800358a:	2100      	movs	r1, #0
 800358c:	4618      	mov	r0, r3
 800358e:	f000 fabb 	bl	8003b08 <RCCEx_PLLSAI1_Config>
 8003592:	4603      	mov	r3, r0
 8003594:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003596:	e00c      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3320      	adds	r3, #32
 800359c:	2100      	movs	r1, #0
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 fba6 	bl	8003cf0 <RCCEx_PLLSAI2_Config>
 80035a4:	4603      	mov	r3, r0
 80035a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035a8:	e003      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	74fb      	strb	r3, [r7, #19]
      break;
 80035ae:	e000      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80035b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035b2:	7cfb      	ldrb	r3, [r7, #19]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10b      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035b8:	4b76      	ldr	r3, [pc, #472]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035c6:	4973      	ldr	r1, [pc, #460]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80035ce:	e001      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d0:	7cfb      	ldrb	r3, [r7, #19]
 80035d2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d041      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035e8:	d02a      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80035ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035ee:	d824      	bhi.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80035f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035f4:	d008      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80035f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035fa:	d81e      	bhi.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00a      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003600:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003604:	d010      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003606:	e018      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003608:	4b62      	ldr	r3, [pc, #392]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	4a61      	ldr	r2, [pc, #388]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800360e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003612:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003614:	e015      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	3304      	adds	r3, #4
 800361a:	2100      	movs	r1, #0
 800361c:	4618      	mov	r0, r3
 800361e:	f000 fa73 	bl	8003b08 <RCCEx_PLLSAI1_Config>
 8003622:	4603      	mov	r3, r0
 8003624:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003626:	e00c      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3320      	adds	r3, #32
 800362c:	2100      	movs	r1, #0
 800362e:	4618      	mov	r0, r3
 8003630:	f000 fb5e 	bl	8003cf0 <RCCEx_PLLSAI2_Config>
 8003634:	4603      	mov	r3, r0
 8003636:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003638:	e003      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	74fb      	strb	r3, [r7, #19]
      break;
 800363e:	e000      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003640:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003642:	7cfb      	ldrb	r3, [r7, #19]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10b      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003648:	4b52      	ldr	r3, [pc, #328]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800364a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003656:	494f      	ldr	r1, [pc, #316]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003658:	4313      	orrs	r3, r2
 800365a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800365e:	e001      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003660:	7cfb      	ldrb	r3, [r7, #19]
 8003662:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 80a0 	beq.w	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003672:	2300      	movs	r3, #0
 8003674:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003676:	4b47      	ldr	r3, [pc, #284]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003682:	2301      	movs	r3, #1
 8003684:	e000      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003686:	2300      	movs	r3, #0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00d      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800368c:	4b41      	ldr	r3, [pc, #260]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800368e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003690:	4a40      	ldr	r2, [pc, #256]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003696:	6593      	str	r3, [r2, #88]	; 0x58
 8003698:	4b3e      	ldr	r3, [pc, #248]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800369a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a0:	60bb      	str	r3, [r7, #8]
 80036a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036a4:	2301      	movs	r3, #1
 80036a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036a8:	4b3b      	ldr	r3, [pc, #236]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a3a      	ldr	r2, [pc, #232]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036b4:	f7fd fbda 	bl	8000e6c <HAL_GetTick>
 80036b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036ba:	e009      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036bc:	f7fd fbd6 	bl	8000e6c <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d902      	bls.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	74fb      	strb	r3, [r7, #19]
        break;
 80036ce:	e005      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036d0:	4b31      	ldr	r3, [pc, #196]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0ef      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80036dc:	7cfb      	ldrb	r3, [r7, #19]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d15c      	bne.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036e2:	4b2c      	ldr	r3, [pc, #176]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d01f      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d019      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003700:	4b24      	ldr	r3, [pc, #144]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800370a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800370c:	4b21      	ldr	r3, [pc, #132]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800370e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003712:	4a20      	ldr	r2, [pc, #128]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003718:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800371c:	4b1d      	ldr	r3, [pc, #116]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800371e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003722:	4a1c      	ldr	r2, [pc, #112]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003728:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800372c:	4a19      	ldr	r2, [pc, #100]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d016      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373e:	f7fd fb95 	bl	8000e6c <HAL_GetTick>
 8003742:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003744:	e00b      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003746:	f7fd fb91 	bl	8000e6c <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	f241 3288 	movw	r2, #5000	; 0x1388
 8003754:	4293      	cmp	r3, r2
 8003756:	d902      	bls.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	74fb      	strb	r3, [r7, #19]
            break;
 800375c:	e006      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800375e:	4b0d      	ldr	r3, [pc, #52]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0ec      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800376c:	7cfb      	ldrb	r3, [r7, #19]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10c      	bne.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003772:	4b08      	ldr	r3, [pc, #32]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003778:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003782:	4904      	ldr	r1, [pc, #16]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003784:	4313      	orrs	r3, r2
 8003786:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800378a:	e009      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800378c:	7cfb      	ldrb	r3, [r7, #19]
 800378e:	74bb      	strb	r3, [r7, #18]
 8003790:	e006      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003792:	bf00      	nop
 8003794:	40021000 	.word	0x40021000
 8003798:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800379c:	7cfb      	ldrb	r3, [r7, #19]
 800379e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037a0:	7c7b      	ldrb	r3, [r7, #17]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d105      	bne.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037a6:	4b9e      	ldr	r3, [pc, #632]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037aa:	4a9d      	ldr	r2, [pc, #628]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00a      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037be:	4b98      	ldr	r3, [pc, #608]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c4:	f023 0203 	bic.w	r2, r3, #3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037cc:	4994      	ldr	r1, [pc, #592]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00a      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037e0:	4b8f      	ldr	r3, [pc, #572]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e6:	f023 020c 	bic.w	r2, r3, #12
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ee:	498c      	ldr	r1, [pc, #560]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0304 	and.w	r3, r3, #4
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00a      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003802:	4b87      	ldr	r3, [pc, #540]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003808:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003810:	4983      	ldr	r1, [pc, #524]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003812:	4313      	orrs	r3, r2
 8003814:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0308 	and.w	r3, r3, #8
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00a      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003824:	4b7e      	ldr	r3, [pc, #504]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003832:	497b      	ldr	r1, [pc, #492]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003834:	4313      	orrs	r3, r2
 8003836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0310 	and.w	r3, r3, #16
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00a      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003846:	4b76      	ldr	r3, [pc, #472]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003854:	4972      	ldr	r1, [pc, #456]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003856:	4313      	orrs	r3, r2
 8003858:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0320 	and.w	r3, r3, #32
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00a      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003868:	4b6d      	ldr	r3, [pc, #436]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800386a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003876:	496a      	ldr	r1, [pc, #424]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003878:	4313      	orrs	r3, r2
 800387a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800388a:	4b65      	ldr	r3, [pc, #404]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800388c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003890:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003898:	4961      	ldr	r1, [pc, #388]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800389a:	4313      	orrs	r3, r2
 800389c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00a      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038ac:	4b5c      	ldr	r3, [pc, #368]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ba:	4959      	ldr	r1, [pc, #356]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038ce:	4b54      	ldr	r3, [pc, #336]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038dc:	4950      	ldr	r1, [pc, #320]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00a      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038f0:	4b4b      	ldr	r3, [pc, #300]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fe:	4948      	ldr	r1, [pc, #288]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003900:	4313      	orrs	r3, r2
 8003902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00a      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003912:	4b43      	ldr	r3, [pc, #268]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003918:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003920:	493f      	ldr	r1, [pc, #252]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003922:	4313      	orrs	r3, r2
 8003924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d028      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003934:	4b3a      	ldr	r3, [pc, #232]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003942:	4937      	ldr	r1, [pc, #220]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003944:	4313      	orrs	r3, r2
 8003946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800394e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003952:	d106      	bne.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003954:	4b32      	ldr	r3, [pc, #200]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	4a31      	ldr	r2, [pc, #196]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800395a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800395e:	60d3      	str	r3, [r2, #12]
 8003960:	e011      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003966:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800396a:	d10c      	bne.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3304      	adds	r3, #4
 8003970:	2101      	movs	r1, #1
 8003972:	4618      	mov	r0, r3
 8003974:	f000 f8c8 	bl	8003b08 <RCCEx_PLLSAI1_Config>
 8003978:	4603      	mov	r3, r0
 800397a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800397c:	7cfb      	ldrb	r3, [r7, #19]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003982:	7cfb      	ldrb	r3, [r7, #19]
 8003984:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d028      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003992:	4b23      	ldr	r3, [pc, #140]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003998:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a0:	491f      	ldr	r1, [pc, #124]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039b0:	d106      	bne.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039b2:	4b1b      	ldr	r3, [pc, #108]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	4a1a      	ldr	r2, [pc, #104]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039bc:	60d3      	str	r3, [r2, #12]
 80039be:	e011      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039c8:	d10c      	bne.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	3304      	adds	r3, #4
 80039ce:	2101      	movs	r1, #1
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 f899 	bl	8003b08 <RCCEx_PLLSAI1_Config>
 80039d6:	4603      	mov	r3, r0
 80039d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039da:	7cfb      	ldrb	r3, [r7, #19]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80039e0:	7cfb      	ldrb	r3, [r7, #19]
 80039e2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d02b      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039f0:	4b0b      	ldr	r3, [pc, #44]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039fe:	4908      	ldr	r1, [pc, #32]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a0e:	d109      	bne.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a10:	4b03      	ldr	r3, [pc, #12]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	4a02      	ldr	r2, [pc, #8]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a1a:	60d3      	str	r3, [r2, #12]
 8003a1c:	e014      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003a1e:	bf00      	nop
 8003a20:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a2c:	d10c      	bne.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	3304      	adds	r3, #4
 8003a32:	2101      	movs	r1, #1
 8003a34:	4618      	mov	r0, r3
 8003a36:	f000 f867 	bl	8003b08 <RCCEx_PLLSAI1_Config>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a3e:	7cfb      	ldrb	r3, [r7, #19]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003a44:	7cfb      	ldrb	r3, [r7, #19]
 8003a46:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d02f      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a54:	4b2b      	ldr	r3, [pc, #172]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a62:	4928      	ldr	r1, [pc, #160]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a72:	d10d      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3304      	adds	r3, #4
 8003a78:	2102      	movs	r1, #2
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 f844 	bl	8003b08 <RCCEx_PLLSAI1_Config>
 8003a80:	4603      	mov	r3, r0
 8003a82:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a84:	7cfb      	ldrb	r3, [r7, #19]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d014      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003a8a:	7cfb      	ldrb	r3, [r7, #19]
 8003a8c:	74bb      	strb	r3, [r7, #18]
 8003a8e:	e011      	b.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a98:	d10c      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	3320      	adds	r3, #32
 8003a9e:	2102      	movs	r1, #2
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f000 f925 	bl	8003cf0 <RCCEx_PLLSAI2_Config>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003aaa:	7cfb      	ldrb	r3, [r7, #19]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ab0:	7cfb      	ldrb	r3, [r7, #19]
 8003ab2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00a      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ac0:	4b10      	ldr	r3, [pc, #64]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ace:	490d      	ldr	r1, [pc, #52]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00b      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ae2:	4b08      	ldr	r3, [pc, #32]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003af2:	4904      	ldr	r1, [pc, #16]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003afa:	7cbb      	ldrb	r3, [r7, #18]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3718      	adds	r7, #24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	40021000 	.word	0x40021000

08003b08 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b12:	2300      	movs	r3, #0
 8003b14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b16:	4b75      	ldr	r3, [pc, #468]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f003 0303 	and.w	r3, r3, #3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d018      	beq.n	8003b54 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b22:	4b72      	ldr	r3, [pc, #456]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f003 0203 	and.w	r2, r3, #3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d10d      	bne.n	8003b4e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
       ||
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d009      	beq.n	8003b4e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003b3a:	4b6c      	ldr	r3, [pc, #432]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	091b      	lsrs	r3, r3, #4
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	1c5a      	adds	r2, r3, #1
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
       ||
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d047      	beq.n	8003bde <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	73fb      	strb	r3, [r7, #15]
 8003b52:	e044      	b.n	8003bde <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2b03      	cmp	r3, #3
 8003b5a:	d018      	beq.n	8003b8e <RCCEx_PLLSAI1_Config+0x86>
 8003b5c:	2b03      	cmp	r3, #3
 8003b5e:	d825      	bhi.n	8003bac <RCCEx_PLLSAI1_Config+0xa4>
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d002      	beq.n	8003b6a <RCCEx_PLLSAI1_Config+0x62>
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d009      	beq.n	8003b7c <RCCEx_PLLSAI1_Config+0x74>
 8003b68:	e020      	b.n	8003bac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b6a:	4b60      	ldr	r3, [pc, #384]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d11d      	bne.n	8003bb2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b7a:	e01a      	b.n	8003bb2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b7c:	4b5b      	ldr	r3, [pc, #364]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d116      	bne.n	8003bb6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b8c:	e013      	b.n	8003bb6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b8e:	4b57      	ldr	r3, [pc, #348]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10f      	bne.n	8003bba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b9a:	4b54      	ldr	r3, [pc, #336]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d109      	bne.n	8003bba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003baa:	e006      	b.n	8003bba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	73fb      	strb	r3, [r7, #15]
      break;
 8003bb0:	e004      	b.n	8003bbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bb2:	bf00      	nop
 8003bb4:	e002      	b.n	8003bbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bb6:	bf00      	nop
 8003bb8:	e000      	b.n	8003bbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bba:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bbc:	7bfb      	ldrb	r3, [r7, #15]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10d      	bne.n	8003bde <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003bc2:	4b4a      	ldr	r3, [pc, #296]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6819      	ldr	r1, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	011b      	lsls	r3, r3, #4
 8003bd6:	430b      	orrs	r3, r1
 8003bd8:	4944      	ldr	r1, [pc, #272]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003bde:	7bfb      	ldrb	r3, [r7, #15]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d17d      	bne.n	8003ce0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003be4:	4b41      	ldr	r3, [pc, #260]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a40      	ldr	r2, [pc, #256]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003bee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bf0:	f7fd f93c 	bl	8000e6c <HAL_GetTick>
 8003bf4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003bf6:	e009      	b.n	8003c0c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bf8:	f7fd f938 	bl	8000e6c <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d902      	bls.n	8003c0c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	73fb      	strb	r3, [r7, #15]
        break;
 8003c0a:	e005      	b.n	8003c18 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c0c:	4b37      	ldr	r3, [pc, #220]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1ef      	bne.n	8003bf8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c18:	7bfb      	ldrb	r3, [r7, #15]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d160      	bne.n	8003ce0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d111      	bne.n	8003c48 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c24:	4b31      	ldr	r3, [pc, #196]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003c2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	6892      	ldr	r2, [r2, #8]
 8003c34:	0211      	lsls	r1, r2, #8
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	68d2      	ldr	r2, [r2, #12]
 8003c3a:	0912      	lsrs	r2, r2, #4
 8003c3c:	0452      	lsls	r2, r2, #17
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	492a      	ldr	r1, [pc, #168]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	610b      	str	r3, [r1, #16]
 8003c46:	e027      	b.n	8003c98 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d112      	bne.n	8003c74 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c4e:	4b27      	ldr	r3, [pc, #156]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003c56:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	6892      	ldr	r2, [r2, #8]
 8003c5e:	0211      	lsls	r1, r2, #8
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6912      	ldr	r2, [r2, #16]
 8003c64:	0852      	lsrs	r2, r2, #1
 8003c66:	3a01      	subs	r2, #1
 8003c68:	0552      	lsls	r2, r2, #21
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	491f      	ldr	r1, [pc, #124]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	610b      	str	r3, [r1, #16]
 8003c72:	e011      	b.n	8003c98 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c74:	4b1d      	ldr	r3, [pc, #116]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003c7c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6892      	ldr	r2, [r2, #8]
 8003c84:	0211      	lsls	r1, r2, #8
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6952      	ldr	r2, [r2, #20]
 8003c8a:	0852      	lsrs	r2, r2, #1
 8003c8c:	3a01      	subs	r2, #1
 8003c8e:	0652      	lsls	r2, r2, #25
 8003c90:	430a      	orrs	r2, r1
 8003c92:	4916      	ldr	r1, [pc, #88]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c98:	4b14      	ldr	r3, [pc, #80]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a13      	ldr	r2, [pc, #76]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ca2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca4:	f7fd f8e2 	bl	8000e6c <HAL_GetTick>
 8003ca8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003caa:	e009      	b.n	8003cc0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cac:	f7fd f8de 	bl	8000e6c <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d902      	bls.n	8003cc0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	73fb      	strb	r3, [r7, #15]
          break;
 8003cbe:	e005      	b.n	8003ccc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cc0:	4b0a      	ldr	r3, [pc, #40]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0ef      	beq.n	8003cac <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003ccc:	7bfb      	ldrb	r3, [r7, #15]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d106      	bne.n	8003ce0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003cd2:	4b06      	ldr	r3, [pc, #24]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cd4:	691a      	ldr	r2, [r3, #16]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	4904      	ldr	r1, [pc, #16]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40021000 	.word	0x40021000

08003cf0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003cfe:	4b6a      	ldr	r3, [pc, #424]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	f003 0303 	and.w	r3, r3, #3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d018      	beq.n	8003d3c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003d0a:	4b67      	ldr	r3, [pc, #412]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	f003 0203 	and.w	r2, r3, #3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d10d      	bne.n	8003d36 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
       ||
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d009      	beq.n	8003d36 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003d22:	4b61      	ldr	r3, [pc, #388]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	091b      	lsrs	r3, r3, #4
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	1c5a      	adds	r2, r3, #1
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
       ||
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d047      	beq.n	8003dc6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	73fb      	strb	r3, [r7, #15]
 8003d3a:	e044      	b.n	8003dc6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b03      	cmp	r3, #3
 8003d42:	d018      	beq.n	8003d76 <RCCEx_PLLSAI2_Config+0x86>
 8003d44:	2b03      	cmp	r3, #3
 8003d46:	d825      	bhi.n	8003d94 <RCCEx_PLLSAI2_Config+0xa4>
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d002      	beq.n	8003d52 <RCCEx_PLLSAI2_Config+0x62>
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d009      	beq.n	8003d64 <RCCEx_PLLSAI2_Config+0x74>
 8003d50:	e020      	b.n	8003d94 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d52:	4b55      	ldr	r3, [pc, #340]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d11d      	bne.n	8003d9a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d62:	e01a      	b.n	8003d9a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d64:	4b50      	ldr	r3, [pc, #320]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d116      	bne.n	8003d9e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d74:	e013      	b.n	8003d9e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d76:	4b4c      	ldr	r3, [pc, #304]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10f      	bne.n	8003da2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d82:	4b49      	ldr	r3, [pc, #292]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d109      	bne.n	8003da2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d92:	e006      	b.n	8003da2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	73fb      	strb	r3, [r7, #15]
      break;
 8003d98:	e004      	b.n	8003da4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d9a:	bf00      	nop
 8003d9c:	e002      	b.n	8003da4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d9e:	bf00      	nop
 8003da0:	e000      	b.n	8003da4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003da2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003da4:	7bfb      	ldrb	r3, [r7, #15]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10d      	bne.n	8003dc6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003daa:	4b3f      	ldr	r3, [pc, #252]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6819      	ldr	r1, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	011b      	lsls	r3, r3, #4
 8003dbe:	430b      	orrs	r3, r1
 8003dc0:	4939      	ldr	r1, [pc, #228]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003dc6:	7bfb      	ldrb	r3, [r7, #15]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d167      	bne.n	8003e9c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003dcc:	4b36      	ldr	r3, [pc, #216]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a35      	ldr	r2, [pc, #212]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dd8:	f7fd f848 	bl	8000e6c <HAL_GetTick>
 8003ddc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003dde:	e009      	b.n	8003df4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003de0:	f7fd f844 	bl	8000e6c <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d902      	bls.n	8003df4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	73fb      	strb	r3, [r7, #15]
        break;
 8003df2:	e005      	b.n	8003e00 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003df4:	4b2c      	ldr	r3, [pc, #176]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1ef      	bne.n	8003de0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e00:	7bfb      	ldrb	r3, [r7, #15]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d14a      	bne.n	8003e9c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d111      	bne.n	8003e30 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e0c:	4b26      	ldr	r3, [pc, #152]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003e14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6892      	ldr	r2, [r2, #8]
 8003e1c:	0211      	lsls	r1, r2, #8
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	68d2      	ldr	r2, [r2, #12]
 8003e22:	0912      	lsrs	r2, r2, #4
 8003e24:	0452      	lsls	r2, r2, #17
 8003e26:	430a      	orrs	r2, r1
 8003e28:	491f      	ldr	r1, [pc, #124]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	614b      	str	r3, [r1, #20]
 8003e2e:	e011      	b.n	8003e54 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e30:	4b1d      	ldr	r3, [pc, #116]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e38:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	6892      	ldr	r2, [r2, #8]
 8003e40:	0211      	lsls	r1, r2, #8
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6912      	ldr	r2, [r2, #16]
 8003e46:	0852      	lsrs	r2, r2, #1
 8003e48:	3a01      	subs	r2, #1
 8003e4a:	0652      	lsls	r2, r2, #25
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	4916      	ldr	r1, [pc, #88]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003e54:	4b14      	ldr	r3, [pc, #80]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a13      	ldr	r2, [pc, #76]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e5e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e60:	f7fd f804 	bl	8000e6c <HAL_GetTick>
 8003e64:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e66:	e009      	b.n	8003e7c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e68:	f7fd f800 	bl	8000e6c <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d902      	bls.n	8003e7c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	73fb      	strb	r3, [r7, #15]
          break;
 8003e7a:	e005      	b.n	8003e88 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d0ef      	beq.n	8003e68 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003e88:	7bfb      	ldrb	r3, [r7, #15]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d106      	bne.n	8003e9c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003e8e:	4b06      	ldr	r3, [pc, #24]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e90:	695a      	ldr	r2, [r3, #20]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	4904      	ldr	r1, [pc, #16]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40021000 	.word	0x40021000

08003eac <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d06c      	beq.n	8003f98 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d106      	bne.n	8003ed8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7fc fd6e 	bl	80009b4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	22ca      	movs	r2, #202	; 0xca
 8003ee6:	625a      	str	r2, [r3, #36]	; 0x24
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2253      	movs	r2, #83	; 0x53
 8003eee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 f87c 	bl	8003fee <RTC_EnterInitMode>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003efa:	7bfb      	ldrb	r3, [r7, #15]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d14b      	bne.n	8003f98 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	6812      	ldr	r2, [r2, #0]
 8003f0a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003f0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f12:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6899      	ldr	r1, [r3, #8]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	431a      	orrs	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	68d2      	ldr	r2, [r2, #12]
 8003f3a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6919      	ldr	r1, [r3, #16]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	041a      	lsls	r2, r3, #16
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 f87f 	bl	8004054 <RTC_ExitInitMode>
 8003f56:	4603      	mov	r3, r0
 8003f58:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003f5a:	7bfb      	ldrb	r3, [r7, #15]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d11b      	bne.n	8003f98 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0203 	bic.w	r2, r2, #3
 8003f6e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	69da      	ldr	r2, [r3, #28]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	430a      	orrs	r2, r1
 8003f86:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	22ff      	movs	r2, #255	; 0xff
 8003f8e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b084      	sub	sp, #16
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68da      	ldr	r2, [r3, #12]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003fb8:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8003fba:	f7fc ff57 	bl	8000e6c <HAL_GetTick>
 8003fbe:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003fc0:	e009      	b.n	8003fd6 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003fc2:	f7fc ff53 	bl	8000e6c <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e007      	b.n	8003fe6 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	f003 0320 	and.w	r3, r3, #32
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d0ee      	beq.n	8003fc2 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b084      	sub	sp, #16
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004004:	2b00      	cmp	r3, #0
 8004006:	d120      	bne.n	800404a <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f04f 32ff 	mov.w	r2, #4294967295
 8004010:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004012:	f7fc ff2b 	bl	8000e6c <HAL_GetTick>
 8004016:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004018:	e00d      	b.n	8004036 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800401a:	f7fc ff27 	bl	8000e6c <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004028:	d905      	bls.n	8004036 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2203      	movs	r2, #3
 8004032:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004040:	2b00      	cmp	r3, #0
 8004042:	d102      	bne.n	800404a <RTC_EnterInitMode+0x5c>
 8004044:	7bfb      	ldrb	r3, [r7, #15]
 8004046:	2b03      	cmp	r3, #3
 8004048:	d1e7      	bne.n	800401a <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800404a:	7bfb      	ldrb	r3, [r7, #15]
}
 800404c:	4618      	mov	r0, r3
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800405c:	2300      	movs	r3, #0
 800405e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004060:	4b1a      	ldr	r3, [pc, #104]	; (80040cc <RTC_ExitInitMode+0x78>)
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	4a19      	ldr	r2, [pc, #100]	; (80040cc <RTC_ExitInitMode+0x78>)
 8004066:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800406a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800406c:	4b17      	ldr	r3, [pc, #92]	; (80040cc <RTC_ExitInitMode+0x78>)
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f003 0320 	and.w	r3, r3, #32
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10c      	bne.n	8004092 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f7ff ff92 	bl	8003fa2 <HAL_RTC_WaitForSynchro>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d01e      	beq.n	80040c2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2203      	movs	r2, #3
 8004088:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	73fb      	strb	r3, [r7, #15]
 8004090:	e017      	b.n	80040c2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004092:	4b0e      	ldr	r3, [pc, #56]	; (80040cc <RTC_ExitInitMode+0x78>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	4a0d      	ldr	r2, [pc, #52]	; (80040cc <RTC_ExitInitMode+0x78>)
 8004098:	f023 0320 	bic.w	r3, r3, #32
 800409c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f7ff ff7f 	bl	8003fa2 <HAL_RTC_WaitForSynchro>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d005      	beq.n	80040b6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2203      	movs	r2, #3
 80040ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80040b6:	4b05      	ldr	r3, [pc, #20]	; (80040cc <RTC_ExitInitMode+0x78>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	4a04      	ldr	r2, [pc, #16]	; (80040cc <RTC_ExitInitMode+0x78>)
 80040bc:	f043 0320 	orr.w	r3, r3, #32
 80040c0:	6093      	str	r3, [r2, #8]
  }

  return status;
 80040c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	40002800 	.word	0x40002800

080040d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e040      	b.n	8004164 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d106      	bne.n	80040f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7fc fdc4 	bl	8000c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2224      	movs	r2, #36	; 0x24
 80040fc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 0201 	bic.w	r2, r2, #1
 800410c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f8c0 	bl	8004294 <UART_SetConfig>
 8004114:	4603      	mov	r3, r0
 8004116:	2b01      	cmp	r3, #1
 8004118:	d101      	bne.n	800411e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e022      	b.n	8004164 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004122:	2b00      	cmp	r3, #0
 8004124:	d002      	beq.n	800412c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 fb6c 	bl	8004804 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800413a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	689a      	ldr	r2, [r3, #8]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800414a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f042 0201 	orr.w	r2, r2, #1
 800415a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 fbf3 	bl	8004948 <UART_CheckIdleState>
 8004162:	4603      	mov	r3, r0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b08a      	sub	sp, #40	; 0x28
 8004170:	af02      	add	r7, sp, #8
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	603b      	str	r3, [r7, #0]
 8004178:	4613      	mov	r3, r2
 800417a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004180:	2b20      	cmp	r3, #32
 8004182:	f040 8082 	bne.w	800428a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d002      	beq.n	8004192 <HAL_UART_Transmit+0x26>
 800418c:	88fb      	ldrh	r3, [r7, #6]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e07a      	b.n	800428c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800419c:	2b01      	cmp	r3, #1
 800419e:	d101      	bne.n	80041a4 <HAL_UART_Transmit+0x38>
 80041a0:	2302      	movs	r3, #2
 80041a2:	e073      	b.n	800428c <HAL_UART_Transmit+0x120>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2221      	movs	r2, #33	; 0x21
 80041b8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041ba:	f7fc fe57 	bl	8000e6c <HAL_GetTick>
 80041be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	88fa      	ldrh	r2, [r7, #6]
 80041c4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	88fa      	ldrh	r2, [r7, #6]
 80041cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041d8:	d108      	bne.n	80041ec <HAL_UART_Transmit+0x80>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d104      	bne.n	80041ec <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80041e2:	2300      	movs	r3, #0
 80041e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	61bb      	str	r3, [r7, #24]
 80041ea:	e003      	b.n	80041f4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041f0:	2300      	movs	r3, #0
 80041f2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80041fc:	e02d      	b.n	800425a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	2200      	movs	r2, #0
 8004206:	2180      	movs	r1, #128	; 0x80
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f000 fbe6 	bl	80049da <UART_WaitOnFlagUntilTimeout>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e039      	b.n	800428c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10b      	bne.n	8004236 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	881a      	ldrh	r2, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800422a:	b292      	uxth	r2, r2
 800422c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	3302      	adds	r3, #2
 8004232:	61bb      	str	r3, [r7, #24]
 8004234:	e008      	b.n	8004248 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	781a      	ldrb	r2, [r3, #0]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	b292      	uxth	r2, r2
 8004240:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	3301      	adds	r3, #1
 8004246:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800424e:	b29b      	uxth	r3, r3
 8004250:	3b01      	subs	r3, #1
 8004252:	b29a      	uxth	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004260:	b29b      	uxth	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1cb      	bne.n	80041fe <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	9300      	str	r3, [sp, #0]
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	2200      	movs	r2, #0
 800426e:	2140      	movs	r1, #64	; 0x40
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f000 fbb2 	bl	80049da <UART_WaitOnFlagUntilTimeout>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e005      	b.n	800428c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2220      	movs	r2, #32
 8004284:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004286:	2300      	movs	r3, #0
 8004288:	e000      	b.n	800428c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800428a:	2302      	movs	r3, #2
  }
}
 800428c:	4618      	mov	r0, r3
 800428e:	3720      	adds	r7, #32
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004294:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004298:	b08a      	sub	sp, #40	; 0x28
 800429a:	af00      	add	r7, sp, #0
 800429c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800429e:	2300      	movs	r3, #0
 80042a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	689a      	ldr	r2, [r3, #8]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	431a      	orrs	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	431a      	orrs	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	69db      	ldr	r3, [r3, #28]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	4ba4      	ldr	r3, [pc, #656]	; (8004554 <UART_SetConfig+0x2c0>)
 80042c4:	4013      	ands	r3, r2
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	6812      	ldr	r2, [r2, #0]
 80042ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042cc:	430b      	orrs	r3, r1
 80042ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	68da      	ldr	r2, [r3, #12]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a99      	ldr	r2, [pc, #612]	; (8004558 <UART_SetConfig+0x2c4>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d004      	beq.n	8004300 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042fc:	4313      	orrs	r3, r2
 80042fe:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004310:	430a      	orrs	r2, r1
 8004312:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a90      	ldr	r2, [pc, #576]	; (800455c <UART_SetConfig+0x2c8>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d126      	bne.n	800436c <UART_SetConfig+0xd8>
 800431e:	4b90      	ldr	r3, [pc, #576]	; (8004560 <UART_SetConfig+0x2cc>)
 8004320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004324:	f003 0303 	and.w	r3, r3, #3
 8004328:	2b03      	cmp	r3, #3
 800432a:	d81b      	bhi.n	8004364 <UART_SetConfig+0xd0>
 800432c:	a201      	add	r2, pc, #4	; (adr r2, 8004334 <UART_SetConfig+0xa0>)
 800432e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004332:	bf00      	nop
 8004334:	08004345 	.word	0x08004345
 8004338:	08004355 	.word	0x08004355
 800433c:	0800434d 	.word	0x0800434d
 8004340:	0800435d 	.word	0x0800435d
 8004344:	2301      	movs	r3, #1
 8004346:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800434a:	e116      	b.n	800457a <UART_SetConfig+0x2e6>
 800434c:	2302      	movs	r3, #2
 800434e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004352:	e112      	b.n	800457a <UART_SetConfig+0x2e6>
 8004354:	2304      	movs	r3, #4
 8004356:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800435a:	e10e      	b.n	800457a <UART_SetConfig+0x2e6>
 800435c:	2308      	movs	r3, #8
 800435e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004362:	e10a      	b.n	800457a <UART_SetConfig+0x2e6>
 8004364:	2310      	movs	r3, #16
 8004366:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800436a:	e106      	b.n	800457a <UART_SetConfig+0x2e6>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a7c      	ldr	r2, [pc, #496]	; (8004564 <UART_SetConfig+0x2d0>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d138      	bne.n	80043e8 <UART_SetConfig+0x154>
 8004376:	4b7a      	ldr	r3, [pc, #488]	; (8004560 <UART_SetConfig+0x2cc>)
 8004378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437c:	f003 030c 	and.w	r3, r3, #12
 8004380:	2b0c      	cmp	r3, #12
 8004382:	d82d      	bhi.n	80043e0 <UART_SetConfig+0x14c>
 8004384:	a201      	add	r2, pc, #4	; (adr r2, 800438c <UART_SetConfig+0xf8>)
 8004386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438a:	bf00      	nop
 800438c:	080043c1 	.word	0x080043c1
 8004390:	080043e1 	.word	0x080043e1
 8004394:	080043e1 	.word	0x080043e1
 8004398:	080043e1 	.word	0x080043e1
 800439c:	080043d1 	.word	0x080043d1
 80043a0:	080043e1 	.word	0x080043e1
 80043a4:	080043e1 	.word	0x080043e1
 80043a8:	080043e1 	.word	0x080043e1
 80043ac:	080043c9 	.word	0x080043c9
 80043b0:	080043e1 	.word	0x080043e1
 80043b4:	080043e1 	.word	0x080043e1
 80043b8:	080043e1 	.word	0x080043e1
 80043bc:	080043d9 	.word	0x080043d9
 80043c0:	2300      	movs	r3, #0
 80043c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043c6:	e0d8      	b.n	800457a <UART_SetConfig+0x2e6>
 80043c8:	2302      	movs	r3, #2
 80043ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ce:	e0d4      	b.n	800457a <UART_SetConfig+0x2e6>
 80043d0:	2304      	movs	r3, #4
 80043d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043d6:	e0d0      	b.n	800457a <UART_SetConfig+0x2e6>
 80043d8:	2308      	movs	r3, #8
 80043da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043de:	e0cc      	b.n	800457a <UART_SetConfig+0x2e6>
 80043e0:	2310      	movs	r3, #16
 80043e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043e6:	e0c8      	b.n	800457a <UART_SetConfig+0x2e6>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a5e      	ldr	r2, [pc, #376]	; (8004568 <UART_SetConfig+0x2d4>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d125      	bne.n	800443e <UART_SetConfig+0x1aa>
 80043f2:	4b5b      	ldr	r3, [pc, #364]	; (8004560 <UART_SetConfig+0x2cc>)
 80043f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80043fc:	2b30      	cmp	r3, #48	; 0x30
 80043fe:	d016      	beq.n	800442e <UART_SetConfig+0x19a>
 8004400:	2b30      	cmp	r3, #48	; 0x30
 8004402:	d818      	bhi.n	8004436 <UART_SetConfig+0x1a2>
 8004404:	2b20      	cmp	r3, #32
 8004406:	d00a      	beq.n	800441e <UART_SetConfig+0x18a>
 8004408:	2b20      	cmp	r3, #32
 800440a:	d814      	bhi.n	8004436 <UART_SetConfig+0x1a2>
 800440c:	2b00      	cmp	r3, #0
 800440e:	d002      	beq.n	8004416 <UART_SetConfig+0x182>
 8004410:	2b10      	cmp	r3, #16
 8004412:	d008      	beq.n	8004426 <UART_SetConfig+0x192>
 8004414:	e00f      	b.n	8004436 <UART_SetConfig+0x1a2>
 8004416:	2300      	movs	r3, #0
 8004418:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800441c:	e0ad      	b.n	800457a <UART_SetConfig+0x2e6>
 800441e:	2302      	movs	r3, #2
 8004420:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004424:	e0a9      	b.n	800457a <UART_SetConfig+0x2e6>
 8004426:	2304      	movs	r3, #4
 8004428:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800442c:	e0a5      	b.n	800457a <UART_SetConfig+0x2e6>
 800442e:	2308      	movs	r3, #8
 8004430:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004434:	e0a1      	b.n	800457a <UART_SetConfig+0x2e6>
 8004436:	2310      	movs	r3, #16
 8004438:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800443c:	e09d      	b.n	800457a <UART_SetConfig+0x2e6>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a4a      	ldr	r2, [pc, #296]	; (800456c <UART_SetConfig+0x2d8>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d125      	bne.n	8004494 <UART_SetConfig+0x200>
 8004448:	4b45      	ldr	r3, [pc, #276]	; (8004560 <UART_SetConfig+0x2cc>)
 800444a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004452:	2bc0      	cmp	r3, #192	; 0xc0
 8004454:	d016      	beq.n	8004484 <UART_SetConfig+0x1f0>
 8004456:	2bc0      	cmp	r3, #192	; 0xc0
 8004458:	d818      	bhi.n	800448c <UART_SetConfig+0x1f8>
 800445a:	2b80      	cmp	r3, #128	; 0x80
 800445c:	d00a      	beq.n	8004474 <UART_SetConfig+0x1e0>
 800445e:	2b80      	cmp	r3, #128	; 0x80
 8004460:	d814      	bhi.n	800448c <UART_SetConfig+0x1f8>
 8004462:	2b00      	cmp	r3, #0
 8004464:	d002      	beq.n	800446c <UART_SetConfig+0x1d8>
 8004466:	2b40      	cmp	r3, #64	; 0x40
 8004468:	d008      	beq.n	800447c <UART_SetConfig+0x1e8>
 800446a:	e00f      	b.n	800448c <UART_SetConfig+0x1f8>
 800446c:	2300      	movs	r3, #0
 800446e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004472:	e082      	b.n	800457a <UART_SetConfig+0x2e6>
 8004474:	2302      	movs	r3, #2
 8004476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800447a:	e07e      	b.n	800457a <UART_SetConfig+0x2e6>
 800447c:	2304      	movs	r3, #4
 800447e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004482:	e07a      	b.n	800457a <UART_SetConfig+0x2e6>
 8004484:	2308      	movs	r3, #8
 8004486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800448a:	e076      	b.n	800457a <UART_SetConfig+0x2e6>
 800448c:	2310      	movs	r3, #16
 800448e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004492:	e072      	b.n	800457a <UART_SetConfig+0x2e6>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a35      	ldr	r2, [pc, #212]	; (8004570 <UART_SetConfig+0x2dc>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d12a      	bne.n	80044f4 <UART_SetConfig+0x260>
 800449e:	4b30      	ldr	r3, [pc, #192]	; (8004560 <UART_SetConfig+0x2cc>)
 80044a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044ac:	d01a      	beq.n	80044e4 <UART_SetConfig+0x250>
 80044ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044b2:	d81b      	bhi.n	80044ec <UART_SetConfig+0x258>
 80044b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044b8:	d00c      	beq.n	80044d4 <UART_SetConfig+0x240>
 80044ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044be:	d815      	bhi.n	80044ec <UART_SetConfig+0x258>
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d003      	beq.n	80044cc <UART_SetConfig+0x238>
 80044c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044c8:	d008      	beq.n	80044dc <UART_SetConfig+0x248>
 80044ca:	e00f      	b.n	80044ec <UART_SetConfig+0x258>
 80044cc:	2300      	movs	r3, #0
 80044ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044d2:	e052      	b.n	800457a <UART_SetConfig+0x2e6>
 80044d4:	2302      	movs	r3, #2
 80044d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044da:	e04e      	b.n	800457a <UART_SetConfig+0x2e6>
 80044dc:	2304      	movs	r3, #4
 80044de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044e2:	e04a      	b.n	800457a <UART_SetConfig+0x2e6>
 80044e4:	2308      	movs	r3, #8
 80044e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ea:	e046      	b.n	800457a <UART_SetConfig+0x2e6>
 80044ec:	2310      	movs	r3, #16
 80044ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044f2:	e042      	b.n	800457a <UART_SetConfig+0x2e6>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a17      	ldr	r2, [pc, #92]	; (8004558 <UART_SetConfig+0x2c4>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d13a      	bne.n	8004574 <UART_SetConfig+0x2e0>
 80044fe:	4b18      	ldr	r3, [pc, #96]	; (8004560 <UART_SetConfig+0x2cc>)
 8004500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004504:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004508:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800450c:	d01a      	beq.n	8004544 <UART_SetConfig+0x2b0>
 800450e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004512:	d81b      	bhi.n	800454c <UART_SetConfig+0x2b8>
 8004514:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004518:	d00c      	beq.n	8004534 <UART_SetConfig+0x2a0>
 800451a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800451e:	d815      	bhi.n	800454c <UART_SetConfig+0x2b8>
 8004520:	2b00      	cmp	r3, #0
 8004522:	d003      	beq.n	800452c <UART_SetConfig+0x298>
 8004524:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004528:	d008      	beq.n	800453c <UART_SetConfig+0x2a8>
 800452a:	e00f      	b.n	800454c <UART_SetConfig+0x2b8>
 800452c:	2300      	movs	r3, #0
 800452e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004532:	e022      	b.n	800457a <UART_SetConfig+0x2e6>
 8004534:	2302      	movs	r3, #2
 8004536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800453a:	e01e      	b.n	800457a <UART_SetConfig+0x2e6>
 800453c:	2304      	movs	r3, #4
 800453e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004542:	e01a      	b.n	800457a <UART_SetConfig+0x2e6>
 8004544:	2308      	movs	r3, #8
 8004546:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800454a:	e016      	b.n	800457a <UART_SetConfig+0x2e6>
 800454c:	2310      	movs	r3, #16
 800454e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004552:	e012      	b.n	800457a <UART_SetConfig+0x2e6>
 8004554:	efff69f3 	.word	0xefff69f3
 8004558:	40008000 	.word	0x40008000
 800455c:	40013800 	.word	0x40013800
 8004560:	40021000 	.word	0x40021000
 8004564:	40004400 	.word	0x40004400
 8004568:	40004800 	.word	0x40004800
 800456c:	40004c00 	.word	0x40004c00
 8004570:	40005000 	.word	0x40005000
 8004574:	2310      	movs	r3, #16
 8004576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a9f      	ldr	r2, [pc, #636]	; (80047fc <UART_SetConfig+0x568>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d17a      	bne.n	800467a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004584:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004588:	2b08      	cmp	r3, #8
 800458a:	d824      	bhi.n	80045d6 <UART_SetConfig+0x342>
 800458c:	a201      	add	r2, pc, #4	; (adr r2, 8004594 <UART_SetConfig+0x300>)
 800458e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004592:	bf00      	nop
 8004594:	080045b9 	.word	0x080045b9
 8004598:	080045d7 	.word	0x080045d7
 800459c:	080045c1 	.word	0x080045c1
 80045a0:	080045d7 	.word	0x080045d7
 80045a4:	080045c7 	.word	0x080045c7
 80045a8:	080045d7 	.word	0x080045d7
 80045ac:	080045d7 	.word	0x080045d7
 80045b0:	080045d7 	.word	0x080045d7
 80045b4:	080045cf 	.word	0x080045cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045b8:	f7fe ff30 	bl	800341c <HAL_RCC_GetPCLK1Freq>
 80045bc:	61f8      	str	r0, [r7, #28]
        break;
 80045be:	e010      	b.n	80045e2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045c0:	4b8f      	ldr	r3, [pc, #572]	; (8004800 <UART_SetConfig+0x56c>)
 80045c2:	61fb      	str	r3, [r7, #28]
        break;
 80045c4:	e00d      	b.n	80045e2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045c6:	f7fe fe91 	bl	80032ec <HAL_RCC_GetSysClockFreq>
 80045ca:	61f8      	str	r0, [r7, #28]
        break;
 80045cc:	e009      	b.n	80045e2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045d2:	61fb      	str	r3, [r7, #28]
        break;
 80045d4:	e005      	b.n	80045e2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80045e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f000 80fb 	beq.w	80047e0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	4613      	mov	r3, r2
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	4413      	add	r3, r2
 80045f4:	69fa      	ldr	r2, [r7, #28]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d305      	bcc.n	8004606 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004600:	69fa      	ldr	r2, [r7, #28]
 8004602:	429a      	cmp	r2, r3
 8004604:	d903      	bls.n	800460e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800460c:	e0e8      	b.n	80047e0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	2200      	movs	r2, #0
 8004612:	461c      	mov	r4, r3
 8004614:	4615      	mov	r5, r2
 8004616:	f04f 0200 	mov.w	r2, #0
 800461a:	f04f 0300 	mov.w	r3, #0
 800461e:	022b      	lsls	r3, r5, #8
 8004620:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004624:	0222      	lsls	r2, r4, #8
 8004626:	68f9      	ldr	r1, [r7, #12]
 8004628:	6849      	ldr	r1, [r1, #4]
 800462a:	0849      	lsrs	r1, r1, #1
 800462c:	2000      	movs	r0, #0
 800462e:	4688      	mov	r8, r1
 8004630:	4681      	mov	r9, r0
 8004632:	eb12 0a08 	adds.w	sl, r2, r8
 8004636:	eb43 0b09 	adc.w	fp, r3, r9
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	603b      	str	r3, [r7, #0]
 8004642:	607a      	str	r2, [r7, #4]
 8004644:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004648:	4650      	mov	r0, sl
 800464a:	4659      	mov	r1, fp
 800464c:	f7fb fe10 	bl	8000270 <__aeabi_uldivmod>
 8004650:	4602      	mov	r2, r0
 8004652:	460b      	mov	r3, r1
 8004654:	4613      	mov	r3, r2
 8004656:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800465e:	d308      	bcc.n	8004672 <UART_SetConfig+0x3de>
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004666:	d204      	bcs.n	8004672 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	60da      	str	r2, [r3, #12]
 8004670:	e0b6      	b.n	80047e0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004678:	e0b2      	b.n	80047e0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004682:	d15e      	bne.n	8004742 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004684:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004688:	2b08      	cmp	r3, #8
 800468a:	d828      	bhi.n	80046de <UART_SetConfig+0x44a>
 800468c:	a201      	add	r2, pc, #4	; (adr r2, 8004694 <UART_SetConfig+0x400>)
 800468e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004692:	bf00      	nop
 8004694:	080046b9 	.word	0x080046b9
 8004698:	080046c1 	.word	0x080046c1
 800469c:	080046c9 	.word	0x080046c9
 80046a0:	080046df 	.word	0x080046df
 80046a4:	080046cf 	.word	0x080046cf
 80046a8:	080046df 	.word	0x080046df
 80046ac:	080046df 	.word	0x080046df
 80046b0:	080046df 	.word	0x080046df
 80046b4:	080046d7 	.word	0x080046d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046b8:	f7fe feb0 	bl	800341c <HAL_RCC_GetPCLK1Freq>
 80046bc:	61f8      	str	r0, [r7, #28]
        break;
 80046be:	e014      	b.n	80046ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046c0:	f7fe fec2 	bl	8003448 <HAL_RCC_GetPCLK2Freq>
 80046c4:	61f8      	str	r0, [r7, #28]
        break;
 80046c6:	e010      	b.n	80046ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046c8:	4b4d      	ldr	r3, [pc, #308]	; (8004800 <UART_SetConfig+0x56c>)
 80046ca:	61fb      	str	r3, [r7, #28]
        break;
 80046cc:	e00d      	b.n	80046ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046ce:	f7fe fe0d 	bl	80032ec <HAL_RCC_GetSysClockFreq>
 80046d2:	61f8      	str	r0, [r7, #28]
        break;
 80046d4:	e009      	b.n	80046ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046da:	61fb      	str	r3, [r7, #28]
        break;
 80046dc:	e005      	b.n	80046ea <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80046de:	2300      	movs	r3, #0
 80046e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80046e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d077      	beq.n	80047e0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	005a      	lsls	r2, r3, #1
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	085b      	lsrs	r3, r3, #1
 80046fa:	441a      	add	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	fbb2 f3f3 	udiv	r3, r2, r3
 8004704:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	2b0f      	cmp	r3, #15
 800470a:	d916      	bls.n	800473a <UART_SetConfig+0x4a6>
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004712:	d212      	bcs.n	800473a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	b29b      	uxth	r3, r3
 8004718:	f023 030f 	bic.w	r3, r3, #15
 800471c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	085b      	lsrs	r3, r3, #1
 8004722:	b29b      	uxth	r3, r3
 8004724:	f003 0307 	and.w	r3, r3, #7
 8004728:	b29a      	uxth	r2, r3
 800472a:	8afb      	ldrh	r3, [r7, #22]
 800472c:	4313      	orrs	r3, r2
 800472e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	8afa      	ldrh	r2, [r7, #22]
 8004736:	60da      	str	r2, [r3, #12]
 8004738:	e052      	b.n	80047e0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004740:	e04e      	b.n	80047e0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004742:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004746:	2b08      	cmp	r3, #8
 8004748:	d827      	bhi.n	800479a <UART_SetConfig+0x506>
 800474a:	a201      	add	r2, pc, #4	; (adr r2, 8004750 <UART_SetConfig+0x4bc>)
 800474c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004750:	08004775 	.word	0x08004775
 8004754:	0800477d 	.word	0x0800477d
 8004758:	08004785 	.word	0x08004785
 800475c:	0800479b 	.word	0x0800479b
 8004760:	0800478b 	.word	0x0800478b
 8004764:	0800479b 	.word	0x0800479b
 8004768:	0800479b 	.word	0x0800479b
 800476c:	0800479b 	.word	0x0800479b
 8004770:	08004793 	.word	0x08004793
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004774:	f7fe fe52 	bl	800341c <HAL_RCC_GetPCLK1Freq>
 8004778:	61f8      	str	r0, [r7, #28]
        break;
 800477a:	e014      	b.n	80047a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800477c:	f7fe fe64 	bl	8003448 <HAL_RCC_GetPCLK2Freq>
 8004780:	61f8      	str	r0, [r7, #28]
        break;
 8004782:	e010      	b.n	80047a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004784:	4b1e      	ldr	r3, [pc, #120]	; (8004800 <UART_SetConfig+0x56c>)
 8004786:	61fb      	str	r3, [r7, #28]
        break;
 8004788:	e00d      	b.n	80047a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800478a:	f7fe fdaf 	bl	80032ec <HAL_RCC_GetSysClockFreq>
 800478e:	61f8      	str	r0, [r7, #28]
        break;
 8004790:	e009      	b.n	80047a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004796:	61fb      	str	r3, [r7, #28]
        break;
 8004798:	e005      	b.n	80047a6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800479a:	2300      	movs	r3, #0
 800479c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80047a4:	bf00      	nop
    }

    if (pclk != 0U)
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d019      	beq.n	80047e0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	085a      	lsrs	r2, r3, #1
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	441a      	add	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80047be:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	2b0f      	cmp	r3, #15
 80047c4:	d909      	bls.n	80047da <UART_SetConfig+0x546>
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047cc:	d205      	bcs.n	80047da <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	60da      	str	r2, [r3, #12]
 80047d8:	e002      	b.n	80047e0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80047ec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3728      	adds	r7, #40	; 0x28
 80047f4:	46bd      	mov	sp, r7
 80047f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047fa:	bf00      	nop
 80047fc:	40008000 	.word	0x40008000
 8004800:	00f42400 	.word	0x00f42400

08004804 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00a      	beq.n	800482e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	430a      	orrs	r2, r1
 800482c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00a      	beq.n	8004850 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	430a      	orrs	r2, r1
 800484e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004854:	f003 0304 	and.w	r3, r3, #4
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00a      	beq.n	8004872 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	430a      	orrs	r2, r1
 8004870:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004876:	f003 0308 	and.w	r3, r3, #8
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00a      	beq.n	8004894 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	430a      	orrs	r2, r1
 8004892:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004898:	f003 0310 	and.w	r3, r3, #16
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00a      	beq.n	80048b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	430a      	orrs	r2, r1
 80048b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	f003 0320 	and.w	r3, r3, #32
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00a      	beq.n	80048d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	430a      	orrs	r2, r1
 80048d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d01a      	beq.n	800491a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	430a      	orrs	r2, r1
 80048f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004902:	d10a      	bne.n	800491a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	430a      	orrs	r2, r1
 8004918:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00a      	beq.n	800493c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	430a      	orrs	r2, r1
 800493a:	605a      	str	r2, [r3, #4]
  }
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b086      	sub	sp, #24
 800494c:	af02      	add	r7, sp, #8
 800494e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004958:	f7fc fa88 	bl	8000e6c <HAL_GetTick>
 800495c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0308 	and.w	r3, r3, #8
 8004968:	2b08      	cmp	r3, #8
 800496a:	d10e      	bne.n	800498a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800496c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f82d 	bl	80049da <UART_WaitOnFlagUntilTimeout>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e023      	b.n	80049d2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0304 	and.w	r3, r3, #4
 8004994:	2b04      	cmp	r3, #4
 8004996:	d10e      	bne.n	80049b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004998:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800499c:	9300      	str	r3, [sp, #0]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f817 	bl	80049da <UART_WaitOnFlagUntilTimeout>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e00d      	b.n	80049d2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2220      	movs	r2, #32
 80049ba:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2220      	movs	r2, #32
 80049c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b09c      	sub	sp, #112	; 0x70
 80049de:	af00      	add	r7, sp, #0
 80049e0:	60f8      	str	r0, [r7, #12]
 80049e2:	60b9      	str	r1, [r7, #8]
 80049e4:	603b      	str	r3, [r7, #0]
 80049e6:	4613      	mov	r3, r2
 80049e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049ea:	e0a5      	b.n	8004b38 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f2:	f000 80a1 	beq.w	8004b38 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049f6:	f7fc fa39 	bl	8000e6c <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d302      	bcc.n	8004a0c <UART_WaitOnFlagUntilTimeout+0x32>
 8004a06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d13e      	bne.n	8004a8a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a14:	e853 3f00 	ldrex	r3, [r3]
 8004a18:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004a1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a20:	667b      	str	r3, [r7, #100]	; 0x64
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	461a      	mov	r2, r3
 8004a28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a2c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004a30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a32:	e841 2300 	strex	r3, r2, [r1]
 8004a36:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004a38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1e6      	bne.n	8004a0c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	3308      	adds	r3, #8
 8004a44:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a48:	e853 3f00 	ldrex	r3, [r3]
 8004a4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a50:	f023 0301 	bic.w	r3, r3, #1
 8004a54:	663b      	str	r3, [r7, #96]	; 0x60
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	3308      	adds	r3, #8
 8004a5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004a5e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004a60:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004a64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a66:	e841 2300 	strex	r3, r2, [r1]
 8004a6a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004a6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1e5      	bne.n	8004a3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2220      	movs	r2, #32
 8004a76:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e067      	b.n	8004b5a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0304 	and.w	r3, r3, #4
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d04f      	beq.n	8004b38 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	69db      	ldr	r3, [r3, #28]
 8004a9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aa6:	d147      	bne.n	8004b38 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ab0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aba:	e853 3f00 	ldrex	r3, [r3]
 8004abe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ac6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	461a      	mov	r2, r3
 8004ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ad0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ad2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ad6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ad8:	e841 2300 	strex	r3, r2, [r1]
 8004adc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1e6      	bne.n	8004ab2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	3308      	adds	r3, #8
 8004aea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	e853 3f00 	ldrex	r3, [r3]
 8004af2:	613b      	str	r3, [r7, #16]
   return(result);
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	f023 0301 	bic.w	r3, r3, #1
 8004afa:	66bb      	str	r3, [r7, #104]	; 0x68
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	3308      	adds	r3, #8
 8004b02:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004b04:	623a      	str	r2, [r7, #32]
 8004b06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b08:	69f9      	ldr	r1, [r7, #28]
 8004b0a:	6a3a      	ldr	r2, [r7, #32]
 8004b0c:	e841 2300 	strex	r3, r2, [r1]
 8004b10:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1e5      	bne.n	8004ae4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2220      	movs	r2, #32
 8004b22:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2220      	movs	r2, #32
 8004b28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e010      	b.n	8004b5a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	69da      	ldr	r2, [r3, #28]
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	4013      	ands	r3, r2
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	bf0c      	ite	eq
 8004b48:	2301      	moveq	r3, #1
 8004b4a:	2300      	movne	r3, #0
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	461a      	mov	r2, r3
 8004b50:	79fb      	ldrb	r3, [r7, #7]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	f43f af4a 	beq.w	80049ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3770      	adds	r7, #112	; 0x70
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
	...

08004b64 <__errno>:
 8004b64:	4b01      	ldr	r3, [pc, #4]	; (8004b6c <__errno+0x8>)
 8004b66:	6818      	ldr	r0, [r3, #0]
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	2000000c 	.word	0x2000000c

08004b70 <__libc_init_array>:
 8004b70:	b570      	push	{r4, r5, r6, lr}
 8004b72:	4d0d      	ldr	r5, [pc, #52]	; (8004ba8 <__libc_init_array+0x38>)
 8004b74:	4c0d      	ldr	r4, [pc, #52]	; (8004bac <__libc_init_array+0x3c>)
 8004b76:	1b64      	subs	r4, r4, r5
 8004b78:	10a4      	asrs	r4, r4, #2
 8004b7a:	2600      	movs	r6, #0
 8004b7c:	42a6      	cmp	r6, r4
 8004b7e:	d109      	bne.n	8004b94 <__libc_init_array+0x24>
 8004b80:	4d0b      	ldr	r5, [pc, #44]	; (8004bb0 <__libc_init_array+0x40>)
 8004b82:	4c0c      	ldr	r4, [pc, #48]	; (8004bb4 <__libc_init_array+0x44>)
 8004b84:	f000 ffae 	bl	8005ae4 <_init>
 8004b88:	1b64      	subs	r4, r4, r5
 8004b8a:	10a4      	asrs	r4, r4, #2
 8004b8c:	2600      	movs	r6, #0
 8004b8e:	42a6      	cmp	r6, r4
 8004b90:	d105      	bne.n	8004b9e <__libc_init_array+0x2e>
 8004b92:	bd70      	pop	{r4, r5, r6, pc}
 8004b94:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b98:	4798      	blx	r3
 8004b9a:	3601      	adds	r6, #1
 8004b9c:	e7ee      	b.n	8004b7c <__libc_init_array+0xc>
 8004b9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ba2:	4798      	blx	r3
 8004ba4:	3601      	adds	r6, #1
 8004ba6:	e7f2      	b.n	8004b8e <__libc_init_array+0x1e>
 8004ba8:	08005c00 	.word	0x08005c00
 8004bac:	08005c00 	.word	0x08005c00
 8004bb0:	08005c00 	.word	0x08005c00
 8004bb4:	08005c04 	.word	0x08005c04

08004bb8 <memset>:
 8004bb8:	4402      	add	r2, r0
 8004bba:	4603      	mov	r3, r0
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d100      	bne.n	8004bc2 <memset+0xa>
 8004bc0:	4770      	bx	lr
 8004bc2:	f803 1b01 	strb.w	r1, [r3], #1
 8004bc6:	e7f9      	b.n	8004bbc <memset+0x4>

08004bc8 <iprintf>:
 8004bc8:	b40f      	push	{r0, r1, r2, r3}
 8004bca:	4b0a      	ldr	r3, [pc, #40]	; (8004bf4 <iprintf+0x2c>)
 8004bcc:	b513      	push	{r0, r1, r4, lr}
 8004bce:	681c      	ldr	r4, [r3, #0]
 8004bd0:	b124      	cbz	r4, 8004bdc <iprintf+0x14>
 8004bd2:	69a3      	ldr	r3, [r4, #24]
 8004bd4:	b913      	cbnz	r3, 8004bdc <iprintf+0x14>
 8004bd6:	4620      	mov	r0, r4
 8004bd8:	f000 f866 	bl	8004ca8 <__sinit>
 8004bdc:	ab05      	add	r3, sp, #20
 8004bde:	9a04      	ldr	r2, [sp, #16]
 8004be0:	68a1      	ldr	r1, [r4, #8]
 8004be2:	9301      	str	r3, [sp, #4]
 8004be4:	4620      	mov	r0, r4
 8004be6:	f000 f9bd 	bl	8004f64 <_vfiprintf_r>
 8004bea:	b002      	add	sp, #8
 8004bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bf0:	b004      	add	sp, #16
 8004bf2:	4770      	bx	lr
 8004bf4:	2000000c 	.word	0x2000000c

08004bf8 <std>:
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	b510      	push	{r4, lr}
 8004bfc:	4604      	mov	r4, r0
 8004bfe:	e9c0 3300 	strd	r3, r3, [r0]
 8004c02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c06:	6083      	str	r3, [r0, #8]
 8004c08:	8181      	strh	r1, [r0, #12]
 8004c0a:	6643      	str	r3, [r0, #100]	; 0x64
 8004c0c:	81c2      	strh	r2, [r0, #14]
 8004c0e:	6183      	str	r3, [r0, #24]
 8004c10:	4619      	mov	r1, r3
 8004c12:	2208      	movs	r2, #8
 8004c14:	305c      	adds	r0, #92	; 0x5c
 8004c16:	f7ff ffcf 	bl	8004bb8 <memset>
 8004c1a:	4b05      	ldr	r3, [pc, #20]	; (8004c30 <std+0x38>)
 8004c1c:	6263      	str	r3, [r4, #36]	; 0x24
 8004c1e:	4b05      	ldr	r3, [pc, #20]	; (8004c34 <std+0x3c>)
 8004c20:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c22:	4b05      	ldr	r3, [pc, #20]	; (8004c38 <std+0x40>)
 8004c24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c26:	4b05      	ldr	r3, [pc, #20]	; (8004c3c <std+0x44>)
 8004c28:	6224      	str	r4, [r4, #32]
 8004c2a:	6323      	str	r3, [r4, #48]	; 0x30
 8004c2c:	bd10      	pop	{r4, pc}
 8004c2e:	bf00      	nop
 8004c30:	0800550d 	.word	0x0800550d
 8004c34:	0800552f 	.word	0x0800552f
 8004c38:	08005567 	.word	0x08005567
 8004c3c:	0800558b 	.word	0x0800558b

08004c40 <_cleanup_r>:
 8004c40:	4901      	ldr	r1, [pc, #4]	; (8004c48 <_cleanup_r+0x8>)
 8004c42:	f000 b8af 	b.w	8004da4 <_fwalk_reent>
 8004c46:	bf00      	nop
 8004c48:	08005865 	.word	0x08005865

08004c4c <__sfmoreglue>:
 8004c4c:	b570      	push	{r4, r5, r6, lr}
 8004c4e:	2268      	movs	r2, #104	; 0x68
 8004c50:	1e4d      	subs	r5, r1, #1
 8004c52:	4355      	muls	r5, r2
 8004c54:	460e      	mov	r6, r1
 8004c56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004c5a:	f000 f8e5 	bl	8004e28 <_malloc_r>
 8004c5e:	4604      	mov	r4, r0
 8004c60:	b140      	cbz	r0, 8004c74 <__sfmoreglue+0x28>
 8004c62:	2100      	movs	r1, #0
 8004c64:	e9c0 1600 	strd	r1, r6, [r0]
 8004c68:	300c      	adds	r0, #12
 8004c6a:	60a0      	str	r0, [r4, #8]
 8004c6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004c70:	f7ff ffa2 	bl	8004bb8 <memset>
 8004c74:	4620      	mov	r0, r4
 8004c76:	bd70      	pop	{r4, r5, r6, pc}

08004c78 <__sfp_lock_acquire>:
 8004c78:	4801      	ldr	r0, [pc, #4]	; (8004c80 <__sfp_lock_acquire+0x8>)
 8004c7a:	f000 b8b3 	b.w	8004de4 <__retarget_lock_acquire_recursive>
 8004c7e:	bf00      	nop
 8004c80:	200001a5 	.word	0x200001a5

08004c84 <__sfp_lock_release>:
 8004c84:	4801      	ldr	r0, [pc, #4]	; (8004c8c <__sfp_lock_release+0x8>)
 8004c86:	f000 b8ae 	b.w	8004de6 <__retarget_lock_release_recursive>
 8004c8a:	bf00      	nop
 8004c8c:	200001a5 	.word	0x200001a5

08004c90 <__sinit_lock_acquire>:
 8004c90:	4801      	ldr	r0, [pc, #4]	; (8004c98 <__sinit_lock_acquire+0x8>)
 8004c92:	f000 b8a7 	b.w	8004de4 <__retarget_lock_acquire_recursive>
 8004c96:	bf00      	nop
 8004c98:	200001a6 	.word	0x200001a6

08004c9c <__sinit_lock_release>:
 8004c9c:	4801      	ldr	r0, [pc, #4]	; (8004ca4 <__sinit_lock_release+0x8>)
 8004c9e:	f000 b8a2 	b.w	8004de6 <__retarget_lock_release_recursive>
 8004ca2:	bf00      	nop
 8004ca4:	200001a6 	.word	0x200001a6

08004ca8 <__sinit>:
 8004ca8:	b510      	push	{r4, lr}
 8004caa:	4604      	mov	r4, r0
 8004cac:	f7ff fff0 	bl	8004c90 <__sinit_lock_acquire>
 8004cb0:	69a3      	ldr	r3, [r4, #24]
 8004cb2:	b11b      	cbz	r3, 8004cbc <__sinit+0x14>
 8004cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cb8:	f7ff bff0 	b.w	8004c9c <__sinit_lock_release>
 8004cbc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004cc0:	6523      	str	r3, [r4, #80]	; 0x50
 8004cc2:	4b13      	ldr	r3, [pc, #76]	; (8004d10 <__sinit+0x68>)
 8004cc4:	4a13      	ldr	r2, [pc, #76]	; (8004d14 <__sinit+0x6c>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	62a2      	str	r2, [r4, #40]	; 0x28
 8004cca:	42a3      	cmp	r3, r4
 8004ccc:	bf04      	itt	eq
 8004cce:	2301      	moveq	r3, #1
 8004cd0:	61a3      	streq	r3, [r4, #24]
 8004cd2:	4620      	mov	r0, r4
 8004cd4:	f000 f820 	bl	8004d18 <__sfp>
 8004cd8:	6060      	str	r0, [r4, #4]
 8004cda:	4620      	mov	r0, r4
 8004cdc:	f000 f81c 	bl	8004d18 <__sfp>
 8004ce0:	60a0      	str	r0, [r4, #8]
 8004ce2:	4620      	mov	r0, r4
 8004ce4:	f000 f818 	bl	8004d18 <__sfp>
 8004ce8:	2200      	movs	r2, #0
 8004cea:	60e0      	str	r0, [r4, #12]
 8004cec:	2104      	movs	r1, #4
 8004cee:	6860      	ldr	r0, [r4, #4]
 8004cf0:	f7ff ff82 	bl	8004bf8 <std>
 8004cf4:	68a0      	ldr	r0, [r4, #8]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	2109      	movs	r1, #9
 8004cfa:	f7ff ff7d 	bl	8004bf8 <std>
 8004cfe:	68e0      	ldr	r0, [r4, #12]
 8004d00:	2202      	movs	r2, #2
 8004d02:	2112      	movs	r1, #18
 8004d04:	f7ff ff78 	bl	8004bf8 <std>
 8004d08:	2301      	movs	r3, #1
 8004d0a:	61a3      	str	r3, [r4, #24]
 8004d0c:	e7d2      	b.n	8004cb4 <__sinit+0xc>
 8004d0e:	bf00      	nop
 8004d10:	08005b60 	.word	0x08005b60
 8004d14:	08004c41 	.word	0x08004c41

08004d18 <__sfp>:
 8004d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d1a:	4607      	mov	r7, r0
 8004d1c:	f7ff ffac 	bl	8004c78 <__sfp_lock_acquire>
 8004d20:	4b1e      	ldr	r3, [pc, #120]	; (8004d9c <__sfp+0x84>)
 8004d22:	681e      	ldr	r6, [r3, #0]
 8004d24:	69b3      	ldr	r3, [r6, #24]
 8004d26:	b913      	cbnz	r3, 8004d2e <__sfp+0x16>
 8004d28:	4630      	mov	r0, r6
 8004d2a:	f7ff ffbd 	bl	8004ca8 <__sinit>
 8004d2e:	3648      	adds	r6, #72	; 0x48
 8004d30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004d34:	3b01      	subs	r3, #1
 8004d36:	d503      	bpl.n	8004d40 <__sfp+0x28>
 8004d38:	6833      	ldr	r3, [r6, #0]
 8004d3a:	b30b      	cbz	r3, 8004d80 <__sfp+0x68>
 8004d3c:	6836      	ldr	r6, [r6, #0]
 8004d3e:	e7f7      	b.n	8004d30 <__sfp+0x18>
 8004d40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004d44:	b9d5      	cbnz	r5, 8004d7c <__sfp+0x64>
 8004d46:	4b16      	ldr	r3, [pc, #88]	; (8004da0 <__sfp+0x88>)
 8004d48:	60e3      	str	r3, [r4, #12]
 8004d4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004d4e:	6665      	str	r5, [r4, #100]	; 0x64
 8004d50:	f000 f847 	bl	8004de2 <__retarget_lock_init_recursive>
 8004d54:	f7ff ff96 	bl	8004c84 <__sfp_lock_release>
 8004d58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004d5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004d60:	6025      	str	r5, [r4, #0]
 8004d62:	61a5      	str	r5, [r4, #24]
 8004d64:	2208      	movs	r2, #8
 8004d66:	4629      	mov	r1, r5
 8004d68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004d6c:	f7ff ff24 	bl	8004bb8 <memset>
 8004d70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004d74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004d78:	4620      	mov	r0, r4
 8004d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d7c:	3468      	adds	r4, #104	; 0x68
 8004d7e:	e7d9      	b.n	8004d34 <__sfp+0x1c>
 8004d80:	2104      	movs	r1, #4
 8004d82:	4638      	mov	r0, r7
 8004d84:	f7ff ff62 	bl	8004c4c <__sfmoreglue>
 8004d88:	4604      	mov	r4, r0
 8004d8a:	6030      	str	r0, [r6, #0]
 8004d8c:	2800      	cmp	r0, #0
 8004d8e:	d1d5      	bne.n	8004d3c <__sfp+0x24>
 8004d90:	f7ff ff78 	bl	8004c84 <__sfp_lock_release>
 8004d94:	230c      	movs	r3, #12
 8004d96:	603b      	str	r3, [r7, #0]
 8004d98:	e7ee      	b.n	8004d78 <__sfp+0x60>
 8004d9a:	bf00      	nop
 8004d9c:	08005b60 	.word	0x08005b60
 8004da0:	ffff0001 	.word	0xffff0001

08004da4 <_fwalk_reent>:
 8004da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004da8:	4606      	mov	r6, r0
 8004daa:	4688      	mov	r8, r1
 8004dac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004db0:	2700      	movs	r7, #0
 8004db2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004db6:	f1b9 0901 	subs.w	r9, r9, #1
 8004dba:	d505      	bpl.n	8004dc8 <_fwalk_reent+0x24>
 8004dbc:	6824      	ldr	r4, [r4, #0]
 8004dbe:	2c00      	cmp	r4, #0
 8004dc0:	d1f7      	bne.n	8004db2 <_fwalk_reent+0xe>
 8004dc2:	4638      	mov	r0, r7
 8004dc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004dc8:	89ab      	ldrh	r3, [r5, #12]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d907      	bls.n	8004dde <_fwalk_reent+0x3a>
 8004dce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	d003      	beq.n	8004dde <_fwalk_reent+0x3a>
 8004dd6:	4629      	mov	r1, r5
 8004dd8:	4630      	mov	r0, r6
 8004dda:	47c0      	blx	r8
 8004ddc:	4307      	orrs	r7, r0
 8004dde:	3568      	adds	r5, #104	; 0x68
 8004de0:	e7e9      	b.n	8004db6 <_fwalk_reent+0x12>

08004de2 <__retarget_lock_init_recursive>:
 8004de2:	4770      	bx	lr

08004de4 <__retarget_lock_acquire_recursive>:
 8004de4:	4770      	bx	lr

08004de6 <__retarget_lock_release_recursive>:
 8004de6:	4770      	bx	lr

08004de8 <sbrk_aligned>:
 8004de8:	b570      	push	{r4, r5, r6, lr}
 8004dea:	4e0e      	ldr	r6, [pc, #56]	; (8004e24 <sbrk_aligned+0x3c>)
 8004dec:	460c      	mov	r4, r1
 8004dee:	6831      	ldr	r1, [r6, #0]
 8004df0:	4605      	mov	r5, r0
 8004df2:	b911      	cbnz	r1, 8004dfa <sbrk_aligned+0x12>
 8004df4:	f000 fb7a 	bl	80054ec <_sbrk_r>
 8004df8:	6030      	str	r0, [r6, #0]
 8004dfa:	4621      	mov	r1, r4
 8004dfc:	4628      	mov	r0, r5
 8004dfe:	f000 fb75 	bl	80054ec <_sbrk_r>
 8004e02:	1c43      	adds	r3, r0, #1
 8004e04:	d00a      	beq.n	8004e1c <sbrk_aligned+0x34>
 8004e06:	1cc4      	adds	r4, r0, #3
 8004e08:	f024 0403 	bic.w	r4, r4, #3
 8004e0c:	42a0      	cmp	r0, r4
 8004e0e:	d007      	beq.n	8004e20 <sbrk_aligned+0x38>
 8004e10:	1a21      	subs	r1, r4, r0
 8004e12:	4628      	mov	r0, r5
 8004e14:	f000 fb6a 	bl	80054ec <_sbrk_r>
 8004e18:	3001      	adds	r0, #1
 8004e1a:	d101      	bne.n	8004e20 <sbrk_aligned+0x38>
 8004e1c:	f04f 34ff 	mov.w	r4, #4294967295
 8004e20:	4620      	mov	r0, r4
 8004e22:	bd70      	pop	{r4, r5, r6, pc}
 8004e24:	200001ac 	.word	0x200001ac

08004e28 <_malloc_r>:
 8004e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e2c:	1ccd      	adds	r5, r1, #3
 8004e2e:	f025 0503 	bic.w	r5, r5, #3
 8004e32:	3508      	adds	r5, #8
 8004e34:	2d0c      	cmp	r5, #12
 8004e36:	bf38      	it	cc
 8004e38:	250c      	movcc	r5, #12
 8004e3a:	2d00      	cmp	r5, #0
 8004e3c:	4607      	mov	r7, r0
 8004e3e:	db01      	blt.n	8004e44 <_malloc_r+0x1c>
 8004e40:	42a9      	cmp	r1, r5
 8004e42:	d905      	bls.n	8004e50 <_malloc_r+0x28>
 8004e44:	230c      	movs	r3, #12
 8004e46:	603b      	str	r3, [r7, #0]
 8004e48:	2600      	movs	r6, #0
 8004e4a:	4630      	mov	r0, r6
 8004e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e50:	4e2e      	ldr	r6, [pc, #184]	; (8004f0c <_malloc_r+0xe4>)
 8004e52:	f000 fdbb 	bl	80059cc <__malloc_lock>
 8004e56:	6833      	ldr	r3, [r6, #0]
 8004e58:	461c      	mov	r4, r3
 8004e5a:	bb34      	cbnz	r4, 8004eaa <_malloc_r+0x82>
 8004e5c:	4629      	mov	r1, r5
 8004e5e:	4638      	mov	r0, r7
 8004e60:	f7ff ffc2 	bl	8004de8 <sbrk_aligned>
 8004e64:	1c43      	adds	r3, r0, #1
 8004e66:	4604      	mov	r4, r0
 8004e68:	d14d      	bne.n	8004f06 <_malloc_r+0xde>
 8004e6a:	6834      	ldr	r4, [r6, #0]
 8004e6c:	4626      	mov	r6, r4
 8004e6e:	2e00      	cmp	r6, #0
 8004e70:	d140      	bne.n	8004ef4 <_malloc_r+0xcc>
 8004e72:	6823      	ldr	r3, [r4, #0]
 8004e74:	4631      	mov	r1, r6
 8004e76:	4638      	mov	r0, r7
 8004e78:	eb04 0803 	add.w	r8, r4, r3
 8004e7c:	f000 fb36 	bl	80054ec <_sbrk_r>
 8004e80:	4580      	cmp	r8, r0
 8004e82:	d13a      	bne.n	8004efa <_malloc_r+0xd2>
 8004e84:	6821      	ldr	r1, [r4, #0]
 8004e86:	3503      	adds	r5, #3
 8004e88:	1a6d      	subs	r5, r5, r1
 8004e8a:	f025 0503 	bic.w	r5, r5, #3
 8004e8e:	3508      	adds	r5, #8
 8004e90:	2d0c      	cmp	r5, #12
 8004e92:	bf38      	it	cc
 8004e94:	250c      	movcc	r5, #12
 8004e96:	4629      	mov	r1, r5
 8004e98:	4638      	mov	r0, r7
 8004e9a:	f7ff ffa5 	bl	8004de8 <sbrk_aligned>
 8004e9e:	3001      	adds	r0, #1
 8004ea0:	d02b      	beq.n	8004efa <_malloc_r+0xd2>
 8004ea2:	6823      	ldr	r3, [r4, #0]
 8004ea4:	442b      	add	r3, r5
 8004ea6:	6023      	str	r3, [r4, #0]
 8004ea8:	e00e      	b.n	8004ec8 <_malloc_r+0xa0>
 8004eaa:	6822      	ldr	r2, [r4, #0]
 8004eac:	1b52      	subs	r2, r2, r5
 8004eae:	d41e      	bmi.n	8004eee <_malloc_r+0xc6>
 8004eb0:	2a0b      	cmp	r2, #11
 8004eb2:	d916      	bls.n	8004ee2 <_malloc_r+0xba>
 8004eb4:	1961      	adds	r1, r4, r5
 8004eb6:	42a3      	cmp	r3, r4
 8004eb8:	6025      	str	r5, [r4, #0]
 8004eba:	bf18      	it	ne
 8004ebc:	6059      	strne	r1, [r3, #4]
 8004ebe:	6863      	ldr	r3, [r4, #4]
 8004ec0:	bf08      	it	eq
 8004ec2:	6031      	streq	r1, [r6, #0]
 8004ec4:	5162      	str	r2, [r4, r5]
 8004ec6:	604b      	str	r3, [r1, #4]
 8004ec8:	4638      	mov	r0, r7
 8004eca:	f104 060b 	add.w	r6, r4, #11
 8004ece:	f000 fd83 	bl	80059d8 <__malloc_unlock>
 8004ed2:	f026 0607 	bic.w	r6, r6, #7
 8004ed6:	1d23      	adds	r3, r4, #4
 8004ed8:	1af2      	subs	r2, r6, r3
 8004eda:	d0b6      	beq.n	8004e4a <_malloc_r+0x22>
 8004edc:	1b9b      	subs	r3, r3, r6
 8004ede:	50a3      	str	r3, [r4, r2]
 8004ee0:	e7b3      	b.n	8004e4a <_malloc_r+0x22>
 8004ee2:	6862      	ldr	r2, [r4, #4]
 8004ee4:	42a3      	cmp	r3, r4
 8004ee6:	bf0c      	ite	eq
 8004ee8:	6032      	streq	r2, [r6, #0]
 8004eea:	605a      	strne	r2, [r3, #4]
 8004eec:	e7ec      	b.n	8004ec8 <_malloc_r+0xa0>
 8004eee:	4623      	mov	r3, r4
 8004ef0:	6864      	ldr	r4, [r4, #4]
 8004ef2:	e7b2      	b.n	8004e5a <_malloc_r+0x32>
 8004ef4:	4634      	mov	r4, r6
 8004ef6:	6876      	ldr	r6, [r6, #4]
 8004ef8:	e7b9      	b.n	8004e6e <_malloc_r+0x46>
 8004efa:	230c      	movs	r3, #12
 8004efc:	603b      	str	r3, [r7, #0]
 8004efe:	4638      	mov	r0, r7
 8004f00:	f000 fd6a 	bl	80059d8 <__malloc_unlock>
 8004f04:	e7a1      	b.n	8004e4a <_malloc_r+0x22>
 8004f06:	6025      	str	r5, [r4, #0]
 8004f08:	e7de      	b.n	8004ec8 <_malloc_r+0xa0>
 8004f0a:	bf00      	nop
 8004f0c:	200001a8 	.word	0x200001a8

08004f10 <__sfputc_r>:
 8004f10:	6893      	ldr	r3, [r2, #8]
 8004f12:	3b01      	subs	r3, #1
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	b410      	push	{r4}
 8004f18:	6093      	str	r3, [r2, #8]
 8004f1a:	da08      	bge.n	8004f2e <__sfputc_r+0x1e>
 8004f1c:	6994      	ldr	r4, [r2, #24]
 8004f1e:	42a3      	cmp	r3, r4
 8004f20:	db01      	blt.n	8004f26 <__sfputc_r+0x16>
 8004f22:	290a      	cmp	r1, #10
 8004f24:	d103      	bne.n	8004f2e <__sfputc_r+0x1e>
 8004f26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f2a:	f000 bb33 	b.w	8005594 <__swbuf_r>
 8004f2e:	6813      	ldr	r3, [r2, #0]
 8004f30:	1c58      	adds	r0, r3, #1
 8004f32:	6010      	str	r0, [r2, #0]
 8004f34:	7019      	strb	r1, [r3, #0]
 8004f36:	4608      	mov	r0, r1
 8004f38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <__sfputs_r>:
 8004f3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f40:	4606      	mov	r6, r0
 8004f42:	460f      	mov	r7, r1
 8004f44:	4614      	mov	r4, r2
 8004f46:	18d5      	adds	r5, r2, r3
 8004f48:	42ac      	cmp	r4, r5
 8004f4a:	d101      	bne.n	8004f50 <__sfputs_r+0x12>
 8004f4c:	2000      	movs	r0, #0
 8004f4e:	e007      	b.n	8004f60 <__sfputs_r+0x22>
 8004f50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f54:	463a      	mov	r2, r7
 8004f56:	4630      	mov	r0, r6
 8004f58:	f7ff ffda 	bl	8004f10 <__sfputc_r>
 8004f5c:	1c43      	adds	r3, r0, #1
 8004f5e:	d1f3      	bne.n	8004f48 <__sfputs_r+0xa>
 8004f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004f64 <_vfiprintf_r>:
 8004f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f68:	460d      	mov	r5, r1
 8004f6a:	b09d      	sub	sp, #116	; 0x74
 8004f6c:	4614      	mov	r4, r2
 8004f6e:	4698      	mov	r8, r3
 8004f70:	4606      	mov	r6, r0
 8004f72:	b118      	cbz	r0, 8004f7c <_vfiprintf_r+0x18>
 8004f74:	6983      	ldr	r3, [r0, #24]
 8004f76:	b90b      	cbnz	r3, 8004f7c <_vfiprintf_r+0x18>
 8004f78:	f7ff fe96 	bl	8004ca8 <__sinit>
 8004f7c:	4b89      	ldr	r3, [pc, #548]	; (80051a4 <_vfiprintf_r+0x240>)
 8004f7e:	429d      	cmp	r5, r3
 8004f80:	d11b      	bne.n	8004fba <_vfiprintf_r+0x56>
 8004f82:	6875      	ldr	r5, [r6, #4]
 8004f84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f86:	07d9      	lsls	r1, r3, #31
 8004f88:	d405      	bmi.n	8004f96 <_vfiprintf_r+0x32>
 8004f8a:	89ab      	ldrh	r3, [r5, #12]
 8004f8c:	059a      	lsls	r2, r3, #22
 8004f8e:	d402      	bmi.n	8004f96 <_vfiprintf_r+0x32>
 8004f90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f92:	f7ff ff27 	bl	8004de4 <__retarget_lock_acquire_recursive>
 8004f96:	89ab      	ldrh	r3, [r5, #12]
 8004f98:	071b      	lsls	r3, r3, #28
 8004f9a:	d501      	bpl.n	8004fa0 <_vfiprintf_r+0x3c>
 8004f9c:	692b      	ldr	r3, [r5, #16]
 8004f9e:	b9eb      	cbnz	r3, 8004fdc <_vfiprintf_r+0x78>
 8004fa0:	4629      	mov	r1, r5
 8004fa2:	4630      	mov	r0, r6
 8004fa4:	f000 fb5a 	bl	800565c <__swsetup_r>
 8004fa8:	b1c0      	cbz	r0, 8004fdc <_vfiprintf_r+0x78>
 8004faa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004fac:	07dc      	lsls	r4, r3, #31
 8004fae:	d50e      	bpl.n	8004fce <_vfiprintf_r+0x6a>
 8004fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb4:	b01d      	add	sp, #116	; 0x74
 8004fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fba:	4b7b      	ldr	r3, [pc, #492]	; (80051a8 <_vfiprintf_r+0x244>)
 8004fbc:	429d      	cmp	r5, r3
 8004fbe:	d101      	bne.n	8004fc4 <_vfiprintf_r+0x60>
 8004fc0:	68b5      	ldr	r5, [r6, #8]
 8004fc2:	e7df      	b.n	8004f84 <_vfiprintf_r+0x20>
 8004fc4:	4b79      	ldr	r3, [pc, #484]	; (80051ac <_vfiprintf_r+0x248>)
 8004fc6:	429d      	cmp	r5, r3
 8004fc8:	bf08      	it	eq
 8004fca:	68f5      	ldreq	r5, [r6, #12]
 8004fcc:	e7da      	b.n	8004f84 <_vfiprintf_r+0x20>
 8004fce:	89ab      	ldrh	r3, [r5, #12]
 8004fd0:	0598      	lsls	r0, r3, #22
 8004fd2:	d4ed      	bmi.n	8004fb0 <_vfiprintf_r+0x4c>
 8004fd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004fd6:	f7ff ff06 	bl	8004de6 <__retarget_lock_release_recursive>
 8004fda:	e7e9      	b.n	8004fb0 <_vfiprintf_r+0x4c>
 8004fdc:	2300      	movs	r3, #0
 8004fde:	9309      	str	r3, [sp, #36]	; 0x24
 8004fe0:	2320      	movs	r3, #32
 8004fe2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004fe6:	f8cd 800c 	str.w	r8, [sp, #12]
 8004fea:	2330      	movs	r3, #48	; 0x30
 8004fec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80051b0 <_vfiprintf_r+0x24c>
 8004ff0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ff4:	f04f 0901 	mov.w	r9, #1
 8004ff8:	4623      	mov	r3, r4
 8004ffa:	469a      	mov	sl, r3
 8004ffc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005000:	b10a      	cbz	r2, 8005006 <_vfiprintf_r+0xa2>
 8005002:	2a25      	cmp	r2, #37	; 0x25
 8005004:	d1f9      	bne.n	8004ffa <_vfiprintf_r+0x96>
 8005006:	ebba 0b04 	subs.w	fp, sl, r4
 800500a:	d00b      	beq.n	8005024 <_vfiprintf_r+0xc0>
 800500c:	465b      	mov	r3, fp
 800500e:	4622      	mov	r2, r4
 8005010:	4629      	mov	r1, r5
 8005012:	4630      	mov	r0, r6
 8005014:	f7ff ff93 	bl	8004f3e <__sfputs_r>
 8005018:	3001      	adds	r0, #1
 800501a:	f000 80aa 	beq.w	8005172 <_vfiprintf_r+0x20e>
 800501e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005020:	445a      	add	r2, fp
 8005022:	9209      	str	r2, [sp, #36]	; 0x24
 8005024:	f89a 3000 	ldrb.w	r3, [sl]
 8005028:	2b00      	cmp	r3, #0
 800502a:	f000 80a2 	beq.w	8005172 <_vfiprintf_r+0x20e>
 800502e:	2300      	movs	r3, #0
 8005030:	f04f 32ff 	mov.w	r2, #4294967295
 8005034:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005038:	f10a 0a01 	add.w	sl, sl, #1
 800503c:	9304      	str	r3, [sp, #16]
 800503e:	9307      	str	r3, [sp, #28]
 8005040:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005044:	931a      	str	r3, [sp, #104]	; 0x68
 8005046:	4654      	mov	r4, sl
 8005048:	2205      	movs	r2, #5
 800504a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800504e:	4858      	ldr	r0, [pc, #352]	; (80051b0 <_vfiprintf_r+0x24c>)
 8005050:	f7fb f8be 	bl	80001d0 <memchr>
 8005054:	9a04      	ldr	r2, [sp, #16]
 8005056:	b9d8      	cbnz	r0, 8005090 <_vfiprintf_r+0x12c>
 8005058:	06d1      	lsls	r1, r2, #27
 800505a:	bf44      	itt	mi
 800505c:	2320      	movmi	r3, #32
 800505e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005062:	0713      	lsls	r3, r2, #28
 8005064:	bf44      	itt	mi
 8005066:	232b      	movmi	r3, #43	; 0x2b
 8005068:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800506c:	f89a 3000 	ldrb.w	r3, [sl]
 8005070:	2b2a      	cmp	r3, #42	; 0x2a
 8005072:	d015      	beq.n	80050a0 <_vfiprintf_r+0x13c>
 8005074:	9a07      	ldr	r2, [sp, #28]
 8005076:	4654      	mov	r4, sl
 8005078:	2000      	movs	r0, #0
 800507a:	f04f 0c0a 	mov.w	ip, #10
 800507e:	4621      	mov	r1, r4
 8005080:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005084:	3b30      	subs	r3, #48	; 0x30
 8005086:	2b09      	cmp	r3, #9
 8005088:	d94e      	bls.n	8005128 <_vfiprintf_r+0x1c4>
 800508a:	b1b0      	cbz	r0, 80050ba <_vfiprintf_r+0x156>
 800508c:	9207      	str	r2, [sp, #28]
 800508e:	e014      	b.n	80050ba <_vfiprintf_r+0x156>
 8005090:	eba0 0308 	sub.w	r3, r0, r8
 8005094:	fa09 f303 	lsl.w	r3, r9, r3
 8005098:	4313      	orrs	r3, r2
 800509a:	9304      	str	r3, [sp, #16]
 800509c:	46a2      	mov	sl, r4
 800509e:	e7d2      	b.n	8005046 <_vfiprintf_r+0xe2>
 80050a0:	9b03      	ldr	r3, [sp, #12]
 80050a2:	1d19      	adds	r1, r3, #4
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	9103      	str	r1, [sp, #12]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	bfbb      	ittet	lt
 80050ac:	425b      	neglt	r3, r3
 80050ae:	f042 0202 	orrlt.w	r2, r2, #2
 80050b2:	9307      	strge	r3, [sp, #28]
 80050b4:	9307      	strlt	r3, [sp, #28]
 80050b6:	bfb8      	it	lt
 80050b8:	9204      	strlt	r2, [sp, #16]
 80050ba:	7823      	ldrb	r3, [r4, #0]
 80050bc:	2b2e      	cmp	r3, #46	; 0x2e
 80050be:	d10c      	bne.n	80050da <_vfiprintf_r+0x176>
 80050c0:	7863      	ldrb	r3, [r4, #1]
 80050c2:	2b2a      	cmp	r3, #42	; 0x2a
 80050c4:	d135      	bne.n	8005132 <_vfiprintf_r+0x1ce>
 80050c6:	9b03      	ldr	r3, [sp, #12]
 80050c8:	1d1a      	adds	r2, r3, #4
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	9203      	str	r2, [sp, #12]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	bfb8      	it	lt
 80050d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80050d6:	3402      	adds	r4, #2
 80050d8:	9305      	str	r3, [sp, #20]
 80050da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80051c0 <_vfiprintf_r+0x25c>
 80050de:	7821      	ldrb	r1, [r4, #0]
 80050e0:	2203      	movs	r2, #3
 80050e2:	4650      	mov	r0, sl
 80050e4:	f7fb f874 	bl	80001d0 <memchr>
 80050e8:	b140      	cbz	r0, 80050fc <_vfiprintf_r+0x198>
 80050ea:	2340      	movs	r3, #64	; 0x40
 80050ec:	eba0 000a 	sub.w	r0, r0, sl
 80050f0:	fa03 f000 	lsl.w	r0, r3, r0
 80050f4:	9b04      	ldr	r3, [sp, #16]
 80050f6:	4303      	orrs	r3, r0
 80050f8:	3401      	adds	r4, #1
 80050fa:	9304      	str	r3, [sp, #16]
 80050fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005100:	482c      	ldr	r0, [pc, #176]	; (80051b4 <_vfiprintf_r+0x250>)
 8005102:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005106:	2206      	movs	r2, #6
 8005108:	f7fb f862 	bl	80001d0 <memchr>
 800510c:	2800      	cmp	r0, #0
 800510e:	d03f      	beq.n	8005190 <_vfiprintf_r+0x22c>
 8005110:	4b29      	ldr	r3, [pc, #164]	; (80051b8 <_vfiprintf_r+0x254>)
 8005112:	bb1b      	cbnz	r3, 800515c <_vfiprintf_r+0x1f8>
 8005114:	9b03      	ldr	r3, [sp, #12]
 8005116:	3307      	adds	r3, #7
 8005118:	f023 0307 	bic.w	r3, r3, #7
 800511c:	3308      	adds	r3, #8
 800511e:	9303      	str	r3, [sp, #12]
 8005120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005122:	443b      	add	r3, r7
 8005124:	9309      	str	r3, [sp, #36]	; 0x24
 8005126:	e767      	b.n	8004ff8 <_vfiprintf_r+0x94>
 8005128:	fb0c 3202 	mla	r2, ip, r2, r3
 800512c:	460c      	mov	r4, r1
 800512e:	2001      	movs	r0, #1
 8005130:	e7a5      	b.n	800507e <_vfiprintf_r+0x11a>
 8005132:	2300      	movs	r3, #0
 8005134:	3401      	adds	r4, #1
 8005136:	9305      	str	r3, [sp, #20]
 8005138:	4619      	mov	r1, r3
 800513a:	f04f 0c0a 	mov.w	ip, #10
 800513e:	4620      	mov	r0, r4
 8005140:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005144:	3a30      	subs	r2, #48	; 0x30
 8005146:	2a09      	cmp	r2, #9
 8005148:	d903      	bls.n	8005152 <_vfiprintf_r+0x1ee>
 800514a:	2b00      	cmp	r3, #0
 800514c:	d0c5      	beq.n	80050da <_vfiprintf_r+0x176>
 800514e:	9105      	str	r1, [sp, #20]
 8005150:	e7c3      	b.n	80050da <_vfiprintf_r+0x176>
 8005152:	fb0c 2101 	mla	r1, ip, r1, r2
 8005156:	4604      	mov	r4, r0
 8005158:	2301      	movs	r3, #1
 800515a:	e7f0      	b.n	800513e <_vfiprintf_r+0x1da>
 800515c:	ab03      	add	r3, sp, #12
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	462a      	mov	r2, r5
 8005162:	4b16      	ldr	r3, [pc, #88]	; (80051bc <_vfiprintf_r+0x258>)
 8005164:	a904      	add	r1, sp, #16
 8005166:	4630      	mov	r0, r6
 8005168:	f3af 8000 	nop.w
 800516c:	4607      	mov	r7, r0
 800516e:	1c78      	adds	r0, r7, #1
 8005170:	d1d6      	bne.n	8005120 <_vfiprintf_r+0x1bc>
 8005172:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005174:	07d9      	lsls	r1, r3, #31
 8005176:	d405      	bmi.n	8005184 <_vfiprintf_r+0x220>
 8005178:	89ab      	ldrh	r3, [r5, #12]
 800517a:	059a      	lsls	r2, r3, #22
 800517c:	d402      	bmi.n	8005184 <_vfiprintf_r+0x220>
 800517e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005180:	f7ff fe31 	bl	8004de6 <__retarget_lock_release_recursive>
 8005184:	89ab      	ldrh	r3, [r5, #12]
 8005186:	065b      	lsls	r3, r3, #25
 8005188:	f53f af12 	bmi.w	8004fb0 <_vfiprintf_r+0x4c>
 800518c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800518e:	e711      	b.n	8004fb4 <_vfiprintf_r+0x50>
 8005190:	ab03      	add	r3, sp, #12
 8005192:	9300      	str	r3, [sp, #0]
 8005194:	462a      	mov	r2, r5
 8005196:	4b09      	ldr	r3, [pc, #36]	; (80051bc <_vfiprintf_r+0x258>)
 8005198:	a904      	add	r1, sp, #16
 800519a:	4630      	mov	r0, r6
 800519c:	f000 f880 	bl	80052a0 <_printf_i>
 80051a0:	e7e4      	b.n	800516c <_vfiprintf_r+0x208>
 80051a2:	bf00      	nop
 80051a4:	08005b84 	.word	0x08005b84
 80051a8:	08005ba4 	.word	0x08005ba4
 80051ac:	08005b64 	.word	0x08005b64
 80051b0:	08005bc4 	.word	0x08005bc4
 80051b4:	08005bce 	.word	0x08005bce
 80051b8:	00000000 	.word	0x00000000
 80051bc:	08004f3f 	.word	0x08004f3f
 80051c0:	08005bca 	.word	0x08005bca

080051c4 <_printf_common>:
 80051c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051c8:	4616      	mov	r6, r2
 80051ca:	4699      	mov	r9, r3
 80051cc:	688a      	ldr	r2, [r1, #8]
 80051ce:	690b      	ldr	r3, [r1, #16]
 80051d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051d4:	4293      	cmp	r3, r2
 80051d6:	bfb8      	it	lt
 80051d8:	4613      	movlt	r3, r2
 80051da:	6033      	str	r3, [r6, #0]
 80051dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051e0:	4607      	mov	r7, r0
 80051e2:	460c      	mov	r4, r1
 80051e4:	b10a      	cbz	r2, 80051ea <_printf_common+0x26>
 80051e6:	3301      	adds	r3, #1
 80051e8:	6033      	str	r3, [r6, #0]
 80051ea:	6823      	ldr	r3, [r4, #0]
 80051ec:	0699      	lsls	r1, r3, #26
 80051ee:	bf42      	ittt	mi
 80051f0:	6833      	ldrmi	r3, [r6, #0]
 80051f2:	3302      	addmi	r3, #2
 80051f4:	6033      	strmi	r3, [r6, #0]
 80051f6:	6825      	ldr	r5, [r4, #0]
 80051f8:	f015 0506 	ands.w	r5, r5, #6
 80051fc:	d106      	bne.n	800520c <_printf_common+0x48>
 80051fe:	f104 0a19 	add.w	sl, r4, #25
 8005202:	68e3      	ldr	r3, [r4, #12]
 8005204:	6832      	ldr	r2, [r6, #0]
 8005206:	1a9b      	subs	r3, r3, r2
 8005208:	42ab      	cmp	r3, r5
 800520a:	dc26      	bgt.n	800525a <_printf_common+0x96>
 800520c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005210:	1e13      	subs	r3, r2, #0
 8005212:	6822      	ldr	r2, [r4, #0]
 8005214:	bf18      	it	ne
 8005216:	2301      	movne	r3, #1
 8005218:	0692      	lsls	r2, r2, #26
 800521a:	d42b      	bmi.n	8005274 <_printf_common+0xb0>
 800521c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005220:	4649      	mov	r1, r9
 8005222:	4638      	mov	r0, r7
 8005224:	47c0      	blx	r8
 8005226:	3001      	adds	r0, #1
 8005228:	d01e      	beq.n	8005268 <_printf_common+0xa4>
 800522a:	6823      	ldr	r3, [r4, #0]
 800522c:	68e5      	ldr	r5, [r4, #12]
 800522e:	6832      	ldr	r2, [r6, #0]
 8005230:	f003 0306 	and.w	r3, r3, #6
 8005234:	2b04      	cmp	r3, #4
 8005236:	bf08      	it	eq
 8005238:	1aad      	subeq	r5, r5, r2
 800523a:	68a3      	ldr	r3, [r4, #8]
 800523c:	6922      	ldr	r2, [r4, #16]
 800523e:	bf0c      	ite	eq
 8005240:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005244:	2500      	movne	r5, #0
 8005246:	4293      	cmp	r3, r2
 8005248:	bfc4      	itt	gt
 800524a:	1a9b      	subgt	r3, r3, r2
 800524c:	18ed      	addgt	r5, r5, r3
 800524e:	2600      	movs	r6, #0
 8005250:	341a      	adds	r4, #26
 8005252:	42b5      	cmp	r5, r6
 8005254:	d11a      	bne.n	800528c <_printf_common+0xc8>
 8005256:	2000      	movs	r0, #0
 8005258:	e008      	b.n	800526c <_printf_common+0xa8>
 800525a:	2301      	movs	r3, #1
 800525c:	4652      	mov	r2, sl
 800525e:	4649      	mov	r1, r9
 8005260:	4638      	mov	r0, r7
 8005262:	47c0      	blx	r8
 8005264:	3001      	adds	r0, #1
 8005266:	d103      	bne.n	8005270 <_printf_common+0xac>
 8005268:	f04f 30ff 	mov.w	r0, #4294967295
 800526c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005270:	3501      	adds	r5, #1
 8005272:	e7c6      	b.n	8005202 <_printf_common+0x3e>
 8005274:	18e1      	adds	r1, r4, r3
 8005276:	1c5a      	adds	r2, r3, #1
 8005278:	2030      	movs	r0, #48	; 0x30
 800527a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800527e:	4422      	add	r2, r4
 8005280:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005284:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005288:	3302      	adds	r3, #2
 800528a:	e7c7      	b.n	800521c <_printf_common+0x58>
 800528c:	2301      	movs	r3, #1
 800528e:	4622      	mov	r2, r4
 8005290:	4649      	mov	r1, r9
 8005292:	4638      	mov	r0, r7
 8005294:	47c0      	blx	r8
 8005296:	3001      	adds	r0, #1
 8005298:	d0e6      	beq.n	8005268 <_printf_common+0xa4>
 800529a:	3601      	adds	r6, #1
 800529c:	e7d9      	b.n	8005252 <_printf_common+0x8e>
	...

080052a0 <_printf_i>:
 80052a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052a4:	7e0f      	ldrb	r7, [r1, #24]
 80052a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80052a8:	2f78      	cmp	r7, #120	; 0x78
 80052aa:	4691      	mov	r9, r2
 80052ac:	4680      	mov	r8, r0
 80052ae:	460c      	mov	r4, r1
 80052b0:	469a      	mov	sl, r3
 80052b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80052b6:	d807      	bhi.n	80052c8 <_printf_i+0x28>
 80052b8:	2f62      	cmp	r7, #98	; 0x62
 80052ba:	d80a      	bhi.n	80052d2 <_printf_i+0x32>
 80052bc:	2f00      	cmp	r7, #0
 80052be:	f000 80d8 	beq.w	8005472 <_printf_i+0x1d2>
 80052c2:	2f58      	cmp	r7, #88	; 0x58
 80052c4:	f000 80a3 	beq.w	800540e <_printf_i+0x16e>
 80052c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80052d0:	e03a      	b.n	8005348 <_printf_i+0xa8>
 80052d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80052d6:	2b15      	cmp	r3, #21
 80052d8:	d8f6      	bhi.n	80052c8 <_printf_i+0x28>
 80052da:	a101      	add	r1, pc, #4	; (adr r1, 80052e0 <_printf_i+0x40>)
 80052dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052e0:	08005339 	.word	0x08005339
 80052e4:	0800534d 	.word	0x0800534d
 80052e8:	080052c9 	.word	0x080052c9
 80052ec:	080052c9 	.word	0x080052c9
 80052f0:	080052c9 	.word	0x080052c9
 80052f4:	080052c9 	.word	0x080052c9
 80052f8:	0800534d 	.word	0x0800534d
 80052fc:	080052c9 	.word	0x080052c9
 8005300:	080052c9 	.word	0x080052c9
 8005304:	080052c9 	.word	0x080052c9
 8005308:	080052c9 	.word	0x080052c9
 800530c:	08005459 	.word	0x08005459
 8005310:	0800537d 	.word	0x0800537d
 8005314:	0800543b 	.word	0x0800543b
 8005318:	080052c9 	.word	0x080052c9
 800531c:	080052c9 	.word	0x080052c9
 8005320:	0800547b 	.word	0x0800547b
 8005324:	080052c9 	.word	0x080052c9
 8005328:	0800537d 	.word	0x0800537d
 800532c:	080052c9 	.word	0x080052c9
 8005330:	080052c9 	.word	0x080052c9
 8005334:	08005443 	.word	0x08005443
 8005338:	682b      	ldr	r3, [r5, #0]
 800533a:	1d1a      	adds	r2, r3, #4
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	602a      	str	r2, [r5, #0]
 8005340:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005344:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005348:	2301      	movs	r3, #1
 800534a:	e0a3      	b.n	8005494 <_printf_i+0x1f4>
 800534c:	6820      	ldr	r0, [r4, #0]
 800534e:	6829      	ldr	r1, [r5, #0]
 8005350:	0606      	lsls	r6, r0, #24
 8005352:	f101 0304 	add.w	r3, r1, #4
 8005356:	d50a      	bpl.n	800536e <_printf_i+0xce>
 8005358:	680e      	ldr	r6, [r1, #0]
 800535a:	602b      	str	r3, [r5, #0]
 800535c:	2e00      	cmp	r6, #0
 800535e:	da03      	bge.n	8005368 <_printf_i+0xc8>
 8005360:	232d      	movs	r3, #45	; 0x2d
 8005362:	4276      	negs	r6, r6
 8005364:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005368:	485e      	ldr	r0, [pc, #376]	; (80054e4 <_printf_i+0x244>)
 800536a:	230a      	movs	r3, #10
 800536c:	e019      	b.n	80053a2 <_printf_i+0x102>
 800536e:	680e      	ldr	r6, [r1, #0]
 8005370:	602b      	str	r3, [r5, #0]
 8005372:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005376:	bf18      	it	ne
 8005378:	b236      	sxthne	r6, r6
 800537a:	e7ef      	b.n	800535c <_printf_i+0xbc>
 800537c:	682b      	ldr	r3, [r5, #0]
 800537e:	6820      	ldr	r0, [r4, #0]
 8005380:	1d19      	adds	r1, r3, #4
 8005382:	6029      	str	r1, [r5, #0]
 8005384:	0601      	lsls	r1, r0, #24
 8005386:	d501      	bpl.n	800538c <_printf_i+0xec>
 8005388:	681e      	ldr	r6, [r3, #0]
 800538a:	e002      	b.n	8005392 <_printf_i+0xf2>
 800538c:	0646      	lsls	r6, r0, #25
 800538e:	d5fb      	bpl.n	8005388 <_printf_i+0xe8>
 8005390:	881e      	ldrh	r6, [r3, #0]
 8005392:	4854      	ldr	r0, [pc, #336]	; (80054e4 <_printf_i+0x244>)
 8005394:	2f6f      	cmp	r7, #111	; 0x6f
 8005396:	bf0c      	ite	eq
 8005398:	2308      	moveq	r3, #8
 800539a:	230a      	movne	r3, #10
 800539c:	2100      	movs	r1, #0
 800539e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053a2:	6865      	ldr	r5, [r4, #4]
 80053a4:	60a5      	str	r5, [r4, #8]
 80053a6:	2d00      	cmp	r5, #0
 80053a8:	bfa2      	ittt	ge
 80053aa:	6821      	ldrge	r1, [r4, #0]
 80053ac:	f021 0104 	bicge.w	r1, r1, #4
 80053b0:	6021      	strge	r1, [r4, #0]
 80053b2:	b90e      	cbnz	r6, 80053b8 <_printf_i+0x118>
 80053b4:	2d00      	cmp	r5, #0
 80053b6:	d04d      	beq.n	8005454 <_printf_i+0x1b4>
 80053b8:	4615      	mov	r5, r2
 80053ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80053be:	fb03 6711 	mls	r7, r3, r1, r6
 80053c2:	5dc7      	ldrb	r7, [r0, r7]
 80053c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80053c8:	4637      	mov	r7, r6
 80053ca:	42bb      	cmp	r3, r7
 80053cc:	460e      	mov	r6, r1
 80053ce:	d9f4      	bls.n	80053ba <_printf_i+0x11a>
 80053d0:	2b08      	cmp	r3, #8
 80053d2:	d10b      	bne.n	80053ec <_printf_i+0x14c>
 80053d4:	6823      	ldr	r3, [r4, #0]
 80053d6:	07de      	lsls	r6, r3, #31
 80053d8:	d508      	bpl.n	80053ec <_printf_i+0x14c>
 80053da:	6923      	ldr	r3, [r4, #16]
 80053dc:	6861      	ldr	r1, [r4, #4]
 80053de:	4299      	cmp	r1, r3
 80053e0:	bfde      	ittt	le
 80053e2:	2330      	movle	r3, #48	; 0x30
 80053e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80053e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80053ec:	1b52      	subs	r2, r2, r5
 80053ee:	6122      	str	r2, [r4, #16]
 80053f0:	f8cd a000 	str.w	sl, [sp]
 80053f4:	464b      	mov	r3, r9
 80053f6:	aa03      	add	r2, sp, #12
 80053f8:	4621      	mov	r1, r4
 80053fa:	4640      	mov	r0, r8
 80053fc:	f7ff fee2 	bl	80051c4 <_printf_common>
 8005400:	3001      	adds	r0, #1
 8005402:	d14c      	bne.n	800549e <_printf_i+0x1fe>
 8005404:	f04f 30ff 	mov.w	r0, #4294967295
 8005408:	b004      	add	sp, #16
 800540a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800540e:	4835      	ldr	r0, [pc, #212]	; (80054e4 <_printf_i+0x244>)
 8005410:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005414:	6829      	ldr	r1, [r5, #0]
 8005416:	6823      	ldr	r3, [r4, #0]
 8005418:	f851 6b04 	ldr.w	r6, [r1], #4
 800541c:	6029      	str	r1, [r5, #0]
 800541e:	061d      	lsls	r5, r3, #24
 8005420:	d514      	bpl.n	800544c <_printf_i+0x1ac>
 8005422:	07df      	lsls	r7, r3, #31
 8005424:	bf44      	itt	mi
 8005426:	f043 0320 	orrmi.w	r3, r3, #32
 800542a:	6023      	strmi	r3, [r4, #0]
 800542c:	b91e      	cbnz	r6, 8005436 <_printf_i+0x196>
 800542e:	6823      	ldr	r3, [r4, #0]
 8005430:	f023 0320 	bic.w	r3, r3, #32
 8005434:	6023      	str	r3, [r4, #0]
 8005436:	2310      	movs	r3, #16
 8005438:	e7b0      	b.n	800539c <_printf_i+0xfc>
 800543a:	6823      	ldr	r3, [r4, #0]
 800543c:	f043 0320 	orr.w	r3, r3, #32
 8005440:	6023      	str	r3, [r4, #0]
 8005442:	2378      	movs	r3, #120	; 0x78
 8005444:	4828      	ldr	r0, [pc, #160]	; (80054e8 <_printf_i+0x248>)
 8005446:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800544a:	e7e3      	b.n	8005414 <_printf_i+0x174>
 800544c:	0659      	lsls	r1, r3, #25
 800544e:	bf48      	it	mi
 8005450:	b2b6      	uxthmi	r6, r6
 8005452:	e7e6      	b.n	8005422 <_printf_i+0x182>
 8005454:	4615      	mov	r5, r2
 8005456:	e7bb      	b.n	80053d0 <_printf_i+0x130>
 8005458:	682b      	ldr	r3, [r5, #0]
 800545a:	6826      	ldr	r6, [r4, #0]
 800545c:	6961      	ldr	r1, [r4, #20]
 800545e:	1d18      	adds	r0, r3, #4
 8005460:	6028      	str	r0, [r5, #0]
 8005462:	0635      	lsls	r5, r6, #24
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	d501      	bpl.n	800546c <_printf_i+0x1cc>
 8005468:	6019      	str	r1, [r3, #0]
 800546a:	e002      	b.n	8005472 <_printf_i+0x1d2>
 800546c:	0670      	lsls	r0, r6, #25
 800546e:	d5fb      	bpl.n	8005468 <_printf_i+0x1c8>
 8005470:	8019      	strh	r1, [r3, #0]
 8005472:	2300      	movs	r3, #0
 8005474:	6123      	str	r3, [r4, #16]
 8005476:	4615      	mov	r5, r2
 8005478:	e7ba      	b.n	80053f0 <_printf_i+0x150>
 800547a:	682b      	ldr	r3, [r5, #0]
 800547c:	1d1a      	adds	r2, r3, #4
 800547e:	602a      	str	r2, [r5, #0]
 8005480:	681d      	ldr	r5, [r3, #0]
 8005482:	6862      	ldr	r2, [r4, #4]
 8005484:	2100      	movs	r1, #0
 8005486:	4628      	mov	r0, r5
 8005488:	f7fa fea2 	bl	80001d0 <memchr>
 800548c:	b108      	cbz	r0, 8005492 <_printf_i+0x1f2>
 800548e:	1b40      	subs	r0, r0, r5
 8005490:	6060      	str	r0, [r4, #4]
 8005492:	6863      	ldr	r3, [r4, #4]
 8005494:	6123      	str	r3, [r4, #16]
 8005496:	2300      	movs	r3, #0
 8005498:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800549c:	e7a8      	b.n	80053f0 <_printf_i+0x150>
 800549e:	6923      	ldr	r3, [r4, #16]
 80054a0:	462a      	mov	r2, r5
 80054a2:	4649      	mov	r1, r9
 80054a4:	4640      	mov	r0, r8
 80054a6:	47d0      	blx	sl
 80054a8:	3001      	adds	r0, #1
 80054aa:	d0ab      	beq.n	8005404 <_printf_i+0x164>
 80054ac:	6823      	ldr	r3, [r4, #0]
 80054ae:	079b      	lsls	r3, r3, #30
 80054b0:	d413      	bmi.n	80054da <_printf_i+0x23a>
 80054b2:	68e0      	ldr	r0, [r4, #12]
 80054b4:	9b03      	ldr	r3, [sp, #12]
 80054b6:	4298      	cmp	r0, r3
 80054b8:	bfb8      	it	lt
 80054ba:	4618      	movlt	r0, r3
 80054bc:	e7a4      	b.n	8005408 <_printf_i+0x168>
 80054be:	2301      	movs	r3, #1
 80054c0:	4632      	mov	r2, r6
 80054c2:	4649      	mov	r1, r9
 80054c4:	4640      	mov	r0, r8
 80054c6:	47d0      	blx	sl
 80054c8:	3001      	adds	r0, #1
 80054ca:	d09b      	beq.n	8005404 <_printf_i+0x164>
 80054cc:	3501      	adds	r5, #1
 80054ce:	68e3      	ldr	r3, [r4, #12]
 80054d0:	9903      	ldr	r1, [sp, #12]
 80054d2:	1a5b      	subs	r3, r3, r1
 80054d4:	42ab      	cmp	r3, r5
 80054d6:	dcf2      	bgt.n	80054be <_printf_i+0x21e>
 80054d8:	e7eb      	b.n	80054b2 <_printf_i+0x212>
 80054da:	2500      	movs	r5, #0
 80054dc:	f104 0619 	add.w	r6, r4, #25
 80054e0:	e7f5      	b.n	80054ce <_printf_i+0x22e>
 80054e2:	bf00      	nop
 80054e4:	08005bd5 	.word	0x08005bd5
 80054e8:	08005be6 	.word	0x08005be6

080054ec <_sbrk_r>:
 80054ec:	b538      	push	{r3, r4, r5, lr}
 80054ee:	4d06      	ldr	r5, [pc, #24]	; (8005508 <_sbrk_r+0x1c>)
 80054f0:	2300      	movs	r3, #0
 80054f2:	4604      	mov	r4, r0
 80054f4:	4608      	mov	r0, r1
 80054f6:	602b      	str	r3, [r5, #0]
 80054f8:	f7fb fb4a 	bl	8000b90 <_sbrk>
 80054fc:	1c43      	adds	r3, r0, #1
 80054fe:	d102      	bne.n	8005506 <_sbrk_r+0x1a>
 8005500:	682b      	ldr	r3, [r5, #0]
 8005502:	b103      	cbz	r3, 8005506 <_sbrk_r+0x1a>
 8005504:	6023      	str	r3, [r4, #0]
 8005506:	bd38      	pop	{r3, r4, r5, pc}
 8005508:	200001b0 	.word	0x200001b0

0800550c <__sread>:
 800550c:	b510      	push	{r4, lr}
 800550e:	460c      	mov	r4, r1
 8005510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005514:	f000 fab2 	bl	8005a7c <_read_r>
 8005518:	2800      	cmp	r0, #0
 800551a:	bfab      	itete	ge
 800551c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800551e:	89a3      	ldrhlt	r3, [r4, #12]
 8005520:	181b      	addge	r3, r3, r0
 8005522:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005526:	bfac      	ite	ge
 8005528:	6563      	strge	r3, [r4, #84]	; 0x54
 800552a:	81a3      	strhlt	r3, [r4, #12]
 800552c:	bd10      	pop	{r4, pc}

0800552e <__swrite>:
 800552e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005532:	461f      	mov	r7, r3
 8005534:	898b      	ldrh	r3, [r1, #12]
 8005536:	05db      	lsls	r3, r3, #23
 8005538:	4605      	mov	r5, r0
 800553a:	460c      	mov	r4, r1
 800553c:	4616      	mov	r6, r2
 800553e:	d505      	bpl.n	800554c <__swrite+0x1e>
 8005540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005544:	2302      	movs	r3, #2
 8005546:	2200      	movs	r2, #0
 8005548:	f000 f9c8 	bl	80058dc <_lseek_r>
 800554c:	89a3      	ldrh	r3, [r4, #12]
 800554e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005552:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005556:	81a3      	strh	r3, [r4, #12]
 8005558:	4632      	mov	r2, r6
 800555a:	463b      	mov	r3, r7
 800555c:	4628      	mov	r0, r5
 800555e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005562:	f000 b869 	b.w	8005638 <_write_r>

08005566 <__sseek>:
 8005566:	b510      	push	{r4, lr}
 8005568:	460c      	mov	r4, r1
 800556a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800556e:	f000 f9b5 	bl	80058dc <_lseek_r>
 8005572:	1c43      	adds	r3, r0, #1
 8005574:	89a3      	ldrh	r3, [r4, #12]
 8005576:	bf15      	itete	ne
 8005578:	6560      	strne	r0, [r4, #84]	; 0x54
 800557a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800557e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005582:	81a3      	strheq	r3, [r4, #12]
 8005584:	bf18      	it	ne
 8005586:	81a3      	strhne	r3, [r4, #12]
 8005588:	bd10      	pop	{r4, pc}

0800558a <__sclose>:
 800558a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800558e:	f000 b8d3 	b.w	8005738 <_close_r>
	...

08005594 <__swbuf_r>:
 8005594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005596:	460e      	mov	r6, r1
 8005598:	4614      	mov	r4, r2
 800559a:	4605      	mov	r5, r0
 800559c:	b118      	cbz	r0, 80055a6 <__swbuf_r+0x12>
 800559e:	6983      	ldr	r3, [r0, #24]
 80055a0:	b90b      	cbnz	r3, 80055a6 <__swbuf_r+0x12>
 80055a2:	f7ff fb81 	bl	8004ca8 <__sinit>
 80055a6:	4b21      	ldr	r3, [pc, #132]	; (800562c <__swbuf_r+0x98>)
 80055a8:	429c      	cmp	r4, r3
 80055aa:	d12b      	bne.n	8005604 <__swbuf_r+0x70>
 80055ac:	686c      	ldr	r4, [r5, #4]
 80055ae:	69a3      	ldr	r3, [r4, #24]
 80055b0:	60a3      	str	r3, [r4, #8]
 80055b2:	89a3      	ldrh	r3, [r4, #12]
 80055b4:	071a      	lsls	r2, r3, #28
 80055b6:	d52f      	bpl.n	8005618 <__swbuf_r+0x84>
 80055b8:	6923      	ldr	r3, [r4, #16]
 80055ba:	b36b      	cbz	r3, 8005618 <__swbuf_r+0x84>
 80055bc:	6923      	ldr	r3, [r4, #16]
 80055be:	6820      	ldr	r0, [r4, #0]
 80055c0:	1ac0      	subs	r0, r0, r3
 80055c2:	6963      	ldr	r3, [r4, #20]
 80055c4:	b2f6      	uxtb	r6, r6
 80055c6:	4283      	cmp	r3, r0
 80055c8:	4637      	mov	r7, r6
 80055ca:	dc04      	bgt.n	80055d6 <__swbuf_r+0x42>
 80055cc:	4621      	mov	r1, r4
 80055ce:	4628      	mov	r0, r5
 80055d0:	f000 f948 	bl	8005864 <_fflush_r>
 80055d4:	bb30      	cbnz	r0, 8005624 <__swbuf_r+0x90>
 80055d6:	68a3      	ldr	r3, [r4, #8]
 80055d8:	3b01      	subs	r3, #1
 80055da:	60a3      	str	r3, [r4, #8]
 80055dc:	6823      	ldr	r3, [r4, #0]
 80055de:	1c5a      	adds	r2, r3, #1
 80055e0:	6022      	str	r2, [r4, #0]
 80055e2:	701e      	strb	r6, [r3, #0]
 80055e4:	6963      	ldr	r3, [r4, #20]
 80055e6:	3001      	adds	r0, #1
 80055e8:	4283      	cmp	r3, r0
 80055ea:	d004      	beq.n	80055f6 <__swbuf_r+0x62>
 80055ec:	89a3      	ldrh	r3, [r4, #12]
 80055ee:	07db      	lsls	r3, r3, #31
 80055f0:	d506      	bpl.n	8005600 <__swbuf_r+0x6c>
 80055f2:	2e0a      	cmp	r6, #10
 80055f4:	d104      	bne.n	8005600 <__swbuf_r+0x6c>
 80055f6:	4621      	mov	r1, r4
 80055f8:	4628      	mov	r0, r5
 80055fa:	f000 f933 	bl	8005864 <_fflush_r>
 80055fe:	b988      	cbnz	r0, 8005624 <__swbuf_r+0x90>
 8005600:	4638      	mov	r0, r7
 8005602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005604:	4b0a      	ldr	r3, [pc, #40]	; (8005630 <__swbuf_r+0x9c>)
 8005606:	429c      	cmp	r4, r3
 8005608:	d101      	bne.n	800560e <__swbuf_r+0x7a>
 800560a:	68ac      	ldr	r4, [r5, #8]
 800560c:	e7cf      	b.n	80055ae <__swbuf_r+0x1a>
 800560e:	4b09      	ldr	r3, [pc, #36]	; (8005634 <__swbuf_r+0xa0>)
 8005610:	429c      	cmp	r4, r3
 8005612:	bf08      	it	eq
 8005614:	68ec      	ldreq	r4, [r5, #12]
 8005616:	e7ca      	b.n	80055ae <__swbuf_r+0x1a>
 8005618:	4621      	mov	r1, r4
 800561a:	4628      	mov	r0, r5
 800561c:	f000 f81e 	bl	800565c <__swsetup_r>
 8005620:	2800      	cmp	r0, #0
 8005622:	d0cb      	beq.n	80055bc <__swbuf_r+0x28>
 8005624:	f04f 37ff 	mov.w	r7, #4294967295
 8005628:	e7ea      	b.n	8005600 <__swbuf_r+0x6c>
 800562a:	bf00      	nop
 800562c:	08005b84 	.word	0x08005b84
 8005630:	08005ba4 	.word	0x08005ba4
 8005634:	08005b64 	.word	0x08005b64

08005638 <_write_r>:
 8005638:	b538      	push	{r3, r4, r5, lr}
 800563a:	4d07      	ldr	r5, [pc, #28]	; (8005658 <_write_r+0x20>)
 800563c:	4604      	mov	r4, r0
 800563e:	4608      	mov	r0, r1
 8005640:	4611      	mov	r1, r2
 8005642:	2200      	movs	r2, #0
 8005644:	602a      	str	r2, [r5, #0]
 8005646:	461a      	mov	r2, r3
 8005648:	f7fb fa51 	bl	8000aee <_write>
 800564c:	1c43      	adds	r3, r0, #1
 800564e:	d102      	bne.n	8005656 <_write_r+0x1e>
 8005650:	682b      	ldr	r3, [r5, #0]
 8005652:	b103      	cbz	r3, 8005656 <_write_r+0x1e>
 8005654:	6023      	str	r3, [r4, #0]
 8005656:	bd38      	pop	{r3, r4, r5, pc}
 8005658:	200001b0 	.word	0x200001b0

0800565c <__swsetup_r>:
 800565c:	4b32      	ldr	r3, [pc, #200]	; (8005728 <__swsetup_r+0xcc>)
 800565e:	b570      	push	{r4, r5, r6, lr}
 8005660:	681d      	ldr	r5, [r3, #0]
 8005662:	4606      	mov	r6, r0
 8005664:	460c      	mov	r4, r1
 8005666:	b125      	cbz	r5, 8005672 <__swsetup_r+0x16>
 8005668:	69ab      	ldr	r3, [r5, #24]
 800566a:	b913      	cbnz	r3, 8005672 <__swsetup_r+0x16>
 800566c:	4628      	mov	r0, r5
 800566e:	f7ff fb1b 	bl	8004ca8 <__sinit>
 8005672:	4b2e      	ldr	r3, [pc, #184]	; (800572c <__swsetup_r+0xd0>)
 8005674:	429c      	cmp	r4, r3
 8005676:	d10f      	bne.n	8005698 <__swsetup_r+0x3c>
 8005678:	686c      	ldr	r4, [r5, #4]
 800567a:	89a3      	ldrh	r3, [r4, #12]
 800567c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005680:	0719      	lsls	r1, r3, #28
 8005682:	d42c      	bmi.n	80056de <__swsetup_r+0x82>
 8005684:	06dd      	lsls	r5, r3, #27
 8005686:	d411      	bmi.n	80056ac <__swsetup_r+0x50>
 8005688:	2309      	movs	r3, #9
 800568a:	6033      	str	r3, [r6, #0]
 800568c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005690:	81a3      	strh	r3, [r4, #12]
 8005692:	f04f 30ff 	mov.w	r0, #4294967295
 8005696:	e03e      	b.n	8005716 <__swsetup_r+0xba>
 8005698:	4b25      	ldr	r3, [pc, #148]	; (8005730 <__swsetup_r+0xd4>)
 800569a:	429c      	cmp	r4, r3
 800569c:	d101      	bne.n	80056a2 <__swsetup_r+0x46>
 800569e:	68ac      	ldr	r4, [r5, #8]
 80056a0:	e7eb      	b.n	800567a <__swsetup_r+0x1e>
 80056a2:	4b24      	ldr	r3, [pc, #144]	; (8005734 <__swsetup_r+0xd8>)
 80056a4:	429c      	cmp	r4, r3
 80056a6:	bf08      	it	eq
 80056a8:	68ec      	ldreq	r4, [r5, #12]
 80056aa:	e7e6      	b.n	800567a <__swsetup_r+0x1e>
 80056ac:	0758      	lsls	r0, r3, #29
 80056ae:	d512      	bpl.n	80056d6 <__swsetup_r+0x7a>
 80056b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056b2:	b141      	cbz	r1, 80056c6 <__swsetup_r+0x6a>
 80056b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056b8:	4299      	cmp	r1, r3
 80056ba:	d002      	beq.n	80056c2 <__swsetup_r+0x66>
 80056bc:	4630      	mov	r0, r6
 80056be:	f000 f991 	bl	80059e4 <_free_r>
 80056c2:	2300      	movs	r3, #0
 80056c4:	6363      	str	r3, [r4, #52]	; 0x34
 80056c6:	89a3      	ldrh	r3, [r4, #12]
 80056c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80056cc:	81a3      	strh	r3, [r4, #12]
 80056ce:	2300      	movs	r3, #0
 80056d0:	6063      	str	r3, [r4, #4]
 80056d2:	6923      	ldr	r3, [r4, #16]
 80056d4:	6023      	str	r3, [r4, #0]
 80056d6:	89a3      	ldrh	r3, [r4, #12]
 80056d8:	f043 0308 	orr.w	r3, r3, #8
 80056dc:	81a3      	strh	r3, [r4, #12]
 80056de:	6923      	ldr	r3, [r4, #16]
 80056e0:	b94b      	cbnz	r3, 80056f6 <__swsetup_r+0x9a>
 80056e2:	89a3      	ldrh	r3, [r4, #12]
 80056e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80056e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056ec:	d003      	beq.n	80056f6 <__swsetup_r+0x9a>
 80056ee:	4621      	mov	r1, r4
 80056f0:	4630      	mov	r0, r6
 80056f2:	f000 f92b 	bl	800594c <__smakebuf_r>
 80056f6:	89a0      	ldrh	r0, [r4, #12]
 80056f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80056fc:	f010 0301 	ands.w	r3, r0, #1
 8005700:	d00a      	beq.n	8005718 <__swsetup_r+0xbc>
 8005702:	2300      	movs	r3, #0
 8005704:	60a3      	str	r3, [r4, #8]
 8005706:	6963      	ldr	r3, [r4, #20]
 8005708:	425b      	negs	r3, r3
 800570a:	61a3      	str	r3, [r4, #24]
 800570c:	6923      	ldr	r3, [r4, #16]
 800570e:	b943      	cbnz	r3, 8005722 <__swsetup_r+0xc6>
 8005710:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005714:	d1ba      	bne.n	800568c <__swsetup_r+0x30>
 8005716:	bd70      	pop	{r4, r5, r6, pc}
 8005718:	0781      	lsls	r1, r0, #30
 800571a:	bf58      	it	pl
 800571c:	6963      	ldrpl	r3, [r4, #20]
 800571e:	60a3      	str	r3, [r4, #8]
 8005720:	e7f4      	b.n	800570c <__swsetup_r+0xb0>
 8005722:	2000      	movs	r0, #0
 8005724:	e7f7      	b.n	8005716 <__swsetup_r+0xba>
 8005726:	bf00      	nop
 8005728:	2000000c 	.word	0x2000000c
 800572c:	08005b84 	.word	0x08005b84
 8005730:	08005ba4 	.word	0x08005ba4
 8005734:	08005b64 	.word	0x08005b64

08005738 <_close_r>:
 8005738:	b538      	push	{r3, r4, r5, lr}
 800573a:	4d06      	ldr	r5, [pc, #24]	; (8005754 <_close_r+0x1c>)
 800573c:	2300      	movs	r3, #0
 800573e:	4604      	mov	r4, r0
 8005740:	4608      	mov	r0, r1
 8005742:	602b      	str	r3, [r5, #0]
 8005744:	f7fb f9ef 	bl	8000b26 <_close>
 8005748:	1c43      	adds	r3, r0, #1
 800574a:	d102      	bne.n	8005752 <_close_r+0x1a>
 800574c:	682b      	ldr	r3, [r5, #0]
 800574e:	b103      	cbz	r3, 8005752 <_close_r+0x1a>
 8005750:	6023      	str	r3, [r4, #0]
 8005752:	bd38      	pop	{r3, r4, r5, pc}
 8005754:	200001b0 	.word	0x200001b0

08005758 <__sflush_r>:
 8005758:	898a      	ldrh	r2, [r1, #12]
 800575a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800575e:	4605      	mov	r5, r0
 8005760:	0710      	lsls	r0, r2, #28
 8005762:	460c      	mov	r4, r1
 8005764:	d458      	bmi.n	8005818 <__sflush_r+0xc0>
 8005766:	684b      	ldr	r3, [r1, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	dc05      	bgt.n	8005778 <__sflush_r+0x20>
 800576c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800576e:	2b00      	cmp	r3, #0
 8005770:	dc02      	bgt.n	8005778 <__sflush_r+0x20>
 8005772:	2000      	movs	r0, #0
 8005774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005778:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800577a:	2e00      	cmp	r6, #0
 800577c:	d0f9      	beq.n	8005772 <__sflush_r+0x1a>
 800577e:	2300      	movs	r3, #0
 8005780:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005784:	682f      	ldr	r7, [r5, #0]
 8005786:	602b      	str	r3, [r5, #0]
 8005788:	d032      	beq.n	80057f0 <__sflush_r+0x98>
 800578a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800578c:	89a3      	ldrh	r3, [r4, #12]
 800578e:	075a      	lsls	r2, r3, #29
 8005790:	d505      	bpl.n	800579e <__sflush_r+0x46>
 8005792:	6863      	ldr	r3, [r4, #4]
 8005794:	1ac0      	subs	r0, r0, r3
 8005796:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005798:	b10b      	cbz	r3, 800579e <__sflush_r+0x46>
 800579a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800579c:	1ac0      	subs	r0, r0, r3
 800579e:	2300      	movs	r3, #0
 80057a0:	4602      	mov	r2, r0
 80057a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057a4:	6a21      	ldr	r1, [r4, #32]
 80057a6:	4628      	mov	r0, r5
 80057a8:	47b0      	blx	r6
 80057aa:	1c43      	adds	r3, r0, #1
 80057ac:	89a3      	ldrh	r3, [r4, #12]
 80057ae:	d106      	bne.n	80057be <__sflush_r+0x66>
 80057b0:	6829      	ldr	r1, [r5, #0]
 80057b2:	291d      	cmp	r1, #29
 80057b4:	d82c      	bhi.n	8005810 <__sflush_r+0xb8>
 80057b6:	4a2a      	ldr	r2, [pc, #168]	; (8005860 <__sflush_r+0x108>)
 80057b8:	40ca      	lsrs	r2, r1
 80057ba:	07d6      	lsls	r6, r2, #31
 80057bc:	d528      	bpl.n	8005810 <__sflush_r+0xb8>
 80057be:	2200      	movs	r2, #0
 80057c0:	6062      	str	r2, [r4, #4]
 80057c2:	04d9      	lsls	r1, r3, #19
 80057c4:	6922      	ldr	r2, [r4, #16]
 80057c6:	6022      	str	r2, [r4, #0]
 80057c8:	d504      	bpl.n	80057d4 <__sflush_r+0x7c>
 80057ca:	1c42      	adds	r2, r0, #1
 80057cc:	d101      	bne.n	80057d2 <__sflush_r+0x7a>
 80057ce:	682b      	ldr	r3, [r5, #0]
 80057d0:	b903      	cbnz	r3, 80057d4 <__sflush_r+0x7c>
 80057d2:	6560      	str	r0, [r4, #84]	; 0x54
 80057d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057d6:	602f      	str	r7, [r5, #0]
 80057d8:	2900      	cmp	r1, #0
 80057da:	d0ca      	beq.n	8005772 <__sflush_r+0x1a>
 80057dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057e0:	4299      	cmp	r1, r3
 80057e2:	d002      	beq.n	80057ea <__sflush_r+0x92>
 80057e4:	4628      	mov	r0, r5
 80057e6:	f000 f8fd 	bl	80059e4 <_free_r>
 80057ea:	2000      	movs	r0, #0
 80057ec:	6360      	str	r0, [r4, #52]	; 0x34
 80057ee:	e7c1      	b.n	8005774 <__sflush_r+0x1c>
 80057f0:	6a21      	ldr	r1, [r4, #32]
 80057f2:	2301      	movs	r3, #1
 80057f4:	4628      	mov	r0, r5
 80057f6:	47b0      	blx	r6
 80057f8:	1c41      	adds	r1, r0, #1
 80057fa:	d1c7      	bne.n	800578c <__sflush_r+0x34>
 80057fc:	682b      	ldr	r3, [r5, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d0c4      	beq.n	800578c <__sflush_r+0x34>
 8005802:	2b1d      	cmp	r3, #29
 8005804:	d001      	beq.n	800580a <__sflush_r+0xb2>
 8005806:	2b16      	cmp	r3, #22
 8005808:	d101      	bne.n	800580e <__sflush_r+0xb6>
 800580a:	602f      	str	r7, [r5, #0]
 800580c:	e7b1      	b.n	8005772 <__sflush_r+0x1a>
 800580e:	89a3      	ldrh	r3, [r4, #12]
 8005810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005814:	81a3      	strh	r3, [r4, #12]
 8005816:	e7ad      	b.n	8005774 <__sflush_r+0x1c>
 8005818:	690f      	ldr	r7, [r1, #16]
 800581a:	2f00      	cmp	r7, #0
 800581c:	d0a9      	beq.n	8005772 <__sflush_r+0x1a>
 800581e:	0793      	lsls	r3, r2, #30
 8005820:	680e      	ldr	r6, [r1, #0]
 8005822:	bf08      	it	eq
 8005824:	694b      	ldreq	r3, [r1, #20]
 8005826:	600f      	str	r7, [r1, #0]
 8005828:	bf18      	it	ne
 800582a:	2300      	movne	r3, #0
 800582c:	eba6 0807 	sub.w	r8, r6, r7
 8005830:	608b      	str	r3, [r1, #8]
 8005832:	f1b8 0f00 	cmp.w	r8, #0
 8005836:	dd9c      	ble.n	8005772 <__sflush_r+0x1a>
 8005838:	6a21      	ldr	r1, [r4, #32]
 800583a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800583c:	4643      	mov	r3, r8
 800583e:	463a      	mov	r2, r7
 8005840:	4628      	mov	r0, r5
 8005842:	47b0      	blx	r6
 8005844:	2800      	cmp	r0, #0
 8005846:	dc06      	bgt.n	8005856 <__sflush_r+0xfe>
 8005848:	89a3      	ldrh	r3, [r4, #12]
 800584a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800584e:	81a3      	strh	r3, [r4, #12]
 8005850:	f04f 30ff 	mov.w	r0, #4294967295
 8005854:	e78e      	b.n	8005774 <__sflush_r+0x1c>
 8005856:	4407      	add	r7, r0
 8005858:	eba8 0800 	sub.w	r8, r8, r0
 800585c:	e7e9      	b.n	8005832 <__sflush_r+0xda>
 800585e:	bf00      	nop
 8005860:	20400001 	.word	0x20400001

08005864 <_fflush_r>:
 8005864:	b538      	push	{r3, r4, r5, lr}
 8005866:	690b      	ldr	r3, [r1, #16]
 8005868:	4605      	mov	r5, r0
 800586a:	460c      	mov	r4, r1
 800586c:	b913      	cbnz	r3, 8005874 <_fflush_r+0x10>
 800586e:	2500      	movs	r5, #0
 8005870:	4628      	mov	r0, r5
 8005872:	bd38      	pop	{r3, r4, r5, pc}
 8005874:	b118      	cbz	r0, 800587e <_fflush_r+0x1a>
 8005876:	6983      	ldr	r3, [r0, #24]
 8005878:	b90b      	cbnz	r3, 800587e <_fflush_r+0x1a>
 800587a:	f7ff fa15 	bl	8004ca8 <__sinit>
 800587e:	4b14      	ldr	r3, [pc, #80]	; (80058d0 <_fflush_r+0x6c>)
 8005880:	429c      	cmp	r4, r3
 8005882:	d11b      	bne.n	80058bc <_fflush_r+0x58>
 8005884:	686c      	ldr	r4, [r5, #4]
 8005886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d0ef      	beq.n	800586e <_fflush_r+0xa>
 800588e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005890:	07d0      	lsls	r0, r2, #31
 8005892:	d404      	bmi.n	800589e <_fflush_r+0x3a>
 8005894:	0599      	lsls	r1, r3, #22
 8005896:	d402      	bmi.n	800589e <_fflush_r+0x3a>
 8005898:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800589a:	f7ff faa3 	bl	8004de4 <__retarget_lock_acquire_recursive>
 800589e:	4628      	mov	r0, r5
 80058a0:	4621      	mov	r1, r4
 80058a2:	f7ff ff59 	bl	8005758 <__sflush_r>
 80058a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058a8:	07da      	lsls	r2, r3, #31
 80058aa:	4605      	mov	r5, r0
 80058ac:	d4e0      	bmi.n	8005870 <_fflush_r+0xc>
 80058ae:	89a3      	ldrh	r3, [r4, #12]
 80058b0:	059b      	lsls	r3, r3, #22
 80058b2:	d4dd      	bmi.n	8005870 <_fflush_r+0xc>
 80058b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058b6:	f7ff fa96 	bl	8004de6 <__retarget_lock_release_recursive>
 80058ba:	e7d9      	b.n	8005870 <_fflush_r+0xc>
 80058bc:	4b05      	ldr	r3, [pc, #20]	; (80058d4 <_fflush_r+0x70>)
 80058be:	429c      	cmp	r4, r3
 80058c0:	d101      	bne.n	80058c6 <_fflush_r+0x62>
 80058c2:	68ac      	ldr	r4, [r5, #8]
 80058c4:	e7df      	b.n	8005886 <_fflush_r+0x22>
 80058c6:	4b04      	ldr	r3, [pc, #16]	; (80058d8 <_fflush_r+0x74>)
 80058c8:	429c      	cmp	r4, r3
 80058ca:	bf08      	it	eq
 80058cc:	68ec      	ldreq	r4, [r5, #12]
 80058ce:	e7da      	b.n	8005886 <_fflush_r+0x22>
 80058d0:	08005b84 	.word	0x08005b84
 80058d4:	08005ba4 	.word	0x08005ba4
 80058d8:	08005b64 	.word	0x08005b64

080058dc <_lseek_r>:
 80058dc:	b538      	push	{r3, r4, r5, lr}
 80058de:	4d07      	ldr	r5, [pc, #28]	; (80058fc <_lseek_r+0x20>)
 80058e0:	4604      	mov	r4, r0
 80058e2:	4608      	mov	r0, r1
 80058e4:	4611      	mov	r1, r2
 80058e6:	2200      	movs	r2, #0
 80058e8:	602a      	str	r2, [r5, #0]
 80058ea:	461a      	mov	r2, r3
 80058ec:	f7fb f942 	bl	8000b74 <_lseek>
 80058f0:	1c43      	adds	r3, r0, #1
 80058f2:	d102      	bne.n	80058fa <_lseek_r+0x1e>
 80058f4:	682b      	ldr	r3, [r5, #0]
 80058f6:	b103      	cbz	r3, 80058fa <_lseek_r+0x1e>
 80058f8:	6023      	str	r3, [r4, #0]
 80058fa:	bd38      	pop	{r3, r4, r5, pc}
 80058fc:	200001b0 	.word	0x200001b0

08005900 <__swhatbuf_r>:
 8005900:	b570      	push	{r4, r5, r6, lr}
 8005902:	460e      	mov	r6, r1
 8005904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005908:	2900      	cmp	r1, #0
 800590a:	b096      	sub	sp, #88	; 0x58
 800590c:	4614      	mov	r4, r2
 800590e:	461d      	mov	r5, r3
 8005910:	da08      	bge.n	8005924 <__swhatbuf_r+0x24>
 8005912:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	602a      	str	r2, [r5, #0]
 800591a:	061a      	lsls	r2, r3, #24
 800591c:	d410      	bmi.n	8005940 <__swhatbuf_r+0x40>
 800591e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005922:	e00e      	b.n	8005942 <__swhatbuf_r+0x42>
 8005924:	466a      	mov	r2, sp
 8005926:	f000 f8bb 	bl	8005aa0 <_fstat_r>
 800592a:	2800      	cmp	r0, #0
 800592c:	dbf1      	blt.n	8005912 <__swhatbuf_r+0x12>
 800592e:	9a01      	ldr	r2, [sp, #4]
 8005930:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005934:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005938:	425a      	negs	r2, r3
 800593a:	415a      	adcs	r2, r3
 800593c:	602a      	str	r2, [r5, #0]
 800593e:	e7ee      	b.n	800591e <__swhatbuf_r+0x1e>
 8005940:	2340      	movs	r3, #64	; 0x40
 8005942:	2000      	movs	r0, #0
 8005944:	6023      	str	r3, [r4, #0]
 8005946:	b016      	add	sp, #88	; 0x58
 8005948:	bd70      	pop	{r4, r5, r6, pc}
	...

0800594c <__smakebuf_r>:
 800594c:	898b      	ldrh	r3, [r1, #12]
 800594e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005950:	079d      	lsls	r5, r3, #30
 8005952:	4606      	mov	r6, r0
 8005954:	460c      	mov	r4, r1
 8005956:	d507      	bpl.n	8005968 <__smakebuf_r+0x1c>
 8005958:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800595c:	6023      	str	r3, [r4, #0]
 800595e:	6123      	str	r3, [r4, #16]
 8005960:	2301      	movs	r3, #1
 8005962:	6163      	str	r3, [r4, #20]
 8005964:	b002      	add	sp, #8
 8005966:	bd70      	pop	{r4, r5, r6, pc}
 8005968:	ab01      	add	r3, sp, #4
 800596a:	466a      	mov	r2, sp
 800596c:	f7ff ffc8 	bl	8005900 <__swhatbuf_r>
 8005970:	9900      	ldr	r1, [sp, #0]
 8005972:	4605      	mov	r5, r0
 8005974:	4630      	mov	r0, r6
 8005976:	f7ff fa57 	bl	8004e28 <_malloc_r>
 800597a:	b948      	cbnz	r0, 8005990 <__smakebuf_r+0x44>
 800597c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005980:	059a      	lsls	r2, r3, #22
 8005982:	d4ef      	bmi.n	8005964 <__smakebuf_r+0x18>
 8005984:	f023 0303 	bic.w	r3, r3, #3
 8005988:	f043 0302 	orr.w	r3, r3, #2
 800598c:	81a3      	strh	r3, [r4, #12]
 800598e:	e7e3      	b.n	8005958 <__smakebuf_r+0xc>
 8005990:	4b0d      	ldr	r3, [pc, #52]	; (80059c8 <__smakebuf_r+0x7c>)
 8005992:	62b3      	str	r3, [r6, #40]	; 0x28
 8005994:	89a3      	ldrh	r3, [r4, #12]
 8005996:	6020      	str	r0, [r4, #0]
 8005998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800599c:	81a3      	strh	r3, [r4, #12]
 800599e:	9b00      	ldr	r3, [sp, #0]
 80059a0:	6163      	str	r3, [r4, #20]
 80059a2:	9b01      	ldr	r3, [sp, #4]
 80059a4:	6120      	str	r0, [r4, #16]
 80059a6:	b15b      	cbz	r3, 80059c0 <__smakebuf_r+0x74>
 80059a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059ac:	4630      	mov	r0, r6
 80059ae:	f000 f889 	bl	8005ac4 <_isatty_r>
 80059b2:	b128      	cbz	r0, 80059c0 <__smakebuf_r+0x74>
 80059b4:	89a3      	ldrh	r3, [r4, #12]
 80059b6:	f023 0303 	bic.w	r3, r3, #3
 80059ba:	f043 0301 	orr.w	r3, r3, #1
 80059be:	81a3      	strh	r3, [r4, #12]
 80059c0:	89a0      	ldrh	r0, [r4, #12]
 80059c2:	4305      	orrs	r5, r0
 80059c4:	81a5      	strh	r5, [r4, #12]
 80059c6:	e7cd      	b.n	8005964 <__smakebuf_r+0x18>
 80059c8:	08004c41 	.word	0x08004c41

080059cc <__malloc_lock>:
 80059cc:	4801      	ldr	r0, [pc, #4]	; (80059d4 <__malloc_lock+0x8>)
 80059ce:	f7ff ba09 	b.w	8004de4 <__retarget_lock_acquire_recursive>
 80059d2:	bf00      	nop
 80059d4:	200001a4 	.word	0x200001a4

080059d8 <__malloc_unlock>:
 80059d8:	4801      	ldr	r0, [pc, #4]	; (80059e0 <__malloc_unlock+0x8>)
 80059da:	f7ff ba04 	b.w	8004de6 <__retarget_lock_release_recursive>
 80059de:	bf00      	nop
 80059e0:	200001a4 	.word	0x200001a4

080059e4 <_free_r>:
 80059e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059e6:	2900      	cmp	r1, #0
 80059e8:	d044      	beq.n	8005a74 <_free_r+0x90>
 80059ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059ee:	9001      	str	r0, [sp, #4]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f1a1 0404 	sub.w	r4, r1, #4
 80059f6:	bfb8      	it	lt
 80059f8:	18e4      	addlt	r4, r4, r3
 80059fa:	f7ff ffe7 	bl	80059cc <__malloc_lock>
 80059fe:	4a1e      	ldr	r2, [pc, #120]	; (8005a78 <_free_r+0x94>)
 8005a00:	9801      	ldr	r0, [sp, #4]
 8005a02:	6813      	ldr	r3, [r2, #0]
 8005a04:	b933      	cbnz	r3, 8005a14 <_free_r+0x30>
 8005a06:	6063      	str	r3, [r4, #4]
 8005a08:	6014      	str	r4, [r2, #0]
 8005a0a:	b003      	add	sp, #12
 8005a0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a10:	f7ff bfe2 	b.w	80059d8 <__malloc_unlock>
 8005a14:	42a3      	cmp	r3, r4
 8005a16:	d908      	bls.n	8005a2a <_free_r+0x46>
 8005a18:	6825      	ldr	r5, [r4, #0]
 8005a1a:	1961      	adds	r1, r4, r5
 8005a1c:	428b      	cmp	r3, r1
 8005a1e:	bf01      	itttt	eq
 8005a20:	6819      	ldreq	r1, [r3, #0]
 8005a22:	685b      	ldreq	r3, [r3, #4]
 8005a24:	1949      	addeq	r1, r1, r5
 8005a26:	6021      	streq	r1, [r4, #0]
 8005a28:	e7ed      	b.n	8005a06 <_free_r+0x22>
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	b10b      	cbz	r3, 8005a34 <_free_r+0x50>
 8005a30:	42a3      	cmp	r3, r4
 8005a32:	d9fa      	bls.n	8005a2a <_free_r+0x46>
 8005a34:	6811      	ldr	r1, [r2, #0]
 8005a36:	1855      	adds	r5, r2, r1
 8005a38:	42a5      	cmp	r5, r4
 8005a3a:	d10b      	bne.n	8005a54 <_free_r+0x70>
 8005a3c:	6824      	ldr	r4, [r4, #0]
 8005a3e:	4421      	add	r1, r4
 8005a40:	1854      	adds	r4, r2, r1
 8005a42:	42a3      	cmp	r3, r4
 8005a44:	6011      	str	r1, [r2, #0]
 8005a46:	d1e0      	bne.n	8005a0a <_free_r+0x26>
 8005a48:	681c      	ldr	r4, [r3, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	6053      	str	r3, [r2, #4]
 8005a4e:	4421      	add	r1, r4
 8005a50:	6011      	str	r1, [r2, #0]
 8005a52:	e7da      	b.n	8005a0a <_free_r+0x26>
 8005a54:	d902      	bls.n	8005a5c <_free_r+0x78>
 8005a56:	230c      	movs	r3, #12
 8005a58:	6003      	str	r3, [r0, #0]
 8005a5a:	e7d6      	b.n	8005a0a <_free_r+0x26>
 8005a5c:	6825      	ldr	r5, [r4, #0]
 8005a5e:	1961      	adds	r1, r4, r5
 8005a60:	428b      	cmp	r3, r1
 8005a62:	bf04      	itt	eq
 8005a64:	6819      	ldreq	r1, [r3, #0]
 8005a66:	685b      	ldreq	r3, [r3, #4]
 8005a68:	6063      	str	r3, [r4, #4]
 8005a6a:	bf04      	itt	eq
 8005a6c:	1949      	addeq	r1, r1, r5
 8005a6e:	6021      	streq	r1, [r4, #0]
 8005a70:	6054      	str	r4, [r2, #4]
 8005a72:	e7ca      	b.n	8005a0a <_free_r+0x26>
 8005a74:	b003      	add	sp, #12
 8005a76:	bd30      	pop	{r4, r5, pc}
 8005a78:	200001a8 	.word	0x200001a8

08005a7c <_read_r>:
 8005a7c:	b538      	push	{r3, r4, r5, lr}
 8005a7e:	4d07      	ldr	r5, [pc, #28]	; (8005a9c <_read_r+0x20>)
 8005a80:	4604      	mov	r4, r0
 8005a82:	4608      	mov	r0, r1
 8005a84:	4611      	mov	r1, r2
 8005a86:	2200      	movs	r2, #0
 8005a88:	602a      	str	r2, [r5, #0]
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	f7fb f812 	bl	8000ab4 <_read>
 8005a90:	1c43      	adds	r3, r0, #1
 8005a92:	d102      	bne.n	8005a9a <_read_r+0x1e>
 8005a94:	682b      	ldr	r3, [r5, #0]
 8005a96:	b103      	cbz	r3, 8005a9a <_read_r+0x1e>
 8005a98:	6023      	str	r3, [r4, #0]
 8005a9a:	bd38      	pop	{r3, r4, r5, pc}
 8005a9c:	200001b0 	.word	0x200001b0

08005aa0 <_fstat_r>:
 8005aa0:	b538      	push	{r3, r4, r5, lr}
 8005aa2:	4d07      	ldr	r5, [pc, #28]	; (8005ac0 <_fstat_r+0x20>)
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	4604      	mov	r4, r0
 8005aa8:	4608      	mov	r0, r1
 8005aaa:	4611      	mov	r1, r2
 8005aac:	602b      	str	r3, [r5, #0]
 8005aae:	f7fb f846 	bl	8000b3e <_fstat>
 8005ab2:	1c43      	adds	r3, r0, #1
 8005ab4:	d102      	bne.n	8005abc <_fstat_r+0x1c>
 8005ab6:	682b      	ldr	r3, [r5, #0]
 8005ab8:	b103      	cbz	r3, 8005abc <_fstat_r+0x1c>
 8005aba:	6023      	str	r3, [r4, #0]
 8005abc:	bd38      	pop	{r3, r4, r5, pc}
 8005abe:	bf00      	nop
 8005ac0:	200001b0 	.word	0x200001b0

08005ac4 <_isatty_r>:
 8005ac4:	b538      	push	{r3, r4, r5, lr}
 8005ac6:	4d06      	ldr	r5, [pc, #24]	; (8005ae0 <_isatty_r+0x1c>)
 8005ac8:	2300      	movs	r3, #0
 8005aca:	4604      	mov	r4, r0
 8005acc:	4608      	mov	r0, r1
 8005ace:	602b      	str	r3, [r5, #0]
 8005ad0:	f7fb f845 	bl	8000b5e <_isatty>
 8005ad4:	1c43      	adds	r3, r0, #1
 8005ad6:	d102      	bne.n	8005ade <_isatty_r+0x1a>
 8005ad8:	682b      	ldr	r3, [r5, #0]
 8005ada:	b103      	cbz	r3, 8005ade <_isatty_r+0x1a>
 8005adc:	6023      	str	r3, [r4, #0]
 8005ade:	bd38      	pop	{r3, r4, r5, pc}
 8005ae0:	200001b0 	.word	0x200001b0

08005ae4 <_init>:
 8005ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ae6:	bf00      	nop
 8005ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aea:	bc08      	pop	{r3}
 8005aec:	469e      	mov	lr, r3
 8005aee:	4770      	bx	lr

08005af0 <_fini>:
 8005af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005af2:	bf00      	nop
 8005af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005af6:	bc08      	pop	{r3}
 8005af8:	469e      	mov	lr, r3
 8005afa:	4770      	bx	lr
